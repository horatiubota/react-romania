{"version":3,"sources":["../../dist/index.es.js","utils/mapConfigOptions.js","components/MapConfiguration.js","utils/dataSources.js","components/Example.js","index.js","App.js"],"names":["createCommonjsModule","fn","module","exports","classnames","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","default","window","PathLayer","props","react_default","a","createElement","className","data","map","d","id","properties","projector","geometry","fill","defaultPolygonFill","polygonClass","LabelLayer","x","centroid","y","label","labels","indexOf","defaultLabel","LegendLayer","style","overflow","defaultProps","_extends","Object","assign","target","source","prototype","index_es_slicedToArray","arr","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","value","err","sliceIterator","TypeError","PointLayer","pointerEvents","path","_props$projector$cent","_props$projector$cent2","showPointLabels","width","height","pointLabel","point","TooltipLayer","defaultCircleFill","defaultCircleRadius","defaultCircleStroke","xhtml","namespaces","svg","xlink","xml","xmlns","namespace","name","prefix","slice","space","local","creator","fullname","this","ownerDocument","createElementNS","document","uri","namespaceURI","documentElement","none","selector","querySelector","empty","sparse","update","EnterNode","parent","datum","_next","_parent","__data__","constructor","appendChild","child","insertBefore","querySelectorAll","keyPrefix","bindIndex","group","enter","exit","node","groupLength","dataLength","bindKey","keyValue","nodeByKeyValue","keyValues","ascending","b","NaN","defaultView","classArray","string","trim","split","classList","ClassList","_node","_names","getAttribute","classedAdd","names","list","n","add","classedRemove","remove","textRemove","textContent","htmlRemove","innerHTML","raise","nextSibling","parentNode","lower","previousSibling","firstChild","constantNull","removeChild","selection_cloneShallow","clone","cloneNode","selection_cloneDeep","setAttribute","splice","contains","filterEvents","index_es_event","mouseenter","mouseleave","filterContextListener","listener","index","contextListener","event","related","relatedTarget","compareDocumentPosition","event1","event0","onRemove","typename","on","__on","o","j","m","type","removeEventListener","capture","onAdd","wrap","addEventListener","dispatchEvent","params","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","root","Selection","groups","parents","_groups","_parents","index_es_select","mouse","current","sourceEvent","changedTouches","ownerSVGElement","createSVGPoint","clientX","clientY","matrixTransform","getScreenCTM","inverse","rect","getBoundingClientRect","left","clientLeft","top","clientTop","ascending$1","select","subgroups","subnode","subgroup","selectAll","filter","match","matches","size","each","bind","enterGroup","updateGroup","previous","i0","i1","_enter","_exit","onenter","onupdate","onexit","append","merge","order","selection$$1","groups0","groups1","m0","m1","Math","min","merges","group0","group1","sort","compare","compareNode","sortgroups","sortgroup","callback","nodes","attr","getAttributeNS","removeAttributeNS","removeAttribute","v","setAttributeNS","priority","removeProperty","setProperty","getPropertyValue","getComputedStyle","styleValue","property","classed","text","html","create","insert","before","deep","t","typenames","parseTypenames","dispatch","bisectRight","f","lo","hi","mid","right","bisector","number","range","start","stop","step","max","ceil","e10","sqrt","e5","e2","tickIncrement","count","power","floor","log","LN10","error","pow","arrays","merged","array","formatDecimal","p","toExponential","coefficient","exponent","abs","prefixExponent","re","formatSpecifier","specifier","exec","Error","FormatSpecifier","align","sign","symbol","zero","comma","precision","formatRounded","toString","formatTypes","%","toFixed","round","c","e","g","toPrecision","_p","r","s","X","toUpperCase","_x","identity$1","locale","format","formatPrefix","map$1","prefixes","formatLocale","grouping","thousands","Number","substring","reverse","currencyPrefix","currency","currencySuffix","decimal","numerals","replace","formatNumerals","String","percent","minus","nan","newFormat","test","toLowerCase","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","isNaN","out","formatTrim","charCodeAt","Infinity","padding","k","define","factory","extend","definition","Color","reI","reN","reP","reHex","reRgbInteger","RegExp","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","rgb","formatHex","color_formatRgb","formatRgb","index_es_color","l","parseInt","rgbn","Rgb","rgba","hsla","rgbConvert","opacity","rgb_formatHex","hex","rgb_formatRgb","h","Hsl","hslConvert","hsl2rgb","m2","copy","channels","displayable","formatHsl","brighter","darker","deg2rad","PI","rad2deg","Xn","Yn","Zn","t0","t1","t2","t3","labConvert","Lab","Hcl","hcl2lab","z","rgb2lrgb","xyz2lab","lab2xyz","lrgb2rgb","cos","sin","atan2","hclConvert","A","B","C","D","E","ED","EB","BC_DA","Cubehelix","constant$2","gamma","nogamma","exponential","linear","bl","cubehelixConvert","cosh","sinh","rgb$1","rgbGamma","color$$1","rgb$$1","end","interpolateNumber","reA","reB","interpolateValue","am","bm","bs","bi","lastIndex","q","one","Date","setTime","ArrayBuffer","isView","DataView","nb","na","valueOf","interpolateRound","SQRT2","number$1","unit","identity$3","normalize","bimap","domain","range$$1","interpolate$$1","d0","d1","r0","r1","polymap","transformer","transform","untransform","unknown","piecewise$$1","output","input","clamp","rescale","clamper","scale","invert","_","from","rangeRound","interpolate","u","tickFormat","step0","step1","tickStep","precisionPrefix","precisionRound","precisionFixed","linearish","ticks","isFinite","nice","linear$1","t0$1","t1$1","newInterval","floori","offseti","field","interval","date","offset","every","millisecond","durationMinute","durationWeek","day","getMilliseconds","getUTCSeconds","getSeconds","getMinutes","getHours","setHours","setDate","getDate","getTimezoneOffset","weekday","getDay","sunday","monday","thursday","year","setMonth","getMonth","getFullYear","setFullYear","setUTCSeconds","getUTCMinutes","setUTCMinutes","getUTCHours","utcDay","setUTCHours","setUTCDate","getUTCDate","utcWeekday","getUTCDay","utcSunday","utcMonday","utcThursday","utcYear","setUTCMonth","getUTCMonth","getUTCFullYear","setUTCFullYear","localDate","H","M","S","L","utcDate","UTC","newDate","locale$1","utcFormat","utcParse","pads","-","0","numberRe","percentRe","requoteRe","pad","requote","formatRe","formatLookup","parseWeekdayNumberSunday","w","parseWeekdayNumberMonday","parseWeekNumberSunday","U","parseWeekNumberISO","V","parseWeekNumberMonday","W","parseFullYear","parseYear","parseZone","Z","parseQuarter","parseMonthNumber","parseDayOfMonth","parseDayOfYear","parseHour24","parseMinutes","parseSeconds","parseMilliseconds","parseMicroseconds","parseLiteralPercent","parseUnixTimestamp","Q","parseUnixTimestampSeconds","formatDayOfMonth","formatHour24","formatHour12","formatDayOfYear","formatMilliseconds","formatMicroseconds","formatMonthNumber","formatMinutes","formatSeconds","formatWeekdayNumberMonday","day$$1","formatWeekNumberSunday","formatWeekNumberISO","formatWeekdayNumberSunday","formatWeekNumberMonday","formatYear","formatFullYear","formatZone","formatUTCDayOfMonth","formatUTCHour24","formatUTCHour12","formatUTCDayOfYear","formatUTCMilliseconds","getUTCMilliseconds","formatUTCMicroseconds","formatUTCMonthNumber","formatUTCMinutes","formatUTCSeconds","formatUTCWeekdayNumberMonday","dow","formatUTCWeekNumberSunday","formatUTCWeekNumberISO","formatUTCWeekdayNumberSunday","formatUTCWeekNumberMonday","formatUTCYear","formatUTCFullYear","formatUTCZone","formatLiteralPercent","formatUnixTimestamp","formatUnixTimestampSeconds","locale_dateTime","dateTime","locale_date","locale_time","time","locale_periods","periods","locale_weekdays","days","locale_shortWeekdays","shortDays","locale_months","months","locale_shortMonths","shortMonths","periodRe","periodLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats","I","Y","utcFormats","parses","parseSpecifier","charAt","newParse","week","parse","formatLocale$1","defaultLocale$1","toISOString","slice$1","identity$5","index_es_top","bottom","epsilon","translateX","translateY","entering","__axis","axis","orient","tickArguments","tickValues","tickSizeInner","tickSizeOuter","tickPadding","context","values","spacing","range0","range1","position","bandwidth","selection","tick","tickExit","tickEnter","line","transition","tickSize","index_es_legend","_ref","color","title","_ref$tickSize","_ref$width","_ref$height","_ref$marginTop","marginTop","_ref$marginRight","marginRight","_ref$marginBottom","marginBottom","_ref$marginLeft","marginLeft","_ref$ticks","ticks$$1","tickFormat$$1","onMousemove","onMouseout","onMouseclick","interpolator","valueof","value0","quantile","imageWidth","segmentWidth","canvas","getContext","fillStyle","fillRect","ramp","toDataURL","segmentIndex","_ref2","cursorPosition","getLegendSegmentIndex","invertExtent","thresholds","quantiles","thresholdFormat","getColor","item","getPolygonSelection","getPointSelection","bindDataToSelection","updateFillOnSelection","attachTooltipToSelection","tooltip","_mouse","_mouse2","cursorX","cursorY","updateTooltip","removeTooltip","updateLegend","legendProps","legend","dataKey","bounds","_bounds","upper","highlightedPolygon","onLegendMousemove","onLegendMouseout","D3Container","primaryMapData","pointMapData","ref","onClick","react","_useMemo","children","mapSvg","mapColor","isMounted","points","adder","Adder","reset","_add","temp","bv","av","epsilon$1","pi","halfPi","quarterPi","tau","degrees$1","radians","atan","exp","log$1","sqrt$1","asin","noop","streamGeometry","stream","streamGeometryType","streamObjectType","Feature","object","FeatureCollection","features","Sphere","sphere","Point","coordinates","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","geoStream","spherical","cartesian","lambda","phi","cosPhi","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","compose","rotationIdentity","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","circleRadius","cosRadius","radius","acos","clipBuffer","lines","rejoin","pop","concat","shift","result","pointEqual","Intersection","other","entry","clipRejoin","segments","compareIntersection","startInside","subject","clip","forEach","segment","p0","p1","index_es_link","isSubject","sum$1","longitude","pointVisible","clipLine","sink","polygon","ring","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","sinPhi","normal","angle","winding","point0","lambda0","phi0","sinPhi0","cosPhi0","lambda1","sinPhi1","cosPhi1","point1","phi1","delta","sign$$1","absDelta","antimeridian","arc","intersection","phiArc","polygonContains","pointLine","clean","ringSegments","validSegment","clipAntimeridian","_clean","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","to","direction","clipCircle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","uu","polar","q1","code","c0","v0","v00","_clean2","point2","sinRadius","circleStream","clipMax","clipMin","clipRectangle","x0","y0","x1","y1","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","ax","ay","dx","dy","identity$6","x00","y00","x0$1","y0$1","areaSum$1","areaRingSum$1","areaStream$1","areaRingStart$1","areaRingEnd$1","area","areaPointFirst$1","areaPoint$1","x0$2","y0$2","boundsStream$1","x00$1","y00$1","x0$3","y0$3","X0$1","Y0$1","Z0$1","X1$1","Y1$1","Z1$1","X2$1","Y2$1","Z2$1","centroidStream$1","centroidPoint$1","centroidLineStart$1","centroidLineEnd$1","centroidRingStart$1","centroidRingEnd$1","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","PathContext","_context","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","lengthRing","x00$2","y00$2","x0$4","y0$4","lengthSum$1","lengthStream$1","lengthPointFirst$1","lengthPoint$1","PathString","_string","circle$1","transformer$3","methods","TransformStream","fit","projection","fitBounds","clipExtent","translate","fitExtent","extent","_circle","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","a00","b00","c00","resampleStream","ringPoint","resample$1","resampleNone","transformRadians","scaleTranslateRotate","alpha","cosAlpha","sinAlpha","ai","ci","fi","transform$$1","projectAt","rotate","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","center","transformRotate","clipAngle","fitSize","fitWidth","fitHeight","projectionMutator","mercatorRaw","geoMercator","reclip","forward","mercatorProjection","collectionUtils","collection","browserDetector","detector","isIE","version","agent","navigator","userAgent","isAnyIeVersion","div","all","getElementsByTagName","undef","isLegacyOpera","opera","utils_1","getOption","options","defaultValue","batchProcessor","reporter","asyncProcess","autoProcess","warn","asyncFrameHandler","batch","Batch","isProcessing","processBatch","processingBatch","process","processBatchAsync","setTimeout","requestFrame","level","force","localAsyncProcess","clearTimeout","topLevel","bottomLevel","fns","prop","getState","element","stateHandler","initState","cleanState","index_es_scroll","idHandler","hasState","scrollbarSizes","cssText","container","body","widthSize","clientWidth","heightSize","clientHeight","getScrollbarSizes","detectionContainerClass","addEvent","el","attachEvent","removeEvent","detachEvent","getExpandElement","childNodes","getShrinkElement","styleId","containerClass","getElementById","containerAnimationClass","containerAnimationActiveClass","method","head","styleElement","injectStyle","injectScrollStyle","makeDetectable","debug","args","unshift","get","isUnrendered","getStyle","elementStyle","offsetWidth","offsetHeight","widthCSS","heightCSS","storeStyle","storeCurrentSize","lastWidth","lastHeight","getWidthOffset","getHeightOffset","getExpandWidth","getExpandHeight","positionScrollbars","expand","shrink","expandWidth","expandHeight","shrinkWidth","getShrinkWidth","shrinkHeight","getShrinkHeight","scrollLeft","scrollTop","injectContainerElement","addAnimationClass","onAnimationStart","onRendered","injectScrollElements","removeRelativeStyles","getNumericalValue","alterPositionStyles","rootContainer","scrollbarWidth","scrollbarHeight","containerStyle","containerContainer","expandChild","shrinkChild","dir","onExpandScroll","onShrinkScroll","onExpand","onShrink","registerListenersAndPositionElements","updateChildSizes","getExpandChildElement","updateDetectorElements","areElementsInjected","notifyListenersIfNeeded","state","lastNotifiedWidth","startSize","lastNotifiedHeight","listeners","handleScroll","finalizeDomMutation","ready","install","storeStartSize","isInDocument","isDetached","addListener","uninstall","forEach$1","isCollection","obj","toArray$1","isElement","nodeType","invariant_1","condition","argIndex","framesToPop","throttle","delay","noTrailing","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","wrapper","self","elapsed","now","cancel","index_esm","freeze","debounce","atBegin","_interopDefault$1","ex","createResizeDetector","idHandler$$1","set","defaultIdHandler","idGenerator","generate","idCount","reporter$$1","quiet","console","attachFunction","batchProcessor$$1","globalOptions","callOnAdd","detectionStrategy","eventListenerHandler","eventListeners","getListeners","removeListener","len","removeAllListeners","listenerHandler","elementUtils$$1","isDetectable","markAsDetectable","isBusy","busy","markBusy","elementUtils","desiredStrategy","strategyOptions","getObject","OBJECT_STYLE","positionCheckPerformed","mutateDom","tabIndex","onload","getDocument","contentDocument","objectDocument","injectObject","listenerProxy","proxy","object$2","onReadyCallbacks","listenTo","elements","onResizeCallback","elementsReady","onReadyCallback","React__default","PropTypes$1","prop_types_default","ReactDOM","react_dom_default","invariant$1","isShallowEqual","objA","objB","compareContext","ret","keysA","keys","keysB","bHasOwnProperty","idx","valueA","valueB","instances","classCallCheck$1","instance","Constructor","createClass$1","defineProperties","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","_extends$1","inherits$1","subClass","superClass","setPrototypeOf","__proto__","objectWithoutProperties$1","possibleConstructorReturn$1","ReferenceError","errMsg","defaultConfig","monitorWidth","monitorHeight","monitorPosition","refreshRate","refreshMode","noPlaceholder","resizeDetectorStrategy","getDisplayName","WrappedComponent","displayName","index_es_ReferenceWrapper","_Component","ReferenceWrapper","getPrototypeOf","Children","only","Component","Placeholder","phProps","propTypes","isRequired","renderWrapper","SizeMeRenderer","explicitRef","disablePlaceholder","restProps","onSize","renderPlaceholder","renderProps","toRender","func","shape","bool","withSize","config","_config$monitorWidth","_config$monitorHeight","_config$monitorPositi","_config$refreshRate","_config$refreshMode","_config$noPlaceholder","_config$resizeDetecto","refreshDelayStrategy","SizeMeRenderWrapper","SizeAwareComponent","_React$Component","_temp","_this2","_len","_key","domEl","determineStrategy","callbackState","strategy","strategisedSetState","setState","strategisedGetState","refCallback","hasSizeChanged","cp","np","checkIfSizeChanged","_el$getBoundingClient","resizeDetector","handleDOMNode","found","findDOMNode","isSameNode","enableSSRBehaviour","noPlaceholders","SizeMe","_this","_initialiseProps","render","sizeMeConfig","createComponent","prevProps","_props","currentSizeMeConfig","prevSizeMeConfig","SizeAware","BaseMap$1","reactSizeme","primaryGeoData","pointGeoData","minWidth","minHeight","projectionStream","contextStream","measure","geoPath","primaryPolygon","showLabels","showPoints","DefaultTooltip","display","background","filterPoints","pointNames","pointTypes","countyId","countiesTopojson","arcs","objects","romania.counties","region","atusTopojson","romania.atus","citiesTopojson","romania.cities","identity$8","feature","topology","feature$1","bbox","transformPoint","kx","ky","transform$1","object$3","counties","atus","cities","index_es_MapOfRomania","onMouseOver","onMouseOut","index_es_MapOfRomanianCounty","countyGeoData","atu","cityTypes","countyIds","colors","interpolateReds","scheme","schemeReds","interpolateBlues","schemeBlues","interpolateBrBG","schemeBrBG","interpolatePRGn","schemePRGn","interpolateRdGy","schemeRdGy","scales","scaleQuantile","colorType","scaleSequentialQuantile","useStyles","makeStyles","formControl","MapConfiguration","Grid","xs","FormGroup","FormControl","InputLabel","Select","labelId","onChange","handleInputChange","MenuItem","Box","mt","FormControlLabel","control","Checkbox","checked","handleCheckboxChange","disabled","multiple","Input","renderValue","justify","alignItems","TextField","fullWidth","variant","dataSources","countyPopulationDataUrl","atuPopulationDataUrl","cityPopulationDataUrl","primaryStyles","fontSize","fontFamily","strokeWidth","stroke","strokeOpacity","strokeLinejoin","fillOpacity","&:hover","strokeLinecap","whiteSpace","paper","margin","generateTooltip","ReactDOMServer","renderToString","getCountyData","atuData","JSON","stringify","Example","primaryClasses","_useState","useState","secondaryMapData","selectedCountyData","selectedCounty","selectedYear","_useState2","slicedToArray","mapData","setMapData","_useState3","_useState4","mapConfig","setMapConfig","useEffect","promises","url","fetch","then","response","json","Promise","countyData","cityData","md","objectSpread","Container","maxWidth"],"mappings":"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ooD,WAEAt9C,KAAA,qBAEA,OAAS7K,EAAAC,EAAKC,cAAA8mD,GAAAtlD,EAAA,CACdwlD,eAAA4C,EACA3C,gBACGpnD,KAGH8pD,GAAmB3G,UAAA,CACnBrnB,QAAW0jB,EAAAt/C,EAAS4jD,KACpB8F,YAAepK,EAAAt/C,EAAS4jD,KACxB+F,WAAcrK,EAAAt/C,EAAS4jD,KACvBrpB,QAAW+kB,EAAAt/C,EAAS4jD,MAEpBgG,GAAmBpoD,aAAA,CACnB4lD,UAAA,IACA7sB,QAAAqtB,IAEe,kMCn5rCTmC,GAAY,CAChB,mDACA,8DACA,aAGIC,GAAY,CAChB,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGIR,GAAS,CACb,QACA,aACA,aACA,QACA,WACA,OACA,aACA,YACA,SACA,UACA,aACA,eACA,QACA,gBACA,gBACA,gBACA,cACA,gBACA,cACA,iBACA,SACA,aACA,YACA,yBACA,qBACA,UACA,UACA,kBACA,QACA,cACA,iBACA,UACA,gBACA,UACA,uBACA,mBACA,aACA,0BACA,OACA,OACA,UACA,wBACA,2BACA,eACA,mBACA,eACA,WACA,cACA,UACA,SACA,kBACA,YACA,UACA,QACA,WACA,cACA,iBACA,oBACA,SACA,QACA,UACA,yBACA,cACA,gBACA,oBACA,gBACA,cACA,SACA,cACA,eACA,oBACA,eACA,gBACA,eACA,YACA,UACA,mBACA,QACA,uBACA,wBACA,uBACA,YACA,aACA,qBACA,QACA,yBACA,kBACA,UACA,WACA,sBACA,UACA,+BACA,cACA,SACA,iBACA,OACA,SACA,UACA,oBACA,qBACA,eACA,sBACA,gBACA,SACA,cACA,SACA,eACA,mBACA,SACA,gBACA,aACA,WACA,SACA,yBACA,6BACA,yBAGIS,GAA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","file":"static/js/main.20bc8529.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport reactDom from 'react-dom';\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar classnames = createCommonjsModule(function (module) {\n  /*!\n    Copyright (c) 2017 Jed Watson.\n    Licensed under the MIT License (MIT), see\n    http://jedwatson.github.io/classnames\n  */\n\n  /* global define */\n  (function () {\n    var hasOwn = {}.hasOwnProperty;\n\n    function classNames() {\n      var classes = [];\n\n      for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (!arg) continue;\n        var argType = typeof arg;\n\n        if (argType === 'string' || argType === 'number') {\n          classes.push(arg);\n        } else if (Array.isArray(arg) && arg.length) {\n          var inner = classNames.apply(null, arg);\n\n          if (inner) {\n            classes.push(inner);\n          }\n        } else if (argType === 'object') {\n          for (var key in arg) {\n            if (hasOwn.call(arg, key) && arg[key]) {\n              classes.push(key);\n            }\n          }\n        }\n      }\n\n      return classes.join(' ');\n    }\n\n    if (module.exports) {\n      classNames.default = classNames;\n      module.exports = classNames;\n    } else {\n      window.classNames = classNames;\n    }\n  })();\n});\n\nfunction PathLayer(props) {\n  return React.createElement(\"g\", {\n    className: \"polygonsGroup\"\n  }, props.data.map(function (d, i) {\n    return React.createElement(\"path\", {\n      key: i,\n      id: \"\" + d.properties.id,\n      d: props.projector(d.geometry),\n      fill: props.defaultPolygonFill,\n      className: classnames(props.polygonClass, \"polygonPath\")\n    });\n  }));\n}\n\nPathLayer.defaultProps = {\n  defaultPolygonFill: \"lightgray\"\n};\n\nfunction LabelLayer(props) {\n  return React.createElement(\"g\", {\n    className: \"labelsGroup\"\n  }, props.data.map(function (d, i) {\n    return React.createElement(\"text\", {\n      key: i,\n      x: props.projector.centroid(d.geometry)[0] * 0.99,\n      y: props.projector.centroid(d.geometry)[1] * 1.01\n    }, React.createElement(\"tspan\", {\n      className: props.classes.label\n    }, props.labels && props.labels.length ? props.labels.indexOf(d.properties.defaultLabel) >= 0 ? d.properties.defaultLabel : \"\" : d.properties.defaultLabel));\n  }));\n}\n\nfunction LegendLayer(props) {\n  var style = {\n    overflow: \"visible\"\n  };\n  return React.createElement(\"svg\", {\n    id: \"legendGroup\",\n    x: 0,\n    y: props.y,\n    style: style\n  });\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction PointLayer(props) {\n  var style = {\n    pointerEvents: \"none\",\n    overflow: \"visible\"\n  };\n  return React.createElement(\"g\", {\n    className: \"pointsGroup\"\n  }, props.data.map(function (d, i) {\n    var path = props.projector(d);\n\n    var _props$projector$cent = props.projector.centroid(d),\n        _props$projector$cent2 = slicedToArray(_props$projector$cent, 2),\n        x = _props$projector$cent2[0],\n        y = _props$projector$cent2[1];\n\n    return React.createElement(\"g\", {\n      id: \"\" + d.properties.id,\n      key: i,\n      className: \"pointCircleGroup\"\n    }, props.showPointLabels && React.createElement(\"foreignObject\", {\n      x: x,\n      y: y,\n      width: 1,\n      height: 1,\n      style: style\n    }, React.createElement(\"div\", {\n      id: \"\" + d.properties.id,\n      className: classnames(props.id, props.classes.pointLabel)\n    }, React.createElement(\"span\", null, d.properties.defaultLabel))), React.createElement(\"path\", {\n      d: path,\n      id: \"\" + d.properties.id,\n      className: classnames(\"pointCircle\", props.classes.point)\n    }));\n  }));\n}\n\nPointLayer.defaultProps = {\n  defaultCircleFill: \"red\",\n  defaultCircleRadius: 2,\n  defaultCircleStroke: \"black\"\n};\n\nfunction TooltipLayer(props) {\n  var style = {\n    pointerEvents: \"none\",\n    overflow: \"visible\"\n  };\n  return React.createElement(\"g\", {\n    id: \"tooltipGroup\"\n  }, React.createElement(\"foreignObject\", {\n    id: \"tooltipObject\",\n    width: 1,\n    height: 1,\n    style: style\n  }, React.createElement(\"div\", {\n    id: \"tooltipDiv\",\n    className: \"tooltipDiv\"\n  })));\n}\n\nvar xhtml = \"http://www.w3.org/1999/xhtml\";\nvar namespaces = {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n\nfunction namespace(name) {\n  var prefix = name += \"\",\n      i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {\n    space: namespaces[prefix],\n    local: name\n  } : name;\n}\n\nfunction creatorInherit(name) {\n  return function () {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function () {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nfunction creator(name) {\n  var fullname = namespace(name);\n  return (fullname.local ? creatorFixed : creatorInherit)(fullname);\n}\n\nfunction none() {}\n\nfunction selector(selector) {\n  return selector == null ? none : function () {\n    return this.querySelector(selector);\n  };\n}\n\nfunction selection_select(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n\nfunction empty() {\n  return [];\n}\n\nfunction selectorAll(selector) {\n  return selector == null ? empty : function () {\n    return this.querySelectorAll(selector);\n  };\n}\n\nfunction selection_selectAll(select) {\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n\nfunction matcher(selector) {\n  return function () {\n    return this.matches(selector);\n  };\n}\n\nfunction selection_filter(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n\nfunction sparse(update) {\n  return new Array(update.length);\n}\n\nfunction selection_enter() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nfunction EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function appendChild(child) {\n    return this._parent.insertBefore(child, this._next);\n  },\n  insertBefore: function insertBefore(child, next) {\n    return this._parent.insertBefore(child, next);\n  },\n  querySelector: function querySelector(selector) {\n    return this._parent.querySelector(selector);\n  },\n  querySelectorAll: function querySelectorAll(selector) {\n    return this._parent.querySelectorAll(selector);\n  }\n};\n\nfunction constant(x) {\n  return function () {\n    return x;\n  };\n}\n\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length; // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  } // Put any non-null nodes that don’t fit into exit.\n\n\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue; // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n\n      if (keyValue in nodeByKeyValue) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue[keyValue] = node;\n      }\n    }\n  } // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n\n\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\n\n    if (node = nodeByKeyValue[keyValue]) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue[keyValue] = null;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  } // Add any remaining nodes that were not bound to data to exit.\n\n\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction selection_data(value, key) {\n  if (!value) {\n    data = new Array(this.size()), j = -1;\n    this.each(function (d) {\n      data[++j] = d;\n    });\n    return data;\n  }\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key); // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength) {\n          ;\n        }\n\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\nfunction selection_exit() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n\nfunction selection_join(onenter, onupdate, onexit) {\n  var enter = this.enter(),\n      update = this,\n      exit = this.exit();\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n  if (onupdate != null) update = onupdate(update);\n  if (onexit == null) exit.remove();else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n\nfunction selection_merge(selection$$1) {\n  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n\nfunction selection_order() {\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n\nfunction selection_sort(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction selection_call() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n\nfunction selection_nodes() {\n  var nodes = new Array(this.size()),\n      i = -1;\n  this.each(function () {\n    nodes[++i] = this;\n  });\n  return nodes;\n}\n\nfunction selection_node() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n\nfunction selection_size() {\n  var size = 0;\n  this.each(function () {\n    ++size;\n  });\n  return size;\n}\n\nfunction selection_empty() {\n  return !this.node();\n}\n\nfunction selection_each(callback) {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n\nfunction attrRemove(name) {\n  return function () {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function () {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function () {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function () {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function () {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function () {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nfunction selection_attr(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === \"function\" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));\n}\n\nfunction defaultView(node) {\n  return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node\n  node.document && node // node is a Window\n  || node.defaultView; // node is a Document\n}\n\nfunction styleRemove(name) {\n  return function () {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function () {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function () {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);\n  };\n}\n\nfunction selection_style(name, value, priority) {\n  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === \"function\" ? styleFunction : styleConstant)(name, value, priority == null ? \"\" : priority)) : styleValue(this.node(), name);\n}\n\nfunction styleValue(node, name) {\n  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n\nfunction propertyRemove(name) {\n  return function () {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function () {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function () {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];else this[name] = v;\n  };\n}\n\nfunction selection_property(name, value) {\n  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === \"function\" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];\n}\n\nfunction classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function add(name) {\n    var i = this._names.indexOf(name);\n\n    if (i < 0) {\n      this._names.push(name);\n\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function remove(name) {\n    var i = this._names.indexOf(name);\n\n    if (i >= 0) {\n      this._names.splice(i, 1);\n\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function contains(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node),\n      i = -1,\n      n = names.length;\n\n  while (++i < n) {\n    list.add(names[i]);\n  }\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node),\n      i = -1,\n      n = names.length;\n\n  while (++i < n) {\n    list.remove(names[i]);\n  }\n}\n\nfunction classedTrue(names) {\n  return function () {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function () {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function () {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nfunction selection_classed(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()),\n        i = -1,\n        n = names.length;\n\n    while (++i < n) {\n      if (!list.contains(names[i])) return false;\n    }\n\n    return true;\n  }\n\n  return this.each((typeof value === \"function\" ? classedFunction : value ? classedTrue : classedFalse)(names, value));\n}\n\nfunction textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function () {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function () {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nfunction selection_text(value) {\n  return arguments.length ? this.each(value == null ? textRemove : (typeof value === \"function\" ? textFunction : textConstant)(value)) : this.node().textContent;\n}\n\nfunction htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function () {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function () {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nfunction selection_html(value) {\n  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === \"function\" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;\n}\n\nfunction raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nfunction selection_raise() {\n  return this.each(raise);\n}\n\nfunction lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nfunction selection_lower() {\n  return this.each(lower);\n}\n\nfunction selection_append(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function () {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n\nfunction constantNull() {\n  return null;\n}\n\nfunction selection_insert(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function () {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n\nfunction remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nfunction selection_remove() {\n  return this.each(remove);\n}\n\nfunction selection_cloneShallow() {\n  var clone = this.cloneNode(false),\n      parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true),\n      parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_clone(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n\nfunction selection_datum(value) {\n  return arguments.length ? this.property(\"__data__\", value) : this.node().__data__;\n}\n\nvar filterEvents = {};\nvar event = null;\n\nif (typeof document !== \"undefined\") {\n  var element = document.documentElement;\n\n  if (!(\"onmouseenter\" in element)) {\n    filterEvents = {\n      mouseenter: \"mouseover\",\n      mouseleave: \"mouseout\"\n    };\n  }\n}\n\nfunction filterContextListener(listener, index, group) {\n  listener = contextListener(listener, index, group);\n  return function (event) {\n    var related = event.relatedTarget;\n\n    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {\n      listener.call(this, event);\n    }\n  };\n}\n\nfunction contextListener(listener, index, group) {\n  return function (event1) {\n    var event0 = event; // Events can be reentrant (e.g., focus).\n\n    event = event1;\n\n    try {\n      listener.call(this, this.__data__, index, group);\n    } finally {\n      event = event0;\n    }\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function (t) {\n    var name = \"\",\n        i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {\n      type: t,\n      name: name\n    };\n  });\n}\n\nfunction onRemove(typename) {\n  return function () {\n    var on = this.__on;\n    if (!on) return;\n\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n      } else {\n        on[++i] = o;\n      }\n    }\n\n    if (++i) on.length = i;else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, capture) {\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n  return function (d, i, group) {\n    var on = this.__on,\n        o,\n        listener = wrap(value, i, group);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, capture);\n    o = {\n      type: typename.type,\n      name: typename.name,\n      value: value,\n      listener: listener,\n      capture: capture\n    };\n    if (!on) this.__on = [o];else on.push(o);\n  };\n}\n\nfunction selection_on(typename, value, capture) {\n  var typenames = parseTypenames(typename + \"\"),\n      i,\n      n = typenames.length,\n      t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  if (capture == null) capture = false;\n\n  for (i = 0; i < n; ++i) {\n    this.each(on(typenames[i], value, capture));\n  }\n\n  return this;\n}\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function () {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function () {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nfunction selection_dispatch(type, params) {\n  return this.each((typeof params === \"function\" ? dispatchFunction : dispatchConstant)(type, params));\n}\n\nvar root = [null];\n\nfunction Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch\n};\n\nfunction select(selector) {\n  return typeof selector === \"string\" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);\n}\n\nfunction sourceEvent() {\n  var current = event,\n      source;\n\n  while (source = current.sourceEvent) {\n    current = source;\n  }\n\n  return current;\n}\n\nfunction point(node, event) {\n  var svg = node.ownerSVGElement || node;\n\n  if (svg.createSVGPoint) {\n    var point = svg.createSVGPoint();\n    point.x = event.clientX, point.y = event.clientY;\n    point = point.matrixTransform(node.getScreenCTM().inverse());\n    return [point.x, point.y];\n  }\n\n  var rect = node.getBoundingClientRect();\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n}\n\nfunction mouse(node) {\n  var event = sourceEvent();\n  if (event.changedTouches) event = event.changedTouches[0];\n  return point(node, event);\n}\n\nfunction ascending$1(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n\nfunction bisector(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending$1(f(d), x);\n  };\n}\n\nvar ascendingBisect = bisector(ascending$1);\nvar bisectRight = ascendingBisect.right;\n\nfunction number(x) {\n  return x === null ? NaN : +x;\n}\n\nfunction range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\n\nfunction tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n\nfunction quantile(values, p, valueof) {\n  if (valueof == null) valueof = number;\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nfunction merge(arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) {\n    j += arrays[i].length;\n  }\n\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n} // Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\n\n\nfunction formatDecimal(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n\n  var i,\n      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n\n  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];\n}\n\nfunction exponent(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n\nfunction formatGroup(grouping, thousands) {\n  return function (value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\nfunction formatNumerals(numerals) {\n  return function (value) {\n    return value.replace(/[0-9]/g, function (i) {\n      return numerals[+i];\n    });\n  };\n} // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n\n\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width === undefined ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0)) + (this.trim ? \"~\" : \"\") + this.type;\n}; // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\n\n\nfunction formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\":\n        i0 = i1 = i;\n        break;\n\n      case \"0\":\n        if (i0 === 0) i0 = i;\n        i1 = i;\n        break;\n\n      default:\n        if (i0 > 0) {\n          if (!+s[i]) break out;\n          i0 = 0;\n        }\n\n        break;\n    }\n  }\n\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\nvar prefixExponent;\n\nfunction formatPrefixAuto(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join(\"0\") : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i) : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\nfunction formatRounded(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n\nvar formatTypes = {\n  \"%\": function _(x, p) {\n    return (x * 100).toFixed(p);\n  },\n  \"b\": function b(x) {\n    return Math.round(x).toString(2);\n  },\n  \"c\": function c(x) {\n    return x + \"\";\n  },\n  \"d\": function d(x) {\n    return Math.round(x).toString(10);\n  },\n  \"e\": function e(x, p) {\n    return x.toExponential(p);\n  },\n  \"f\": function f(x, p) {\n    return x.toFixed(p);\n  },\n  \"g\": function g(x, p) {\n    return x.toPrecision(p);\n  },\n  \"o\": function o(x) {\n    return Math.round(x).toString(8);\n  },\n  \"p\": function p(x, _p) {\n    return formatRounded(x * 100, _p);\n  },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function X(x) {\n    return Math.round(x).toString(16).toUpperCase();\n  },\n  \"x\": function x(_x) {\n    return Math.round(_x).toString(16);\n  }\n};\n\nfunction identity$1(x) {\n  return x;\n}\n\nvar map$1 = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\nfunction formatLocale(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity$1 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity$1 : formatNumerals(map$1.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Perform the initial formatting.\n\n        var valueNegative = value < 0;\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = formatTrim(value); // If a negative value rounds to zero during formatting, treat as positive.\n\n        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\nvar locale;\nvar format;\nvar formatPrefix;\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nfunction defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n\nfunction precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\nfunction precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\nfunction precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\nfunction define(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nfunction extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n\n  for (var key in definition) {\n    prototype[key] = definition[key];\n  }\n\n  return prototype;\n}\n\nfunction Color() {}\n\nvar _darker = 0.7;\n\nvar _brighter = 1 / _darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\ndefine(Color, color, {\n  copy: function copy(channels) {\n    return Object.assign(new this.constructor(), this, channels);\n  },\n  displayable: function displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex,\n  // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nfunction color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n  : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n  : l === 4 ? new Rgb(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000\n  : null // invalid hex\n  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n  : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nfunction rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb();\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nfunction rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nfunction Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function rgb() {\n    return this;\n  },\n  displayable: function displayable() {\n    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  hex: rgb_formatHex,\n  // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity;\n  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nfunction hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl();\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n\n  return new Hsl(h, s, l, o.opacity);\n}\n\nfunction hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n  },\n  displayable: function displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  formatHsl: function formatHsl() {\n    var a = this.opacity;\n    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\") + (this.h || 0) + \", \" + (this.s || 0) * 100 + \"%, \" + (this.l || 0) * 100 + \"%\" + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n/* From FvD 13.37, CSS Color Module Level 3 */\n\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n}\n\nvar deg2rad = Math.PI / 180;\nvar rad2deg = 180 / Math.PI; // https://observablehq.com/@mbostock/lab-and-rgb\n\nvar K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) return hcl2lab(o);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),\n      x,\n      z;\n  if (r === g && g === b) x = z = y;else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nfunction lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nfunction Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter: function brighter(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker: function darker(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb: function rgb() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * rad2deg;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nfunction hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nfunction hcl2lab(o) {\n  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n  var h = o.h * deg2rad;\n  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter: function brighter(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker: function darker(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb: function rgb() {\n    return hcl2lab(this).rgb();\n  }\n}));\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),\n      // NaN if l=0 or l=1\n  h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nfunction cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function rgb() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);\n  }\n}));\n\nfunction constant$2(x) {\n  return function () {\n    return x;\n  };\n}\n\nfunction linear(a, d) {\n  return function (t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nfunction gamma(y) {\n  return (y = +y) === 1 ? nogamma : function (a, b) {\n    return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);\n  };\n}\n\nfunction nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);\n}\n\nvar rgb$1 = function rgbGamma(y) {\n  var color$$1 = gamma(y);\n\n  function rgb$$1(start, end) {\n    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),\n        g = color$$1(start.g, end.g),\n        b = color$$1(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function (t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb$$1.gamma = rgbGamma;\n  return rgb$$1;\n}(1);\n\nfunction numberArray(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function (t) {\n    for (i = 0; i < n; ++i) {\n      c[i] = a[i] * (1 - t) + b[i] * t;\n    }\n\n    return c;\n  };\n}\n\nfunction isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n\nfunction genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) {\n    x[i] = interpolateValue(a[i], b[i]);\n  }\n\n  for (; i < nb; ++i) {\n    c[i] = b[i];\n  }\n\n  return function (t) {\n    for (i = 0; i < na; ++i) {\n      c[i] = x[i](t);\n    }\n\n    return c;\n  };\n}\n\nfunction date(a, b) {\n  var d = new Date();\n  return a = +a, b = +b, function (t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n\nfunction interpolateNumber(a, b) {\n  return a = +a, b = +b, function (t) {\n    return a * (1 - t) + b * t;\n  };\n}\n\nfunction object(a, b) {\n  var i = {},\n      c = {},\n      k;\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = interpolateValue(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function (t) {\n    for (k in i) {\n      c[k] = i[k](t);\n    }\n\n    return c;\n  };\n}\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function () {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function (t) {\n    return b(t) + \"\";\n  };\n}\n\nfunction string(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0,\n      // scan index for next number in b\n  am,\n      // current match in a\n  bm,\n      // current match in b\n  bs,\n      // string preceding current number in b, if any\n  i = -1,\n      // index in s\n  s = [],\n      // string constants and placeholders\n  q = []; // number interpolators\n  // Coerce inputs to strings.\n\n  a = a + \"\", b = b + \"\"; // Interpolate pairs of numbers in a & b.\n\n  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) {\n      // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n\n    if ((am = am[0]) === (bm = bm[0])) {\n      // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else {\n      // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({\n        i: i,\n        x: interpolateNumber(am, bm)\n      });\n    }\n\n    bi = reB.lastIndex;\n  } // Add remains of b.\n\n\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  } // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n\n\n  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {\n    for (var i = 0, o; i < b; ++i) {\n      s[(o = q[i]).i] = o.x(t);\n    }\n\n    return s.join(\"\");\n  });\n}\n\nfunction interpolateValue(a, b) {\n  var t = typeof b,\n      c;\n  return b == null || t === \"boolean\" ? constant$2(b) : (t === \"number\" ? interpolateNumber : t === \"string\" ? (c = color(b)) ? (b = c, rgb$1) : string : b instanceof color ? rgb$1 : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object : interpolateNumber)(a, b);\n}\n\nfunction interpolateRound(a, b) {\n  return a = +a, b = +b, function (t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n\nvar degrees = 180 / Math.PI;\nvar rho = Math.SQRT2;\n\nfunction initRange(domain, range) {\n  switch (arguments.length) {\n    case 0:\n      break;\n\n    case 1:\n      this.range(domain);\n      break;\n\n    default:\n      this.range(range).domain(domain);\n      break;\n  }\n\n  return this;\n}\n\nfunction constant$3(x) {\n  return function () {\n    return x;\n  };\n}\n\nfunction number$1(x) {\n  return +x;\n}\n\nvar unit = [0, 1];\n\nfunction identity$3(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= a = +a) ? function (x) {\n    return (x - a) / b;\n  } : constant$3(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function (x) {\n    return Math.max(a, Math.min(b, x));\n  };\n} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\n\n\nfunction bimap(domain, range$$1, interpolate$$1) {\n  var d0 = domain[0],\n      d1 = domain[1],\n      r0 = range$$1[0],\n      r1 = range$$1[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate$$1(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate$$1(r0, r1);\n  return function (x) {\n    return r0(d0(x));\n  };\n}\n\nfunction polymap(domain, range$$1, interpolate$$1) {\n  var j = Math.min(domain.length, range$$1.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1; // Reverse descending domains.\n\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range$$1 = range$$1.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate$$1(range$$1[i], range$$1[i + 1]);\n  }\n\n  return function (x) {\n    var i = bisectRight(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy(source, target) {\n  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());\n}\n\nfunction transformer() {\n  var domain = unit,\n      range$$1 = unit,\n      interpolate$$1 = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity$3,\n      piecewise$$1,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range$$1.length);\n    if (clamp !== identity$3) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise$$1 = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise$$1(domain.map(transform), range$$1, interpolate$$1)))(transform(clamp(x)));\n  }\n\n  scale.invert = function (y) {\n    return clamp(untransform((input || (input = piecewise$$1(range$$1, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function (_) {\n    return arguments.length ? (domain = Array.from(_, number$1), rescale()) : domain.slice();\n  };\n\n  scale.range = function (_) {\n    return arguments.length ? (range$$1 = Array.from(_), rescale()) : range$$1.slice();\n  };\n\n  scale.rangeRound = function (_) {\n    return range$$1 = Array.from(_), interpolate$$1 = interpolateRound, rescale();\n  };\n\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = _ ? true : identity$3, rescale()) : clamp !== identity$3;\n  };\n\n  scale.interpolate = function (_) {\n    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function (t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nfunction continuous() {\n  return transformer()(identity$3, identity$3);\n}\n\nfunction tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n\n  switch (specifier.type) {\n    case \"s\":\n      {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n        return formatPrefix(specifier, value);\n      }\n\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\":\n      {\n        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n        break;\n      }\n\n    case \"f\":\n    case \"%\":\n      {\n        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n        break;\n      }\n  }\n\n  return format(specifier);\n}\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function (count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function (count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function (count) {\n    if (count == null) count = 10;\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear$1() {\n  var scale = continuous();\n\n  scale.copy = function () {\n    return copy(scale, linear$1());\n  };\n\n  initRange.apply(scale, arguments);\n  return linearish(scale);\n}\n\nvar t0$1 = new Date(),\n    t1$1 = new Date();\n\nfunction newInterval(floori, offseti, count, field) {\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;\n  }\n\n  interval.floor = function (date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function (date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function (date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function (date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function (start, stop, step) {\n    var range = [],\n        previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n\n    do {\n      range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    } while (previous < start && start < stop);\n\n    return range;\n  };\n\n  interval.filter = function (test) {\n    return newInterval(function (date) {\n      if (date >= date) while (floori(date), !test(date)) {\n        date.setTime(date - 1);\n      }\n    }, function (date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function (start, end) {\n      t0$1.setTime(+start), t1$1.setTime(+end);\n      floori(t0$1), floori(t1$1);\n      return Math.floor(count(t0$1, t1$1));\n    };\n\n    interval.every = function (step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {\n        return field(d) % step === 0;\n      } : function (d) {\n        return interval.count(0, d) % step === 0;\n      });\n    };\n  }\n\n  return interval;\n}\n\nvar millisecond = newInterval(function () {// noop\n}, function (date, step) {\n  date.setTime(+date + step);\n}, function (start, end) {\n  return end - start;\n}); // An optimized implementation for this simple case.\n\nmillisecond.every = function (k) {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return newInterval(function (date) {\n    date.setTime(Math.floor(date / k) * k);\n  }, function (date, step) {\n    date.setTime(+date + step * k);\n  }, function (start, end) {\n    return (end - start) / k;\n  });\n};\n\nvar milliseconds = millisecond.range;\nvar durationSecond = 1e3;\nvar durationMinute = 6e4;\nvar durationHour = 36e5;\nvar durationDay = 864e5;\nvar durationWeek = 6048e5;\nvar second = newInterval(function (date) {\n  date.setTime(date - date.getMilliseconds());\n}, function (date, step) {\n  date.setTime(+date + step * durationSecond);\n}, function (start, end) {\n  return (end - start) / durationSecond;\n}, function (date) {\n  return date.getUTCSeconds();\n});\nvar seconds = second.range;\nvar minute = newInterval(function (date) {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n}, function (date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function (start, end) {\n  return (end - start) / durationMinute;\n}, function (date) {\n  return date.getMinutes();\n});\nvar minutes = minute.range;\nvar hour = newInterval(function (date) {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}, function (date, step) {\n  date.setTime(+date + step * durationHour);\n}, function (start, end) {\n  return (end - start) / durationHour;\n}, function (date) {\n  return date.getHours();\n});\nvar hours = hour.range;\nvar day = newInterval(function (date) {\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setDate(date.getDate() + step);\n}, function (start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function (date) {\n  return date.getDate() - 1;\n});\nvar days = day.range;\n\nfunction weekday(i) {\n  return newInterval(function (date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function (start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nvar sunday = weekday(0);\nvar monday = weekday(1);\nvar tuesday = weekday(2);\nvar wednesday = weekday(3);\nvar thursday = weekday(4);\nvar friday = weekday(5);\nvar saturday = weekday(6);\nvar sundays = sunday.range;\nvar month = newInterval(function (date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function (start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function (date) {\n  return date.getMonth();\n});\nvar months = month.range;\nvar year = newInterval(function (date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function (start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function (date) {\n  return date.getFullYear();\n}); // An optimized implementation for this simple case.\n\nyear.every = function (k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nvar years = year.range;\nvar utcMinute = newInterval(function (date) {\n  date.setUTCSeconds(0, 0);\n}, function (date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function (start, end) {\n  return (end - start) / durationMinute;\n}, function (date) {\n  return date.getUTCMinutes();\n});\nvar utcMinutes = utcMinute.range;\nvar utcHour = newInterval(function (date) {\n  date.setUTCMinutes(0, 0, 0);\n}, function (date, step) {\n  date.setTime(+date + step * durationHour);\n}, function (start, end) {\n  return (end - start) / durationHour;\n}, function (date) {\n  return date.getUTCHours();\n});\nvar utcHours = utcHour.range;\nvar utcDay = newInterval(function (date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function (start, end) {\n  return (end - start) / durationDay;\n}, function (date) {\n  return date.getUTCDate() - 1;\n});\nvar utcDays = utcDay.range;\n\nfunction utcWeekday(i) {\n  return newInterval(function (date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function (start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nvar utcSunday = utcWeekday(0);\nvar utcMonday = utcWeekday(1);\nvar utcTuesday = utcWeekday(2);\nvar utcWednesday = utcWeekday(3);\nvar utcThursday = utcWeekday(4);\nvar utcFriday = utcWeekday(5);\nvar utcSaturday = utcWeekday(6);\nvar utcSundays = utcSunday.range;\nvar utcMonth = newInterval(function (date) {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, function (start, end) {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, function (date) {\n  return date.getUTCMonth();\n});\nvar utcMonths = utcMonth.range;\nvar utcYear = newInterval(function (date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function (date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function (start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function (date) {\n  return date.getUTCFullYear();\n}); // An optimized implementation for this simple case.\n\nutcYear.every = function (k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function (date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nvar utcYears = utcYear.range;\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newDate(y, m, d) {\n  return {\n    y: y,\n    m: m,\n    d: d,\n    H: 0,\n    M: 0,\n    S: 0,\n    L: 0\n  };\n}\n\nfunction formatLocale$1(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"q\": formatQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"q\": formatUTCQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"q\": parseQuarter,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  }; // These recursive directive definitions must be deferred.\n\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function (date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, Z) {\n    return function (string) {\n      var d = newDate(1900, undefined, 1),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week,\n          day$$1;\n      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.\n\n      if (\"Q\" in d) return new Date(d.Q);\n      if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.\n\n      if (Z && !(\"Z\" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.\n\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.\n\n      if (d.m === undefined) d.m = \"q\" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.\n\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n\n        if (\"Z\" in d) {\n          week = utcDate(newDate(d.y, 0, 1)), day$$1 = week.getUTCDay();\n          week = day$$1 > 4 || day$$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = localDate(newDate(d.y, 0, 1)), day$$1 = week.getDay();\n          week = day$$1 > 4 || day$$1 === 0 ? monday.ceil(week) : monday(week);\n          week = day.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day$$1 = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;\n      } // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n\n\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      } // Otherwise, all fields are in local time.\n\n\n      return localDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || (j = parse(d, string, j)) < 0) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatQuarter(d) {\n    return 1 + ~~(d.getMonth() / 3);\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  function formatUTCQuarter(d) {\n    return 1 + ~~(d.getUTCMonth() / 3);\n  }\n\n  return {\n    format: function format(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n\n      f.toString = function () {\n        return specifier;\n      };\n\n      return f;\n    },\n    parse: function parse(specifier) {\n      var p = newParse(specifier += \"\", false);\n\n      p.toString = function () {\n        return specifier;\n      };\n\n      return p;\n    },\n    utcFormat: function utcFormat(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n\n      f.toString = function () {\n        return specifier;\n      };\n\n      return f;\n    },\n    utcParse: function utcParse(specifier) {\n      var p = newParse(specifier += \"\", true);\n\n      p.toString = function () {\n        return specifier;\n      };\n\n      return p;\n    }\n  };\n}\n\nvar pads = {\n  \"-\": \"\",\n  \"_\": \" \",\n  \"0\": \"0\"\n},\n    numberRe = /^\\s*\\d+/,\n    // note: ignores next directive\npercentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  var map = {},\n      i = -1,\n      n = names.length;\n\n  while (++i < n) {\n    map[names[i].toLowerCase()] = i;\n  }\n\n  return map;\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseQuarter(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.s = +n[0], i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + day.count(year(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day$$1 = d.getDay();\n  return day$$1 === 0 ? 7 : day$$1;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(sunday.count(year(d) - 1, d), p, 2);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  var day$$1 = d.getDay();\n  d = day$$1 >= 4 || day$$1 === 0 ? thursday(d) : thursday.ceil(d);\n  return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(monday.count(year(d) - 1, d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\")) + pad(z / 60 | 0, \"0\", 2) + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  var day$$1 = d.getUTCDay();\n  d = day$$1 >= 4 || day$$1 === 0 ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n\nvar locale$1;\nvar timeFormat;\nvar timeParse;\nvar utcFormat;\nvar utcParse;\ndefaultLocale$1({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nfunction defaultLocale$1(definition) {\n  locale$1 = formatLocale$1(definition);\n  timeFormat = locale$1.format;\n  timeParse = locale$1.parse;\n  utcFormat = locale$1.utcFormat;\n  utcParse = locale$1.utcParse;\n  return locale$1;\n}\n\nvar isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\") ? parseIsoNative : utcParse(isoSpecifier);\nvar slice$1 = Array.prototype.slice;\n\nfunction identity$5(x) {\n  return x;\n}\n\nvar top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return \"translate(\" + (x + 0.5) + \",0)\";\n}\n\nfunction translateY(y) {\n  return \"translate(0,\" + (y + 0.5) + \")\";\n}\n\nfunction number$3(scale) {\n  return function (d) {\n    return +scale(d);\n  };\n}\n\nfunction center(scale) {\n  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\n\n  if (scale.round()) offset = Math.round(offset);\n  return function (d) {\n    return +scale(d) + offset;\n  };\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      k = orient === top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? \"x\" : \"y\",\n      transform = orient === top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,\n        format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5 : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + 0.5,\n        range1 = +range[range.length - 1] + 0.5,\n        position = (scale.bandwidth ? center : number$3)(scale.copy()),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(\".domain\").data([null]),\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n        line = tick.select(\"line\"),\n        text = tick.select(\"text\");\n    path = path.merge(path.enter().insert(\"path\", \".tick\").attr(\"class\", \"domain\").attr(\"stroke\", \"currentColor\"));\n    tick = tick.merge(tickEnter);\n    line = line.merge(tickEnter.append(\"line\").attr(\"stroke\", \"currentColor\").attr(x + \"2\", k * tickSizeInner));\n    text = text.merge(tickEnter.append(\"text\").attr(\"fill\", \"currentColor\").attr(x, k * spacing).attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n      tickExit = tickExit.transition(context).attr(\"opacity\", epsilon).attr(\"transform\", function (d) {\n        return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\");\n      });\n      tickEnter.attr(\"opacity\", epsilon).attr(\"transform\", function (d) {\n        var p = this.parentNode.__axis;\n        return transform(p && isFinite(p = p(d)) ? p : position(d));\n      });\n    }\n\n    tickExit.remove();\n    path.attr(\"d\", orient === left || orient == right ? tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter : \"M0.5,\" + range0 + \"V\" + range1 : tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",0.5H\" + range1);\n    tick.attr(\"opacity\", 1).attr(\"transform\", function (d) {\n      return transform(position(d));\n    });\n    line.attr(x + \"2\", k * tickSizeInner);\n    text.attr(x, k * spacing).text(format);\n    selection.filter(entering).attr(\"fill\", \"none\").attr(\"font-size\", 10).attr(\"font-family\", \"sans-serif\").attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n    selection.each(function () {\n      this.__axis = position;\n    });\n  }\n\n  axis.scale = function (_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function () {\n    return tickArguments = slice$1.call(arguments), axis;\n  };\n\n  axis.tickArguments = function (_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function (_) {\n    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function (_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function (_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function (_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function (_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function (_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  return axis;\n}\n\nfunction axisBottom(scale) {\n  return axis(bottom, scale);\n}\n/*\n Adapted from https://observablehq.com/@d3/color-legend\n*/\n\n\nfunction legend() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      node = _ref.node,\n      color = _ref.color,\n      title = _ref.title,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === undefined ? 5 : _ref$tickSize,\n      _ref$width = _ref.width,\n      width = _ref$width === undefined ? 320 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === undefined ? 46 + tickSize : _ref$height,\n      _ref$marginTop = _ref.marginTop,\n      marginTop = _ref$marginTop === undefined ? 18 : _ref$marginTop,\n      _ref$marginRight = _ref.marginRight,\n      marginRight = _ref$marginRight === undefined ? 0 : _ref$marginRight,\n      _ref$marginBottom = _ref.marginBottom,\n      marginBottom = _ref$marginBottom === undefined ? 16 + tickSize : _ref$marginBottom,\n      _ref$marginLeft = _ref.marginLeft,\n      marginLeft = _ref$marginLeft === undefined ? 0 : _ref$marginLeft,\n      _ref$ticks = _ref.ticks,\n      ticks$$1 = _ref$ticks === undefined ? width / 64 : _ref$ticks,\n      tickFormat$$1 = _ref.tickFormat,\n      tickValues = _ref.tickValues,\n      onMousemove = _ref.onMousemove,\n      onMouseout = _ref.onMouseout,\n      onMouseclick = _ref.onMouseclick;\n\n  var x = void 0;\n  var svg = select(node).select(\"#legendGroup\"); // Continuous\n\n  if (color.interpolator) {\n    x = Object.assign(color.copy().interpolator(interpolateRound(marginLeft, width - marginRight)), {\n      range: function range$$1() {\n        return [marginLeft, width - marginRight];\n      }\n    }); // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        var n = Math.round(ticks$$1 + 1);\n        tickValues = range(n).map(function (i) {\n          return quantile(color.domain(), i / (n - 1));\n        });\n      }\n\n      if (typeof tickFormat$$1 !== \"function\") {\n        tickFormat$$1 = format(tickFormat$$1 === undefined ? \",f\" : tickFormat$$1);\n      }\n    } else {\n      tickValues = x.ticks();\n    } // remove image before re-drawing\n\n\n    svg.select(\"image\").remove();\n    var imageWidth = width - marginLeft - marginRight;\n    var segmentWidth = 1 / (tickValues.length - 1);\n\n    var getLegendSegmentIndex = function getLegendSegmentIndex(_ref2) {\n      var _ref3 = slicedToArray(_ref2, 2),\n          cursorX = _ref3[0];\n\n      var cursorPosition = (cursorX - marginLeft) / imageWidth;\n      return Math.floor(cursorPosition / segmentWidth);\n    };\n\n    svg.append(\"image\").attr(\"x\", marginLeft).attr(\"y\", marginTop).attr(\"width\", width - marginLeft - marginRight).attr(\"height\", height - marginTop - marginBottom).attr(\"preserveAspectRatio\", \"none\").attr(\"xlink:href\", ramp(color.interpolator()).toDataURL()) // sequential scales do not implement invertExtent,\n    // approximate based on image and segment width\n    .on(\"mousemove\", function () {\n      if (typeof onMousemove === \"function\") {\n        var segmentIndex = getLegendSegmentIndex(mouse(node));\n        onMousemove(tickValues.slice(segmentIndex, segmentIndex + 2));\n      }\n    }).on(\"mouseout\", function () {\n      return typeof onMouseout === \"function\" && onMouseout();\n    });\n  } // Discrete\n  else if (color.invertExtent) {\n      var thresholds = color.thresholds ? color.thresholds() // scaleQuantize\n      : color.quantiles ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n      var thresholdFormat = tickFormat$$1 === undefined ? function (d) {\n        return d;\n      } : typeof tickFormat$$1 === \"string\" ? format(tickFormat$$1) : tickFormat$$1;\n      x = linear$1().domain([-1, color.range().length - 1]).rangeRound([Math.round(marginLeft - 1), Math.round(width - marginRight + 1)]);\n      svg.select(\"#legendRects\").remove();\n      svg.append(\"g\").attr(\"id\", \"legendRects\").selectAll(\"rect\").data(color.range()).join(\"rect\").attr(\"x\", function (d, i) {\n        return x(i - 1);\n      }).attr(\"y\", marginTop).attr(\"width\", function (d, i) {\n        return x(i) - x(i - 1);\n      }).attr(\"height\", height - marginTop - marginBottom).attr(\"fill\", function (d) {\n        return d;\n      }).on(\"mousemove\", function (d) {\n        return typeof onMousemove === \"function\" && onMousemove(color.invertExtent(d));\n      }).on(\"mouseout\", function () {\n        return typeof onMouseout === \"function\" && onMouseout();\n      });\n      tickValues = range(thresholds.length);\n\n      tickFormat$$1 = function tickFormat$$1(i) {\n        return thresholdFormat(thresholds[i], i);\n      };\n    } // remove all axis symbols before re-drawing\n\n\n  svg.select(\"#legendSymbols\").remove();\n  svg.append(\"g\").attr(\"id\", \"legendSymbols\").attr(\"transform\", \"translate(0, \" + (height - marginBottom) + \")\").call(axisBottom(x).ticks(ticks$$1, typeof tickFormat$$1 === \"string\" ? tickFormat$$1 : undefined).tickFormat(typeof tickFormat$$1 === \"function\" ? tickFormat$$1 : undefined).tickSize(tickSize).tickValues(tickValues)).call(function (g) {\n    return g.selectAll(\".tick line\").attr(\"y1\", marginTop + marginBottom - height);\n  }).call(function (g) {\n    return g.select(\".domain\").remove();\n  }).call(function (g) {\n    return g.append(\"text\").attr(\"x\", marginLeft).attr(\"y\", marginTop + marginBottom - height - 6).attr(\"fill\", \"currentColor\").attr(\"text-anchor\", \"start\").attr(\"font-weight\", \"bold\").text(title);\n  });\n  return svg.node();\n}\n\nfunction ramp(color) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = n;\n  canvas.height = 1;\n  var context = canvas.getContext(\"2d\");\n\n  for (var i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n\n  return canvas;\n}\n/*\n Polygons and Points\n*/\n\n\nvar getColor = function getColor(scale, color, data, key) {\n  return scale(data.map(function (item) {\n    return item.value[key] || item.value;\n  }), color);\n};\n\nvar getPolygonSelection = function getPolygonSelection(node) {\n  return select(node).selectAll(\".polygonPath\");\n};\n\nvar getPointSelection = function getPointSelection(node) {\n  return select(node).selectAll(\".pointCircleGroup\");\n};\n\nvar bindDataToSelection = function bindDataToSelection(selection$$1, data) {\n  selection$$1.datum(function () {\n    return null;\n  }).data(data, function (d) {\n    return d ? d.id : this.id;\n  }).exit().remove();\n};\n\nvar updateFillOnSelection = function updateFillOnSelection(selection$$1, color, key) {\n  selection$$1.style(\"fill\", function (d) {\n    return d !== undefined ? color(d.value[key] || d.value) : \"transparent\";\n  });\n};\n/*\n Tooltip\n*/\n\n\nvar updateTooltip = function updateTooltip(node, html) {\n  var _mouse = mouse(node),\n      _mouse2 = slicedToArray(_mouse, 2),\n      cursorX = _mouse2[0],\n      cursorY = _mouse2[1];\n\n  select(node).select(\"#tooltipObject\").attr(\"x\", cursorX + 10).attr(\"y\", cursorY + 10).select(\"#tooltipDiv\").html(html);\n};\n\nvar removeTooltip = function removeTooltip(node) {\n  select(node).select(\"#tooltipDiv\").html(\"\");\n};\n\nvar attachTooltipToSelection = function attachTooltipToSelection(node, selection$$1, tooltip, key) {\n  // `this` is the element on which the mouse event is triggered\n  // passed back to the tooltip function for customization options\n  selection$$1.on(\"mousemove\", function (d) {\n    updateTooltip(node, tooltip(d, this, key));\n  });\n  select(node).on(\"mouseout\", function () {\n    return removeTooltip(node);\n  });\n};\n/*\n Legend\n*/\n\n\nvar onLegendMousemove = function onLegendMousemove(node, classes, bounds, key) {\n  var _bounds = slicedToArray(bounds, 2),\n      lower = _bounds[0],\n      upper = _bounds[1];\n\n  getPolygonSelection(node).classed(classes.highlightedPolygon, function (d) {\n    return (d.value[key] || d.value) >= lower && (d.value[key] || d.value) <= upper;\n  });\n};\n\nvar onLegendMouseout = function onLegendMouseout(node, classes) {\n  getPolygonSelection(node).classed(classes.highlightedPolygon, false);\n};\n\nvar updateLegend = function updateLegend(node, color, props) {\n  var size = props.size,\n      legendProps = props.legend,\n      classes = props.classes,\n      dataKey = props.dataKey;\n  legend(_extends({}, legendProps, {\n    node: node,\n    color: color,\n    tickFormat: \",.2r\",\n    width: size.width,\n    marginLeft: size.width * 0.05,\n    marginRight: size.width * 0.05,\n    onMousemove: function onMousemove(bounds) {\n      return onLegendMousemove(node, classes, bounds, dataKey);\n    },\n    onMouseout: function onMouseout() {\n      return onLegendMouseout(node, classes);\n    }\n  }));\n};\n\nfunction D3Container(props) {\n  var primaryMapData = props.primaryMapData,\n      pointMapData = props.pointMapData,\n      dataKey = props.dataKey;\n  var size = props.size,\n      scale = props.scale,\n      color = props.color,\n      tooltip = props.tooltip,\n      onClick = props.onClick;\n  var ref = useRef();\n\n  var _useMemo = useMemo(function () {\n    return ref.current ? ref.current.children : [];\n  }, [ref.current]),\n      _useMemo2 = slicedToArray(_useMemo, 1),\n      mapSvg = _useMemo2[0];\n\n  var mapColor = useMemo(function () {\n    return getColor(scale, color, primaryMapData, dataKey);\n  }, [primaryMapData, dataKey, scale, color]);\n\n  var isMounted = function isMounted() {\n    return mapSvg && primaryMapData && primaryMapData.length;\n  };\n\n  useEffect(function () {\n    isMounted && bindDataToSelection(getPolygonSelection(mapSvg), primaryMapData);\n  }, [primaryMapData]);\n  useEffect(function () {\n    isMounted && updateFillOnSelection(getPolygonSelection(mapSvg), mapColor, dataKey);\n  }, [dataKey, mapColor]);\n  useEffect(function () {\n    isMounted && attachTooltipToSelection(mapSvg, getPolygonSelection(mapSvg), tooltip, dataKey);\n  }, [primaryMapData, dataKey]);\n  useEffect(function () {\n    if (mapSvg && pointMapData && pointMapData.length) {\n      var points = getPointSelection(mapSvg);\n      bindDataToSelection(points, pointMapData);\n      attachTooltipToSelection(mapSvg, points, tooltip, dataKey);\n    }\n  }, [pointMapData]);\n  useEffect(function () {\n    isMounted && updateLegend(mapSvg, mapColor, props);\n  }, [mapSvg, primaryMapData, mapColor, size]);\n  return React.createElement(\"div\", {\n    ref: ref\n  }, props.children);\n} // Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\n\nfunction adder() {\n  return new Adder();\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function reset() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function add(y) {\n    _add(temp, y, this.t);\n\n    _add(this, temp.s, this.s);\n\n    if (this.s) this.t += temp.t;else this.s = temp.t;\n  },\n  valueOf: function valueOf() {\n    return this.s;\n  }\n};\nvar temp = new Adder();\n\nfunction _add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = a - av + (b - bv);\n}\n\nvar epsilon$1 = 1e-6;\nvar pi = Math.PI;\nvar halfPi = pi / 2;\nvar quarterPi = pi / 4;\nvar tau = pi * 2;\nvar degrees$1 = 180 / pi;\nvar radians = pi / 180;\nvar abs = Math.abs;\nvar atan = Math.atan;\nvar atan2 = Math.atan2;\nvar cos = Math.cos;\nvar exp = Math.exp;\nvar log$1 = Math.log;\nvar sin = Math.sin;\n\nvar sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\n\nvar sqrt$1 = Math.sqrt;\nvar tan = Math.tan;\n\nfunction acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nfunction asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nfunction noop() {}\n\nfunction streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function Feature(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function FeatureCollection(object, stream) {\n    var features = object.features,\n        i = -1,\n        n = features.length;\n\n    while (++i < n) {\n      streamGeometry(features[i].geometry, stream);\n    }\n  }\n};\nvar streamGeometryType = {\n  Sphere: function Sphere(object, stream) {\n    stream.sphere();\n  },\n  Point: function Point(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function MultiPoint(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    }\n  },\n  LineString: function LineString(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function MultiLineString(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamLine(coordinates[i], stream, 0);\n    }\n  },\n  Polygon: function Polygon(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function MultiPolygon(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamPolygon(coordinates[i], stream);\n    }\n  },\n  GeometryCollection: function GeometryCollection(object, stream) {\n    var geometries = object.geometries,\n        i = -1,\n        n = geometries.length;\n\n    while (++i < n) {\n      streamGeometry(geometries[i], stream);\n    }\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1,\n      n = coordinates.length - closed,\n      coordinate;\n  stream.lineStart();\n\n  while (++i < n) {\n    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  }\n\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1,\n      n = coordinates.length;\n  stream.polygonStart();\n\n  while (++i < n) {\n    streamLine(coordinates[i], stream, 1);\n  }\n\n  stream.polygonEnd();\n}\n\nfunction geoStream(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n\nvar areaRingSum = adder();\nvar areaSum = adder();\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nfunction cartesian(spherical) {\n  var lambda = spherical[0],\n      phi = spherical[1],\n      cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nfunction cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nfunction cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // TODO return a\n\n\nfunction cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nfunction cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n} // TODO return d\n\n\nfunction cartesianNormalizeInPlace(d) {\n  var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n\nvar deltaSum = adder();\n\nfunction compose(a, b) {\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function (x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n  return compose;\n}\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nfunction rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n\n  return rotation;\n}\n\nfunction rotation(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n  }\n\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;\n  };\n\n  return forward;\n} // Generates a circle centered at [0°, 0°], with a given radius and precision.\n\n\nfunction circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\n\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon$1) % tau;\n}\n\nfunction clipBuffer() {\n  var lines = [],\n      line;\n  return {\n    point: function point(x, y) {\n      line.push([x, y]);\n    },\n    lineStart: function lineStart() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function rejoin() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function result() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon$1 && abs(a[1] - b[1]) < epsilon$1;\n}\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n\n  this.e = entry; // is an entry?\n\n  this.v = false; // visited\n\n  this.n = this.p = null; // next & previous\n} // A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\n\n\nfunction clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n  segments.forEach(function (segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n,\n        p0 = segment[0],\n        p1 = segment[n],\n        x; // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n\n      for (i = 0; i < n; ++i) {\n        stream.point((p0 = segment[i])[0], p0[1]);\n      }\n\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n  if (!subject.length) return;\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n\n    while (current.v) {\n      if ((current = current.n) === start) return;\n    }\n\n    points = current.z;\n    stream.lineStart();\n\n    do {\n      current.v = current.o.v = true;\n\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n\n          for (i = points.length - 1; i >= 0; --i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n\n        current = current.p;\n      }\n\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n\n  a.n = b = array[0];\n  b.p = a;\n}\n\nvar sum$1 = adder();\n\nfunction longitude(point) {\n  if (abs(point[0]) <= pi) return point[0];else return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nfunction polygonContains(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n  sum$1.reset();\n  if (sinPhi === 1) phi = halfPi + epsilon$1;else if (sinPhi === -1) phi = -halfPi - epsilon$1;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign$$1 = delta >= 0 ? 1 : -1,\n          absDelta = sign$$1 * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n      sum$1.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign$$1 * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  } // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n\n  return (angle < -epsilon$1 || angle < epsilon$1 && sum$1 < -epsilon$1) ^ winding & 1;\n}\n\nfunction clip(pointVisible, clipLine, interpolate, start) {\n  return function (sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function polygonEnd() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function sphere() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i,\n          n = ringSegments.length,\n          m,\n          segment,\n          point;\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n      if (!n) return; // No intersections.\n\n      if (clean & 1) {\n        segment = ringSegments[0];\n\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n\n          for (i = 0; i < m; ++i) {\n            sink.point((point = segment[i])[0], point[1]);\n          }\n\n          sink.lineEnd();\n        }\n\n        return;\n      } // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n\n\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n} // Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\n\n\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon$1 : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon$1 : halfPi - b[1]);\n}\n\nvar clipAntimeridian = clip(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\n\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      _clean; // no intersections\n\n\n  return {\n    lineStart: function lineStart() {\n      stream.lineStart();\n      _clean = 1;\n    },\n    point: function point(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n\n      if (abs(delta - pi) < epsilon$1) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        _clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) {\n        // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon$1) lambda0 -= sign0 * epsilon$1; // handle degeneracies\n\n        if (abs(lambda1 - sign1) < epsilon$1) lambda1 -= sign1 * epsilon$1;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        _clean = 0;\n      }\n\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function lineEnd() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function clean() {\n      return 2 - _clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon$1 ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon$1) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n\nfunction clipCircle(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon$1; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  } // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n\n\n  function clipLine(stream) {\n    var point0, // previous point\n    c0, // code for previous point\n    v0, // visibility of previous point\n    v00, // visibility of first point\n    _clean2; // no intersections\n\n\n    return {\n      lineStart: function lineStart() {\n        v00 = v0 = false;\n        _clean2 = 1;\n      },\n      point: function point(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart(); // Handle degeneracies.\n        // TODO ignore if not clipping polygons.\n\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {\n            point1[0] += epsilon$1;\n            point1[1] += epsilon$1;\n            v = visible(point1[0], point1[1]);\n          }\n        }\n\n        if (v !== v0) {\n          _clean2 = 0;\n\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1]);\n            stream.lineEnd();\n          }\n\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t; // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            _clean2 = 0;\n\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n            }\n          }\n        }\n\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function lineEnd() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function clean() {\n        return _clean2 | (v00 && v0) << 1;\n      }\n    };\n  } // Intersects the great circle between a and b with the clip circle.\n\n\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n\n    var n1 = [1, 0, 0],\n        // normal\n    n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0],\n        // cartesianDot(n1, n2),\n    determinant = n2n2 - n1n2 * n1n2; // Two polar points.\n\n    if (!determinant) return !two && a;\n    var c1 = cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.\n\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n    if (t2 < 0) return;\n    var t = sqrt$1(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n    if (!two) return q; // Two intersection points.\n\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon$1,\n        meridian = polar || delta < epsilon$1;\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.\n\n    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$1 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  } // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n\n\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n\nfunction clipLine(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n\nvar clipMax = 1e9,\n    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nfunction clipRectangle(x0, y0, x1, y1) {\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0,\n        a1 = 0;\n\n    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {\n      do {\n        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      } while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon$1 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon$1 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon$1 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n  }\n\n  return function (stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__,\n        y__,\n        v__,\n        // first point\n    x_,\n        y_,\n        v_,\n        // previous point\n    first,\n        clean;\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\n          if (a1 <= y1) {\n            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;\n          } else {\n            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;\n          }\n        }\n      }\n\n      return winding;\n    } // Buffer geometry within a polygon and then clip it en masse.\n\n\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n\n      if (cleanInside || visible) {\n        stream.polygonStart();\n\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n\n        stream.polygonEnd();\n      }\n\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    } // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n\n\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n\nvar lengthSum = adder();\n\nfunction identity$6(x) {\n  return x;\n}\n\nvar areaSum$1 = adder(),\n    areaRingSum$1 = adder(),\n    x00,\n    y00,\n    x0$1,\n    y0$1;\nvar areaStream$1 = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function polygonStart() {\n    areaStream$1.lineStart = areaRingStart$1;\n    areaStream$1.lineEnd = areaRingEnd$1;\n  },\n  polygonEnd: function polygonEnd() {\n    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;\n    areaSum$1.add(abs(areaRingSum$1));\n    areaRingSum$1.reset();\n  },\n  result: function result() {\n    var area = areaSum$1 / 2;\n    areaSum$1.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart$1() {\n  areaStream$1.point = areaPointFirst$1;\n}\n\nfunction areaPointFirst$1(x, y) {\n  areaStream$1.point = areaPoint$1;\n  x00 = x0$1 = x, y00 = y0$1 = y;\n}\n\nfunction areaPoint$1(x, y) {\n  areaRingSum$1.add(y0$1 * x - x0$1 * y);\n  x0$1 = x, y0$1 = y;\n}\n\nfunction areaRingEnd$1() {\n  areaPoint$1(x00, y00);\n}\n\nvar x0$2 = Infinity,\n    y0$2 = x0$2,\n    x1 = -x0$2,\n    y1 = x1;\nvar boundsStream$1 = {\n  point: boundsPoint$1,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function result() {\n    var bounds = [[x0$2, y0$2], [x1, y1]];\n    x1 = y1 = -(y0$2 = x0$2 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint$1(x, y) {\n  if (x < x0$2) x0$2 = x;\n  if (x > x1) x1 = x;\n  if (y < y0$2) y0$2 = y;\n  if (y > y1) y1 = y;\n} // TODO Enforce positive area for exterior, negative area for interior?\n\n\nvar X0$1 = 0,\n    Y0$1 = 0,\n    Z0$1 = 0,\n    X1$1 = 0,\n    Y1$1 = 0,\n    Z1$1 = 0,\n    X2$1 = 0,\n    Y2$1 = 0,\n    Z2$1 = 0,\n    x00$1,\n    y00$1,\n    x0$3,\n    y0$3;\nvar centroidStream$1 = {\n  point: centroidPoint$1,\n  lineStart: centroidLineStart$1,\n  lineEnd: centroidLineEnd$1,\n  polygonStart: function polygonStart() {\n    centroidStream$1.lineStart = centroidRingStart$1;\n    centroidStream$1.lineEnd = centroidRingEnd$1;\n  },\n  polygonEnd: function polygonEnd() {\n    centroidStream$1.point = centroidPoint$1;\n    centroidStream$1.lineStart = centroidLineStart$1;\n    centroidStream$1.lineEnd = centroidLineEnd$1;\n  },\n  result: function result() {\n    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1] : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1] : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1] : [NaN, NaN];\n    X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint$1(x, y) {\n  X0$1 += x;\n  Y0$1 += y;\n  ++Z0$1;\n}\n\nfunction centroidLineStart$1() {\n  centroidStream$1.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream$1.point = centroidPointLine;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0$3,\n      dy = y - y0$3,\n      z = sqrt$1(dx * dx + dy * dy);\n  X1$1 += z * (x0$3 + x) / 2;\n  Y1$1 += z * (y0$3 + y) / 2;\n  Z1$1 += z;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction centroidLineEnd$1() {\n  centroidStream$1.point = centroidPoint$1;\n}\n\nfunction centroidRingStart$1() {\n  centroidStream$1.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd$1() {\n  centroidPointRing(x00$1, y00$1);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream$1.point = centroidPointRing;\n  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0$3,\n      dy = y - y0$3,\n      z = sqrt$1(dx * dx + dy * dy);\n  X1$1 += z * (x0$3 + x) / 2;\n  Y1$1 += z * (y0$3 + y) / 2;\n  Z1$1 += z;\n  z = y0$3 * x - x0$3 * y;\n  X2$1 += z * (x0$3 + x);\n  Y2$1 += z * (y0$3 + y);\n  Z2$1 += z * 3;\n  centroidPoint$1(x0$3 = x, y0$3 = y);\n}\n\nfunction PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function pointRadius(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function polygonStart() {\n    this._line = 0;\n  },\n  polygonEnd: function polygonEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._context.moveTo(x, y);\n\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._context.lineTo(x, y);\n\n          break;\n        }\n\n      default:\n        {\n          this._context.moveTo(x + this._radius, y);\n\n          this._context.arc(x, y, this._radius, 0, tau);\n\n          break;\n        }\n    }\n  },\n  result: noop\n};\nvar lengthSum$1 = adder(),\n    lengthRing,\n    x00$2,\n    y00$2,\n    x0$4,\n    y0$4;\nvar lengthStream$1 = {\n  point: noop,\n  lineStart: function lineStart() {\n    lengthStream$1.point = lengthPointFirst$1;\n  },\n  lineEnd: function lineEnd() {\n    if (lengthRing) lengthPoint$1(x00$2, y00$2);\n    lengthStream$1.point = noop;\n  },\n  polygonStart: function polygonStart() {\n    lengthRing = true;\n  },\n  polygonEnd: function polygonEnd() {\n    lengthRing = null;\n  },\n  result: function result() {\n    var length = +lengthSum$1;\n    lengthSum$1.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst$1(x, y) {\n  lengthStream$1.point = lengthPoint$1;\n  x00$2 = x0$4 = x, y00$2 = y0$4 = y;\n}\n\nfunction lengthPoint$1(x, y) {\n  x0$4 -= x, y0$4 -= y;\n  lengthSum$1.add(sqrt$1(x0$4 * x0$4 + y0$4 * y0$4));\n  x0$4 = x, y0$4 = y;\n}\n\nfunction PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle$1(4.5),\n  pointRadius: function pointRadius(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function polygonStart() {\n    this._line = 0;\n  },\n  polygonEnd: function polygonEnd() {\n    this._line = NaN;\n  },\n  lineStart: function lineStart() {\n    this._point = 0;\n  },\n  lineEnd: function lineEnd() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function point(x, y) {\n    switch (this._point) {\n      case 0:\n        {\n          this._string.push(\"M\", x, \",\", y);\n\n          this._point = 1;\n          break;\n        }\n\n      case 1:\n        {\n          this._string.push(\"L\", x, \",\", y);\n\n          break;\n        }\n\n      default:\n        {\n          if (this._circle == null) this._circle = circle$1(this._radius);\n\n          this._string.push(\"M\", x, \",\", y, this._circle);\n\n          break;\n        }\n    }\n  },\n  result: function result() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle$1(radius) {\n  return \"m0,\" + radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius + \"z\";\n}\n\nfunction geoPath(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      geoStream(object, projectionStream(contextStream));\n    }\n\n    return contextStream.result();\n  }\n\n  path.area = function (object) {\n    geoStream(object, projectionStream(areaStream$1));\n    return areaStream$1.result();\n  };\n\n  path.measure = function (object) {\n    geoStream(object, projectionStream(lengthStream$1));\n    return lengthStream$1.result();\n  };\n\n  path.bounds = function (object) {\n    geoStream(object, projectionStream(boundsStream$1));\n    return boundsStream$1.result();\n  };\n\n  path.centroid = function (object) {\n    geoStream(object, projectionStream(centroidStream$1));\n    return centroidStream$1.result();\n  };\n\n  path.projection = function (_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$6) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function (_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function (_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n\nfunction transformer$3(methods) {\n  return function (stream) {\n    var s = new TransformStream();\n\n    for (var key in methods) {\n      s[key] = methods[key];\n    }\n\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function point(x, y) {\n    this.stream.point(x, y);\n  },\n  sphere: function sphere() {\n    this.stream.sphere();\n  },\n  lineStart: function lineStart() {\n    this.stream.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this.stream.lineEnd();\n  },\n  polygonStart: function polygonStart() {\n    this.stream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    this.stream.polygonEnd();\n  }\n};\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream$1));\n  fitBounds(boundsStream$1.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nfunction fitExtent(projection, extent, object) {\n  return fit(projection, function (b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nfunction fitWidth(projection, width, object) {\n  return fit(projection, function (b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nfunction fitHeight(projection, height, object) {\n  return fit(projection, function (b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nvar maxDepth = 16,\n    // maximum depth of subdivision\ncosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nfunction resample(project, delta2) {\n  return +delta2 ? resample$1(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer$3({\n    point: function point(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample$1(project, delta2) {\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt$1(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon$1 || abs(lambda0 - lambda1) < epsilon$1 ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n      || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n        // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n\n  return function (stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n    lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        stream.polygonStart();\n        resampleStream.lineStart = ringStart;\n      },\n      polygonEnd: function polygonEnd() {\n        stream.polygonEnd();\n        resampleStream.lineStart = lineStart;\n      }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]),\n          p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n\nvar transformRadians = transformer$3({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer$3({\n    point: function point(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy) {\n  function transform$$1(x, y) {\n    return [dx + k * x, dy - k * y];\n  }\n\n  transform$$1.invert = function (x, y) {\n    return [(x - dx) / k, (dy - y) / k];\n  };\n\n  return transform$$1;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n\n  function transform$$1(x, y) {\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n\n  transform$$1.invert = function (x, y) {\n    return [ai * x - bi * y + ci, fi - bi * x - ai * y];\n  };\n\n  return transform$$1;\n}\n\nfunction projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\n\nfunction projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      // pre-rotate\n  alpha = 0,\n      // post-rotate\n  theta = null,\n      preclip = clipAntimeridian,\n      // pre-clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity$6,\n      // post-clip extent\n  delta2 = 0.5,\n      // precision\n  projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees$1, point[1] * degrees$1];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];\n  };\n\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function (width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function (height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),\n        transform$$1 = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform$$1);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n\nfunction mercatorRaw(lambda, phi) {\n  return [lambda, log$1(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function (x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nfunction geoMercator() {\n  return mercatorProjection(mercatorRaw).scale(961 / tau);\n}\n\nfunction mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null,\n      y0,\n      x1,\n      y1; // clip extent\n\n  m.scale = function (_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function (_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function (_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function (_) {\n    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n\nvar collectionUtils = createCommonjsModule(function (module) {\n  var utils = module.exports = {};\n  /**\n   * Loops through the collection and calls the callback for each element. if the callback returns truthy, the loop is broken and returns the same value.\n   * @public\n   * @param {*} collection The collection to loop through. Needs to have a length property set and have indices set from 0 to length - 1.\n   * @param {function} callback The callback to be called for each element. The element will be given as a parameter to the callback. If this callback returns truthy, the loop is broken and the same value is returned.\n   * @returns {*} The value that a callback has returned (if truthy). Otherwise nothing.\n   */\n\n  utils.forEach = function (collection, callback) {\n    for (var i = 0; i < collection.length; i++) {\n      var result = callback(collection[i]);\n\n      if (result) {\n        return result;\n      }\n    }\n  };\n});\n\nvar elementUtils = function elementUtils(options) {\n  var getState = options.stateHandler.getState;\n  /**\n   * Tells if the element has been made detectable and ready to be listened for resize events.\n   * @public\n   * @param {element} The element to check.\n   * @returns {boolean} True or false depending on if the element is detectable or not.\n   */\n\n  function isDetectable(element) {\n    var state = getState(element);\n    return state && !!state.isDetectable;\n  }\n  /**\n   * Marks the element that it has been made detectable and ready to be listened for resize events.\n   * @public\n   * @param {element} The element to mark.\n   */\n\n\n  function markAsDetectable(element) {\n    getState(element).isDetectable = true;\n  }\n  /**\n   * Tells if the element is busy or not.\n   * @public\n   * @param {element} The element to check.\n   * @returns {boolean} True or false depending on if the element is busy or not.\n   */\n\n\n  function isBusy(element) {\n    return !!getState(element).busy;\n  }\n  /**\n   * Marks the object is busy and should not be made detectable.\n   * @public\n   * @param {element} element The element to mark.\n   * @param {boolean} busy If the element is busy or not.\n   */\n\n\n  function markBusy(element, busy) {\n    getState(element).busy = !!busy;\n  }\n\n  return {\n    isDetectable: isDetectable,\n    markAsDetectable: markAsDetectable,\n    isBusy: isBusy,\n    markBusy: markBusy\n  };\n};\n\nvar listenerHandler = function listenerHandler(idHandler) {\n  var eventListeners = {};\n  /**\n   * Gets all listeners for the given element.\n   * @public\n   * @param {element} element The element to get all listeners for.\n   * @returns All listeners for the given element.\n   */\n\n  function getListeners(element) {\n    var id = idHandler.get(element);\n\n    if (id === undefined) {\n      return [];\n    }\n\n    return eventListeners[id] || [];\n  }\n  /**\n   * Stores the given listener for the given element. Will not actually add the listener to the element.\n   * @public\n   * @param {element} element The element that should have the listener added.\n   * @param {function} listener The callback that the element has added.\n   */\n\n\n  function addListener(element, listener) {\n    var id = idHandler.get(element);\n\n    if (!eventListeners[id]) {\n      eventListeners[id] = [];\n    }\n\n    eventListeners[id].push(listener);\n  }\n\n  function removeListener(element, listener) {\n    var listeners = getListeners(element);\n\n    for (var i = 0, len = listeners.length; i < len; ++i) {\n      if (listeners[i] === listener) {\n        listeners.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  function removeAllListeners(element) {\n    var listeners = getListeners(element);\n\n    if (!listeners) {\n      return;\n    }\n\n    listeners.length = 0;\n  }\n\n  return {\n    get: getListeners,\n    add: addListener,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners\n  };\n};\n\nvar idGenerator = function idGenerator() {\n  var idCount = 1;\n  /**\n   * Generates a new unique id in the context.\n   * @public\n   * @returns {number} A unique id in the context.\n   */\n\n  function generate() {\n    return idCount++;\n  }\n\n  return {\n    generate: generate\n  };\n};\n\nvar idHandler = function idHandler(options) {\n  var idGenerator = options.idGenerator;\n  var getState = options.stateHandler.getState;\n  /**\n   * Gets the resize detector id of the element.\n   * @public\n   * @param {element} element The target element to get the id of.\n   * @returns {string|number|null} The id of the element. Null if it has no id.\n   */\n\n  function getId(element) {\n    var state = getState(element);\n\n    if (state && state.id !== undefined) {\n      return state.id;\n    }\n\n    return null;\n  }\n  /**\n   * Sets the resize detector id of the element. Requires the element to have a resize detector state initialized.\n   * @public\n   * @param {element} element The target element to set the id of.\n   * @returns {string|number|null} The id of the element.\n   */\n\n\n  function setId(element) {\n    var state = getState(element);\n\n    if (!state) {\n      throw new Error(\"setId required the element to have a resize detection state.\");\n    }\n\n    var id = idGenerator.generate();\n    state.id = id;\n    return id;\n  }\n\n  return {\n    get: getId,\n    set: setId\n  };\n};\n/* global console: false */\n\n/**\n * Reporter that handles the reporting of logs, warnings and errors.\n * @public\n * @param {boolean} quiet Tells if the reporter should be quiet or not.\n */\n\n\nvar reporter = function reporter(quiet) {\n  function noop() {//Does nothing.\n  }\n\n  var reporter = {\n    log: noop,\n    warn: noop,\n    error: noop\n  };\n\n  if (!quiet && window.console) {\n    var attachFunction = function attachFunction(reporter, name) {\n      //The proxy is needed to be able to call the method with the console context,\n      //since we cannot use bind.\n      reporter[name] = function reporterProxy() {\n        var f = console[name];\n\n        if (f.apply) {\n          //IE9 does not support console.log.apply :)\n          f.apply(console, arguments);\n        } else {\n          for (var i = 0; i < arguments.length; i++) {\n            f(arguments[i]);\n          }\n        }\n      };\n    };\n\n    attachFunction(reporter, \"log\");\n    attachFunction(reporter, \"warn\");\n    attachFunction(reporter, \"error\");\n  }\n\n  return reporter;\n};\n\nvar browserDetector = createCommonjsModule(function (module) {\n  var detector = module.exports = {};\n\n  detector.isIE = function (version) {\n    function isAnyIeVersion() {\n      var agent = navigator.userAgent.toLowerCase();\n      return agent.indexOf(\"msie\") !== -1 || agent.indexOf(\"trident\") !== -1 || agent.indexOf(\" edge/\") !== -1;\n    }\n\n    if (!isAnyIeVersion()) {\n      return false;\n    }\n\n    if (!version) {\n      return true;\n    } //Shamelessly stolen from https://gist.github.com/padolsey/527683\n\n\n    var ieVersion = function () {\n      var undef,\n          v = 3,\n          div = document.createElement(\"div\"),\n          all = div.getElementsByTagName(\"i\");\n\n      do {\n        div.innerHTML = \"<!--[if gt IE \" + ++v + \"]><i></i><![endif]-->\";\n      } while (all[0]);\n\n      return v > 4 ? v : undef;\n    }();\n\n    return version === ieVersion;\n  };\n\n  detector.isLegacyOpera = function () {\n    return !!window.opera;\n  };\n});\nvar utils_1 = createCommonjsModule(function (module) {\n  var utils = module.exports = {};\n  utils.getOption = getOption;\n\n  function getOption(options, name, defaultValue) {\n    var value = options[name];\n\n    if ((value === undefined || value === null) && defaultValue !== undefined) {\n      return defaultValue;\n    }\n\n    return value;\n  }\n});\n\nvar batchProcessor = function batchProcessorMaker(options) {\n  options = options || {};\n  var reporter = options.reporter;\n  var asyncProcess = utils_1.getOption(options, \"async\", true);\n  var autoProcess = utils_1.getOption(options, \"auto\", true);\n\n  if (autoProcess && !asyncProcess) {\n    reporter && reporter.warn(\"Invalid options combination. auto=true and async=false is invalid. Setting async=true.\");\n    asyncProcess = true;\n  }\n\n  var batch = Batch();\n  var asyncFrameHandler;\n  var isProcessing = false;\n\n  function addFunction(level, fn) {\n    if (!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {\n      // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.\n      // This needs to be done before, since we're checking the size of the batch to be 0.\n      processBatchAsync();\n    }\n\n    batch.add(level, fn);\n  }\n\n  function processBatch() {\n    // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.\n    // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).\n    isProcessing = true;\n\n    while (batch.size()) {\n      var processingBatch = batch;\n      batch = Batch();\n      processingBatch.process();\n    }\n\n    isProcessing = false;\n  }\n\n  function forceProcessBatch(localAsyncProcess) {\n    if (isProcessing) {\n      return;\n    }\n\n    if (localAsyncProcess === undefined) {\n      localAsyncProcess = asyncProcess;\n    }\n\n    if (asyncFrameHandler) {\n      cancelFrame(asyncFrameHandler);\n      asyncFrameHandler = null;\n    }\n\n    if (localAsyncProcess) {\n      processBatchAsync();\n    } else {\n      processBatch();\n    }\n  }\n\n  function processBatchAsync() {\n    asyncFrameHandler = requestFrame(processBatch);\n  }\n\n  function cancelFrame(listener) {\n    // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n    var cancel = clearTimeout;\n    return cancel(listener);\n  }\n\n  function requestFrame(callback) {\n    // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };\n    var raf = function raf(fn) {\n      return setTimeout(fn, 0);\n    };\n\n    return raf(callback);\n  }\n\n  return {\n    add: addFunction,\n    force: forceProcessBatch\n  };\n};\n\nfunction Batch() {\n  var batch = {};\n  var size = 0;\n  var topLevel = 0;\n  var bottomLevel = 0;\n\n  function add(level, fn) {\n    if (!fn) {\n      fn = level;\n      level = 0;\n    }\n\n    if (level > topLevel) {\n      topLevel = level;\n    } else if (level < bottomLevel) {\n      bottomLevel = level;\n    }\n\n    if (!batch[level]) {\n      batch[level] = [];\n    }\n\n    batch[level].push(fn);\n    size++;\n  }\n\n  function process() {\n    for (var level = bottomLevel; level <= topLevel; level++) {\n      var fns = batch[level];\n\n      for (var i = 0; i < fns.length; i++) {\n        var fn = fns[i];\n        fn();\n      }\n    }\n  }\n\n  function getSize() {\n    return size;\n  }\n\n  return {\n    add: add,\n    process: process,\n    size: getSize\n  };\n}\n\nvar prop = \"_erd\";\n\nfunction initState(element) {\n  element[prop] = {};\n  return getState(element);\n}\n\nfunction getState(element) {\n  return element[prop];\n}\n\nfunction cleanState(element) {\n  delete element[prop];\n}\n\nvar stateHandler = {\n  initState: initState,\n  getState: getState,\n  cleanState: cleanState\n};\n\nvar object$2 = function object$2(options) {\n  options = options || {};\n  var reporter = options.reporter;\n  var batchProcessor = options.batchProcessor;\n  var getState = options.stateHandler.getState;\n\n  if (!reporter) {\n    throw new Error(\"Missing required dependency: reporter.\");\n  }\n  /**\n   * Adds a resize event listener to the element.\n   * @public\n   * @param {element} element The element that should have the listener added.\n   * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.\n   */\n\n\n  function addListener(element, listener) {\n    if (!getObject(element)) {\n      throw new Error(\"Element is not detectable by this strategy.\");\n    }\n\n    function listenerProxy() {\n      listener(element);\n    }\n\n    if (browserDetector.isIE(8)) {\n      //IE 8 does not support object, but supports the resize event directly on elements.\n      getState(element).object = {\n        proxy: listenerProxy\n      };\n      element.attachEvent(\"onresize\", listenerProxy);\n    } else {\n      var object = getObject(element);\n      object.contentDocument.defaultView.addEventListener(\"resize\", listenerProxy);\n    }\n  }\n  /**\n   * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.\n   * @private\n   * @param {object} options Optional options object.\n   * @param {element} element The element to make detectable\n   * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.\n   */\n\n\n  function makeDetectable(options, element, callback) {\n    if (!callback) {\n      callback = element;\n      element = options;\n      options = null;\n    }\n\n    options = options || {};\n    var debug = options.debug;\n\n    function injectObject(element, callback) {\n      var OBJECT_STYLE = \"display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; padding: 0; margin: 0; opacity: 0; z-index: -1000; pointer-events: none;\"; //The target element needs to be positioned (everything except static) so the absolute positioned object will be positioned relative to the target element.\n      // Position altering may be performed directly or on object load, depending on if style resolution is possible directly or not.\n\n      var positionCheckPerformed = false; // The element may not yet be attached to the DOM, and therefore the style object may be empty in some browsers.\n      // Since the style object is a reference, it will be updated as soon as the element is attached to the DOM.\n\n      var style = window.getComputedStyle(element);\n      var width = element.offsetWidth;\n      var height = element.offsetHeight;\n      getState(element).startSize = {\n        width: width,\n        height: height\n      };\n\n      function mutateDom() {\n        function alterPositionStyles() {\n          if (style.position === \"static\") {\n            element.style.position = \"relative\";\n\n            var removeRelativeStyles = function removeRelativeStyles(reporter, element, style, property) {\n              function getNumericalValue(value) {\n                return value.replace(/[^-\\d\\.]/g, \"\");\n              }\n\n              var value = style[property];\n\n              if (value !== \"auto\" && getNumericalValue(value) !== \"0\") {\n                reporter.warn(\"An element that is positioned static has style.\" + property + \"=\" + value + \" which is ignored due to the static positioning. The element will need to be positioned relative, so the style.\" + property + \" will be set to 0. Element: \", element);\n                element.style[property] = 0;\n              }\n            }; //Check so that there are no accidental styles that will make the element styled differently now that is is relative.\n            //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).\n\n\n            removeRelativeStyles(reporter, element, style, \"top\");\n            removeRelativeStyles(reporter, element, style, \"right\");\n            removeRelativeStyles(reporter, element, style, \"bottom\");\n            removeRelativeStyles(reporter, element, style, \"left\");\n          }\n        }\n\n        function onObjectLoad() {\n          // The object has been loaded, which means that the element now is guaranteed to be attached to the DOM.\n          if (!positionCheckPerformed) {\n            alterPositionStyles();\n          }\n          /*jshint validthis: true */\n\n\n          function getDocument(element, callback) {\n            //Opera 12 seem to call the object.onload before the actual document has been created.\n            //So if it is not present, poll it with an timeout until it is present.\n            //TODO: Could maybe be handled better with object.onreadystatechange or similar.\n            if (!element.contentDocument) {\n              setTimeout(function checkForObjectDocument() {\n                getDocument(element, callback);\n              }, 100);\n              return;\n            }\n\n            callback(element.contentDocument);\n          } //Mutating the object element here seems to fire another load event.\n          //Mutating the inner document of the object element is fine though.\n\n\n          var objectElement = this; //Create the style element to be added to the object.\n\n          getDocument(objectElement, function onObjectDocumentReady(objectDocument) {\n            //Notify that the element is ready to be listened to.\n            callback(element);\n          });\n        } // The element may be detached from the DOM, and some browsers does not support style resolving of detached elements.\n        // The alterPositionStyles needs to be delayed until we know the element has been attached to the DOM (which we are sure of when the onObjectLoad has been fired), if style resolution is not possible.\n\n\n        if (style.position !== \"\") {\n          alterPositionStyles(style);\n          positionCheckPerformed = true;\n        } //Add an object element as a child to the target element that will be listened to for resize events.\n\n\n        var object = document.createElement(\"object\");\n        object.style.cssText = OBJECT_STYLE;\n        object.tabIndex = -1;\n        object.type = \"text/html\";\n        object.setAttribute(\"aria-hidden\", \"true\");\n        object.onload = onObjectLoad; //Safari: This must occur before adding the object to the DOM.\n        //IE: Does not like that this happens before, even if it is also added after.\n\n        if (!browserDetector.isIE()) {\n          object.data = \"about:blank\";\n        }\n\n        element.appendChild(object);\n        getState(element).object = object; //IE: This must occur after adding the object to the DOM.\n\n        if (browserDetector.isIE()) {\n          object.data = \"about:blank\";\n        }\n      }\n\n      if (batchProcessor) {\n        batchProcessor.add(mutateDom);\n      } else {\n        mutateDom();\n      }\n    }\n\n    if (browserDetector.isIE(8)) {\n      //IE 8 does not support objects properly. Luckily they do support the resize event.\n      //So do not inject the object and notify that the element is already ready to be listened to.\n      //The event handler for the resize event is attached in the utils.addListener instead.\n      callback(element);\n    } else {\n      injectObject(element, callback);\n    }\n  }\n  /**\n   * Returns the child object of the target element.\n   * @private\n   * @param {element} element The target element.\n   * @returns The object element of the target.\n   */\n\n\n  function getObject(element) {\n    return getState(element).object;\n  }\n\n  function uninstall(element) {\n    if (browserDetector.isIE(8)) {\n      element.detachEvent(\"onresize\", getState(element).object.proxy);\n    } else {\n      element.removeChild(getObject(element));\n    }\n\n    delete getState(element).object;\n  }\n\n  return {\n    makeDetectable: makeDetectable,\n    addListener: addListener,\n    uninstall: uninstall\n  };\n};\n\nvar forEach = collectionUtils.forEach;\n\nvar scroll = function scroll(options) {\n  options = options || {};\n  var reporter = options.reporter;\n  var batchProcessor = options.batchProcessor;\n  var getState = options.stateHandler.getState;\n  var hasState = options.stateHandler.hasState;\n  var idHandler = options.idHandler;\n\n  if (!batchProcessor) {\n    throw new Error(\"Missing required dependency: batchProcessor\");\n  }\n\n  if (!reporter) {\n    throw new Error(\"Missing required dependency: reporter.\");\n  } //TODO: Could this perhaps be done at installation time?\n\n\n  var scrollbarSizes = getScrollbarSizes(); // Inject the scrollbar styling that prevents them from appearing sometimes in Chrome.\n  // The injected container needs to have a class, so that it may be styled with CSS (pseudo elements).\n\n  var styleId = \"erd_scroll_detection_scrollbar_style\";\n  var detectionContainerClass = \"erd_scroll_detection_container\";\n  injectScrollStyle(styleId, detectionContainerClass);\n\n  function getScrollbarSizes() {\n    var width = 500;\n    var height = 500;\n    var child = document.createElement(\"div\");\n    child.style.cssText = \"position: absolute; width: \" + width * 2 + \"px; height: \" + height * 2 + \"px; visibility: hidden; margin: 0; padding: 0;\";\n    var container = document.createElement(\"div\");\n    container.style.cssText = \"position: absolute; width: \" + width + \"px; height: \" + height + \"px; overflow: scroll; visibility: none; top: \" + -width * 3 + \"px; left: \" + -height * 3 + \"px; visibility: hidden; margin: 0; padding: 0;\";\n    container.appendChild(child);\n    document.body.insertBefore(container, document.body.firstChild);\n    var widthSize = width - container.clientWidth;\n    var heightSize = height - container.clientHeight;\n    document.body.removeChild(container);\n    return {\n      width: widthSize,\n      height: heightSize\n    };\n  }\n\n  function injectScrollStyle(styleId, containerClass) {\n    function injectStyle(style, method) {\n      method = method || function (element) {\n        document.head.appendChild(element);\n      };\n\n      var styleElement = document.createElement(\"style\");\n      styleElement.innerHTML = style;\n      styleElement.id = styleId;\n      method(styleElement);\n      return styleElement;\n    }\n\n    if (!document.getElementById(styleId)) {\n      var containerAnimationClass = containerClass + \"_animation\";\n      var containerAnimationActiveClass = containerClass + \"_animation_active\";\n      var style = \"/* Created by the element-resize-detector library. */\\n\";\n      style += \".\" + containerClass + \" > div::-webkit-scrollbar { display: none; }\\n\\n\";\n      style += \".\" + containerAnimationActiveClass + \" { -webkit-animation-duration: 0.1s; animation-duration: 0.1s; -webkit-animation-name: \" + containerAnimationClass + \"; animation-name: \" + containerAnimationClass + \"; }\\n\";\n      style += \"@-webkit-keyframes \" + containerAnimationClass + \" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\\n\";\n      style += \"@keyframes \" + containerAnimationClass + \" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\";\n      injectStyle(style);\n    }\n  }\n\n  function addAnimationClass(element) {\n    element.className += \" \" + detectionContainerClass + \"_animation_active\";\n  }\n\n  function addEvent(el, name, cb) {\n    if (el.addEventListener) {\n      el.addEventListener(name, cb);\n    } else if (el.attachEvent) {\n      el.attachEvent(\"on\" + name, cb);\n    } else {\n      return reporter.error(\"[scroll] Don't know how to add event listeners.\");\n    }\n  }\n\n  function removeEvent(el, name, cb) {\n    if (el.removeEventListener) {\n      el.removeEventListener(name, cb);\n    } else if (el.detachEvent) {\n      el.detachEvent(\"on\" + name, cb);\n    } else {\n      return reporter.error(\"[scroll] Don't know how to remove event listeners.\");\n    }\n  }\n\n  function getExpandElement(element) {\n    return getState(element).container.childNodes[0].childNodes[0].childNodes[0];\n  }\n\n  function getShrinkElement(element) {\n    return getState(element).container.childNodes[0].childNodes[0].childNodes[1];\n  }\n  /**\n   * Adds a resize event listener to the element.\n   * @public\n   * @param {element} element The element that should have the listener added.\n   * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.\n   */\n\n\n  function addListener(element, listener) {\n    var listeners = getState(element).listeners;\n\n    if (!listeners.push) {\n      throw new Error(\"Cannot add listener to an element that is not detectable.\");\n    }\n\n    getState(element).listeners.push(listener);\n  }\n  /**\n   * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.\n   * @private\n   * @param {object} options Optional options object.\n   * @param {element} element The element to make detectable\n   * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.\n   */\n\n\n  function makeDetectable(options, element, callback) {\n    if (!callback) {\n      callback = element;\n      element = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    function debug() {\n      if (options.debug) {\n        var args = Array.prototype.slice.call(arguments);\n        args.unshift(idHandler.get(element), \"Scroll: \");\n\n        if (reporter.log.apply) {\n          reporter.log.apply(null, args);\n        } else {\n          for (var i = 0; i < args.length; i++) {\n            reporter.log(args[i]);\n          }\n        }\n      }\n    }\n\n    function isDetached(element) {\n      function isInDocument(element) {\n        return element === element.ownerDocument.body || element.ownerDocument.body.contains(element);\n      }\n\n      if (!isInDocument(element)) {\n        return true;\n      } // FireFox returns null style in hidden iframes. See https://github.com/wnr/element-resize-detector/issues/68 and https://bugzilla.mozilla.org/show_bug.cgi?id=795520\n\n\n      if (window.getComputedStyle(element) === null) {\n        return true;\n      }\n\n      return false;\n    }\n\n    function isUnrendered(element) {\n      // Check the absolute positioned container since the top level container is display: inline.\n      var container = getState(element).container.childNodes[0];\n      var style = window.getComputedStyle(container);\n      return !style.width || style.width.indexOf(\"px\") === -1; //Can only compute pixel value when rendered.\n    }\n\n    function getStyle() {\n      // Some browsers only force layouts when actually reading the style properties of the style object, so make sure that they are all read here,\n      // so that the user of the function can be sure that it will perform the layout here, instead of later (important for batching).\n      var elementStyle = window.getComputedStyle(element);\n      var style = {};\n      style.position = elementStyle.position;\n      style.width = element.offsetWidth;\n      style.height = element.offsetHeight;\n      style.top = elementStyle.top;\n      style.right = elementStyle.right;\n      style.bottom = elementStyle.bottom;\n      style.left = elementStyle.left;\n      style.widthCSS = elementStyle.width;\n      style.heightCSS = elementStyle.height;\n      return style;\n    }\n\n    function storeStartSize() {\n      var style = getStyle();\n      getState(element).startSize = {\n        width: style.width,\n        height: style.height\n      };\n      debug(\"Element start size\", getState(element).startSize);\n    }\n\n    function initListeners() {\n      getState(element).listeners = [];\n    }\n\n    function storeStyle() {\n      debug(\"storeStyle invoked.\");\n\n      if (!getState(element)) {\n        debug(\"Aborting because element has been uninstalled\");\n        return;\n      }\n\n      var style = getStyle();\n      getState(element).style = style;\n    }\n\n    function storeCurrentSize(element, width, height) {\n      getState(element).lastWidth = width;\n      getState(element).lastHeight = height;\n    }\n\n    function getExpandChildElement(element) {\n      return getExpandElement(element).childNodes[0];\n    }\n\n    function getWidthOffset() {\n      return 2 * scrollbarSizes.width + 1;\n    }\n\n    function getHeightOffset() {\n      return 2 * scrollbarSizes.height + 1;\n    }\n\n    function getExpandWidth(width) {\n      return width + 10 + getWidthOffset();\n    }\n\n    function getExpandHeight(height) {\n      return height + 10 + getHeightOffset();\n    }\n\n    function getShrinkWidth(width) {\n      return width * 2 + getWidthOffset();\n    }\n\n    function getShrinkHeight(height) {\n      return height * 2 + getHeightOffset();\n    }\n\n    function positionScrollbars(element, width, height) {\n      var expand = getExpandElement(element);\n      var shrink = getShrinkElement(element);\n      var expandWidth = getExpandWidth(width);\n      var expandHeight = getExpandHeight(height);\n      var shrinkWidth = getShrinkWidth(width);\n      var shrinkHeight = getShrinkHeight(height);\n      expand.scrollLeft = expandWidth;\n      expand.scrollTop = expandHeight;\n      shrink.scrollLeft = shrinkWidth;\n      shrink.scrollTop = shrinkHeight;\n    }\n\n    function injectContainerElement() {\n      var container = getState(element).container;\n\n      if (!container) {\n        container = document.createElement(\"div\");\n        container.className = detectionContainerClass;\n        container.style.cssText = \"visibility: hidden; display: inline; width: 0px; height: 0px; z-index: -1; overflow: hidden; margin: 0; padding: 0;\";\n        getState(element).container = container;\n        addAnimationClass(container);\n        element.appendChild(container);\n\n        var onAnimationStart = function onAnimationStart() {\n          getState(element).onRendered && getState(element).onRendered();\n        };\n\n        addEvent(container, \"animationstart\", onAnimationStart); // Store the event handler here so that they may be removed when uninstall is called.\n        // See uninstall function for an explanation why it is needed.\n\n        getState(element).onAnimationStart = onAnimationStart;\n      }\n\n      return container;\n    }\n\n    function injectScrollElements() {\n      function alterPositionStyles() {\n        var style = getState(element).style;\n\n        if (style.position === \"static\") {\n          element.style.position = \"relative\";\n\n          var removeRelativeStyles = function removeRelativeStyles(reporter, element, style, property) {\n            function getNumericalValue(value) {\n              return value.replace(/[^-\\d\\.]/g, \"\");\n            }\n\n            var value = style[property];\n\n            if (value !== \"auto\" && getNumericalValue(value) !== \"0\") {\n              reporter.warn(\"An element that is positioned static has style.\" + property + \"=\" + value + \" which is ignored due to the static positioning. The element will need to be positioned relative, so the style.\" + property + \" will be set to 0. Element: \", element);\n              element.style[property] = 0;\n            }\n          }; //Check so that there are no accidental styles that will make the element styled differently now that is is relative.\n          //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).\n\n\n          removeRelativeStyles(reporter, element, style, \"top\");\n          removeRelativeStyles(reporter, element, style, \"right\");\n          removeRelativeStyles(reporter, element, style, \"bottom\");\n          removeRelativeStyles(reporter, element, style, \"left\");\n        }\n      }\n\n      function getLeftTopBottomRightCssText(left, top, bottom, right) {\n        left = !left ? \"0\" : left + \"px\";\n        top = !top ? \"0\" : top + \"px\";\n        bottom = !bottom ? \"0\" : bottom + \"px\";\n        right = !right ? \"0\" : right + \"px\";\n        return \"left: \" + left + \"; top: \" + top + \"; right: \" + right + \"; bottom: \" + bottom + \";\";\n      }\n\n      debug(\"Injecting elements\");\n\n      if (!getState(element)) {\n        debug(\"Aborting because element has been uninstalled\");\n        return;\n      }\n\n      alterPositionStyles();\n      var rootContainer = getState(element).container;\n\n      if (!rootContainer) {\n        rootContainer = injectContainerElement();\n      } // Due to this WebKit bug https://bugs.webkit.org/show_bug.cgi?id=80808 (currently fixed in Blink, but still present in WebKit browsers such as Safari),\n      // we need to inject two containers, one that is width/height 100% and another that is left/top -1px so that the final container always is 1x1 pixels bigger than\n      // the targeted element.\n      // When the bug is resolved, \"containerContainer\" may be removed.\n      // The outer container can occasionally be less wide than the targeted when inside inline elements element in WebKit (see https://bugs.webkit.org/show_bug.cgi?id=152980).\n      // This should be no problem since the inner container either way makes sure the injected scroll elements are at least 1x1 px.\n\n\n      var scrollbarWidth = scrollbarSizes.width;\n      var scrollbarHeight = scrollbarSizes.height;\n      var containerContainerStyle = \"position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; width: 100%; height: 100%; left: 0px; top: 0px;\";\n      var containerStyle = \"position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; \" + getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth);\n      var expandStyle = \"position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;\";\n      var shrinkStyle = \"position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;\";\n      var expandChildStyle = \"position: absolute; left: 0; top: 0;\";\n      var shrinkChildStyle = \"position: absolute; width: 200%; height: 200%;\";\n      var containerContainer = document.createElement(\"div\");\n      var container = document.createElement(\"div\");\n      var expand = document.createElement(\"div\");\n      var expandChild = document.createElement(\"div\");\n      var shrink = document.createElement(\"div\");\n      var shrinkChild = document.createElement(\"div\"); // Some browsers choke on the resize system being rtl, so force it to ltr. https://github.com/wnr/element-resize-detector/issues/56\n      // However, dir should not be set on the top level container as it alters the dimensions of the target element in some browsers.\n\n      containerContainer.dir = \"ltr\";\n      containerContainer.style.cssText = containerContainerStyle;\n      containerContainer.className = detectionContainerClass;\n      container.className = detectionContainerClass;\n      container.style.cssText = containerStyle;\n      expand.style.cssText = expandStyle;\n      expandChild.style.cssText = expandChildStyle;\n      shrink.style.cssText = shrinkStyle;\n      shrinkChild.style.cssText = shrinkChildStyle;\n      expand.appendChild(expandChild);\n      shrink.appendChild(shrinkChild);\n      container.appendChild(expand);\n      container.appendChild(shrink);\n      containerContainer.appendChild(container);\n      rootContainer.appendChild(containerContainer);\n\n      function onExpandScroll() {\n        getState(element).onExpand && getState(element).onExpand();\n      }\n\n      function onShrinkScroll() {\n        getState(element).onShrink && getState(element).onShrink();\n      }\n\n      addEvent(expand, \"scroll\", onExpandScroll);\n      addEvent(shrink, \"scroll\", onShrinkScroll); // Store the event handlers here so that they may be removed when uninstall is called.\n      // See uninstall function for an explanation why it is needed.\n\n      getState(element).onExpandScroll = onExpandScroll;\n      getState(element).onShrinkScroll = onShrinkScroll;\n    }\n\n    function registerListenersAndPositionElements() {\n      function updateChildSizes(element, width, height) {\n        var expandChild = getExpandChildElement(element);\n        var expandWidth = getExpandWidth(width);\n        var expandHeight = getExpandHeight(height);\n        expandChild.style.width = expandWidth + \"px\";\n        expandChild.style.height = expandHeight + \"px\";\n      }\n\n      function updateDetectorElements(done) {\n        var width = element.offsetWidth;\n        var height = element.offsetHeight;\n        debug(\"Storing current size\", width, height); // Store the size of the element sync here, so that multiple scroll events may be ignored in the event listeners.\n        // Otherwise the if-check in handleScroll is useless.\n\n        storeCurrentSize(element, width, height); // Since we delay the processing of the batch, there is a risk that uninstall has been called before the batch gets to execute.\n        // Since there is no way to cancel the fn executions, we need to add an uninstall guard to all fns of the batch.\n\n        batchProcessor.add(0, function performUpdateChildSizes() {\n          if (!getState(element)) {\n            debug(\"Aborting because element has been uninstalled\");\n            return;\n          }\n\n          if (!areElementsInjected()) {\n            debug(\"Aborting because element container has not been initialized\");\n            return;\n          }\n\n          if (options.debug) {\n            var w = element.offsetWidth;\n            var h = element.offsetHeight;\n\n            if (w !== width || h !== height) {\n              reporter.warn(idHandler.get(element), \"Scroll: Size changed before updating detector elements.\");\n            }\n          }\n\n          updateChildSizes(element, width, height);\n        });\n        batchProcessor.add(1, function updateScrollbars() {\n          if (!getState(element)) {\n            debug(\"Aborting because element has been uninstalled\");\n            return;\n          }\n\n          if (!areElementsInjected()) {\n            debug(\"Aborting because element container has not been initialized\");\n            return;\n          }\n\n          positionScrollbars(element, width, height);\n        });\n\n        if (done) {\n          batchProcessor.add(2, function () {\n            if (!getState(element)) {\n              debug(\"Aborting because element has been uninstalled\");\n              return;\n            }\n\n            if (!areElementsInjected()) {\n              debug(\"Aborting because element container has not been initialized\");\n              return;\n            }\n\n            done();\n          });\n        }\n      }\n\n      function areElementsInjected() {\n        return !!getState(element).container;\n      }\n\n      function notifyListenersIfNeeded() {\n        function isFirstNotify() {\n          return getState(element).lastNotifiedWidth === undefined;\n        }\n\n        debug(\"notifyListenersIfNeeded invoked\");\n        var state = getState(element); // Don't notify the if the current size is the start size, and this is the first notification.\n\n        if (isFirstNotify() && state.lastWidth === state.startSize.width && state.lastHeight === state.startSize.height) {\n          return debug(\"Not notifying: Size is the same as the start size, and there has been no notification yet.\");\n        } // Don't notify if the size already has been notified.\n\n\n        if (state.lastWidth === state.lastNotifiedWidth && state.lastHeight === state.lastNotifiedHeight) {\n          return debug(\"Not notifying: Size already notified\");\n        }\n\n        debug(\"Current size not notified, notifying...\");\n        state.lastNotifiedWidth = state.lastWidth;\n        state.lastNotifiedHeight = state.lastHeight;\n        forEach(getState(element).listeners, function (listener) {\n          listener(element);\n        });\n      }\n\n      function handleRender() {\n        debug(\"startanimation triggered.\");\n\n        if (isUnrendered(element)) {\n          debug(\"Ignoring since element is still unrendered...\");\n          return;\n        }\n\n        debug(\"Element rendered.\");\n        var expand = getExpandElement(element);\n        var shrink = getShrinkElement(element);\n\n        if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {\n          debug(\"Scrollbars out of sync. Updating detector elements...\");\n          updateDetectorElements(notifyListenersIfNeeded);\n        }\n      }\n\n      function handleScroll() {\n        debug(\"Scroll detected.\");\n\n        if (isUnrendered(element)) {\n          // Element is still unrendered. Skip this scroll event.\n          debug(\"Scroll event fired while unrendered. Ignoring...\");\n          return;\n        }\n\n        var width = element.offsetWidth;\n        var height = element.offsetHeight;\n\n        if (width !== getState(element).lastWidth || height !== getState(element).lastHeight) {\n          debug(\"Element size changed.\");\n          updateDetectorElements(notifyListenersIfNeeded);\n        } else {\n          debug(\"Element size has not changed (\" + width + \"x\" + height + \").\");\n        }\n      }\n\n      debug(\"registerListenersAndPositionElements invoked.\");\n\n      if (!getState(element)) {\n        debug(\"Aborting because element has been uninstalled\");\n        return;\n      }\n\n      getState(element).onRendered = handleRender;\n      getState(element).onExpand = handleScroll;\n      getState(element).onShrink = handleScroll;\n      var style = getState(element).style;\n      updateChildSizes(element, style.width, style.height);\n    }\n\n    function finalizeDomMutation() {\n      debug(\"finalizeDomMutation invoked.\");\n\n      if (!getState(element)) {\n        debug(\"Aborting because element has been uninstalled\");\n        return;\n      }\n\n      var style = getState(element).style;\n      storeCurrentSize(element, style.width, style.height);\n      positionScrollbars(element, style.width, style.height);\n    }\n\n    function ready() {\n      callback(element);\n    }\n\n    function install() {\n      debug(\"Installing...\");\n      initListeners();\n      storeStartSize();\n      batchProcessor.add(0, storeStyle);\n      batchProcessor.add(1, injectScrollElements);\n      batchProcessor.add(2, registerListenersAndPositionElements);\n      batchProcessor.add(3, finalizeDomMutation);\n      batchProcessor.add(4, ready);\n    }\n\n    debug(\"Making detectable...\");\n\n    if (isDetached(element)) {\n      debug(\"Element is detached\");\n      injectContainerElement();\n      debug(\"Waiting until element is attached...\");\n\n      getState(element).onRendered = function () {\n        debug(\"Element is now attached\");\n        install();\n      };\n    } else {\n      install();\n    }\n  }\n\n  function uninstall(element) {\n    var state = getState(element);\n\n    if (!state) {\n      // Uninstall has been called on a non-erd element.\n      return;\n    } // Uninstall may have been called in the following scenarios:\n    // (1) Right between the sync code and async batch (here state.busy = true, but nothing have been registered or injected).\n    // (2) In the ready callback of the last level of the batch by another element (here, state.busy = true, but all the stuff has been injected).\n    // (3) After the installation process (here, state.busy = false and all the stuff has been injected).\n    // So to be on the safe side, let's check for each thing before removing.\n    // We need to remove the event listeners, because otherwise the event might fire on an uninstall element which results in an error when trying to get the state of the element.\n\n\n    state.onExpandScroll && removeEvent(getExpandElement(element), \"scroll\", state.onExpandScroll);\n    state.onShrinkScroll && removeEvent(getShrinkElement(element), \"scroll\", state.onShrinkScroll);\n    state.onAnimationStart && removeEvent(state.container, \"animationstart\", state.onAnimationStart);\n    state.container && element.removeChild(state.container);\n  }\n\n  return {\n    makeDetectable: makeDetectable,\n    addListener: addListener,\n    uninstall: uninstall\n  };\n};\n\nvar forEach$1 = collectionUtils.forEach; //Detection strategies.\n\nfunction isCollection(obj) {\n  return Array.isArray(obj) || obj.length !== undefined;\n}\n\nfunction toArray$1(collection) {\n  if (!Array.isArray(collection)) {\n    var array = [];\n    forEach$1(collection, function (obj) {\n      array.push(obj);\n    });\n    return array;\n  } else {\n    return collection;\n  }\n}\n\nfunction isElement(obj) {\n  return obj && obj.nodeType === 1;\n}\n/**\n * @typedef idHandler\n * @type {object}\n * @property {function} get Gets the resize detector id of the element.\n * @property {function} set Generate and sets the resize detector id of the element.\n */\n\n/**\n * @typedef Options\n * @type {object}\n * @property {boolean} callOnAdd    Determines if listeners should be called when they are getting added.\n                                    Default is true. If true, the listener is guaranteed to be called when it has been added.\n                                    If false, the listener will not be guarenteed to be called when it has been added (does not prevent it from being called).\n * @property {idHandler} idHandler  A custom id handler that is responsible for generating, setting and retrieving id's for elements.\n                                    If not provided, a default id handler will be used.\n * @property {reporter} reporter    A custom reporter that handles reporting logs, warnings and errors.\n                                    If not provided, a default id handler will be used.\n                                    If set to false, then nothing will be reported.\n * @property {boolean} debug        If set to true, the the system will report debug messages as default for the listenTo method.\n */\n\n/**\n * Creates an element resize detector instance.\n * @public\n * @param {Options?} options Optional global options object that will decide how this instance will work.\n */\n\n\nvar elementResizeDetector = function elementResizeDetector(options) {\n  options = options || {}; //idHandler is currently not an option to the listenTo function, so it should not be added to globalOptions.\n\n  var idHandler$$1;\n\n  if (options.idHandler) {\n    // To maintain compatability with idHandler.get(element, readonly), make sure to wrap the given idHandler\n    // so that readonly flag always is true when it's used here. This may be removed next major version bump.\n    idHandler$$1 = {\n      get: function get(element) {\n        return options.idHandler.get(element, true);\n      },\n      set: options.idHandler.set\n    };\n  } else {\n    var idGenerator$$1 = idGenerator();\n    var defaultIdHandler = idHandler({\n      idGenerator: idGenerator$$1,\n      stateHandler: stateHandler\n    });\n    idHandler$$1 = defaultIdHandler;\n  } //reporter is currently not an option to the listenTo function, so it should not be added to globalOptions.\n\n\n  var reporter$$1 = options.reporter;\n\n  if (!reporter$$1) {\n    //If options.reporter is false, then the reporter should be quiet.\n    var quiet = reporter$$1 === false;\n    reporter$$1 = reporter(quiet);\n  } //batchProcessor is currently not an option to the listenTo function, so it should not be added to globalOptions.\n\n\n  var batchProcessor$$1 = getOption(options, \"batchProcessor\", batchProcessor({\n    reporter: reporter$$1\n  })); //Options to be used as default for the listenTo function.\n\n  var globalOptions = {};\n  globalOptions.callOnAdd = !!getOption(options, \"callOnAdd\", true);\n  globalOptions.debug = !!getOption(options, \"debug\", false);\n  var eventListenerHandler = listenerHandler(idHandler$$1);\n  var elementUtils$$1 = elementUtils({\n    stateHandler: stateHandler\n  }); //The detection strategy to be used.\n\n  var detectionStrategy;\n  var desiredStrategy = getOption(options, \"strategy\", \"object\");\n  var strategyOptions = {\n    reporter: reporter$$1,\n    batchProcessor: batchProcessor$$1,\n    stateHandler: stateHandler,\n    idHandler: idHandler$$1\n  };\n\n  if (desiredStrategy === \"scroll\") {\n    if (browserDetector.isLegacyOpera()) {\n      reporter$$1.warn(\"Scroll strategy is not supported on legacy Opera. Changing to object strategy.\");\n      desiredStrategy = \"object\";\n    } else if (browserDetector.isIE(9)) {\n      reporter$$1.warn(\"Scroll strategy is not supported on IE9. Changing to object strategy.\");\n      desiredStrategy = \"object\";\n    }\n  }\n\n  if (desiredStrategy === \"scroll\") {\n    detectionStrategy = scroll(strategyOptions);\n  } else if (desiredStrategy === \"object\") {\n    detectionStrategy = object$2(strategyOptions);\n  } else {\n    throw new Error(\"Invalid strategy name: \" + desiredStrategy);\n  } //Calls can be made to listenTo with elements that are still being installed.\n  //Also, same elements can occur in the elements list in the listenTo function.\n  //With this map, the ready callbacks can be synchronized between the calls\n  //so that the ready callback can always be called when an element is ready - even if\n  //it wasn't installed from the function itself.\n\n\n  var onReadyCallbacks = {};\n  /**\n   * Makes the given elements resize-detectable and starts listening to resize events on the elements. Calls the event callback for each event for each element.\n   * @public\n   * @param {Options?} options Optional options object. These options will override the global options. Some options may not be overriden, such as idHandler.\n   * @param {element[]|element} elements The given array of elements to detect resize events of. Single element is also valid.\n   * @param {function} listener The callback to be executed for each resize event for each element.\n   */\n\n  function listenTo(options, elements, listener) {\n    function onResizeCallback(element) {\n      var listeners = eventListenerHandler.get(element);\n      forEach$1(listeners, function callListenerProxy(listener) {\n        listener(element);\n      });\n    }\n\n    function addListener(callOnAdd, element, listener) {\n      eventListenerHandler.add(element, listener);\n\n      if (callOnAdd) {\n        listener(element);\n      }\n    } //Options object may be omitted.\n\n\n    if (!listener) {\n      listener = elements;\n      elements = options;\n      options = {};\n    }\n\n    if (!elements) {\n      throw new Error(\"At least one element required.\");\n    }\n\n    if (!listener) {\n      throw new Error(\"Listener required.\");\n    }\n\n    if (isElement(elements)) {\n      // A single element has been passed in.\n      elements = [elements];\n    } else if (isCollection(elements)) {\n      // Convert collection to array for plugins.\n      // TODO: May want to check so that all the elements in the collection are valid elements.\n      elements = toArray$1(elements);\n    } else {\n      return reporter$$1.error(\"Invalid arguments. Must be a DOM element or a collection of DOM elements.\");\n    }\n\n    var elementsReady = 0;\n    var callOnAdd = getOption(options, \"callOnAdd\", globalOptions.callOnAdd);\n    var onReadyCallback = getOption(options, \"onReady\", function noop() {});\n    var debug = getOption(options, \"debug\", globalOptions.debug);\n    forEach$1(elements, function attachListenerToElement(element) {\n      if (!stateHandler.getState(element)) {\n        stateHandler.initState(element);\n        idHandler$$1.set(element);\n      }\n\n      var id = idHandler$$1.get(element);\n      debug && reporter$$1.log(\"Attaching listener to element\", id, element);\n\n      if (!elementUtils$$1.isDetectable(element)) {\n        debug && reporter$$1.log(id, \"Not detectable.\");\n\n        if (elementUtils$$1.isBusy(element)) {\n          debug && reporter$$1.log(id, \"System busy making it detectable\"); //The element is being prepared to be detectable. Do not make it detectable.\n          //Just add the listener, because the element will soon be detectable.\n\n          addListener(callOnAdd, element, listener);\n          onReadyCallbacks[id] = onReadyCallbacks[id] || [];\n          onReadyCallbacks[id].push(function onReady() {\n            elementsReady++;\n\n            if (elementsReady === elements.length) {\n              onReadyCallback();\n            }\n          });\n          return;\n        }\n\n        debug && reporter$$1.log(id, \"Making detectable...\"); //The element is not prepared to be detectable, so do prepare it and add a listener to it.\n\n        elementUtils$$1.markBusy(element, true);\n        return detectionStrategy.makeDetectable({\n          debug: debug\n        }, element, function onElementDetectable(element) {\n          debug && reporter$$1.log(id, \"onElementDetectable\");\n\n          if (stateHandler.getState(element)) {\n            elementUtils$$1.markAsDetectable(element);\n            elementUtils$$1.markBusy(element, false);\n            detectionStrategy.addListener(element, onResizeCallback);\n            addListener(callOnAdd, element, listener); // Since the element size might have changed since the call to \"listenTo\", we need to check for this change,\n            // so that a resize event may be emitted.\n            // Having the startSize object is optional (since it does not make sense in some cases such as unrendered elements), so check for its existance before.\n            // Also, check the state existance before since the element may have been uninstalled in the installation process.\n\n            var state = stateHandler.getState(element);\n\n            if (state && state.startSize) {\n              var width = element.offsetWidth;\n              var height = element.offsetHeight;\n\n              if (state.startSize.width !== width || state.startSize.height !== height) {\n                onResizeCallback(element);\n              }\n            }\n\n            if (onReadyCallbacks[id]) {\n              forEach$1(onReadyCallbacks[id], function (callback) {\n                callback();\n              });\n            }\n          } else {\n            // The element has been unisntalled before being detectable.\n            debug && reporter$$1.log(id, \"Element uninstalled before being detectable.\");\n          }\n\n          delete onReadyCallbacks[id];\n          elementsReady++;\n\n          if (elementsReady === elements.length) {\n            onReadyCallback();\n          }\n        });\n      }\n\n      debug && reporter$$1.log(id, \"Already detecable, adding listener.\"); //The element has been prepared to be detectable and is ready to be listened to.\n\n      addListener(callOnAdd, element, listener);\n      elementsReady++;\n    });\n\n    if (elementsReady === elements.length) {\n      onReadyCallback();\n    }\n  }\n\n  function uninstall(elements) {\n    if (!elements) {\n      return reporter$$1.error(\"At least one element is required.\");\n    }\n\n    if (isElement(elements)) {\n      // A single element has been passed in.\n      elements = [elements];\n    } else if (isCollection(elements)) {\n      // Convert collection to array for plugins.\n      // TODO: May want to check so that all the elements in the collection are valid elements.\n      elements = toArray$1(elements);\n    } else {\n      return reporter$$1.error(\"Invalid arguments. Must be a DOM element or a collection of DOM elements.\");\n    }\n\n    forEach$1(elements, function (element) {\n      eventListenerHandler.removeAllListeners(element);\n      detectionStrategy.uninstall(element);\n      stateHandler.cleanState(element);\n    });\n  }\n\n  return {\n    listenTo: listenTo,\n    removeListener: eventListenerHandler.removeListener,\n    removeAllListeners: eventListenerHandler.removeAllListeners,\n    uninstall: uninstall\n  };\n};\n\nfunction getOption(options, name, defaultValue) {\n  var value = options[name];\n\n  if ((value === undefined || value === null) && defaultValue !== undefined) {\n    return defaultValue;\n  }\n\n  return value;\n}\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\n\nvar NODE_ENV = process.env.NODE_ENV;\n\nvar invariant = function invariant(condition, format, a, b, c, d, e, f) {\n  if (NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n};\n\nvar invariant_1 = invariant;\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\n\nfunction throttle(delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    var args = arguments;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, args);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n/* eslint-disable no-undefined */\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\n\n\nfunction debounce(delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nvar index_esm =\n/*#__PURE__*/\nObject.freeze({\n  throttle: throttle,\n  debounce: debounce\n}); //\n\nvar shallowequal = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A's keys different from B.\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || ret === void 0 && valueA !== valueB) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nfunction _interopDefault$1(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar createResizeDetector = _interopDefault$1(elementResizeDetector);\n\nvar React__default = _interopDefault$1(React);\n\nvar PropTypes$1 = _interopDefault$1(PropTypes);\n\nvar ReactDOM = _interopDefault$1(reactDom);\n\nvar invariant$1 = _interopDefault$1(invariant_1);\n\nvar isShallowEqual = _interopDefault$1(shallowequal);\n\nvar instances = {}; // Lazily require to not cause bug\n// https://github.com/ctrlplusb/react-sizeme/issues/6\n\nfunction resizeDetector() {\n  var strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'scroll';\n\n  if (!instances[strategy]) {\n    instances[strategy] = createResizeDetector({\n      strategy: strategy\n    });\n  }\n\n  return instances[strategy];\n}\n\nvar classCallCheck$1 = function classCallCheck$1(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends$1 = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits$1 = function inherits$1(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties$1 = function objectWithoutProperties$1(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn$1 = function possibleConstructorReturn$1(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n/* eslint-disable react/no-multi-comp */\n\n\nvar errMsg = 'react-sizeme: an error occurred whilst stopping to listen to node size changes';\nvar defaultConfig = {\n  monitorWidth: true,\n  monitorHeight: false,\n  monitorPosition: false,\n  refreshRate: 16,\n  refreshMode: 'throttle',\n  noPlaceholder: false,\n  resizeDetectorStrategy: 'scroll'\n};\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n/**\n * This is a utility wrapper component that will allow our higher order\n * component to get a ref handle on our wrapped components html.\n * @see https://gist.github.com/jimfb/32b587ee6177665fb4cf\n */\n\n\nvar ReferenceWrapper = function (_Component) {\n  inherits$1(ReferenceWrapper, _Component);\n\n  function ReferenceWrapper() {\n    classCallCheck$1(this, ReferenceWrapper);\n    return possibleConstructorReturn$1(this, (ReferenceWrapper.__proto__ || Object.getPrototypeOf(ReferenceWrapper)).apply(this, arguments));\n  }\n\n  createClass$1(ReferenceWrapper, [{\n    key: 'render',\n    value: function render() {\n      return React.Children.only(this.props.children);\n    }\n  }]);\n  return ReferenceWrapper;\n}(React.Component);\n\nReferenceWrapper.displayName = 'SizeMeReferenceWrapper';\nReferenceWrapper.propTypes = {\n  children: PropTypes$1.element.isRequired\n};\n\nfunction Placeholder(_ref) {\n  var className = _ref.className,\n      style = _ref.style; // Lets create the props for the temp element.\n\n  var phProps = {}; // We will use any provided className/style or else make the temp\n  // container take the full available space.\n\n  if (!className && !style) {\n    phProps.style = {\n      width: '100%',\n      height: '100%'\n    };\n  } else {\n    if (className) {\n      phProps.className = className;\n    }\n\n    if (style) {\n      phProps.style = style;\n    }\n  }\n\n  return React__default.createElement('div', phProps);\n}\n\nPlaceholder.displayName = 'SizeMePlaceholder';\nPlaceholder.propTypes = {\n  className: PropTypes$1.string,\n  style: PropTypes$1.object\n  /**\n   * As we need to maintain a ref on the root node that is rendered within our\n   * SizeMe component we need to wrap our entire render in a sub component.\n   * Without this, we lose the DOM ref after the placeholder is removed from\n   * the render and the actual component is rendered.\n   * It took me forever to figure this out, so tread extra careful on this one!\n   */\n\n};\n\nvar renderWrapper = function renderWrapper(WrappedComponent) {\n  function SizeMeRenderer(props) {\n    var explicitRef = props.explicitRef,\n        className = props.className,\n        style = props.style,\n        size = props.size,\n        disablePlaceholder = props.disablePlaceholder,\n        onSize = props.onSize,\n        restProps = objectWithoutProperties$1(props, ['explicitRef', 'className', 'style', 'size', 'disablePlaceholder', 'onSize']);\n    var noSizeData = size == null || size.width == null && size.height == null && size.position == null;\n    var renderPlaceholder = noSizeData && !disablePlaceholder;\n    var renderProps = {\n      className: className,\n      style: style\n    };\n\n    if (size != null) {\n      renderProps.size = size;\n    }\n\n    var toRender = renderPlaceholder ? React__default.createElement(Placeholder, {\n      className: className,\n      style: style\n    }) : React__default.createElement(WrappedComponent, _extends$1({}, renderProps, restProps));\n    return React__default.createElement(ReferenceWrapper, {\n      ref: explicitRef\n    }, toRender);\n  }\n\n  SizeMeRenderer.displayName = 'SizeMeRenderer(' + getDisplayName(WrappedComponent) + ')';\n  SizeMeRenderer.propTypes = {\n    explicitRef: PropTypes$1.func.isRequired,\n    className: PropTypes$1.string,\n    style: PropTypes$1.object,\n    // eslint-disable-line react/forbid-prop-types\n    size: PropTypes$1.shape({\n      width: PropTypes$1.number,\n      // eslint-disable-line react/no-unused-prop-types\n      height: PropTypes$1.number,\n      // eslint-disable-line react/no-unused-prop-types\n      position: PropTypes$1.object\n    }),\n    disablePlaceholder: PropTypes$1.bool,\n    onSize: PropTypes$1.func\n  };\n  return SizeMeRenderer;\n};\n/**\n * :: config -> Component -> WrappedComponent\n *\n * Higher order component that allows the wrapped component to become aware\n * of it's size, by receiving it as an object within it's props.\n *\n * @param  monitorWidth\n *   Default true, whether changes in the element's width should be monitored,\n *   causing a size property to be broadcast.\n * @param  monitorHeight\n *   Default false, whether changes in the element's height should be monitored,\n *   causing a size property to be broadcast.\n *\n * @return The wrapped component.\n */\n\n\nfunction withSize() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConfig;\n  var _config$monitorWidth = config.monitorWidth,\n      monitorWidth = _config$monitorWidth === undefined ? defaultConfig.monitorWidth : _config$monitorWidth,\n      _config$monitorHeight = config.monitorHeight,\n      monitorHeight = _config$monitorHeight === undefined ? defaultConfig.monitorHeight : _config$monitorHeight,\n      _config$monitorPositi = config.monitorPosition,\n      monitorPosition = _config$monitorPositi === undefined ? defaultConfig.monitorPosition : _config$monitorPositi,\n      _config$refreshRate = config.refreshRate,\n      refreshRate = _config$refreshRate === undefined ? defaultConfig.refreshRate : _config$refreshRate,\n      _config$refreshMode = config.refreshMode,\n      refreshMode = _config$refreshMode === undefined ? defaultConfig.refreshMode : _config$refreshMode,\n      _config$noPlaceholder = config.noPlaceholder,\n      noPlaceholder = _config$noPlaceholder === undefined ? defaultConfig.noPlaceholder : _config$noPlaceholder,\n      _config$resizeDetecto = config.resizeDetectorStrategy,\n      resizeDetectorStrategy = _config$resizeDetecto === undefined ? defaultConfig.resizeDetectorStrategy : _config$resizeDetecto;\n  invariant$1(monitorWidth || monitorHeight || monitorPosition, 'You have to monitor at least one of the width, height, or position when using \"sizeMe\"');\n  invariant$1(refreshRate >= 16, \"It is highly recommended that you don't put your refreshRate lower than \" + '16 as this may cause layout thrashing.');\n  invariant$1(refreshMode === 'throttle' || refreshMode === 'debounce', 'The refreshMode should have a value of \"throttle\" or \"debounce\"');\n  var refreshDelayStrategy = refreshMode === 'throttle' ? index_esm.throttle : index_esm.debounce;\n  return function WrapComponent(WrappedComponent) {\n    var SizeMeRenderWrapper = renderWrapper(WrappedComponent);\n\n    var SizeAwareComponent = function (_React$Component) {\n      inherits$1(SizeAwareComponent, _React$Component);\n\n      function SizeAwareComponent() {\n        var _ref2;\n\n        var _temp, _this2, _ret;\n\n        classCallCheck$1(this, SizeAwareComponent);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return _ret = (_temp = (_this2 = possibleConstructorReturn$1(this, (_ref2 = SizeAwareComponent.__proto__ || Object.getPrototypeOf(SizeAwareComponent)).call.apply(_ref2, [this].concat(args))), _this2), _this2.domEl = null, _this2.state = {\n          width: undefined,\n          height: undefined,\n          position: undefined\n        }, _this2.uninstall = function () {\n          if (_this2.domEl) {\n            try {\n              _this2.detector.uninstall(_this2.domEl);\n            } catch (err) {\n              // eslint-disable-next-line no-console\n              console.warn(errMsg);\n            }\n\n            _this2.domEl = null;\n          }\n        }, _this2.determineStrategy = function (props) {\n          if (props.onSize) {\n            if (!_this2.callbackState) {\n              _this2.callbackState = _extends$1({}, _this2.state);\n            }\n\n            _this2.strategy = 'callback';\n          } else {\n            _this2.strategy = 'render';\n          }\n        }, _this2.strategisedSetState = function (state) {\n          if (_this2.strategy === 'callback') {\n            _this2.callbackState = state;\n\n            _this2.props.onSize(state);\n          }\n\n          _this2.setState(state);\n        }, _this2.strategisedGetState = function () {\n          return _this2.strategy === 'callback' ? _this2.callbackState : _this2.state;\n        }, _this2.refCallback = function (element) {\n          _this2.element = element;\n        }, _this2.hasSizeChanged = function (current, next) {\n          var c = current;\n          var n = next;\n          var cp = c.position || {};\n          var np = n.position || {};\n          return monitorWidth && c.width !== n.width || monitorHeight && c.height !== n.height || monitorPosition && (cp.top !== np.top || cp.left !== np.left || cp.bottom !== np.bottom || cp.right !== np.right);\n        }, _this2.checkIfSizeChanged = refreshDelayStrategy(refreshRate, function (el) {\n          var _el$getBoundingClient = el.getBoundingClientRect(),\n              width = _el$getBoundingClient.width,\n              height = _el$getBoundingClient.height,\n              right = _el$getBoundingClient.right,\n              left = _el$getBoundingClient.left,\n              top = _el$getBoundingClient.top,\n              bottom = _el$getBoundingClient.bottom;\n\n          var next = {\n            width: monitorWidth ? width : null,\n            height: monitorHeight ? height : null,\n            position: monitorPosition ? {\n              right: right,\n              left: left,\n              top: top,\n              bottom: bottom\n            } : null\n          };\n\n          if (_this2.hasSizeChanged(_this2.strategisedGetState(), next)) {\n            _this2.strategisedSetState(next);\n          }\n        }), _temp), possibleConstructorReturn$1(_this2, _ret);\n      }\n\n      createClass$1(SizeAwareComponent, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n          this.detector = resizeDetector(resizeDetectorStrategy);\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate() {\n          this.determineStrategy(this.props);\n          this.handleDOMNode();\n        }\n      }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n          // Change our size checker to a noop just in case we have some\n          // late running events.\n          this.hasSizeChanged = function () {\n            return undefined;\n          };\n\n          this.checkIfSizeChanged = function () {\n            return undefined;\n          };\n\n          this.uninstall();\n        }\n      }, {\n        key: 'handleDOMNode',\n        value: function handleDOMNode() {\n          var found = this.element && ReactDOM.findDOMNode(this.element);\n\n          if (!found) {\n            // If we previously had a dom node then we need to ensure that\n            // we remove any existing listeners to avoid memory leaks.\n            this.uninstall();\n            return;\n          }\n\n          if (!this.domEl) {\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          } else if (this.domEl.isSameNode && !this.domEl.isSameNode(found) || this.domEl !== found) {\n            this.uninstall();\n            this.domEl = found;\n            this.detector.listenTo(this.domEl, this.checkIfSizeChanged);\n          }\n        }\n      }, {\n        key: 'render',\n        value: function render() {\n          var disablePlaceholder = withSize.enableSSRBehaviour || withSize.noPlaceholders || noPlaceholder || this.strategy === 'callback';\n\n          var size = _extends$1({}, this.state);\n\n          return React__default.createElement(SizeMeRenderWrapper, _extends$1({\n            explicitRef: this.refCallback,\n            size: this.strategy === 'callback' ? null : size,\n            disablePlaceholder: disablePlaceholder\n          }, this.props));\n        }\n      }]);\n      return SizeAwareComponent;\n    }(React__default.Component);\n\n    SizeAwareComponent.displayName = 'SizeMe(' + getDisplayName(WrappedComponent) + ')';\n    SizeAwareComponent.propTypes = {\n      onSize: PropTypes$1.func\n    };\n    SizeAwareComponent.WrappedComponent = WrappedComponent;\n    return SizeAwareComponent;\n  };\n}\n/**\n * Allow SizeMe to run within SSR environments.  This is a \"global\" behaviour\n * flag that should be set within the initialisation phase of your application.\n *\n * Warning: don't set this flag unless you need to as using it may cause\n * extra render cycles to happen within your components depending on the logic\n * contained within them around the usage of the `size` data.\n *\n * DEPRECATED: Please use the global noPlaceholders\n */\n\n\nwithSize.enableSSRBehaviour = false;\n/**\n * Global configuration allowing to disable placeholder rendering for all\n * sizeMe components.\n */\n\nwithSize.noPlaceholders = false;\n\nvar SizeMe = function (_Component) {\n  inherits$1(SizeMe, _Component);\n\n  function SizeMe(props) {\n    classCallCheck$1(this, SizeMe);\n\n    var _this = possibleConstructorReturn$1(this, (SizeMe.__proto__ || Object.getPrototypeOf(SizeMe)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var children = props.children,\n        render = props.render,\n        sizeMeConfig = objectWithoutProperties$1(props, ['children', 'render']);\n\n    _this.createComponent(sizeMeConfig);\n\n    _this.state = {\n      size: {\n        width: undefined,\n        height: undefined\n      }\n    };\n    return _this;\n  }\n\n  createClass$1(SizeMe, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          prevChildren = _props.children,\n          prevRender = _props.render,\n          currentSizeMeConfig = objectWithoutProperties$1(_props, ['children', 'render']);\n      var nextChildren = prevProps.children,\n          nextRender = prevProps.render,\n          prevSizeMeConfig = objectWithoutProperties$1(prevProps, ['children', 'render']);\n\n      if (!isShallowEqual(currentSizeMeConfig, prevSizeMeConfig)) {\n        this.createComponent(currentSizeMeConfig);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var SizeAware = this.SizeAware;\n      var render = this.props.children || this.props.render;\n      return React__default.createElement(SizeAware, {\n        onSize: this.onSize\n      }, render({\n        size: this.state.size\n      }));\n    }\n  }]);\n  return SizeMe;\n}(React.Component);\n\nSizeMe.propTypes = {\n  children: PropTypes$1.func,\n  render: PropTypes$1.func\n};\nSizeMe.defaultProps = {\n  children: undefined,\n  render: undefined\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.createComponent = function (config) {\n    _this2.SizeAware = withSize(config)(function (_ref) {\n      var children = _ref.children;\n      return children;\n    });\n  };\n\n  this.onSize = function (size) {\n    return _this2.setState({\n      size: size\n    });\n  };\n};\n\nwithSize.SizeMe = SizeMe;\nwithSize.withSize = withSize;\nvar reactSizeme = withSize;\n\nfunction BaseMap(props) {\n  var primaryGeoData = props.primaryGeoData,\n      pointGeoData = props.pointGeoData;\n  var primaryMapData = props.primaryMapData;\n  var minWidth = props.minWidth,\n      minHeight = props.minHeight,\n      size = props.size,\n      classes = props.classes,\n      labels = props.labels,\n      tooltip = props.tooltip,\n      legend = props.legend;\n  var width = Math.max(minWidth !== undefined ? minWidth : 0, size.width);\n  var height = Math.max(minHeight !== undefined ? minHeight : 0, size.height);\n  var projector = geoPath().projection(geoMercator().fitSize([width, height], primaryGeoData));\n  var style = {\n    overflow: \"visible\"\n  };\n  return React.createElement(D3Container, props, React.createElement(\"svg\", {\n    width: width,\n    height: height * 1.25,\n    style: style\n  }, primaryMapData !== undefined && React.createElement(PathLayer, {\n    projector: projector,\n    data: primaryGeoData.features,\n    polygonClass: classes.primaryPolygon\n  }), props.showLabels && React.createElement(LabelLayer, {\n    projector: projector,\n    data: primaryGeoData.features,\n    labels: labels,\n    classes: classes\n  }), props.showPoints && // data is already a list of features\n  React.createElement(PointLayer, {\n    projector: projector,\n    data: pointGeoData,\n    classes: classes,\n    showPointLabels: props.showPointLabels\n  }), legend && React.createElement(LegendLayer, {\n    y: height\n  }), tooltip && React.createElement(TooltipLayer, null)));\n}\n\nvar BaseMap$1 = reactSizeme({\n  monitorWidth: true\n})(BaseMap);\n\nfunction DefaultTooltip(props) {\n  var style = {\n    display: \"inline-block\",\n    background: \"white\"\n  };\n  return React.createElement(\"div\", {\n    style: style\n  }, React.createElement(\"table\", null, React.createElement(\"tr\", null, React.createElement(\"td\", null, props.id), React.createElement(\"td\", null, props.value))));\n}\n\nvar filterPoints = function filterPoints(points, pointNames, pointTypes, countyId) {\n  // filter points by countyId\n  points = countyId !== undefined ? points.filter(function (point) {\n    return countyId === point.properties.countyId;\n  }) : points; // filter points by type\n\n  points = pointTypes && pointTypes.length ? points.filter(function (point) {\n    return pointTypes.indexOf(point.properties.type) >= 0;\n  }) : points; // filter points by name\n\n  points = pointNames && pointNames.length ? points.filter(function (point) {\n    return pointNames.indexOf(point.properties.name) >= 0;\n  }) : points;\n  return points;\n};\n\nvar countiesTopojson = {\n  \"type\": \"Topology\",\n  \"arcs\": [[[15286, 25875], [66, 314], [446, 385], [236, -20], [5, 0], [6, 1], [103, 16], [164, -182], [6, -5], [5, -5], [7, -3], [6, -3], [265, -95], [6, -1], [6, -1], [6, 0], [6, 1], [546, 107], [208, -352], [4, -6], [5, -6], [5, -5], [5, -4], [6, -4], [79, -47], [323, -288], [6, -5], [6, -4], [6, -2], [7, -2], [6, -1], [7, 0], [6, 1], [6, 2], [7, 3], [6, 3], [471, 335], [522, -133], [6, -1], [6, -1], [6, 1], [6, 1], [206, 62], [7, 2], [6, 3], [5, 4], [124, 98], [354, 216], [262, 52], [433, -306], [6, -4], [6, -3], [6, -2], [619, -147], [4, -1], [270, -35], [-43, -525], [0, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -8], [4, -6], [5, -6], [5, -6], [6, -4], [5, -4], [6, -3], [7, -2], [6, -2], [486, -61], [6, -1], [7, 1], [6, 1], [6, 3], [6, 3], [5, 4], [6, 4], [5, 6], [4, 6], [4, 6], [4, 7], [3, 8], [3, 8], [111, 390], [763, 83], [119, -99], [8, -6], [114, -65], [6, -3], [5, -2], [6, -2], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [238, 133], [419, -280], [6, -3], [7, -3], [6, -2], [7, 0], [36, -1], [6, 0], [7, 2], [6, 2], [6, 3], [6, 4], [6, 5], [188, 182], [11, -235], [-232, -259], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-3, -8], [-1, -8], [-1, -9], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -8], [3, -8], [3, -8], [3, -7], [4, -7], [5, -6], [4, -6], [6, -5], [5, -4], [6, -3], [246, -124], [323, -284], [6, -4], [6, -4], [6, -3], [6, -1], [6, -1], [6, -1], [256, 14], [67, -262], [3, -10], [3, -9], [4, -8], [95, -162], [4, -6], [4, -6], [5, -6], [5, -4], [6, -4], [6, -3], [403, -179], [-230, -626], [-3, -8], [-2, -9], [-1, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -9], [4, -7], [4, -7], [67, -108], [-13, -2], [-5, 0], [-6, -2], [-437, -148], [-7, -3], [-6, -4], [-6, -5], [-6, -6], [-380, -429], [-58, 61], [-5, 5], [-6, 4], [-6, 3], [-5, 3], [-6, 1], [-7, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-5, -4], [-6, -4], [-5, -4], [-5, -6], [-4, -6], [-4, -6], [-4, -8], [-3, -7], [-2, -8], [-2, -8], [-2, -9], [-60, -472], [-165, -306], [-402, 408], [-5, 5], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-11, 2], [-7, 1], [-6, -1], [-6, -1], [-6, -2], [-6, -2], [-6, -4], [-512, -366], [-5, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -8], [2, -8], [3, -8], [158, -384], [-6, -42], [-378, -206], [-199, 0], [-7, 0], [-7, -2], [-7, -3], [-6, -3], [-225, -149], [-5, -5], [-5, -4], [-5, -6], [-5, -6], [-4, -7], [-3, -7], [-3, -7], [-3, -8], [-1, -9], [-2, -8], [0, -9], [-1, -9], [1, -8], [1, -9], [1, -9], [3, -8], [2, -8], [4, -7], [3, -7], [4, -6], [5, -6], [5, -5], [186, -175], [-203, -372], [-264, -226], [-42, 26], [-6, 3], [-6, 3], [-6, 1], [-7, 1], [-320, 8], [-7, -1], [-6, -1], [-6, -2], [-5, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-4, -7], [-2, -8], [-3, -8], [-1, -8], [-2, -9], [0, -9], [0, -8], [16, -465], [-233, -439], [-3, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -9], [2, -8], [3, -8], [3, -7], [4, -7], [223, -366], [130, -487], [-208, -269], [-4, -6], [-4, -7], [-4, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [1, -9], [0, -9], [2, -9], [2, -8], [2, -8], [3, -8], [4, -8], [338, -617], [4, -6], [5, -6], [4, -6], [5, -4], [6, -4], [5, -4], [6, -2], [6, -2], [6, -1], [6, 0], [6, 1], [29, 5], [-199, -185], [-230, 135], [-150, 399], [-3, 8], [-5, 8], [-4, 7], [-5, 6], [-6, 6], [-301, 259], [-138, 248], [-4, 6], [-4, 6], [-5, 6], [-5, 4], [-5, 4], [-6, 3], [-6, 3], [-5, 1], [-377, 79], [-7, 1], [-6, 0], [-6, -1], [-7, -2], [-9, -3], [-7, 241], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 8], [-3, 6], [-5, 7], [-4, 5], [-5, 5], [-6, 5], [-5, 3], [-311, 171], [-25, 701], [-1, 10], [-1, 9], [-2, 9], [-391, 1437], [133, 94], [6, 4], [5, 5], [5, 6], [4, 6], [4, 8], [3, 7], [3, 8], [3, 8], [1, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-2, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-373, 167], [-101, 255], [-58, 674], [-1, 8], [-1, 8], [-3, 8], [-2, 8], [-3, 8], [-4, 6], [-4, 7], [-4, 5], [-5, 6], [-5, 4], [-6, 4], [-5, 3], [-6, 2], [-39, 13], [-7, 1], [-7, 1], [-7, -1], [-447, -71], [-255, 84], [-222, 327], [-123, 404], [177, -10], [6, 1], [6, 0], [6, 2], [6, 3], [6, 3], [5, 4], [5, 5], [5, 5], [4, 7], [4, 6], [4, 7], [3, 8], [2, 8], [2, 8], [1, 9], [1, 8], [0, 9], [0, 9], [-1, 8], [-2, 9], [-2, 8], [-183, 604], [-3, 8], [-3, 8], [-4, 6], [-4, 7], [-4, 6], [-5, 5], [-5, 4], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-533, 85], [-101, 135], [23, 365], [1, 9], [-1, 9], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-247, 431], [-5, 7], [-5, 7], [-5, 5], [-6, 5], [-6, 4], [-6, 3], [-7, 2], [-6, 1], [-166, 12], [-173, 52], [-7, 1], [-7, 0], [-7, 0], [-405, -71], [-340, 185], [-407, 311], [-11, 70], [232, 191], [5, 5], [5, 5], [5, 7], [4, 7], [3, 7], [3, 8], [3, 8], [2, 9], [1, 9], [0, 9], [0, 9], [0, 9], [-2, 9], [-1, 9], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 7], [-323, 400]], [[26619, 10822], [-27, 183], [250, 456], [4, 7], [2, 7], [3, 7], [123, 413], [3, 9], [1, 9], [1, 9], [1, 9], [-1, 9], [-1, 9], [-1, 9], [-3, 8], [-2, 9], [-4, 7], [-4, 8], [-100, 168], [149, 181], [4, 6], [4, 6], [4, 7], [3, 8], [2, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 8], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-4, 6], [-5, 5], [-71, 67], [156, 258], [4, 7], [4, 8], [2, 8], [3, 8], [1, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-2, 8], [-4, 8], [-3, 7], [-5, 7], [-4, 6], [-5, 5], [-6, 5], [-5, 4], [-6, 3], [-145, 63], [90, 120], [4, 7], [4, 6], [3, 8], [3, 7], [3, 8], [1, 9], [79, 443], [1, 9], [1, 8], [0, 9], [-1, 9], [-1, 8], [-2, 8], [-2, 9], [-3, 7], [-3, 8], [-101, 204], [93, 78], [5, 4], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 9], [1, 8], [1, 9], [0, 9], [-1, 9], [-1, 8], [-1, 9], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-299, 399], [2, 2], [4, 6], [3, 7], [3, 7], [3, 8], [111, 358], [3, 9], [1, 9], [1, 10], [1, 10], [-4, 405], [56, 344], [1, 9], [1, 9], [0, 9], [-1, 10], [-2, 9], [-125, 622], [173, 198], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [186, 649], [2, 8], [2, 8], [0, 9], [1, 8], [0, 9], [-1, 8], [-2, 9], [-1, 8], [-79, 289], [184, -9], [6, 0], [7, 2], [6, 1], [6, 3], [6, 4], [5, 4], [19, 18], [457, 192], [251, 3], [5, 0], [257, 36], [27, -28], [5, -4], [5, -4], [6, -4], [5, -2], [6, -2], [6, -1], [6, 0], [6, 1], [6, 2], [199, 65], [143, -65], [6, -3], [7, -1], [573, -82], [8, -1], [186, 6], [107, -93], [5, -5], [6, -3], [6, -3], [7, -2], [6, 0], [6, 0], [7, 1], [272, 61], [764, -40], [621, -578], [6, -4], [6, -4], [6, -3], [6, -2], [6, -1], [6, -1], [7, 1], [6, 1], [6, 3], [6, 3], [6, 4], [5, 5], [5, 6], [15, 18], [80, -80], [29, -290], [1, -9], [2, -9], [3, -8], [3, -8], [3, -8], [4, -7], [5, -6], [215, -273], [-23, -255], [0, -9], [0, -8], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -7], [5, -7], [4, -6], [5, -5], [6, -5], [5, -4], [6, -3], [6, -3], [6, -1], [7, -1], [6, 1], [6, 1], [169, 45], [71, -218], [-71, -413], [-1, -6], [-38, -317], [0, -2], [-60, -550], [-261, -171], [-5, -4], [-5, -5], [-5, -6], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [0, -9], [1, -8], [18, -196], [-262, -107], [-222, 410], [-4, 6], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 3], [-6, 2], [-6, 2], [-6, 1], [-6, 0], [-6, 0], [-6, -2], [-112, -35], [-6, -3], [-6, -3], [-6, -4], [-5, -5], [-5, -6], [-5, -6], [-4, -8], [-3, -7], [-3, -8], [-3, -9], [-2, -9], [-1, -9], [-1, -9], [1, -9], [0, -9], [76, -638], [1, -9], [2, -9], [3, -9], [99, -266], [2, -6], [35, -79], [-146, -35], [-6, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-4, -8], [-2, -8], [-3, -9], [-1, -8], [-1, -9], [-1, -9], [1, -9], [0, -9], [39, -294], [1, -8], [2, -9], [3, -7], [3, -8], [3, -7], [4, -7], [4, -6], [5, -5], [5, -5], [263, -219], [5, -178], [-67, -10], [-6, -1], [-6, -2], [-5, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-56, -349], [-2, -9], [0, -9], [0, -9], [1, -8], [1, -9], [2, -9], [197, -740], [-36, -197], [-19, -82], [-1, -8], [-1, -8], [-1, -9], [0, -8], [1, -8], [1, -8], [2, -8], [131, -555], [-40, -129], [-22, 8], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-5, -3], [-6, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -6], [-4, -7], [-3, -8], [-2, -8], [-2, -8], [-2, -9], [0, -8], [-1, -9], [1, -9], [1, -9], [1, -8], [2, -8], [3, -8], [3, -8], [4, -7], [4, -6], [246, -350], [-351, -239], [-5, -5], [-6, -5], [-4, -5], [-5, -7], [-4, -6], [-3, -8], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -9], [0, -8], [1, -9], [1, -9], [1, -8], [3, -9], [3, -7], [3, -8], [4, -7], [4, -6], [175, -229], [139, -210], [0, -1], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -7], [199, -347], [4, -7], [5, -6], [6, -6], [5, -5], [6, -3], [6, -3], [185, -73], [-40, -106], [-126, -132], [-4, -5], [-5, -7], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [0, -9], [1, -9], [2, -8], [3, -9], [3, -7], [116, -277], [-220, -349], [-157, 226], [-4, 6], [-5, 5], [-6, 5], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-7, 1], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-88, -51], [-48, -26], [-597, -275], [-6, -2], [-5, -4], [-5, -4], [-4, -5], [-5, -5], [-109, -149], [-367, 41], [-7, 0], [-6, -1], [-7, -1], [-6, -3], [-6, -3], [-6, -5], [-256, -218], [-453, 48], [-52, 77], [-5, 7], [-5, 5], [-6, 5], [-6, 4], [-6, 4], [-6, 2], [-7, 1], [-6, 0], [-710, -22], [-54, 222], [-58, 615], [-18, 235], [48, 210], [2, 9], [1, 8], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-170, 306], [36, 359], [0, 10], [0, 9], [-1, 10], [-1, 9], [-2, 9], [-3, 9], [-74, 195], [-72, 356], [152, 135], [5, 5], [5, 6], [4, 7], [4, 7], [4, 7], [2, 9], [3, 8], [1, 9], [1, 9], [1, 9], [-1, 9], [-1, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-109, 151], [-5, 6], [-5, 5], [-5, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-440, 3], [-176, 162], [-60, 125], [-88, 344], [-2, 8], [-3, 8], [-4, 7], [-3, 7], [-74, 116], [-171, 595], [-2, 8], [-4, 8], [-3, 7], [-5, 7], [-4, 6], [-5, 5], [-6, 5], [-5, 4], [-6, 3], [-6, 2], [-7, 1], [-6, 1], [-6, -1], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-142, -382], [-264, -229], [-58, -33]], [[2816, 23009], [241, 702], [233, 184], [499, 121], [87, -116], [5, -6], [5, -5], [6, -5], [7, -3], [6, -3], [7, -2], [631, -106], [477, -151], [6, -1], [6, -1], [7, 0], [6, 2], [6, 2], [6, 2], [6, 4], [5, 4], [542, 495], [7, 6], [5, 8], [277, 417], [4, 7], [4, 8], [3, 8], [3, 9], [2, 9], [1, 9], [32, 333], [284, 187], [172, -53], [6, -1], [6, -1], [6, 1], [6, 1], [6, 2], [6, 2], [5, 4], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [212, 419], [3, 8], [3, 8], [2, 8], [2, 8], [1, 9], [1, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 9], [-3, 7], [-4, 8], [-4, 7], [-4, 6], [-321, 410], [251, 476], [4, 7], [3, 8], [3, 9], [146, 585], [495, 25], [7, 1], [6, 2], [6, 3], [6, 3], [6, 5], [161, 140], [399, 20], [340, -449], [5, -6], [5, -5], [6, -4], [5, -4], [6, -2], [6, -2], [6, -1], [7, -1], [6, 1], [6, 2], [6, 2], [6, 3], [5, 4], [5, 5], [5, 5], [5, 7], [4, 6], [3, 7], [3, 8], [3, 8], [2, 9], [1, 8], [1, 9], [21, 360], [323, 15], [4, 1], [474, 64], [46, -7], [5, 0], [608, -23], [6, 0], [6, 1], [6, 2], [6, 3], [353, 187], [61, -293], [3, -8], [2, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [5, -5], [5, -4], [6, -3], [413, -187], [5, -2], [6, -1], [6, -1], [6, 0], [6, 1], [6, 2], [6, 2], [469, 243], [335, -81], [161, -253], [4, -7], [5, -6], [6, -5], [5, -4], [6, -3], [6, -3], [7, -1], [339, -64], [1, -317], [0, -9], [1, -8], [2, -9], [26, -121], [2, -8], [2, -8], [4, -8], [3, -7], [4, -6], [5, -6], [5, -6], [5, -4], [388, -301], [5, -4], [6, -3], [6, -2], [59, -19], [7, -1], [6, -1], [7, 1], [6, 1], [6, 2], [6, 3], [6, 4], [26, 20], [379, 59], [116, -468], [-2, -6], [-1, -9], [0, -9], [0, -9], [0, -9], [2, -8], [1, -9], [3, -8], [3, -8], [3, -7], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [125, -82], [-1, -3], [-3, -9], [-1, -8], [-1, -9], [-1, -8], [0, -9], [1, -9], [2, -9], [1, -8], [3, -8], [3, -8], [4, -7], [4, -6], [4, -7], [5, -5], [5, -5], [381, -315], [6, -3], [5, -4], [5, -2], [6, -2], [5, -1], [464, -52], [8, 0], [8, 1], [437, 103], [377, -72], [7, 0], [6, 0], [6, 1], [7, 2], [6, 2], [204, 112], [11, -68], [2, -9], [2, -8], [2, -7], [4, -8], [3, -7], [4, -6], [5, -6], [5, -5], [5, -4], [352, -269], [-54, -59], [-288, -234], [-5, -5], [-5, -5], [-4, -6], [-4, -6], [-4, -7], [-328, -702], [-70, -58], [-737, 196], [-6, 1], [-7, 0], [-6, -1], [-6, -1], [-7, -3], [-6, -3], [-5, -4], [-218, -178], [-5, -5], [-4, -5], [-5, -6], [-4, -6], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-1, -8], [-60, -402], [-1, -10], [-1, -9], [1, -10], [1, -9], [2, -9], [68, -294], [-205, -538], [-2, -9], [-2, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [37, -488], [-509, -148], [-6, -3], [-6, -3], [-6, -4], [-6, -5], [-5, -5], [-4, -7], [-5, -7], [-3, -7], [-3, -8], [-3, -9], [-2, -8], [-1, -9], [-1, -9], [0, -9], [1, -10], [1, -9], [31, -172], [-252, -277], [-244, -16], [-6, -1], [-6, -2], [-6, -2], [-5, -3], [-6, -4], [-5, -5], [-4, -5], [-5, -6], [-4, -6], [-136, -243], [-843, 343], [-90, 56], [-3, 1], [-760, 408], [-7, 3], [-6, 2], [-6, 1], [-7, 0], [-6, -1], [-7, -2], [-6, -2], [-6, -4], [-6, -4], [-312, -276], [-377, -131], [-177, 164], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-6, -3], [-5, -4], [-6, -5], [-5, -5], [-4, -6], [-256, -371], [-135, 433], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-6, 4], [-5, 4], [-6, 2], [-6, 2], [-6, 2], [-6, 0], [-7, -1], [-6, -1], [-6, -2], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-285, -502], [-321, 193], [11, 231], [1, 9], [-1, 9], [-1, 8], [-2, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-169, 94], [-6, 3], [-6, 2], [-308, 75], [-215, 614], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-6, 5], [-6, 4], [-6, 3], [-6, 2], [-6, 1], [-7, 1], [-6, -1], [-242, -39], [-7, -1], [-6, -2], [-6, -3], [-273, -169], [-5, -4], [-6, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -8], [-3, -8], [-3, -8], [-71, -264], [-334, -234], [-451, 318], [-6, 3], [-6, 3], [-5, 2], [-7, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-5, -3], [-6, -4], [-5, -4], [-5, -5], [-4, -6], [-277, -392], [-384, 224], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-5, -3], [-289, -159], [-205, 132], [-218, 371], [-4, 7], [-5, 6], [-5, 5], [-6, 5], [-6, 3], [-5, 3], [-7, 2], [-6, 1], [-6, 1], [-660, -18], [-142, 298], [-4, 8], [-4, 7], [-5, 6], [-5, 5], [-6, 5], [-6, 4], [-7, 2], [-231, 85], [-5, 2], [-103, 26], [-350, 169], [-161, 269], [-4, 6], [-4, 6], [-5, 4], [-5, 5], [-5, 3], [-6, 3], [-392, 177]], [[36339, 7276], [71, 320], [0, 1], [111, 234], [179, 236], [407, 92], [54, -390], [2, -8], [2, -9], [2, -8], [4, -7], [3, -7], [4, -7], [5, -6], [5, -5], [5, -5], [6, -4], [5, -3], [6, -2], [6, -1], [406, -69], [59, -254], [4, -12], [8, -23], [3, -8], [4, -7], [3, -7], [5, -6], [5, -5], [5, -5], [5, -4], [5, -3], [122, -63], [-27, -101], [0, -2], [-24, -97], [-272, 20], [-7, 1], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -4], [-5, -5], [-5, -6], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-81, -441], [-304, 235], [-6, 4], [-7, 3], [-7, 3], [-6, 1], [-7, 0], [-324, 120], [-225, 205], [-6, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-7, 0], [-85, -2], [-35, 150]], [[36441, 27755], [47, 7], [5, 1], [391, 103], [192, -535], [3, -8], [4, -7], [4, -7], [5, -6], [5, -6], [6, -5], [5, -4], [6, -3], [7, -2], [6, -1], [367, -47], [7, 0], [6, 0], [7, 2], [287, 90], [6, 2], [6, 3], [6, 4], [5, 5], [5, 5], [341, 408], [185, -373], [4, -8], [5, -6], [5, -6], [5, -6], [6, -4], [6, -4], [6, -2], [7, -2], [6, -1], [566, -23], [6, 0], [6, 2], [6, 1], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 6], [4, 7], [111, 217], [712, 117], [84, -101], [5, -6], [5, -4], [6, -4], [6, -3], [6, -3], [6, -1], [7, -1], [6, 1], [6, 1], [7, 2], [6, 4], [5, 4], [477, 369], [140, 17], [7, 1], [6, 3], [6, 3], [6, 4], [6, 5], [5, 6], [5, 6], [4, 7], [4, 8], [160, 369], [351, 4], [46, -194], [2, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -6], [5, -5], [5, -5], [6, -3], [299, -163], [6, -3], [6, -2], [6, -1], [7, 0], [6, 1], [6, 1], [6, 3], [6, 3], [5, 4], [5, 4], [263, 261], [5, 6], [5, 6], [4, 8], [3, 7], [4, 8], [2, 9], [2, 9], [1, 9], [45, 446], [170, 181], [127, -10], [9, -18], [157, -600], [3, -8], [2, -7], [4, -8], [4, -6], [4, -6], [5, -6], [5, -5], [5, -4], [6, -3], [5, -3], [6, -2], [6, -1], [6, 0], [6, 1], [6, 1], [546, 168], [146, -106], [6, -4], [6, -3], [6, -2], [6, -1], [6, 0], [6, 1], [7, 1], [275, 83], [181, -160], [95, -144], [4, -6], [5, -5], [5, -5], [5, -4], [6, -3], [6, -3], [5, -1], [7, -1], [6, 0], [6, 0], [6, 2], [5, 2], [6, 3], [5, 4], [6, 5], [316, 314], [455, -430], [41, -326], [1, -8], [2, -8], [2, -8], [3, -7], [3, -7], [4, -6], [4, -6], [24, -32], [-138, -326], [-3, -7], [-3, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -8], [2, -9], [3, -7], [3, -8], [4, -7], [4, -6], [5, -6], [322, -362], [1, -4], [3, -7], [4, -6], [335, -568], [204, -679], [3, -7], [3, -8], [294, -618], [-43, -424], [-1, -8], [0, -8], [1, -9], [1, -8], [97, -631], [8, -112], [1, -9], [2, -9], [2, -9], [3, -8], [3, -8], [4, -7], [5, -7], [190, -258], [-5, -147], [-54, -138], [-619, 291], [-6, 2], [-7, 2], [-6, 0], [-6, 0], [-7, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -5], [-6, -5], [-4, -6], [-5, -7], [-3, -8], [-117, -254], [-292, 378], [-5, 6], [-5, 4], [-5, 5], [-5, 3], [-6, 3], [-6, 1], [-6, 2], [-6, 0], [-6, -1], [-284, -43], [-6, -1], [-6, -3], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-4, -6], [-5, -7], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [0, -8], [0, -9], [1, -9], [1, -8], [2, -9], [11, -38], [-123, -7], [-5, 0], [-305, -53], [-76, 40], [-6, 3], [-7, 2], [-6, 1], [-7, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-6, -5], [-5, -5], [-5, -6], [-287, -386], [-4, -6], [-4, -7], [-4, -8], [-2, -8], [-3, -8], [-1, -9], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [32, -91], [-329, -236], [-574, 216], [-6, 2], [-6, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-5, -4], [-5, -5], [-4, -6], [-200, -281], [-5, -9], [-46, -83], [-287, 110], [-6, 2], [-6, 1], [-6, 1], [-7, -1], [-6, -2], [-261, -84], [-217, -40], [-157, 217], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-5, 3], [-6, 2], [-6, 1], [-7, 1], [-463, 3], [-7, -1], [-7, -1], [-6, -3], [-371, -176], [-5, -3], [-5, -3], [-5, -4], [-5, -5], [-403, -456], [-827, 145], [-50, 296], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-3, 7], [-5, 6], [-4, 6], [-5, 5], [-5, 4], [-305, 229], [47, 280], [1, 9], [0, 9], [0, 8], [0, 9], [-2, 9], [-1, 8], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-299, 320], [33, 67], [3, 8], [3, 8], [2, 9], [2, 8], [1, 9], [0, 10], [0, 9], [-1, 9], [-1, 9], [-3, 8], [-2, 8], [-103, 266], [-3, 8], [-4, 7], [-5, 7], [-5, 6], [-5, 6], [-6, 4], [-6, 4], [-6, 2], [-329, 116], [166, 705], [2, 9], [1, 8], [0, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-4, 6], [-5, 5], [-6, 4], [-132, 91], [-6, 4], [-6, 2], [-6, 2], [-6, 1], [-7, 0], [-6, -1], [-6, -2], [-7, -2], [-5, -4], [-429, -296], [-203, 27], [36, 196], [1, 8], [1, 8], [0, 9], [-1, 8], [-29, 342], [-1, 10], [-2, 8], [-2, 9], [-3, 8], [-4, 8], [-4, 7], [-4, 7], [-5, 6], [-6, 5], [-5, 4], [-7, 3], [-6, 3], [-6, 1], [-994, 181], [-2, 144], [72, 202], [35, 41], [5, 6], [4, 7], [3, 7], [4, 7], [2, 8], [2, 9], [2, 8], [1, 9], [13, 186], [355, 124], [6, 3], [6, 3], [5, 4], [5, 5], [5, 6], [5, 6], [4, 7], [3, 8], [3, 8], [3, 8], [1, 9], [2, 9], [0, 8], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-143, 178], [-403, 748], [90, 349], [2, 8], [1, 8], [1, 9], [0, 8], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-128, 219]], [[7581, 27494], [440, 579], [4, 7], [4, 7], [4, 8], [3, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 10], [-1, 8], [-2, 9], [-3, 8], [-23, 61], [-4, 9], [-4, 7], [-4, 7], [-6, 7], [-5, 5], [-213, 186], [190, 549], [514, 285], [5, 3], [5, 5], [5, 4], [5, 6], [4, 6], [3, 6], [4, 7], [67, 156], [3, 8], [3, 9], [2, 9], [1, 9], [0, 9], [0, 10], [-1, 9], [-41, 339], [224, 81], [7, 3], [6, 4], [6, 4], [5, 6], [5, 6], [5, 7], [4, 8], [237, 501], [3, 8], [3, 8], [2, 9], [2, 9], [1, 8], [0, 9], [0, 9], [-28, 382], [247, 427], [398, 72], [6, 2], [6, 2], [6, 4], [6, 4], [5, 4], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [3, 8], [146, 556], [229, 114], [6, 4], [5, 4], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 8], [2, 9], [0, 9], [0, 8], [0, 9], [-37, 428], [130, 198], [4, 8], [4, 8], [3, 9], [87, 282], [298, 657], [358, 35], [6, 1], [6, 2], [7, 3], [6, 4], [5, 4], [5, 6], [176, 202], [5, 6], [4, 7], [4, 6], [3, 8], [3, 8], [2, 8], [1, 8], [2, 9], [0, 8], [0, 9], [-1, 9], [-1, 8], [-124, 657], [92, 347], [406, 325], [5, 5], [5, 5], [4, 6], [225, 331], [235, -44], [6, -1], [6, 0], [6, 1], [6, 1], [6, 3], [5, 3], [5, 4], [5, 4], [5, 6], [41, 49], [130, -25], [485, -471], [0, -262], [0, -8], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [5, -5], [6, -4], [6, -3], [294, -127], [65, -462], [1, -8], [3, -8], [2, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [5, -4], [6, -4], [5, -3], [6, -3], [7, -1], [232, -36], [7, 0], [6, 0], [192, 23], [270, -43], [389, -74], [244, -525], [3, -7], [5, -7], [4, -6], [6, -5], [5, -5], [203, -151], [-151, -225], [-213, -287], [-4, -6], [-4, -6], [-3, -6], [-316, -731], [-3, -8], [-2, -9], [-2, -8], [-2, -9], [0, -10], [0, -9], [1, -9], [1, -9], [2, -9], [22, -85], [3, -8], [3, -8], [4, -8], [4, -7], [40, -59], [5, -7], [291, -346], [-207, -71], [-6, -2], [-6, -4], [-5, -4], [-6, -5], [-4, -6], [-5, -6], [-4, -7], [-3, -8], [-3, -8], [-3, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [0, -9], [2, -9], [2, -8], [2, -8], [4, -8], [3, -8], [4, -7], [5, -6], [5, -5], [5, -5], [371, -292], [5, -4], [5, -3], [5, -2], [473, -171], [255, -205], [169, -168], [-146, -172], [-4, -6], [-4, -5], [-4, -6], [-139, -277], [-3, -8], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [0, -8], [0, -9], [0, -9], [1, -8], [2, -8], [2, -9], [3, -7], [4, -8], [4, -6], [4, -7], [4, -5], [5, -5], [6, -4], [5, -4], [605, -330], [2, -76], [-286, -642], [-531, -144], [-6, -3], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -9], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [6, -5], [449, -341], [184, -430], [197, -525], [4, -8], [3, -7], [5, -7], [5, -6], [5, -5], [5, -5], [6, -3], [6, -3], [239, -94], [-36, -498], [-75, -12], [-248, 21], [-7, 0], [-6, -1], [-6, -2], [-7, -3], [-6, -3], [-5, -4], [-476, -412], [-5, -5], [-5, -6], [-5, -7], [-4, -8], [-4, -8], [-3, -8], [-2, -9], [-82, -386], [-1, -8], [-1, -9], [-1, -9], [1, -8], [1, -9], [1, -8], [2, -9], [2, -7], [3, -8], [4, -7], [4, -7], [4, -6], [294, -364], [-202, -167], [-250, -136], [-372, 70], [-6, 1], [-7, -1], [-6, -1], [-439, -103], [-446, 51], [-306, 252], [2, 4], [3, 8], [2, 8], [2, 9], [1, 9], [0, 8], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-2, 8], [-3, 7], [-4, 8], [-4, 6], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-163, 107], [-1, 7], [-2, 8], [-135, 546], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-6, 2], [-6, 2], [-6, 1], [-6, 1], [-6, -1], [-430, -66], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-18, -13], [-34, 10], [-362, 282], [-18, 83], [-2, 369], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-4, 6], [-5, 5], [-5, 4], [-5, 4], [-6, 3], [-6, 3], [-6, 1], [-365, 69], [-159, 252], [-5, 6], [-4, 6], [-5, 5], [-6, 4], [-5, 3], [-6, 3], [-6, 2], [-366, 88], [-7, 1], [-7, 0], [-6, -1], [-7, -1], [-6, -3], [-465, -241], [-370, 168], [-69, 331], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-5, 6], [-5, 4], [-6, 4], [-5, 3], [-6, 3], [-6, 1], [-7, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-395, -210], [-596, 23], [-49, 7], [-7, 1], [-6, -1], [-477, -64], [-368, -18], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-5, -4], [-6, -5], [-4, -5], [-5, -6], [-4, -7], [-3, -7], [-4, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -8], [-16, -276], [-278, 368], [-5, 5], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-7, 0], [-280, -14]], [[23302, 33001], [34, 24], [7, 5], [6, 7], [279, 340], [116, -110], [5, -4], [6, -4], [6, -3], [6, -2], [6, -2], [7, 0], [6, 1], [6, 1], [7, 2], [6, 3], [5, 4], [6, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 9], [91, 476], [283, 239], [7, 6], [5, 7], [309, 427], [4, 6], [4, 8], [3, 8], [3, 8], [2, 9], [2, 9], [1, 9], [0, 9], [-4, 333], [182, 170], [511, -34], [6, 0], [7, 1], [7, 2], [6, 3], [6, 4], [6, 5], [5, 6], [5, 6], [134, 192], [2, 3], [143, 226], [3, 4], [142, 253], [182, -95], [7, -3], [6, -2], [7, -1], [6, 0], [7, 1], [6, 2], [6, 3], [6, 4], [6, 4], [5, 6], [5, 6], [254, 354], [1059, -355], [80, -47], [6, -3], [6, -2], [6, -2], [6, 0], [6, 0], [7, 2], [212, 59], [317, -133], [6, -2], [6, -1], [7, 0], [6, 0], [6, 2], [7, 2], [334, 154], [580, -43], [7, 0], [6, 1], [7, 1], [6, 3], [6, 4], [5, 4], [6, 5], [5, 6], [4, 7], [4, 7], [3, 8], [82, 209], [339, 30], [495, -12], [557, -316], [217, -372], [-209, -212], [-5, -5], [-5, -6], [-4, -7], [-4, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [2, -9], [3, -8], [117, -272], [-503, -108], [-6, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-5, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -8], [2, -9], [3, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -6], [6, -5], [474, -379], [77, -302], [0, -210], [-266, -190], [-5, -4], [-6, -5], [-4, -6], [-5, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -9], [3, -7], [4, -8], [4, -6], [5, -6], [5, -6], [5, -4], [257, -199], [-178, -305], [-4, -7], [-4, -8], [-2, -9], [-3, -8], [-1, -9], [-1, -10], [0, -9], [0, -9], [2, -9], [1, -9], [3, -9], [127, -396], [-10, -236], [-247, -190], [-479, -90], [-446, 24], [-6, 0], [-6, -1], [-7, -2], [-6, -3], [-5, -3], [-6, -5], [-5, -5], [-542, -595], [-4, -6], [-5, -6], [-3, -6], [-202, -391], [-4, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [-61, -629], [-196, -114], [-346, 275], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-6, 1], [-6, -1], [-6, -1], [-410, -100], [-6, -2], [-6, -3], [-6, -3], [-5, -5], [-6, -5], [-4, -6], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [-1, -9], [1, -9], [1, -9], [1, -9], [2, -9], [3, -8], [5, -13], [-229, -174], [-5, -4], [-5, -6], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-91, -320], [-330, -210], [-5, -4], [-5, -4], [-67, -67], [-5, -6], [-5, -6], [-4, -7], [-4, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [0, -10], [1, -9], [1, -9], [2, -8], [74, -278], [-72, -86], [-132, 75], [-6, 3], [-6, 2], [-6, 1], [-7, 0], [-6, -1], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -5], [-5, -6], [-5, -6], [-135, -200], [-516, 66], [-6, 1], [-142, -2], [-320, 146], [-2, 0], [-131, 57], [-193, 166], [150, 208], [5, 6], [3, 7], [3, 7], [3, 7], [2, 8], [2, 8], [1, 9], [1, 8], [13, 366], [40, 11], [6, 2], [6, 3], [6, 4], [6, 5], [5, 5], [4, 6], [5, 7], [3, 8], [4, 7], [2, 9], [2, 8], [2, 9], [1, 9], [0, 9], [-1, 9], [-1, 9], [-1, 9], [-3, 8], [-3, 9], [-3, 7], [-4, 7], [-5, 7], [-4, 6], [-348, 373], [-4, 4], [-4, 4], [-333, 247], [10, 418], [49, 470], [0, 8], [0, 9], [0, 8], [-1, 8], [-2, 8], [-123, 532], [-2, 9], [-3, 8], [-3, 8], [-5, 7], [-4, 7], [-5, 6], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-455, 155], [-26, 208], [-2, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 5], [-5, 5], [-6, 4], [-5, 3], [-6, 2], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-190, -42], [-3, -1], [-157, -43], [-118, 380], [-86, 492]], [[43367, 13873], [284, 439], [324, 279], [196, -197], [5, -5], [6, -4], [5, -3], [6, -2], [304, -106], [49, -36], [6, -3], [6, -3], [6, -2], [6, -1], [6, 0], [6, 0], [6, 2], [496, 150], [6, 3], [6, 3], [5, 4], [5, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 7], [2, 8], [2, 9], [2, 8], [1, 9], [0, 8], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 7], [-3, 7], [-133, 239], [358, 213], [6, 4], [5, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 7], [2, 8], [3, 9], [1, 8], [1, 9], [0, 9], [0, 8], [-1, 9], [-37, 287], [138, 72], [6, 3], [5, 4], [5, 5], [5, 6], [4, 5], [206, 315], [4, 7], [4, 8], [3, 8], [2, 8], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-43, 166], [-2, 8], [-12, 33], [755, 689], [305, -185], [6, -4], [7, -2], [6, -1], [7, -1], [6, 1], [7, 2], [6, 2], [6, 3], [256, 164], [3, -4], [172, -199], [0, -1], [365, -413], [5, -5], [5, -4], [6, -4], [6, -3], [6, -2], [6, -1], [6, 0], [6, 0], [6, 2], [132, 38], [456, -170], [6, -2], [6, -1], [7, 0], [6, 0], [6, 2], [5, 2], [6, 3], [6, 4], [170, 134], [508, -120], [6, -1], [6, 0], [407, 12], [-27, -299], [-158, -452], [-2, -8], [-2, -7], [-1, -7], [-27, -188], [-1, -8], [0, -9], [0, -9], [1, -8], [1, -8], [2, -9], [2, -7], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [144, -152], [6, -5], [5, -4], [6, -4], [316, -155], [6, -3], [6, -1], [5, -1], [6, 0], [6, 0], [230, 40], [-32, -328], [0, -9], [0, -9], [0, -9], [2, -9], [2, -8], [2, -9], [3, -7], [4, -8], [4, -7], [319, -482], [6, -7], [6, -6], [65, -61], [22, -241], [-223, -70], [-6, -2], [-6, -3], [-5, -5], [-6, -4], [-5, -6], [-4, -7], [-5, -6], [-3, -8], [-3, -8], [-3, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [0, -9], [38, -340], [-77, -385], [-1, -8], [-1, -9], [-1, -8], [1, -9], [1, -8], [1, -9], [2, -8], [3, -8], [124, -342], [-112, -218], [-3, -7], [-3, -8], [-3, -8], [-1, -8], [-2, -9], [0, -9], [0, -8], [0, -9], [47, -462], [-147, -100], [-5, -3], [-5, -5], [-4, -5], [-4, -6], [-4, -6], [-4, -7], [-3, -7], [-216, -587], [-204, -326], [-231, -38], [-315, 179], [-5, 3], [-6, 2], [-5, 1], [-6, 1], [-6, 0], [-6, -1], [-304, -72], [-6, -2], [-5, -2], [-6, -3], [-5, -4], [-80, -66], [-257, 118], [-26, 308], [-1, 9], [-1, 8], [-3, 9], [-2, 7], [-4, 8], [-3, 7], [-5, 6], [-4, 6], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-311, -131], [-291, -28], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -5], [-6, -5], [-4, -5], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -8], [-38, -243], [-402, 28], [-360, 117], [-7, 2], [-8, 0], [-324, 1], [-8, -1], [-7, -2], [-220, -76], [-403, 212], [-6, 3], [-6, 1], [-7, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -3], [-6, -3], [-6, -4], [-5, -5], [-5, -6], [-157, -199], [-422, 212], [-6, 2], [-6, 2], [-7, 1], [-7, -1], [-6, -1], [-6, -2], [-7, -3], [-6, -4], [-422, -314], [-5, -5], [-5, -5], [-4, -5], [-4, -6], [-41, -67], [-265, 261], [160, 588], [2, 9], [2, 9], [0, 9], [0, 9], [0, 10], [-1, 9], [-2, 8], [-1, 3], [1, 1], [5, 5], [5, 5], [5, 7], [4, 7], [3, 7], [3, 8], [3, 8], [282, 1143], [2, 9], [1, 9], [1, 9], [0, 10], [-1, 9], [-2, 9], [-2, 8], [-2, 9], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-210, 202], [-5, 4], [-5, 4], [-5, 3], [-6, 2], [-5, 2], [-255, 55], [43, 503], [0, 8], [0, 9], [0, 9], [-2, 8], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-111, 143], [-5, 6], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-6, 2], [-7, 1], [-86, 5], [-97, 490], [-2, 8], [-3, 8], [-3, 8], [-4, 8], [-4, 6], [-5, 7], [-5, 5], [-6, 5], [-5, 4], [-6, 3], [-7, 2], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -3], [-6, -3], [-376, -232], [-42, 54]], [[37215, 39383], [369, 88], [6, 2], [7, 3], [6, 4], [6, 5], [5, 5], [5, 7], [233, 342], [4, 6], [4, 7], [3, 8], [3, 7], [58, 202], [285, 184], [6, 4], [5, 5], [5, 6], [4, 6], [5, 7], [3, 7], [3, 8], [126, 367], [127, 209], [3, 5], [3, 6], [155, 349], [552, 137], [0, 0], [521, 134], [395, 40], [7, 2], [6, 2], [6, 2], [6, 4], [255, 186], [6, 4], [5, 6], [5, 6], [109, 154], [776, -110], [8, 0], [7, 1], [301, 59], [264, -170], [358, -482], [1, -3], [351, -438], [5, -5], [5, -5], [6, -4], [5, -3], [6, -3], [6, -1], [7, -1], [426, -25], [17, -357], [1, -9], [1, -8], [2, -8], [2, -8], [3, -8], [4, -7], [355, -676], [3, -6], [4, -6], [4, -4], [328, -378], [-17, -310], [-1, -8], [1, -9], [1, -9], [1, -9], [3, -8], [2, -8], [4, -7], [4, -7], [4, -7], [4, -6], [6, -5], [5, -4], [6, -4], [278, -157], [53, -431], [0, -2], [36, -255], [1, -9], [2, -9], [3, -9], [4, -7], [4, -8], [323, -529], [37, -611], [0, -8], [2, -8], [1, -8], [3, -8], [3, -7], [3, -7], [4, -6], [259, -415], [5, -7], [6, -7], [390, -390], [-263, -103], [-1, 0], [-6, 2], [-6, 0], [-6, 0], [-291, -42], [-6, -1], [-5, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-4, -5], [-343, -465], [-466, 241], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-5, -1], [-6, -1], [-6, -2], [-404, -176], [-6, -3], [-5, -3], [-6, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [0, -8], [-1, -9], [0, -319], [0, -9], [11, -147], [-184, -170], [-20, 36], [-6, 9], [-282, 392], [-5, 6], [-6, 6], [-6, 4], [-6, 4], [-6, 3], [-7, 2], [-6, 1], [-1275, 68], [-426, 136], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -8], [-3, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [37, -278], [-98, -6], [-648, 55], [65, 394], [1, 9], [1, 9], [0, 8], [-1, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-3, 7], [-5, 6], [-4, 5], [-5, 5], [-218, 193], [-89, 390], [-3, 9], [-3, 9], [-168, 410], [-4, 8], [-4, 8], [-90, 138], [-3, 6], [-126, 164], [-206, 404], [-4, 7], [-4, 6], [-5, 6], [-39, 42], [-6, 5], [-6, 5], [-6, 3], [-6, 3], [-7, 2], [-293, 54], [44, 299], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-2, 8], [-4, 8], [-3, 7], [-5, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-343, 90], [-237, 525], [-4, 8], [-4, 6], [-5, 6], [-4, 6], [-6, 5], [-5, 3], [-6, 4], [-227, 104], [-128, 191], [-5, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-7, 0], [-272, 3], [-168, 266], [-4, 6], [-4, 5], [-5, 5], [-5, 4], [-5, 3], [-244, 140], [-108, 224]], [[27909, 19650], [361, 103], [7, 2], [6, 3], [407, 249], [6, 3], [5, 5], [5, 5], [4, 6], [5, 7], [3, 7], [3, 7], [3, 8], [2, 8], [2, 9], [0, 9], [1, 8], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-363, 441], [-79, 265], [237, -38], [6, -1], [6, 0], [6, 2], [6, 1], [6, 3], [6, 3], [5, 5], [5, 4], [328, 351], [79, -5], [6, 0], [6, 0], [6, 2], [6, 2], [5, 3], [5, 4], [6, 5], [4, 5], [5, 6], [211, 305], [470, 305], [2, 1], [219, 149], [6, 5], [5, 5], [4, 5], [5, 6], [4, 7], [3, 8], [3, 7], [3, 8], [1, 9], [2, 9], [0, 8], [0, 9], [0, 9], [-1, 9], [-2, 8], [-3, 8], [-2, 8], [-4, 7], [-4, 7], [-4, 7], [-85, 113], [39, 189], [379, 278], [358, 80], [220, -82], [5, -2], [6, -1], [6, 0], [6, 1], [6, 1], [6, 2], [5, 3], [364, 213], [75, 38], [360, -250], [6, -3], [6, -3], [6, -2], [6, -1], [7, 0], [6, 1], [6, 2], [6, 2], [6, 3], [5, 5], [6, 4], [5, 6], [4, 6], [4, 7], [4, 8], [88, 207], [351, 76], [271, -365], [5, -6], [5, -5], [6, -4], [5, -4], [7, -3], [6, -1], [6, -1], [7, 0], [6, 1], [42, 9], [375, -261], [7, -129], [1, -8], [1, -8], [2, -9], [3, -8], [3, -7], [3, -7], [4, -7], [4, -6], [5, -5], [334, -349], [5, -5], [5, -4], [6, -3], [6, -3], [6, -2], [315, -69], [-31, -243], [-87, -108], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [5, -265], [1, -10], [19, -206], [2, -9], [2, -9], [2, -9], [3, -9], [4, -7], [160, -294], [4, -7], [5, -6], [4, -5], [6, -5], [5, -4], [6, -3], [6, -3], [6, -1], [6, -1], [6, 0], [14, 1], [-120, -57], [-6, -4], [-6, -4], [-5, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -8], [-3, -8], [-3, -8], [-1, -8], [-2, -9], [0, -9], [0, -9], [0, -9], [1, -9], [2, -8], [2, -9], [122, -370], [3, -8], [4, -8], [4, -7], [4, -6], [5, -6], [5, -5], [6, -4], [6, -4], [6, -2], [6, -2], [250, -50], [3, -78], [1, -9], [1, -10], [3, -9], [2, -8], [4, -8], [250, -540], [3, -7], [4, -6], [4, -6], [5, -5], [5, -4], [5, -4], [6, -3], [5, -3], [6, -2], [53, -11], [7, -1], [6, 0], [7, 1], [6, 2], [6, 3], [6, 3], [5, 4], [6, 6], [5, 6], [160, 214], [297, -107], [1, 0], [16, -5], [4, -2], [439, -103], [-3, -140], [0, -9], [1, -8], [1, -9], [2, -8], [2, -8], [3, -8], [4, -7], [3, -7], [5, -6], [5, -5], [5, -5], [5, -4], [6, -4], [6, -2], [808, -297], [-87, -215], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -8], [2, -9], [3, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -6], [6, -4], [5, -4], [6, -4], [6, -2], [414, -128], [502, -740], [-53, -226], [-109, -80], [-256, -161], [-280, 211], [-5, 4], [-5, 2], [-6, 2], [-5, 2], [-385, 71], [-6, 1], [-7, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-6, -4], [-5, -6], [-5, -6], [-4, -6], [-4, -8], [-3, -8], [-309, -817], [-174, 41], [-124, 319], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-6, 5], [-5, 3], [-6, 3], [-7, 2], [-6, 1], [-584, 58], [-59, 103], [-4, 7], [-5, 6], [-4, 5], [-6, 4], [-117, 92], [-6, 4], [-5, 3], [-6, 3], [-6, 1], [-7, 1], [-6, -1], [-6, -1], [-6, -2], [-926, -367], [-104, 84], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-7, 0], [-6, 0], [-6, -1], [-6, -3], [-6, -3], [-357, -206], [-6, -4], [-6, -5], [-5, -5], [-4, -6], [-5, -7], [-4, -7], [-3, -8], [-2, -8], [-6, -18], [-246, -153], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-3, -7], [-3, -7], [-3, -8], [-2, -9], [-2, -8], [-35, -255], [-435, -49], [-79, 245], [-2, 8], [-4, 7], [-3, 7], [-5, 6], [-4, 5], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-5, 2], [-6, 2], [-6, 0], [-7, 0], [-6, -2], [-139, -37], [17, 194], [0, 8], [0, 9], [0, 9], [-2, 8], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-221, 280], [-29, 295], [-1, 9], [-2, 9], [-3, 9], [-3, 8], [-4, 8], [-4, 7], [-4, 6], [-6, 6], [-131, 131], [-5, 4], [-5, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-5, -3], [-6, -4], [-5, -5], [-4, -5], [-16, -20], [-601, 559], [-5, 4], [-5, 3], [-6, 3], [-5, 2], [-6, 2], [-6, 0], [-783, 41], [-6, 0], [-6, -1], [-258, -58], [-103, 90], [-6, 4], [-5, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-198, -5], [-565, 81], [-152, 68], [-6, 3], [-7, 1], [-7, 0], [-7, 0], [-6, -2], [-190, -62], [-24, 24], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-7, 2], [-6, 0], [-7, 0], [-234, -33], [-75, 253], [69, 616], [1, 9], [0, 8], [0, 8], [-1, 9], [-2, 8], [-2, 7], [-2, 8], [-3, 7], [-211, 461], [-5, 263]], [[37043, 16991], [63, 45], [6, 5], [6, 6], [5, 7], [4, 7], [338, 607], [418, 308], [366, -303], [6, -4], [5, -3], [6, -3], [6, -2], [6, 0], [6, 0], [6, 0], [6, 2], [6, 3], [6, 3], [5, 4], [5, 4], [5, 6], [279, 347], [5, 6], [4, 7], [3, 8], [3, 8], [3, 8], [2, 9], [121, 683], [134, 228], [3, 6], [3, 8], [3, 7], [2, 8], [131, 571], [216, -162], [-10, -301], [0, -9], [1, -8], [1, -9], [2, -8], [2, -9], [3, -7], [3, -8], [4, -7], [344, -546], [4, -7], [5, -5], [386, -421], [6, -5], [5, -5], [6, -3], [6, -3], [251, -89], [6, -2], [6, 0], [6, 0], [7, 0], [6, 2], [6, 3], [111, 55], [109, -94], [8, -6], [419, -253], [401, -325], [6, -5], [7, -3], [7, -3], [6, -1], [225, -26], [168, -246], [5, -6], [5, -6], [5, -4], [6, -4], [6, -3], [6, -3], [6, -1], [7, -1], [6, 1], [6, 1], [6, 2], [421, 180], [266, -142], [6, -2], [5, -2], [6, -1], [6, -1], [7, 1], [5, 1], [6, 3], [6, 3], [153, 91], [-3, -59], [0, -9], [1, -8], [1, -9], [2, -8], [2, -8], [3, -8], [114, -286], [3, -7], [4, -7], [4, -6], [4, -6], [5, -5], [5, -4], [428, -326], [5, -3], [6, -3], [5, -3], [6, -1], [119, -21], [6, -1], [6, 1], [7, 1], [6, 2], [6, 3], [6, 3], [5, 5], [5, 5], [5, 6], [4, 6], [4, 7], [3, 8], [10, 25], [46, -329], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [4, -5], [5, -6], [6, -4], [5, -4], [6, -3], [6, -2], [6, -2], [6, 0], [7, 0], [6, 1], [6, 2], [315, 131], [6, 3], [5, 3], [5, 4], [5, 5], [193, 211], [84, -158], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [5, -3], [7, -3], [6, -1], [6, -1], [6, 0], [7, 1], [6, 2], [6, 3], [5, 4], [240, 169], [-29, -423], [-1, -9], [1, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -7], [5, -7], [4, -6], [5, -5], [6, -5], [6, -3], [6, -3], [417, -169], [7, -2], [6, -1], [7, 0], [6, 1], [7, 1], [574, 195], [15, -57], [-176, -270], [-168, -87], [-6, -3], [-5, -4], [-6, -6], [-4, -5], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [1, -9], [0, -9], [38, -290], [-382, -227], [-5, -4], [-6, -4], [-4, -6], [-5, -5], [-4, -7], [-4, -7], [-3, -8], [-3, -7], [-2, -9], [-1, -8], [-1, -9], [-1, -9], [0, -8], [1, -9], [2, -9], [2, -8], [2, -8], [3, -8], [4, -7], [123, -222], [-398, -121], [-39, 27], [-7, 4], [-7, 3], [-299, 105], [-217, 217], [-5, 5], [-5, 4], [-6, 3], [-6, 2], [-6, 2], [-6, 1], [-6, -1], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-5, -5], [-358, -308], [-5, -5], [-5, -5], [-4, -6], [-325, -502], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -9], [-1, -9], [-1, -9], [0, -8], [1, -9], [1, -9], [2, -9], [2, -8], [3, -8], [4, -7], [4, -7], [4, -7], [105, -134], [5, -5], [5, -5], [5, -4], [6, -3], [6, -3], [6, -2], [6, -1], [6, 0], [6, 1], [6, 1], [5, 3], [6, 3], [353, 217], [92, -461], [2, -8], [3, -8], [3, -7], [3, -8], [4, -6], [5, -6], [4, -6], [6, -4], [5, -4], [6, -4], [6, -2], [6, -2], [6, 0], [104, -6], [78, -101], [-45, -535], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -8], [3, -8], [3, -8], [3, -7], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [5, -3], [6, -3], [6, -2], [292, -63], [168, -162], [-256, -1033], [-80, 17], [-6, 1], [-6, 0], [-7, -1], [-6, -1], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -5], [-5, -7], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-1, -9], [-2, -9], [0, -9], [0, -9], [1, -9], [1, -8], [2, -9], [2, -8], [3, -8], [4, -8], [4, -6], [4, -7], [5, -5], [72, -73], [-162, -593], [-136, -414], [-406, 68], [57, 232], [2, 8], [1, 9], [0, 9], [0, 9], [0, 9], [-2, 9], [-2, 8], [-2, 9], [-3, 7], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-6, 4], [-5, 4], [-6, 4], [-410, 194], [-226, 179], [-6, 4], [-6, 3], [-6, 2], [-7, 1], [-6, 1], [-6, -1], [-7, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -5], [-5, -6], [-5, -6], [-195, -288], [-376, 139], [-77, 48], [-103, 81], [-5, 3], [-6, 4], [-6, 2], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-406, -212], [-189, 159], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-7, 0], [-611, -56], [-39, 17], [-7, 2], [-8, 1], [-224, 20], [-60, 141], [-75, 188], [13, 102], [1, 9], [0, 8], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 4], [-431, 323], [-22, 146], [345, 209], [5, 4], [6, 4], [5, 6], [4, 6], [5, 7], [3, 7], [3, 8], [3, 8], [2, 9], [1, 8], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-5, 6], [-232, 309], [-5, 6], [-5, 5], [-5, 4], [-5, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-306, 1], [-107, 211], [-24, 95], [-3, 8], [-3, 8], [-3, 7], [-5, 7], [-198, 300], [34, 386], [105, 113], [5, 6], [5, 6], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [1, 8], [1, 9], [0, 9], [-1, 9], [-57, 498], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-3, 8], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-7, 1], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-6, -3], [-97, -72], [-4, -3], [-139, -122], [-376, -85], [-116, 410], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-7, 0], [-6, -2], [-6, -2], [-6, -3], [-6, -4], [-164, -124], [-287, -21], [-124, 357], [15, 93], [1, 8], [1, 9], [0, 8], [-1, 9], [-1, 8], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-169, 155], [171, 253], [4, 7], [3, 8], [4, 7], [2, 9], [2, 8], [1, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 9], [-3, 8], [-2, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-451, 478], [-30, 686], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-3, 7], [-5, 6], [-4, 5], [-5, 5], [-6, 4], [-350, 247], [-61, 94]], [[15221, 28710], [411, 111], [6, 3], [7, 3], [5, 4], [6, 5], [5, 5], [5, 6], [4, 7], [4, 8], [307, 688], [3, 8], [2, 8], [2, 8], [2, 9], [0, 9], [0, 9], [-3, 147], [0, 8], [-2, 9], [-1, 9], [-3, 8], [-2, 8], [-4, 7], [-4, 7], [-4, 7], [-5, 5], [-5, 5], [-5, 5], [-6, 3], [-575, 314], [97, 193], [171, 202], [391, -252], [6, -4], [5, -2], [6, -2], [6, 0], [7, 0], [6, 1], [6, 1], [5, 3], [6, 3], [208, 137], [362, -180], [-5, -169], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -8], [4, -6], [4, -7], [5, -5], [259, -258], [5, -5], [6, -4], [7, -4], [6, -2], [7, -1], [779, -101], [142, -339], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [5, -5], [6, -3], [6, -3], [6, -1], [6, -1], [6, -1], [6, 1], [6, 2], [441, 144], [188, -80], [6, -2], [6, -1], [6, -1], [6, 1], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 7], [3, 8], [2, 8], [147, 647], [463, -393], [6, -4], [6, -4], [6, -2], [6, -2], [6, -1], [6, 0], [7, 1], [213, 48], [6, 2], [6, 2], [5, 3], [5, 4], [5, 5], [5, 5], [4, 6], [130, 193], [171, 167], [5, 6], [5, 6], [4, 7], [3, 8], [4, 7], [2, 9], [2, 9], [1, 8], [1, 10], [0, 9], [0, 9], [-2, 9], [-1, 8], [-3, 9], [-3, 8], [-4, 7], [-4, 7], [-4, 7], [-5, 6], [-36, 36], [141, 173], [353, 95], [6, 2], [6, 3], [5, 4], [6, 4], [5, 5], [4, 6], [5, 7], [3, 7], [4, 7], [93, 240], [3, 9], [2, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 9], [-3, 8], [-2, 9], [-4, 7], [-3, 8], [-259, 440], [248, -16], [6, 0], [7, 1], [6, 1], [6, 3], [6, 4], [6, 4], [5, 6], [5, 6], [4, 6], [4, 7], [4, 8], [3, 8], [2, 9], [1, 9], [77, 531], [366, 190], [191, -115], [6, -4], [6, -2], [6, -1], [7, -1], [6, 1], [6, 1], [6, 2], [6, 3], [127, 75], [6, 4], [6, 5], [5, 5], [5, 7], [4, 7], [4, 8], [228, 528], [600, 129], [6, 2], [6, 2], [6, 4], [6, 4], [5, 5], [5, 6], [4, 7], [4, 7], [4, 8], [2, 8], [3, 8], [1, 9], [30, 187], [254, -216], [5, -4], [6, -3], [6, -3], [6, -2], [7, 0], [6, 0], [6, 1], [6, 1], [6, 3], [6, 4], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 8], [2, 8], [3, 8], [1, 9], [2, 9], [42, 472], [122, 272], [3, 8], [3, 8], [2, 9], [1, 9], [25, 203], [420, -160], [7, -2], [7, -1], [7, 0], [7, 1], [482, 123], [72, -18], [-61, -325], [-90, 85], [-5, 4], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-7, 0], [-6, -1], [-6, -1], [-7, -2], [-5, -4], [-6, -4], [-6, -4], [-5, -6], [-303, -370], [-65, -47], [-5, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [1, -9], [1, -8], [97, -554], [2, -7], [1, -8], [136, -439], [3, -7], [3, -8], [4, -7], [4, -6], [5, -6], [5, -5], [5, -4], [6, -4], [5, -3], [6, -2], [6, -1], [7, -1], [6, 1], [6, 1], [196, 54], [141, 31], [23, -186], [2, -8], [2, -9], [2, -8], [3, -7], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [5, -3], [6, -3], [459, -156], [110, -477], [-47, -457], [0, -10], [-11, -469], [0, -9], [0, -9], [2, -9], [2, -9], [3, -8], [3, -8], [4, -8], [4, -7], [5, -6], [5, -5], [6, -5], [357, -265], [259, -279], [-1, -1], [-4, -5], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -8], [-15, -395], [-181, -251], [-5, -7], [-3, -7], [-4, -7], [-2, -8], [-3, -9], [0, -1], [-575, -473], [-6, -5], [-6, -7], [-103, -135], [-5, -7], [-3, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -8], [2, -9], [2, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -6], [5, -5], [309, -265], [-94, -234], [-214, -41], [-6, -2], [-5, -2], [-6, -3], [-5, -3], [-5, -4], [-269, -251], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -9], [1, -8], [2, -9], [3, -8], [3, -7], [4, -8], [4, -6], [4, -6], [5, -6], [5, -5], [248, -199], [-122, -412], [-26, -7], [-5, -2], [-6, -3], [-5, -3], [-5, -4], [-5, -4], [-84, -88], [-369, -138], [-6, -3], [-6, -3], [-5, -5], [-6, -5], [-4, -6], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [0, -9], [0, -10], [1, -9], [2, -8], [133, -611], [-369, 246], [-6, 3], [-6, 3], [-6, 1], [-7, 1], [-6, 0], [-6, -1], [-7, -2], [-6, -3], [-239, -133], [-91, 52], [-129, 108], [-6, 5], [-6, 3], [-6, 3], [-7, 1], [-6, 1], [-6, 0], [-812, -88], [-6, -1], [-6, -3], [-6, -2], [-6, -4], [-6, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -8], [-3, -7], [-3, -9], [-108, -382], [-397, 50], [43, 525], [1, 9], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 8], [-3, 8], [-3, 7], [-5, 7], [-4, 6], [-5, 5], [-6, 5], [-6, 4], [-6, 3], [-6, 2], [-6, 1], [-320, 42], [-609, 145], [-441, 312], [-5, 4], [-6, 3], [-7, 2], [-6, 1], [-6, 0], [-7, -1], [-284, -56], [-6, -2], [-5, -2], [-6, -3], [-362, -221], [-6, -4], [-120, -95], [-189, -56], [-528, 135], [-6, 1], [-6, 1], [-6, -1], [-5, -1], [-6, -2], [-6, -3], [-5, -3], [-461, -327], [-302, 269], [-5, 4], [-5, 3], [-72, 43], [-218, 369], [-5, 6], [-5, 6], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-7, 2], [-6, 1], [-6, 0], [-7, -1], [-564, -111], [-245, 88], [-149, 164], [41, 580], [0, 9], [0, 9], [-1, 9], [-1, 9], [-3, 9], [-2, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-259, 102], [-187, 498], [-2, 5], [-192, 449], [-4, 8], [-4, 7], [-5, 6], [-6, 6], [-5, 5], [-335, 255]], [[38155, 6302], [182, 119], [6, 4], [272, 226], [5, 4], [5, 6], [5, 6], [4, 6], [3, 8], [3, 7], [3, 8], [2, 8], [1, 9], [1, 9], [0, 8], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-5, 5], [-5, 5], [-254, 195], [73, 3], [286, -6], [7, 0], [7, 2], [7, 2], [6, 4], [619, 394], [6, 4], [5, 5], [5, 5], [5, 7], [4, 6], [3, 8], [3, 8], [3, 8], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-3, 9], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-7, 1], [-283, 9], [-30, 305], [143, 131], [6, 6], [336, 397], [478, -297], [8, -4], [206, -84], [46, -60], [5, -6], [5, -5], [5, -4], [6, -3], [6, -3], [6, -2], [7, -1], [6, 0], [6, 1], [6, 2], [6, 3], [6, 3], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [2, 8], [3, 9], [26, 103], [171, 65], [6, 2], [6, 4], [6, 5], [5, 5], [5, 6], [4, 7], [4, 7], [4, 8], [148, 392], [154, -237], [4, -6], [5, -5], [4, -5], [5, -4], [625, -442], [5, -3], [6, -3], [6, -2], [6, -1], [7, 0], [6, 1], [6, 1], [6, 2], [277, 130], [305, -88], [5, -2], [6, 0], [6, 0], [6, 1], [305, 75], [190, 40], [430, -178], [415, -218], [6, -3], [6, -1], [6, -1], [6, -1], [6, 1], [6, 1], [6, 3], [283, 129], [347, 17], [643, -128], [6, -1], [7, 0], [6, 1], [6, 2], [7, 3], [5, 4], [344, 249], [283, -158], [7, -3], [6, -2], [7, -1], [434, -31], [2, 0], [96, -3], [6, 0], [6, 1], [7, 2], [5, 3], [6, 4], [6, 4], [5, 5], [4, 6], [5, 6], [3, 7], [286, 574], [51, -8], [-10, -745], [0, -9], [1, -9], [1, -9], [2, -8], [3, -9], [3, -7], [4, -8], [4, -6], [4, -7], [5, -5], [6, -5], [6, -4], [5, -3], [7, -2], [6, -1], [6, -1], [266, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [4, 5], [136, -37], [26, -331], [1, -9], [2, -8], [2, -8], [2, -8], [4, -8], [3, -7], [4, -6], [5, -6], [5, -5], [5, -5], [5, -4], [6, -3], [6, -2], [6, -1], [6, -1], [415, -13], [127, -467], [3, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -6], [5, -5], [6, -3], [406, -248], [6, -3], [6, -2], [6, -2], [6, 0], [6, 0], [6, 1], [6, 2], [5, 3], [6, 3], [5, 4], [5, 5], [5, 6], [4, 6], [240, 376], [929, -325], [-59, -156], [-313, -467], [-531, -102], [-210, 11], [-7, 0], [-7, -1], [-7, -3], [-7, -3], [-453, -276], [-5, -4], [-5, -4], [-94, -91], [-154, -74], [-391, 78], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-553, -184], [-5, -3], [-6, -2], [-5, -4], [-349, -274], [-200, -145], [-305, -96], [-162, 42], [-5, 1], [-589, 81], [-6, 1], [-6, -1], [-6, -1], [-6, -2], [-6, -3], [-194, -112], [-5, -3], [-15, -12], [-169, -68], [-666, 200], [-7, 1], [-6, 1], [-742, 5], [-7, 0], [-315, -48], [-257, -30], [-9, -2], [-481, -152], [-6, -2], [-6, -3], [-435, -272], [-1066, -262], [-484, -15], [-6, 0], [-6, -2], [-646, -189], [-304, 78], [-109, 474], [77, 63], [242, 51], [7, 2], [6, 3], [6, 3], [5, 5], [6, 5], [5, 6], [4, 7], [4, 7], [4, 8], [2, 8], [58, 193], [3, 9], [1, 9], [1, 9], [1, 10], [-1, 9], [-1, 9], [-2, 9], [-2, 9], [-3, 8], [-137, 342], [4, 1], [6, 3], [6, 3], [5, 5], [5, 5], [5, 5], [4, 7], [4, 7], [4, 7], [2, 8], [3, 8], [1, 9], [2, 8], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-624, 521], [-5, 4], [-6, 3], [-6, 3], [-7, 1], [-6, 1], [-7, 0], [-6, -1], [-43, -11], [-256, 328], [-6, 6], [-6, 5], [-9, 7], [-7, 190]], [[6938, 10969], [52, 151], [772, 59], [6, 1], [7, 2], [418, 157], [6, 3], [5, 3], [6, 5], [5, 4], [4, 6], [5, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 8], [1, 8], [1, 9], [0, 9], [0, 8], [-1, 9], [-2, 8], [-83, 364], [-2, 8], [-2, 7], [-4, 8], [-3, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-5, 4], [-132, 80], [-5, 2], [-5, 3], [-532, 182], [-202, 526], [246, 184], [5, 4], [5, 5], [5, 5], [4, 6], [3, 7], [4, 7], [2, 7], [191, 578], [290, 251], [5, 5], [5, 5], [4, 7], [4, 7], [4, 7], [3, 8], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [0, 9], [-2, 8], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-250, 311], [251, 293], [5, 6], [4, 6], [3, 7], [3, 7], [3, 8], [2, 8], [2, 8], [99, 603], [2, 8], [0, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-121, 292], [-4, 7], [-4, 7], [-4, 7], [-5, 5], [-6, 5], [-5, 5], [-6, 3], [-127, 64], [1, 4], [0, 8], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 7], [-4, 8], [-3, 7], [-5, 6], [-5, 6], [-265, 287], [205, 189], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-153, 403], [260, 148], [269, -29], [7, -1], [6, 1], [6, 2], [6, 2], [6, 3], [6, 5], [5, 5], [5, 5], [5, 7], [4, 7], [4, 7], [3, 8], [87, 265], [172, 426], [385, 114], [491, -354], [7, -4], [7, -3], [7, -2], [4, -1], [529, -135], [6, -1], [6, 0], [6, 0], [6, 1], [6, 3], [5, 2], [534, 311], [168, -470], [3, -8], [3, -7], [4, -6], [5, -7], [5, -5], [5, -5], [6, -4], [5, -3], [6, -2], [6, -2], [483, -88], [6, -1], [7, 1], [6, 1], [6, 1], [6, 3], [6, 4], [5, 4], [5, 5], [281, 306], [5, 6], [4, 6], [4, 7], [4, 8], [3, 8], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-4, 6], [-5, 5], [-117, 110], [313, 317], [248, 174], [411, -91], [235, -164], [5, -4], [7, -3], [6, -2], [6, -1], [7, 0], [6, 1], [6, 2], [6, 2], [6, 4], [179, 121], [5, 4], [5, 5], [5, 6], [4, 6], [4, 6], [278, 526], [565, 62], [544, -651], [5, -5], [6, -5], [6, -4], [195, -114], [5, -3], [6, -2], [5, -1], [6, -1], [6, 1], [225, 20], [294, -109], [262, -470], [204, -827], [-240, -273], [-5, -6], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -9], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -9], [2, -9], [2, -9], [138, -477], [-28, -570], [-551, -517], [-5, -5], [-4, -5], [-4, -6], [-228, -367], [-4, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [0, -9], [0, -8], [0, -9], [1, -9], [2, -8], [2, -8], [3, -8], [4, -7], [3, -7], [5, -6], [4, -6], [5, -5], [6, -4], [539, -384], [-340, -446], [-401, -471], [-230, -210], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -9], [1, -9], [0, -8], [2, -9], [1, -8], [3, -8], [3, -8], [3, -7], [4, -7], [5, -6], [5, -6], [43, -44], [-59, -18], [-7, -2], [-6, -4], [-5, -4], [-6, -4], [-5, -6], [-4, -6], [-4, -7], [-4, -8], [-3, -7], [-3, -9], [-2, -8], [-1, -9], [-1, -9], [0, -9], [13, -466], [-170, -348], [-3, -8], [-3, -7], [-43, -136], [-47, -112], [-2, -8], [-3, -8], [-94, -368], [-405, -296], [-55, 203], [-2, 8], [-3, 7], [-4, 8], [-4, 6], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-478, 93], [-155, 200], [-4, 5], [-5, 5], [-5, 4], [-5, 3], [-6, 3], [-183, 75], [-6, 2], [-6, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-6, -4], [-5, -4], [-5, -6], [-5, -6], [-4, -6], [-3, -8], [-4, -7], [-2, -8], [-2, -9], [-2, -8], [-81, -598], [-197, -114], [-6, -4], [-6, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -9], [-47, -236], [-1, -5], [-64, -397], [-2, -9], [0, -9], [0, -10], [1, -9], [2, -9], [2, -9], [3, -8], [3, -8], [4, -8], [5, -7], [197, -269], [-128, -239], [-190, 66], [-97, 180], [-4, 6], [-4, 7], [-5, 5], [-5, 5], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-7, -1], [-6, -2], [-440, -168], [-145, 267], [-4, 7], [-4, 6], [-5, 6], [-5, 4], [-6, 5], [-5, 3], [-6, 2], [-7, 2], [-771, 149], [-453, 115], [-7, 2], [-7, 0], [-7, -1], [-327, -68], [-746, 117], [-193, 759], [-3, 8], [-2, 7], [-4, 8], [-4, 7], [-4, 6], [-5, 5], [-5, 5], [-6, 5], [-5, 3], [-6, 3], [-358, 130], [-5, 2], [-5, 1], [-5, 0], [-665, 4], [-200, 122], [-196, 393]], [[44664, 4461], [152, 88], [574, -79], [169, -45], [6, -1], [7, 0], [6, 1], [6, 1], [322, 102], [6, 2], [5, 2], [5, 3], [206, 150], [2, 1], [343, 270], [537, 179], [394, -79], [6, -1], [6, 0], [6, 1], [6, 2], [6, 2], [171, 83], [5, 3], [6, 3], [4, 5], [95, 91], [439, 267], [203, -10], [5, 0], [6, 1], [553, 106], [6, 1], [6, 3], [6, 3], [5, 4], [5, 5], [5, 5], [5, 6], [330, 492], [3, 6], [4, 7], [3, 6], [97, 257], [3, 8], [2, 8], [41, 179], [207, 290], [322, 366], [5, 6], [4, 7], [4, 7], [4, 8], [2, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 8], [-3, 9], [-2, 8], [-78, 206], [-14, 97], [-1, 8], [-3, 9], [-2, 7], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-260, 309], [-212, 463], [51, 270], [41, 107], [3, 8], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-3, 9], [-3, 7], [-4, 7], [-4, 7], [-254, 372], [-4, 6], [-6, 5], [-5, 5], [-6, 4], [-368, 217], [-312, 251], [4, 393], [66, 54], [281, 66], [313, -178], [6, -3], [6, -2], [7, -1], [6, 0], [6, 0], [263, 43], [7, 1], [6, 3], [6, 3], [6, 5], [6, 5], [5, 6], [4, 6], [202, 321], [614, -151], [22, -181], [2, -9], [2, -8], [2, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [5, -4], [6, -3], [6, -3], [6, -1], [439, -90], [342, -452], [5, -6], [5, -5], [6, -5], [6, -3], [6, -3], [378, -128], [182, -465], [3, -8], [4, -7], [4, -6], [5, -6], [5, -5], [5, -5], [6, -3], [6, -3], [6, -2], [6, -1], [6, -1], [6, 1], [7, 1], [6, 2], [6, 4], [5, 4], [5, 4], [5, 6], [5, 6], [4, 6], [4, 8], [3, 7], [132, 362], [496, -325], [6, -3], [6, -3], [6, -1], [7, -1], [6, 0], [7, 1], [6, 2], [6, 3], [360, 204], [38, -22], [6, -3], [6, -3], [6, -1], [6, 0], [6, 0], [549, 76], [627, -68], [278, -196], [6, -3], [6, -3], [7, -2], [6, -1], [6, 0], [7, 1], [6, 2], [6, 2], [6, 4], [6, 4], [5, 6], [217, 235], [423, 331], [309, -125], [-381, -640], [-4, -6], [-131, -262], [-427, -732], [-460, -536], [-4, -5], [-4, -5], [-450, -732], [-322, -179], [-6, -3], [-5, -5], [-5, -5], [-5, -5], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-110, -459], [-1, -9], [-2, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -8], [230, -840], [-77, -103], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-3, -9], [-1, -9], [-1, -9], [0, -9], [2, -642], [-21, -39], [-4, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -9], [131, -502], [-25, -390], [-129, -444], [-115, -179], [-4, -6], [-3, -7], [-3, -7], [-2, -7], [-2, -8], [-214, -999], [-1, -7], [-1, -7], [-1, -7], [-13, -386], [-786, -43], [-443, 119], [-7, 1], [-882, 104], [-621, 284], [-831, 441], [-128, 349], [-218, 784], [-2, 8], [-3, 7], [-107, 243], [-4, 7], [-4, 7], [-5, 6], [-85, 105], [-5, 6], [-5, 4], [-5, 4], [-6, 4], [-5, 2], [-6, 2], [-6, 0], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-451, -366], [-815, -21], [-200, 550], [-3, 7], [-3, 7], [-4, 6], [-4, 6], [-5, 5], [-5, 5], [-186, 159], [-5, 4], [-6, 4], [-6, 2], [-7, 2], [-6, 1], [-6, 0], [-6, -1], [-7, -2], [-6, -2], [-5, -4], [-6, -4], [-5, -5], [-5, -6], [-4, -7], [-179, -288], [-735, 76], [-6, 0], [-5, 0], [-562, -74], [-256, 390], [-4, 6], [-5, 5], [-5, 5], [-5, 4], [-6, 3], [-5, 3], [-384, 138], [-96, 352]], [[33048, 22420], [325, 691], [423, 240], [6, 3], [5, 5], [5, 5], [5, 5], [4, 7], [102, 171], [541, 335], [12, 3], [265, -101], [177, -355], [4, -6], [4, -6], [183, -253], [197, -332], [5, -6], [4, -6], [5, -5], [6, -5], [354, -261], [6, -4], [6, -3], [6, -2], [7, -1], [7, 0], [391, 25], [5, 1], [5, 1], [248, 76], [361, 81], [5, 2], [333, 111], [477, 36], [6, 1], [7, 2], [6, 3], [6, 4], [6, 5], [6, 6], [351, 410], [3, 3], [254, 335], [338, -118], [76, -199], [-43, -87], [-3, -8], [-3, -7], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [0, -8], [2, -9], [1, -8], [3, -8], [3, -8], [3, -7], [4, -7], [4, -6], [5, -5], [311, -334], [-48, -289], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [4, -8], [4, -6], [5, -7], [5, -5], [6, -5], [319, -240], [51, -303], [-31, -257], [-293, -579], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-65, -718], [-25, -82], [-2, -8], [-2, -8], [-1, -9], [0, -9], [0, -8], [1, -9], [1, -9], [2, -8], [25, -96], [-12, -116], [0, -8], [0, -9], [0, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -7], [4, -7], [85, -130], [-139, -603], [-134, -230], [-4, -6], [-3, -7], [-2, -7], [-2, -8], [-2, -7], [-120, -678], [-240, -298], [-359, 297], [-6, 4], [-6, 4], [-6, 2], [-6, 2], [-6, 0], [-7, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-452, -333], [-6, -5], [-5, -6], [-5, -6], [-5, -8], [-180, -324], [-2, 5], [-4, 7], [-4, 7], [-534, 787], [-5, 6], [-5, 5], [-5, 5], [-6, 4], [-5, 3], [-6, 3], [-361, 111], [86, 212], [3, 8], [2, 8], [2, 9], [1, 8], [0, 9], [0, 9], [0, 9], [-2, 8], [-1, 9], [-3, 8], [-3, 7], [-3, 8], [-4, 6], [-4, 7], [-5, 5], [-5, 5], [-6, 4], [-5, 4], [-6, 2], [-834, 306], [3, 146], [-1, 8], [0, 9], [-2, 9], [-1, 8], [-3, 8], [-3, 7], [-3, 8], [-4, 6], [-4, 7], [-5, 5], [-5, 5], [-5, 4], [-6, 3], [-6, 3], [-6, 2], [-480, 113], [-14, 5], [-324, 116], [-6, 2], [-7, 0], [-6, 0], [-6, -1], [-7, -1], [-6, -3], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-163, -217], [-6, 1], [-230, 496], [-5, 118], [-1, 8], [-1, 9], [-2, 8], [-2, 9], [-3, 7], [-4, 8], [-4, 6], [-4, 7], [-5, 5], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-6, 2], [-263, 53], [-86, 262], [421, 202], [6, 3], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [3, 9], [1, 8], [2, 9], [0, 9], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-6, 5], [-5, 4], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-7, 0], [-362, -29], [-135, 248], [-17, 184], [-5, 226], [83, 102], [4, 6], [5, 7], [3, 7], [3, 8], [3, 8], [2, 8], [1, 9], [43, 341], [1, 9], [0, 9], [-1, 9], [-1, 9], [-1, 9], [-3, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 5], [-6, 3], [-6, 3], [-6, 2], [-354, 78], [-305, 319], [-7, 115]], [[31064, 14283], [34, 11], [223, -412], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [5, -3], [7, -2], [6, -2], [6, -1], [6, 1], [7, 1], [6, 2], [338, 137], [6, 3], [5, 3], [5, 5], [5, 5], [5, 5], [4, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 8], [1, 8], [1, 9], [0, 9], [0, 8], [-20, 205], [252, 165], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 9], [2, 9], [63, 588], [38, 314], [65, 380], [473, 52], [6, 1], [7, 2], [6, 3], [5, 4], [6, 4], [5, 6], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [37, 272], [194, 120], [152, -435], [40, -610], [1, -9], [1, -8], [2, -8], [3, -8], [3, -8], [3, -7], [4, -6], [5, -6], [4, -5], [5, -5], [6, -4], [5, -3], [268, -136], [30, -261], [-164, -314], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -9], [0, -8], [0, -9], [2, -9], [1, -8], [2, -8], [3, -8], [3, -7], [4, -7], [4, -6], [5, -6], [5, -5], [271, -248], [104, -241], [4, -8], [4, -7], [5, -7], [6, -6], [133, -125], [148, -317], [0, -3], [2, -8], [2, -8], [2, -8], [3, -8], [4, -7], [4, -6], [101, -148], [5, -6], [5, -5], [5, -5], [6, -4], [5, -3], [204, -91], [147, -337], [-142, -177], [-5, -6], [-4, -7], [-4, -8], [-3, -8], [-2, -9], [-2, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [61, -503], [2, -8], [2, -8], [2, -8], [3, -7], [3, -7], [4, -7], [4, -6], [5, -5], [5, -5], [15, -14], [7, -5], [139, -89], [5, -3], [6, -3], [5, -1], [6, -1], [6, 0], [491, 28], [147, -223], [-103, -476], [-143, -109], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -9], [-1, -8], [-1, -9], [-1, -9], [1, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -6], [5, -6], [5, -6], [5, -4], [6, -4], [413, -240], [6, -3], [6, -2], [6, -2], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [126, 143], [61, -128], [4, -6], [4, -7], [319, -455], [-147, -217], [-4, -7], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -9], [0, -8], [-1, -9], [1, -9], [0, -8], [2, -9], [2, -8], [2, -8], [3, -7], [4, -7], [132, -239], [5, -7], [4, -6], [5, -6], [6, -4], [5, -4], [6, -4], [6, -2], [7, -1], [6, -1], [6, 1], [7, 1], [6, 2], [6, 3], [188, 111], [37, -96], [-244, -318], [-4, -7], [-4, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [3, -8], [4, -7], [5, -6], [5, -5], [5, -5], [5, -4], [281, -185], [-604, -460], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-3, -7], [-4, -7], [-2, -8], [-2, -8], [-2, -8], [-1, -8], [-1, -9], [0, -8], [4, -85], [-227, -119], [-190, 196], [-5, 5], [-5, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-110, -138], [-436, 99], [-43, 19], [-6, 2], [-6, 2], [-7, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-6, -4], [-5, -4], [-5, -5], [-127, -148], [-184, 228], [-5, 6], [-5, 4], [-6, 4], [-6, 4], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-6, -4], [-342, -238], [-239, 116], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -4], [-417, -359], [-5, -6], [-5, -5], [-4, -7], [-4, -7], [-4, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -7], [5, -7], [94, -139], [-78, -125], [-158, 93], [-15, 259], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 5], [-5, 5], [-6, 4], [-5, 3], [-290, 147], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-5, -6], [-37, -56], [-162, -225], [-537, -632], [-127, -68], [-40, 73], [254, 403], [4, 7], [3, 8], [3, 8], [2, 8], [2, 8], [1, 9], [1, 9], [0, 9], [-1, 8], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-112, 265], [97, 102], [6, 7], [4, 7], [5, 8], [3, 8], [77, 201], [2, 8], [3, 8], [1, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 9], [-3, 8], [-2, 8], [-4, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-231, 91], [-158, 275], [2, 5], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 9], [-4, 7], [-3, 8], [-4, 6], [-175, 264], [-3, 5], [-121, 159], [349, 238], [6, 4], [5, 5], [4, 5], [5, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 8], [2, 9], [0, 9], [0, 8], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 6], [-4, 7], [-5, 6], [-4, 4], [-208, 296], [3, 5], [3, 8], [3, 8], [65, 211], [2, 9], [2, 10], [1, 9], [0, 10], [-1, 9], [-1, 9], [-1, 10], [-132, 558], [14, 61], [1, 6], [40, 221], [1, 9], [1, 10], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-197, 741], [45, 277], [77, 11], [7, 1], [6, 2], [6, 4], [6, 4], [5, 4], [5, 6], [5, 6], [4, 7], [4, 7], [3, 8], [3, 9], [2, 8], [1, 9], [1, 9], [0, 9], [-7, 287], [-1, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 8], [-4, 7], [-4, 7], [-4, 7], [-5, 5], [-6, 5], [-267, 223], [-24, 189], [170, 41], [6, 2], [6, 3], [6, 3], [5, 4], [5, 6], [5, 5], [4, 7], [4, 7], [4, 7], [2, 8], [3, 9], [1, 8], [2, 9], [0, 9], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 8], [-74, 168], [-95, 254], [-66, 558]], [[16401, 2259], [311, 952], [685, 167], [6, 2], [5, 3], [6, 3], [5, 4], [5, 5], [5, 6], [167, 218], [5, 7], [4, 8], [4, 8], [95, 247], [3, 8], [2, 9], [1, 8], [1, 9], [1, 9], [-1, 9], [-1, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-133, 227], [-5, 7], [-5, 6], [-5, 6], [-6, 4], [-6, 4], [-6, 3], [-7, 2], [-273, 59], [148, 219], [333, 173], [318, -61], [6, -1], [7, 1], [6, 1], [6, 2], [6, 3], [6, 3], [6, 5], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [49, 346], [1, 8], [0, 9], [0, 9], [-1, 9], [-1, 9], [-3, 8], [-2, 9], [-167, 439], [153, 336], [4, 10], [84, 250], [256, 66], [6, 2], [6, 3], [6, 4], [6, 5], [5, 5], [5, 6], [4, 7], [264, 458], [4, 6], [3, 8], [3, 7], [2, 8], [1, 8], [1, 9], [1, 8], [0, 9], [-4, 91], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-3, 7], [-4, 7], [-3, 7], [-5, 6], [-4, 6], [-5, 5], [-5, 4], [-225, 160], [183, 144], [4, 4], [5, 4], [4, 6], [4, 5], [243, 395], [4, 7], [4, 8], [3, 8], [2, 9], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 10], [-2, 8], [-9, 42], [150, 39], [6, 2], [6, 3], [6, 3], [5, 5], [5, 5], [5, 6], [5, 7], [3, 7], [4, 8], [2, 8], [3, 9], [1, 8], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-81, 135], [275, 62], [627, -112], [7, -1], [6, 1], [6, 1], [7, 2], [6, 3], [6, 3], [5, 5], [5, 5], [36, 41], [4, 5], [4, 6], [206, 331], [362, 276], [436, 114], [143, -196], [5, -6], [5, -5], [6, -5], [6, -4], [6, -2], [6, -2], [7, -1], [583, -44], [7, -1], [6, 1], [6, 2], [6, 3], [6, 3], [6, 5], [5, 5], [5, 6], [5, 6], [4, 8], [3, 7], [3, 9], [2, 8], [2, 9], [1, 9], [61, 769], [0, 7], [0, 8], [-15, 403], [13, 30], [297, -113], [50, -438], [-7, -174], [0, -9], [0, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -8], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [6, -4], [6, -2], [6, -2], [7, 0], [6, 0], [7, 1], [6, 2], [93, 38], [542, -139], [163, -749], [-215, -129], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-2, -8], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -9], [1, -8], [2, -9], [3, -8], [3, -7], [4, -7], [4, -7], [4, -6], [5, -5], [50, -49], [-70, -86], [-4, -6], [-4, -7], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-1, -8], [-1, -9], [0, -9], [0, -8], [40, -612], [1, -8], [1, -9], [2, -8], [3, -8], [3, -8], [3, -7], [4, -6], [5, -6], [5, -6], [5, -4], [5, -4], [6, -3], [6, -3], [6, -1], [6, -1], [412, -18], [-31, -124], [-1, -9], [-2, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -7], [5, -7], [4, -6], [5, -6], [6, -5], [6, -4], [6, -3], [6, -2], [112, -33], [382, -119], [-13, -43], [-2, -8], [-1, -9], [-1, -8], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -8], [3, -8], [3, -8], [3, -7], [4, -7], [5, -6], [4, -5], [6, -5], [160, -135], [95, -211], [0, 0], [167, -367], [3, -8], [5, -7], [5, -6], [5, -6], [6, -4], [6, -4], [6, -3], [151, -61], [-1, -5], [-1, -9], [0, -9], [1, -9], [1, -8], [1, -9], [3, -8], [3, -8], [3, -7], [4, -7], [4, -7], [5, -5], [5, -6], [5, -4], [6, -3], [504, -278], [-54, -318], [-1, -9], [-1, -8], [1, -9], [0, -9], [1, -9], [2, -8], [3, -9], [3, -7], [3, -8], [4, -7], [5, -6], [5, -5], [5, -5], [5, -4], [6, -4], [6, -2], [6, -2], [9, -2], [-10, -437], [-273, -344], [-5, -7], [-4, -7], [-4, -8], [-3, -8], [-3, -9], [-1, -9], [-1, -9], [-44, -529], [-1, -9], [0, -8], [1, -9], [2, -9], [2, -8], [2, -9], [3, -7], [4, -7], [4, -7], [5, -6], [4, -6], [6, -4], [5, -4], [6, -4], [6, -2], [6, -1], [499, -85], [-23, -119], [-1, -7], [-1, -7], [-6, -72], [-64, -368], [-74, -371], [-24, -70], [-169, -230], [-4, -6], [-3, -6], [-4, -7], [-2, -8], [-3, -7], [-1, -8], [-48, -260], [-181, 23], [-6, 0], [-6, 0], [-7, -2], [-6, -2], [-5, -3], [-6, -4], [-5, -4], [-5, -6], [-5, -6], [-4, -6], [-4, -7], [-164, -348], [-3, -7], [-2, -8], [-3, -8], [-1, -8], [-92, -589], [-303, 159], [-5, 2], [-507, 198], [-6, 1], [-5, 1], [-411, 52], [-627, 244], [-383, 231], [-7, 3], [-6, 3], [-7, 1], [-7, 0], [-545, -17], [-7, -1], [-6, -2], [-127, -43], [-612, 158], [-698, 348], [-7, 2], [-7, 2], [-7, 1], [-271, -1], [-2, 0], [-245, -13], [-3, 0], [-673, -90], [-10, -2], [-359, -125], [-4, -2], [-396, -185], [-434, -78], [-616, 154], [-564, 220], [-146, 296]], [[14645, 13876], [180, 289], [557, 522], [581, 41], [6, 1], [6, 1], [6, 3], [335, 168], [525, -357], [6, -4], [6, -2], [6, -2], [7, -1], [6, 0], [7, 1], [905, 216], [6, 2], [6, 3], [6, 3], [5, 4], [5, 5], [5, 6], [161, 210], [527, -52], [161, -68], [7, -2], [6, -1], [7, 0], [6, 1], [7, 1], [6, 3], [6, 3], [6, 5], [303, 259], [257, -28], [28, -25], [6, -4], [6, -4], [6, -2], [6, -2], [6, -1], [6, 0], [6, 1], [7, 1], [5, 3], [6, 3], [6, 4], [5, 5], [266, 275], [121, 49], [455, -345], [5, -4], [6, -3], [6, -2], [6, -1], [6, -1], [6, 1], [6, 1], [6, 2], [6, 3], [486, 273], [6, 4], [5, 4], [5, 5], [4, 6], [5, 6], [49, 81], [277, 99], [3, -3], [5, -5], [5, -3], [6, -3], [6, -2], [6, -1], [6, -1], [314, 0], [245, -187], [5, -4], [6, -3], [7, -2], [6, -1], [6, -1], [7, 1], [6, 1], [547, 168], [356, -235], [-251, -403], [-4, -7], [-3, -8], [-3, -7], [-2, -8], [-2, -9], [-1, -9], [-1, -8], [0, -9], [1, -9], [1, -8], [2, -9], [2, -8], [3, -8], [341, -816], [-229, -301], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [0, -9], [2, -8], [2, -9], [2, -8], [3, -8], [72, -163], [16, -187], [-236, -82], [-6, -3], [-6, -3], [-6, -5], [-5, -5], [-5, -5], [-4, -7], [-4, -7], [-4, -7], [-3, -9], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [1, -9], [0, -9], [2, -8], [2, -9], [68, -249], [-198, -161], [-5, -5], [-5, -5], [-4, -6], [-4, -6], [-4, -7], [-3, -8], [-2, -8], [-2, -8], [-2, -8], [-1, -8], [0, -9], [0, -9], [1, -8], [47, -367], [2, -13], [15, -65], [2, -8], [3, -7], [16, -41], [-71, -422], [-2, -9], [0, -10], [0, -9], [1, -9], [31, -246], [2, -9], [2, -8], [2, -8], [3, -8], [4, -7], [4, -6], [4, -7], [5, -5], [5, -5], [43, -34], [61, -560], [-47, -497], [0, -8], [0, -9], [5, -140], [-294, 112], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-7, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-5, -6], [-4, -7], [-3, -8], [-40, -96], [-3, -8], [-3, -8], [-1, -9], [-2, -9], [0, -8], [0, -9], [15, -419], [-55, -695], [-516, 39], [-148, 203], [-5, 6], [-5, 5], [-5, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-6, -1], [-6, -1], [-470, -122], [-6, -3], [-6, -3], [-6, -4], [-354, -270], [-298, 179], [-380, 410], [-168, 216], [-5, 6], [-6, 5], [-5, 4], [-6, 4], [-7, 2], [-6, 2], [-493, 86], [-262, 195], [-5, 4], [-6, 3], [-6, 2], [-5, 1], [-6, 1], [-363, 11], [-6, 0], [-6, -1], [-7, -2], [-5, -3], [-6, -4], [-6, -4], [-5, -5], [-4, -6], [-5, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [0, -3], [-439, 336], [-35, 60], [-4, 7], [-5, 6], [-4, 5], [-6, 5], [-280, 216], [-7, 4], [-312, 176], [-30, 181], [-1, 8], [-3, 9], [-2, 7], [-4, 8], [-4, 7], [-4, 6], [-279, 379], [-18, 240], [-1, 7], [-1, 7], [-124, 662], [87, 13], [6, 1], [6, 3], [6, 2], [5, 4], [6, 5], [5, 5], [4, 6], [4, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 8], [1, 9], [0, 9], [0, 8], [-1, 9], [-1, 8], [-2, 9], [-2, 8], [-94, 276], [-3, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-6, 4], [-710, 586], [-6, 5], [-7, 3], [-6, 3], [-7, 1], [-381, 54], [-296, 353], [-6, 7], [-7, 5], [-554, 394]], [[44429, 21813], [143, -3], [6, 0], [7, 1], [6, 2], [6, 3], [6, 4], [6, 5], [5, 6], [131, 156], [4, 7], [5, 7], [3, 7], [3, 8], [3, 8], [2, 9], [28, 145], [414, -27], [6, 0], [6, 1], [349, 72], [6, 2], [6, 3], [6, 3], [6, 5], [5, 5], [5, 6], [5, 6], [4, 7], [3, 8], [3, 8], [2, 9], [2, 8], [1, 9], [1, 9], [-1, 10], [-17, 310], [435, 46], [31, -63], [30, -351], [0, -9], [2, -8], [2, -8], [3, -7], [3, -8], [3, -7], [87, -152], [116, -488], [2, -9], [3, -8], [4, -7], [4, -7], [4, -7], [5, -6], [5, -5], [6, -4], [6, -4], [6, -2], [6, -2], [6, -1], [7, 0], [6, 1], [333, 75], [6, 2], [6, 3], [6, 3], [6, 5], [5, 5], [5, 6], [5, 7], [3, 7], [4, 8], [143, 367], [2, 8], [3, 9], [1, 8], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-4, 6], [-6, 5], [-5, 4], [-6, 4], [-6, 3], [-199, 80], [81, 498], [354, -90], [8, -1], [361, -29], [377, -299], [6, -4], [6, -3], [6, -2], [7, -2], [6, 0], [7, 0], [6, 2], [7, 2], [173, 82], [5, 3], [5, 4], [5, 4], [5, 5], [192, 219], [5, 6], [4, 7], [4, 6], [3, 8], [2, 7], [3, 9], [38, 164], [26, -44], [4, -6], [5, -7], [6, -5], [6, -5], [6, -3], [6, -3], [6, -2], [7, -1], [559, -35], [86, -185], [4, -7], [4, -6], [4, -6], [5, -5], [6, -5], [5, -4], [176, -108], [5, -3], [7, -2], [6, -1], [6, -1], [6, 0], [7, 2], [413, 110], [162, -57], [-124, -248], [-3, -7], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [26, -606], [1, -10], [2, -11], [77, -355], [137, -842], [-108, -285], [-2, -8], [-3, -9], [-1, -9], [-1, -9], [0, -9], [0, -9], [1, -8], [1, -9], [84, -385], [2, -8], [3, -8], [3, -7], [4, -7], [179, -311], [112, -383], [23, -484], [-347, -159], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-148, -173], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [5, -5], [468, -524], [140, -629], [2, -9], [3, -8], [4, -8], [3, -7], [5, -6], [5, -6], [5, -6], [5, -4], [6, -4], [6, -3], [82, -31], [-79, -315], [-176, 73], [-1, 0], [-351, 139], [-5, 2], [-6, 1], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-5, -4], [-435, -323], [-456, -14], [-522, 124], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-167, -132], [-448, 167], [-6, 2], [-6, 1], [-6, 0], [-5, 0], [-6, -1], [-120, -36], [-346, 392], [-142, 165], [1, 6], [1, 9], [-1, 9], [0, 8], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-5, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-7, -1], [-6, -1], [-6, -3], [-5, -3], [-299, -192], [-308, 187], [-149, 138], [-41, 125], [76, 484], [1, 8], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-3, 8], [-233, 418], [-55, 105], [-4, 7], [-5, 7], [-5, 5], [-5, 5], [-228, 189], [0, 17], [0, 9], [-1, 9], [-2, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-5, 6], [-5, 5], [-6, 5], [-382, 268], [-84, 122], [-96, 225], [-14, 122], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-215, 408], [-71, 248], [-1, 5], [-162, 475], [-1, 5], [-284, 725], [-1, 582]], [[32909, 6990], [305, 408], [4, 6], [136, 218], [4, 7], [4, 7], [2, 9], [3, 8], [2, 9], [1, 8], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-82, 122], [341, 295], [236, -115], [6, -2], [7, -2], [6, -1], [6, 0], [6, 1], [6, 2], [6, 3], [6, 3], [330, 230], [191, -236], [5, -6], [5, -5], [6, -4], [6, -3], [6, -3], [6, -1], [6, -1], [7, 1], [6, 1], [6, 2], [6, 3], [6, 4], [6, 4], [5, 6], [139, 162], [21, -9], [8, -3], [464, -105], [6, -1], [6, -1], [7, 1], [6, 2], [6, 2], [5, 4], [6, 4], [5, 5], [5, 5], [97, 122], [179, -185], [5, -5], [6, -4], [6, -3], [6, -3], [6, -1], [6, -1], [6, 0], [7, 1], [6, 2], [6, 2], [260, 137], [121, -142], [-121, -214], [-4, -8], [-4, -8], [-2, -8], [-2, -9], [-2, -9], [0, -9], [-1, -9], [1, -9], [10, -111], [-161, 156], [-5, 4], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -5], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-42, -430], [-1, -12], [-1, -415], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [6, -5], [6, -4], [6, -3], [6, -1], [7, -2], [6, 0], [6, 1], [61, -148], [4, -8], [4, -7], [4, -7], [5, -5], [6, -5], [75, -63], [28, -67], [3, -7], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [5, -4], [407, -203], [5, -2], [200, -72], [-84, -284], [-2, -7], [-2, -7], [-1, -8], [-2, -28], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [2, -8], [3, -8], [4, -8], [4, -6], [4, -7], [5, -5], [5, -5], [6, -4], [5, -4], [7, -2], [6, -2], [6, -1], [6, 0], [6, 1], [7, 2], [6, 3], [5, 3], [275, 188], [165, -183], [6, -5], [5, -5], [6, -3], [422, -222], [136, -85], [6, -3], [6, -2], [6, -2], [7, 0], [6, 0], [102, 13], [7, 1], [179, 50], [5, 2], [6, 3], [5, 3], [5, 4], [5, 4], [4, 6], [263, 338], [135, 106], [245, -313], [5, -6], [5, -5], [6, -4], [6, -3], [6, -3], [7, -2], [6, 0], [6, 0], [7, 1], [49, 12], [507, -423], [-3, -8], [-3, -8], [-1, -8], [-2, -9], [0, -8], [0, -9], [0, -9], [1, -8], [2, -9], [2, -8], [3, -8], [164, -410], [-37, -122], [-223, -48], [-6, -1], [-6, -3], [-5, -3], [-5, -3], [-122, -99], [-6, -5], [-4, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -9], [-2, -8], [0, -9], [-1, -9], [1, -9], [1, -9], [2, -8], [113, -492], [-416, -129], [-5, -1], [-5, -3], [-696, -382], [-520, -105], [-5, -2], [-6, -2], [-6, -3], [-5, -4], [-5, -5], [-4, -5], [-5, -5], [-254, -362], [-239, -311], [-503, -332], [-5, -3], [-5, -5], [-5, -5], [-4, -5], [-312, -456], [-425, -498], [-478, -451], [-480, -84], [-69, 959], [-1, 9], [-2, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-5, 6], [-5, 5], [-132, 117], [-133, 198], [-47, 189], [-2, 7], [-3, 8], [-120, 300], [202, 265], [5, 7], [4, 7], [3, 7], [3, 8], [2, 8], [2, 9], [1, 9], [1, 8], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 7], [-4, 8], [-4, 7], [-53, 82], [-103, 499], [188, 463], [2, 5], [95, 282], [426, 216], [6, 4], [5, 4], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 8], [1, 9], [1, 8], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-69, 225], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-4, 6], [-5, 5], [-5, 4], [-6, 4], [-5, 3], [-229, 104], [251, 711], [2, 8], [2, 8], [1, 9], [1, 8], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-184, 309], [-4, 6], [-4, 6], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-5, -3], [-6, -3], [-5, -5], [-106, -94], [-110, 264], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-6, 2], [-7, 1], [-394, 20], [-6, 0], [-192, -15], [-276, 320], [-24, 147], [-2, 8], [-3, 9], [-2, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-242, 168]], [[13266, 21420], [503, 146], [6, 2], [6, 3], [5, 4], [6, 5], [5, 5], [4, 6], [5, 7], [3, 7], [3, 8], [3, 8], [2, 8], [2, 9], [1, 9], [0, 9], [-1, 8], [-40, 532], [207, 546], [3, 9], [2, 8], [2, 9], [1, 9], [0, 10], [-1, 9], [-1, 9], [-1, 9], [-71, 304], [52, 351], [182, 149], [736, -196], [7, -1], [6, 0], [7, 0], [6, 2], [6, 2], [7, 4], [5, 4], [97, 81], [5, 4], [4, 5], [4, 6], [4, 6], [4, 7], [328, 702], [281, 227], [6, 7], [104, 111], [325, -177], [6, -3], [6, -2], [6, -1], [6, 0], [7, 1], [409, 71], [168, -50], [5, -1], [5, 0], [147, -12], [220, -383], [-24, -371], [0, -9], [0, -10], [1, -9], [2, -9], [2, -8], [3, -8], [4, -8], [4, -7], [4, -7], [132, -176], [5, -5], [4, -5], [5, -4], [6, -3], [5, -3], [6, -2], [6, -1], [520, -84], [139, -460], [-177, 10], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-2, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [0, -9], [2, -8], [1, -9], [2, -8], [160, -522], [2, -7], [3, -7], [4, -6], [3, -6], [239, -353], [4, -6], [5, -5], [5, -5], [6, -4], [5, -3], [6, -2], [278, -92], [7, -2], [8, 0], [7, 0], [443, 71], [54, -636], [1, -8], [2, -9], [2, -8], [3, -8], [116, -292], [3, -7], [4, -7], [4, -6], [4, -6], [5, -5], [5, -4], [6, -4], [5, -3], [272, -121], [-61, -43], [-6, -4], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-4, -7], [-2, -8], [-3, -8], [-1, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -8], [2, -9], [405, -1488], [26, -736], [1, -9], [1, -8], [2, -8], [2, -9], [3, -7], [3, -8], [4, -6], [4, -7], [5, -5], [5, -5], [5, -4], [6, -4], [310, -171], [8, -284], [0, -9], [2, -9], [1, -8], [3, -9], [3, -8], [3, -7], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [5, -4], [7, -2], [6, -2], [6, -1], [6, 0], [7, 1], [6, 2], [60, 23], [347, -73], [131, -235], [4, -6], [4, -6], [4, -5], [5, -4], [297, -256], [145, -388], [-39, -1009], [-285, -102], [-6, -3], [-6, -3], [-6, -5], [-5, -5], [-5, -6], [-5, -7], [-52, -84], [-452, -255], [-452, 343], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-6, 0], [-6, -2], [-6, -2], [-150, -60], [-5, -3], [-5, -3], [-5, -4], [-5, -4], [-246, -254], [-10, 8], [-5, 4], [-6, 4], [-5, 2], [-6, 2], [-6, 1], [-285, 32], [-7, 0], [-6, -1], [-7, -1], [-6, -3], [-6, -4], [-6, -4], [-298, -255], [-145, 61], [-7, 2], [-7, 1], [-553, 55], [-7, 0], [-6, -1], [-7, -1], [-6, -3], [-6, -3], [-5, -5], [-6, -5], [-5, -6], [-167, -216], [-874, -209], [-530, 360], [-5, 3], [-6, 3], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-348, -175], [-525, -37], [26, 536], [0, 8], [0, 9], [-1, 8], [-1, 8], [-2, 8], [-129, 442], [239, 271], [5, 6], [4, 6], [3, 7], [4, 7], [2, 8], [3, 8], [1, 8], [1, 8], [1, 9], [0, 9], [-1, 8], [-1, 9], [-1, 8], [-219, 887], [-3, 9], [-3, 9], [-4, 9], [-279, 498], [-4, 7], [-4, 5], [-5, 6], [-5, 4], [-5, 4], [-5, 3], [-6, 3], [-317, 118], [-7, 2], [-7, 1], [-7, -1], [-221, -19], [-177, 102], [-516, 617], [18, 35], [161, 66], [6, 3], [6, 3], [6, 5], [5, 5], [4, 6], [5, 6], [4, 8], [3, 7], [3, 8], [2, 9], [1, 8], [1, 9], [24, 318], [423, 311], [6, 4], [5, 6], [4, 6], [5, 6], [4, 7], [3, 8], [3, 8], [2, 8], [1, 9], [1, 9], [1, 8], [0, 9], [-1, 9], [-38, 287], [-1, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 8], [-4, 6], [-4, 6], [-5, 6], [-5, 4], [-6, 4], [-5, 3], [-6, 3], [-6, 1], [-6, 1], [-7, 0], [-6, -1], [-6, -2], [-6, -2], [-5, -4], [-162, -110], [-130, 315], [-4, 8], [-4, 7], [-5, 7], [-5, 6], [-5, 5], [-6, 4], [-460, 298], [-159, 154], [274, 352], [4, 7], [5, 7], [3, 8], [3, 8], [2, 9], [2, 8], [1, 9], [1, 10], [0, 9], [-1, 9], [-7, 55], [-2, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 4], [-389, 291], [-21, 116]], [[29241, 24634], [114, 249], [602, 20], [6, 0], [7, 2], [5, 2], [6, 3], [6, 4], [5, 5], [5, 5], [4, 6], [4, 6], [4, 8], [3, 7], [3, 8], [2, 8], [1, 9], [1, 8], [1, 9], [-1, 9], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-210, 167], [40, 196], [167, 6], [7, 0], [6, 2], [6, 2], [6, 3], [6, 5], [5, 4], [5, 6], [5, 6], [4, 7], [3, 8], [3, 8], [3, 8], [2, 9], [1, 9], [1, 9], [15, 430], [225, 375], [279, 122], [5, 3], [6, 4], [5, 4], [5, 5], [4, 6], [4, 6], [4, 6], [3, 8], [3, 7], [27, 87], [326, 61], [6, 2], [5, 2], [6, 3], [5, 3], [566, 430], [6, 5], [5, 6], [5, 7], [5, 7], [4, 8], [166, 395], [79, -23], [6, -1], [6, -1], [7, 1], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [1, 9], [1, 9], [1, 9], [-1, 8], [-1, 9], [-62, 458], [336, 441], [5, 6], [3, 6], [4, 8], [3, 7], [2, 8], [2, 8], [1, 9], [1, 9], [0, 8], [-1, 9], [-1, 8], [-1, 9], [-2, 8], [-3, 7], [-177, 453], [-3, 7], [-4, 8], [-5, 6], [-4, 6], [-6, 5], [-5, 5], [-98, 69], [-7, 4], [-6, 2], [-7, 2], [-71, 15], [220, 1275], [1, 9], [0, 9], [0, 9], [0, 8], [-2, 9], [-1, 9], [-3, 8], [-3, 8], [-3, 7], [-247, 471], [-4, 386], [284, 182], [6, 5], [5, 5], [5, 6], [5, 7], [4, 7], [4, 8], [3, 8], [110, 358], [637, 158], [419, -473], [234, -372], [4, -7], [5, -6], [5, -5], [6, -4], [6, -4], [6, -2], [7, -2], [440, -85], [7, 0], [7, 0], [7, 1], [320, 89], [5, 2], [5, 2], [5, 3], [41, 28], [415, -145], [216, -485], [4, -8], [5, -7], [480, -692], [-209, 28], [-7, 1], [-6, -1], [-7, -1], [-6, -2], [-6, -4], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -8], [-3, -8], [-2, -8], [-148, -569], [-32, -104], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -8], [1, -9], [2, -8], [3, -8], [205, -585], [-53, -493], [-1, -8], [0, -9], [1, -9], [1, -8], [1, -9], [3, -8], [2, -7], [4, -8], [3, -7], [427, -707], [5, -7], [5, -6], [5, -5], [6, -4], [6, -4], [6, -3], [6, -2], [7, 0], [6, 0], [7, 1], [253, 58], [6, 2], [7, 3], [5, 3], [6, 5], [5, 5], [5, 6], [4, 7], [4, 7], [4, 8], [3, 8], [2, 8], [1, 9], [1, 9], [1, 9], [-1, 9], [-22, 328], [361, -48], [163, -279], [-89, -347], [-2, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -7], [423, -786], [4, -7], [5, -6], [72, -91], [-294, -103], [-6, -2], [-6, -4], [-6, -4], [-5, -6], [-5, -6], [-5, -6], [-4, -8], [-3, -7], [-3, -9], [-3, -8], [-1, -9], [-1, -10], [-15, -207], [-28, -32], [-4, -6], [-5, -7], [-4, -8], [-3, -8], [-82, -231], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [0, -8], [3, -226], [0, -9], [1, -8], [2, -9], [2, -8], [2, -7], [3, -8], [4, -7], [4, -6], [5, -6], [4, -5], [6, -5], [5, -4], [6, -3], [5, -2], [6, -1], [999, -181], [23, -273], [-48, -264], [-1, -9], [-1, -8], [0, -9], [0, -9], [1, -8], [2, -9], [2, -8], [3, -8], [3, -7], [4, -7], [4, -6], [5, -6], [5, -5], [5, -5], [6, -3], [6, -3], [5, -2], [7, -1], [276, -38], [6, 0], [6, 0], [5, 1], [6, 2], [6, 3], [5, 3], [419, 290], [70, -48], [-167, -709], [-265, -349], [-337, -394], [-464, -35], [-6, -1], [-6, -1], [-335, -113], [-361, -81], [-4, -1], [-245, -75], [-373, -24], [-332, 246], [-193, 323], [-4, 7], [-181, 250], [-186, 371], [-4, 7], [-5, 6], [-4, 6], [-6, 5], [-5, 4], [-6, 4], [-6, 2], [-292, 112], [-7, 2], [-6, 1], [-7, 0], [-7, -1], [-30, -6], [-5, -2], [-5, -2], [-5, -3], [-557, -345], [-5, -4], [-5, -4], [-5, -5], [-4, -5], [-4, -6], [-102, -170], [-426, -242], [-6, -3], [-5, -5], [-6, -5], [-4, -6], [-5, -7], [-3, -7], [-318, -676], [-373, 259], [-6, 4], [-7, 3], [-6, 2], [-6, 1], [-7, 0], [-6, -1], [-33, -8], [-270, 365], [-5, 6], [-5, 5], [-6, 4], [-5, 4], [-7, 3], [-6, 1], [-6, 1], [-7, 0], [-6, -1], [-399, -86], [-6, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-3, -7], [-77, -180], [-338, 234], [-6, 3], [-6, 3], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-73, -37], [-236, 173], [-144, 365], [-4, 8], [-3, 7], [-5, 6], [-4, 6], [-5, 5], [-6, 5], [-6, 3], [-183, 103], [-5, 2], [-6, 2], [-5, 1], [-6, 1], [-554, 23], [-308, 37], [-196, 289], [-1, 2], [-103, 145], [-5, 6], [-4, 5], [-5, 4], [-5, 4], [-143, 89], [-38, 257]], [[35586, 6954], [1, 326], [30, 310], [189, -181], [5, -5], [6, -4], [6, -3], [6, -2], [6, -1], [7, -1], [6, 1], [6, 1], [6, 2], [6, 3], [6, 4], [6, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-22, 241], [139, 246], [4, 7], [3, 8], [3, 8], [2, 8], [1, 9], [1, 8], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-2, 8], [-3, 7], [-4, 7], [-4, 7], [-5, 6], [-166, 195], [-2, 62], [614, 469], [5, 5], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 9], [1, 8], [1, 9], [1, 9], [-1, 9], [-1, 9], [-2, 9], [-19, 85], [-2, 9], [-3, 8], [-4, 8], [-4, 7], [-4, 7], [-6, 6], [-5, 5], [-6, 4], [-233, 154], [217, 284], [4, 6], [4, 7], [4, 7], [2, 7], [3, 8], [2, 9], [1, 8], [1, 9], [0, 8], [-1, 9], [-1, 8], [-1, 9], [-3, 8], [-2, 8], [-79, 203], [-54, 217], [8, 18], [431, -53], [5, 0], [6, 1], [5, 1], [222, 55], [6, 2], [6, 3], [6, 4], [6, 5], [145, 136], [234, -106], [6, -2], [7, -2], [716, -104], [6, 0], [6, 0], [7, 1], [6, 2], [6, 3], [5, 4], [6, 4], [5, 6], [4, 5], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [2, 8], [1, 9], [3, 39], [219, 110], [272, -307], [5, -5], [4, -4], [5, -3], [88, -56], [-206, -309], [-4, -6], [-4, -8], [-3, -7], [-2, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [0, -9], [1, -8], [1, -9], [2, -8], [3, -8], [3, -7], [4, -7], [168, -296], [5, -8], [6, -7], [214, -234], [-348, -511], [-4, -7], [-3, -7], [-4, -7], [-2, -8], [-2, -9], [-2, -8], [0, -9], [-1, -9], [1, -8], [1, -9], [1, -9], [2, -8], [3, -8], [3, -7], [4, -7], [4, -7], [4, -6], [5, -5], [6, -5], [107, -83], [5, -3], [5, -3], [5, -2], [249, -90], [-59, -54], [-5, -5], [-5, -5], [-4, -7], [-4, -6], [-3, -8], [-3, -7], [-2, -8], [-2, -8], [-1, -9], [0, -8], [0, -9], [0, -8], [40, -413], [1, -9], [2, -9], [3, -8], [3, -8], [3, -8], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [6, -3], [6, -3], [7, -1], [6, -1], [100, -3], [-401, -255], [-276, 6], [-3, 0], [-233, -11], [-5, -1], [-31, -4], [-6, -2], [-6, -2], [-6, -3], [-6, -4], [-5, -4], [-5, -6], [-4, -5], [-5, -7], [-3, -7], [-4, -8], [-2, -7], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -8], [1, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [29, -18], [307, -236], [-191, -159], [-212, -138], [-6, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [-1, -9], [0, -9], [10, -279], [1, -9], [0, -2], [-110, -86], [-6, -5], [-5, -7], [-257, -331], [-162, -45], [-87, -11], [-125, 78], [-4, 2], [-415, 219], [-185, 204], [-5, 5], [-6, 4], [-6, 4], [-6, 3], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-7, -2], [-6, -3], [-6, -3], [-188, -129], [64, 218], [2, 8], [2, 8], [1, 9], [0, 8], [0, 9], [-1, 9], [-1, 8], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 3], [-6, 3], [-254, 91], [-387, 194], [-25, 59], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-6, 5], [-74, 63], [-76, 182], [-3, 7], [-4, 7], [-5, 6], [-4, 6], [-6, 5], [-5, 4], [-6, 4], [-2, 1]], [[36313, 7682], [-3, -7], [-3, -7], [-3, -10], [-2, -9], [-78, -346], [-2, -9], [-1, -10], [0, -9], [1, -10], [1, -9], [2, -9], [53, -223], [2, -8], [3, -8], [3, -8], [4, -6], [4, -7], [5, -6], [5, -5], [5, -4], [6, -4], [6, -2], [6, -2], [6, -1], [6, -1], [107, 2], [219, -199], [6, -4], [6, -4], [7, -3], [336, -125], [6, -1], [6, -1], [352, -272], [6, -4], [6, -3], [6, -2], [6, -2], [7, 0], [6, 0], [6, 2], [7, 2], [6, 3], [5, 4], [6, 5], [5, 6], [5, 6], [4, 7], [3, 8], [4, 8], [2, 8], [2, 9], [86, 473], [269, -20], [6, 0], [6, 1], [6, 2], [6, 2], [6, 4], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [2, 8], [3, 8], [37, 148], [45, 170], [2, 8], [1, 9], [1, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-5, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-150, 77], [-67, 287], [-2, 8], [-3, 7], [-3, 8], [-4, 6], [-4, 7], [-4, 5], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-5, 2], [-6, 1], [-401, 68], [-57, 406], [-2, 8], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-5, 6], [-5, 4], [-6, 4], [-5, 3], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-7, -1], [-471, -106], [-6, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-194, -257], [-5, -8], [-5, -8], [-116, -247]], [[38500, 10335], [81, 103], [149, -66], [243, -138], [6, -3], [7, -2], [6, -1], [7, -1], [6, 1], [7, 2], [6, 3], [6, 3], [6, 4], [5, 6], [346, 371], [222, -156], [5, -4], [7, -3], [6, -2], [6, -1], [7, 0], [6, 1], [6, 2], [6, 2], [6, 4], [6, 4], [5, 5], [5, 6], [5, 7], [189, 306], [367, 187], [4, 2], [83, 50], [60, -152], [1, -2], [75, -174], [3, -8], [4, -6], [4, -7], [5, -5], [5, -5], [6, -4], [5, -3], [6, -3], [6, -2], [6, -1], [245, -21], [42, -18], [5, -2], [6, -2], [6, 0], [6, 0], [605, 56], [196, -165], [6, -4], [6, -3], [6, -3], [6, -1], [6, -1], [6, 0], [7, 1], [6, 2], [6, 2], [407, 212], [84, -67], [5, -4], [83, -51], [5, -3], [5, -2], [409, -151], [7, -2], [6, -1], [6, 0], [6, 1], [6, 1], [6, 3], [6, 3], [5, 4], [5, 4], [5, 6], [5, 6], [188, 279], [196, -155], [5, -4], [6, -3], [364, -173], [-60, -248], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [3, -7], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [6, -3], [6, -2], [6, -2], [506, -85], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 3], [5, 4], [5, 5], [5, 6], [4, 6], [4, 7], [3, 7], [3, 8], [124, 376], [285, -279], [5, -5], [6, -4], [5, -3], [6, -2], [7, -2], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 6], [64, 105], [394, 294], [430, -215], [5, -3], [7, -1], [6, -1], [6, 0], [6, 1], [6, 1], [6, 3], [6, 3], [5, 4], [5, 5], [5, 6], [157, 199], [388, -205], [6, -3], [7, -1], [6, -1], [6, 0], [6, 0], [7, 2], [229, 79], [313, 0], [359, -117], [6, -1], [5, -1], [450, -31], [6, 0], [6, 1], [6, 2], [7, 3], [5, 3], [6, 5], [5, 5], [5, 6], [5, 6], [3, 7], [4, 8], [3, 8], [2, 8], [2, 9], [39, 249], [258, 25], [7, 1], [7, 3], [258, 109], [23, -270], [1, -8], [2, -9], [2, -8], [3, -8], [3, -7], [3, -7], [4, -6], [5, -6], [5, -5], [5, -5], [5, -3], [6, -3], [272, -125], [-4, -422], [0, -9], [1, -8], [2, -9], [2, -8], [2, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [6, -5], [340, -274], [7, -5], [361, -213], [221, -322], [-26, -68], [-4, -10], [-2, -10], [-59, -310], [-1, -8], [-1, -9], [0, -8], [0, -9], [1, -8], [2, -8], [2, -8], [2, -8], [3, -7], [229, -499], [4, -8], [4, -6], [5, -6], [251, -300], [12, -82], [1, -8], [3, -9], [2, -7], [62, -163], [-292, -331], [-5, -6], [-217, -306], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-29, -124], [-979, 342], [-6, 1], [-6, 1], [-7, 0], [-6, -1], [-6, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -5], [-4, -7], [-236, -369], [-353, 215], [-133, 483], [-2, 8], [-4, 8], [-3, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 4], [-5, 3], [-6, 2], [-7, 2], [-6, 1], [-404, 13], [-25, 322], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-4, 5], [-5, 6], [-6, 4], [-5, 4], [-6, 3], [-6, 2], [-212, 57], [-7, 1], [-6, 0], [-7, 0], [-6, -2], [-6, -2], [-6, -3], [-6, -5], [-5, -5], [-5, -5], [-5, -7], [-2, -4], [-180, 0], [10, 737], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 7], [-3, 8], [-5, 6], [-4, 7], [-5, 5], [-5, 5], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-126, 21], [-6, 1], [-7, 0], [-6, -1], [-6, -2], [-6, -3], [-5, -4], [-6, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-288, -578], [-68, 2], [-425, 30], [-297, 166], [-5, 3], [-6, 2], [-6, 1], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-5, -3], [-6, -4], [-349, -253], [-632, 125], [-5, 1], [-6, 0], [-358, -17], [-6, -1], [-6, -1], [-5, -2], [-273, -125], [-401, 210], [-4, 2], [-443, 183], [-6, 2], [-7, 1], [-7, 1], [-7, -1], [-202, -43], [-1, 0], [-296, -73], [-309, 89], [-6, 2], [-7, 0], [-6, 0], [-7, -2], [-6, -2], [-270, -126], [-597, 422], [-196, 302], [-5, 7], [-5, 5], [-5, 5], [-6, 5], [-6, 3], [-6, 2], [-6, 2], [-7, 1], [-6, -1], [-6, -1], [-7, -2], [-6, -3], [-5, -4], [-6, -4], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-172, -454], [-175, -66], [-6, -2], [-6, -4], [-5, -4], [-6, -5], [-4, -6], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-10, -37], [-2, 3], [-5, 5], [-5, 4], [-6, 4], [-5, 2], [-214, 87], [-503, 314], [-6, 3], [-6, 2], [-7, 2], [-6, 0], [-7, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -5], [-6, -6], [-338, -399], [-343, 123], [-43, 33], [342, 500], [4, 7], [3, 8], [4, 7], [2, 9], [2, 8], [2, 9], [0, 9], [1, 9], [-1, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 8], [-3, 7], [-4, 7], [-5, 7], [-4, 6], [-256, 278], [-136, 240], [225, 338], [4, 7], [4, 7], [3, 8], [2, 8], [2, 9], [2, 9], [0, 9], [0, 9], [0, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-6, 5], [-5, 4], [-148, 93], [-239, 270]], [[39749, 34091], [95, 54], [497, -425], [6, -5], [6, -3], [7, -3], [6, -1], [7, -1], [6, 0], [443, 51], [7, 1], [6, 2], [6, 3], [6, 4], [6, 4], [5, 6], [5, 6], [4, 7], [4, 7], [3, 8], [3, 9], [99, 354], [2, 9], [1, 9], [1, 10], [26, 569], [109, 6], [6, 1], [7, 2], [6, 3], [6, 3], [5, 5], [6, 5], [4, 6], [5, 6], [4, 7], [3, 8], [3, 8], [3, 9], [1, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-34, 252], [355, -112], [6, -2], [5, -1], [1260, -67], [266, -369], [46, -85], [4, -6], [5, -6], [5, -6], [5, -5], [6, -4], [6, -3], [6, -2], [6, -2], [6, 0], [7, 0], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [249, 230], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-13, 187], [0, 262], [351, 153], [481, -249], [6, -3], [6, -1], [6, -1], [7, 0], [6, 1], [7, 2], [6, 2], [6, 4], [5, 4], [5, 6], [5, 6], [353, 478], [259, 37], [5, -2], [6, -1], [6, -1], [6, 0], [6, 1], [6, 2], [362, 141], [489, -855], [4, -7], [4, -5], [5, -6], [5, -4], [5, -4], [6, -3], [6, -2], [5, -2], [6, -1], [418, -26], [171, -184], [6, -381], [-30, -340], [0, -9], [0, -8], [1, -9], [1, -8], [2, -8], [2, -8], [3, -7], [3, -7], [3, -7], [409, -670], [4, -7], [5, -6], [5, -5], [6, -4], [6, -4], [6, -3], [6, -2], [7, -1], [6, 0], [198, 14], [408, -156], [43, -339], [1, -8], [2, -8], [2, -7], [3, -7], [3, -7], [4, -7], [331, -536], [169, -528], [3, -8], [3, -8], [4, -7], [4, -6], [5, -6], [5, -5], [5, -4], [6, -4], [6, -2], [292, -115], [252, -354], [4, -5], [5, -5], [4, -4], [5, -3], [450, -296], [7, -3], [7, -3], [7, -2], [246, -33], [293, -383], [121, -306], [89, -869], [-210, 83], [-6, 2], [-6, 1], [-6, 1], [-5, -1], [-6, -1], [-6, -2], [-204, -85], [-262, -21], [-197, 153], [-6, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-5, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -5], [-4, -6], [-4, -7], [-154, -296], [-205, 31], [-82, 269], [-2, 8], [-4, 8], [-3, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 5], [-6, 3], [-5, 3], [-6, 2], [-6, 2], [-6, 0], [-357, 8], [43, 87], [4, 8], [3, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 9], [-2, 9], [-148, 517], [-3, 7], [-3, 8], [-3, 6], [-4, 7], [-5, 6], [-4, 5], [-5, 5], [-5, 3], [-6, 4], [-6, 2], [-116, 42], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-4, -8], [-3, -7], [-2, -9], [-2, -8], [-60, -340], [-76, 149], [-4, 8], [-5, 7], [-6, 6], [-487, 486], [-6, 6], [-6, 4], [-7, 3], [-236, 97], [-7, 2], [-6, 1], [-6, 0], [-7, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-6, -5], [-5, -6], [-4, -7], [-4, -7], [-4, -7], [-57, -137], [-2, -8], [-3, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [0, -9], [2, -8], [2, -9], [2, -8], [195, -573], [-411, -77], [-194, 243], [-4, 5], [-6, 5], [-5, 4], [-6, 4], [-6, 2], [-6, 2], [-6, 1], [-7, -1], [-6, -1], [-6, -1], [-6, -3], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-5, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-74, -307], [-328, -78], [-204, 18], [-128, 200], [-5, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-7, 2], [-6, 0], [-7, 0], [-6, -1], [-6, -2], [-6, -4], [-381, -222], [-79, -5], [-443, 5], [-200, 83], [-83, 38], [-162, 340], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 4], [-244, 184], [316, 252], [240, -70], [7, -1], [6, 0], [6, 0], [7, 1], [6, 3], [6, 3], [5, 4], [6, 4], [5, 6], [5, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 8], [55, 273], [2, 9], [0, 9], [1, 10], [-1, 9], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-6, 5], [-5, 5], [-378, 247], [-121, 350], [-3, 8], [-4, 7], [-4, 7], [-4, 7], [-2, 2], [-5, 5], [-5, 5], [-5, 3], [-5, 4], [-6, 2], [-6, 2], [-369, 84], [-7, 1], [-7, -1], [-7, -1], [-138, -35], [-7, -2], [-6, -3], [-6, -4], [-6, -5], [-5, -6], [-239, -293], [-4, -5], [-3, -6], [-3, -6], [-57, -116], [-159, 247], [-4, 6], [-5, 5], [-5, 5], [-5, 4], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-5, -4], [-292, -236], [-5, -4], [-4, -5], [-56, -65], [-154, -47], [-128, 110], [9, 24], [2, 8], [2, 8], [2, 9], [1, 8], [0, 9], [0, 9], [-1, 8], [-2, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-5, 5], [-6, 5], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-387, 59], [-108, 90], [-5, 4], [-283, 186], [-6, 4], [-7, 3], [-6, 1], [-7, 1], [-7, -1], [-248, -32], [-139, 159], [-5, 6], [-6, 4], [-5, 4], [-6, 3], [-7, 2], [-6, 1], [-6, 1], [-6, -1], [-7, -1], [-6, -3], [-6, -3], [-241, -148], [-124, 372], [9, 317], [0, 9], [0, 8], [-1, 8], [-2, 8], [-2, 7], [-3, 8], [-61, 159], [-3, 7], [-3, 7], [-4, 6], [-5, 5], [-4, 5], [-109, 111], [-4, 3], [-76, 65], [-363, 414], [289, 320], [5, 6], [5, 7], [3, 7], [4, 7], [3, 8], [2, 9], [1, 8], [2, 9], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-6, 4], [-5, 4], [-284, 174], [-59, 413]], [[11168, 8737], [383, 146], [87, -162], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [5, -3], [6, -3], [240, -83], [6, -1], [7, -1], [6, 0], [6, 1], [6, 1], [6, 3], [5, 3], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [176, 327], [3, 7], [3, 8], [3, 8], [1, 8], [2, 9], [0, 9], [1, 9], [-1, 8], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-209, 287], [57, 355], [41, 200], [199, 115], [6, 4], [6, 5], [5, 5], [4, 6], [5, 7], [3, 7], [4, 8], [2, 8], [2, 8], [2, 9], [76, 559], [118, -48], [157, -204], [5, -6], [5, -5], [6, -4], [6, -4], [6, -2], [6, -2], [465, -90], [64, -238], [3, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -6], [6, -4], [5, -4], [6, -4], [6, -2], [6, -1], [7, -1], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [474, 346], [5, 4], [5, 5], [4, 6], [4, 6], [4, 6], [3, 7], [3, 8], [2, 8], [99, 387], [47, 111], [3, 9], [41, 133], [178, 364], [3, 7], [3, 7], [2, 8], [2, 8], [1, 8], [0, 9], [0, 8], [-11, 429], [128, 40], [7, 2], [6, 3], [5, 4], [6, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [3, 9], [2, 8], [1, 9], [1, 9], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 8], [-4, 7], [-5, 6], [-5, 6], [-74, 77], [170, 154], [6, 7], [404, 475], [3, 3], [365, 480], [270, -323], [5, -5], [6, -5], [6, -4], [6, -3], [6, -2], [6, -2], [386, -54], [687, -567], [56, -163], [-75, -12], [-6, -1], [-6, -2], [-5, -3], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -7], [-2, -8], [-3, -8], [-1, -8], [-1, -9], [-1, -9], [0, -8], [1, -9], [1, -8], [139, -739], [19, -260], [1, -9], [2, -9], [2, -8], [3, -8], [0, -1], [4, -8], [4, -8], [4, -7], [282, -381], [33, -197], [1, -8], [2, -9], [3, -7], [4, -8], [3, -7], [5, -6], [4, -6], [5, -5], [6, -4], [5, -4], [334, -188], [269, -207], [35, -60], [4, -7], [4, -6], [5, -5], [6, -5], [545, -418], [6, -3], [6, -3], [6, -3], [6, -1], [6, -1], [6, 1], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 7], [3, 8], [2, 8], [2, 9], [1, 9], [0, 8], [0, 9], [-1, 9], [-1, 9], [-5, 23], [282, -9], [260, -193], [5, -4], [6, -3], [5, -2], [6, -1], [486, -85], [157, -203], [5, -5], [387, -418], [4, -4], [5, -4], [4, -3], [256, -153], [-158, -252], [-15, -18], [-613, 109], [-6, 1], [-6, 0], [-5, -1], [-373, -84], [-6, -1], [-6, -3], [-5, -3], [-6, -5], [-5, -4], [-5, -6], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [1, -9], [1, -8], [2, -9], [2, -8], [2, -8], [4, -7], [4, -7], [82, -138], [-119, -31], [-7, -2], [-6, -2], [-5, -4], [-6, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [0, -9], [1, -9], [0, -9], [2, -9], [18, -81], [-219, -355], [-259, -203], [-6, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [5, -6], [4, -6], [5, -5], [6, -5], [285, -203], [1, -21], [-240, -415], [-263, -68], [-6, -2], [-6, -3], [-5, -3], [-5, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -7], [-3, -7], [-94, -280], [-167, -368], [-3, -7], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [-1, -9], [1, -8], [1, -9], [1, -9], [2, -8], [3, -8], [172, -454], [-36, -253], [-284, 54], [-6, 0], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-355, -184], [-6, -3], [-5, -4], [-5, -4], [-4, -5], [-4, -6], [-208, -307], [-555, 295], [-470, 267], [-291, 308], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-7, 2], [-231, 42], [-136, 391], [-78, 288], [-2, 8], [-4, 8], [-3, 8], [-5, 7], [-4, 6], [-5, 5], [-6, 5], [-6, 4], [-6, 3], [-6, 2], [-484, 136], [-418, 343], [-135, 672], [-2, 8], [-2, 8], [-3, 7], [-3, 7], [-4, 7], [-4, 6], [-5, 5], [-205, 215], [40, 211], [425, 9], [6, 1], [7, 1], [6, 2], [6, 3], [5, 4], [6, 5], [5, 5], [4, 7], [4, 6], [4, 8], [3, 7], [3, 8], [2, 9], [84, 420], [283, 150], [204, -110], [308, -199], [6, -3], [5, -3], [6, -1], [6, -1], [6, 0], [6, 1], [6, 1], [6, 2], [372, 177], [5, 3], [6, 4], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [1, 9], [1, 9], [0, 8], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-3, 8], [-154, 400], [-3, 8], [-4, 8], [-5, 6], [-5, 7], [-5, 5], [-360, 317], [-6, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-361, -17], [-296, 184], [-629, 686], [-6, 5], [-6, 5], [-6, 3], [-6, 3], [-13, 5], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-478, -309], [-357, -35], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -5], [-4, -7], [-205, -333], [-439, -695], [-4, -8], [-4, -8], [-238, -595], [-301, -157], [-357, 269], [-247, 377], [-95, 354]], [[17231, 34897], [409, 5], [6, 1], [7, 1], [6, 3], [6, 3], [6, 4], [5, 5], [5, 6], [5, 6], [4, 7], [3, 7], [4, 8], [2, 9], [2, 8], [1, 9], [55, 509], [1, 8], [0, 9], [-1, 51], [148, 201], [356, 359], [121, -216], [4, -7], [5, -6], [5, -6], [5, -5], [514, -393], [6, -3], [5, -3], [6, -3], [7, -1], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 7], [65, 110], [125, 110], [5, 5], [5, 6], [4, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 9], [1, 8], [1, 9], [0, 9], [-11, 301], [18, 60], [327, 159], [5, 3], [5, 4], [5, 4], [5, 5], [212, 251], [4, 5], [4, 6], [3, 6], [3, 6], [25, 62], [3, 8], [3, 8], [2, 9], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 5], [-362, 277], [-7, 4], [-8, 4], [-414, 149], [-85, 44], [-55, 208], [188, 224], [91, -2], [457, -204], [6, -2], [5, -2], [6, 0], [6, 0], [5, 1], [223, 46], [364, -153], [6, -2], [6, -1], [6, -1], [6, 1], [6, 1], [6, 2], [5, 3], [6, 3], [5, 4], [5, 5], [126, 140], [552, 226], [6, 3], [6, 3], [5, 5], [5, 5], [4, 5], [5, 7], [248, 407], [166, 44], [6, 2], [6, 3], [6, 3], [5, 5], [5, 5], [5, 6], [4, 6], [4, 8], [3, 7], [3, 8], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-439, 769], [-3, 7], [-5, 5], [-4, 5], [-5, 5], [-6, 4], [-5, 3], [-358, 177], [133, 218], [502, 28], [312, -190], [5, -2], [6, -3], [5, -1], [6, -1], [6, 0], [6, 1], [368, 77], [584, -112], [151, -273], [4, -7], [5, -6], [4, -5], [5, -5], [6, -3], [5, -4], [6, -2], [6, -2], [6, -1], [6, 0], [644, 34], [6, 1], [6, 1], [389, 130], [551, -320], [111, -130], [5, -5], [5, -5], [6, -4], [6, -3], [7, -2], [6, -2], [6, 0], [482, 10], [185, -163], [5, -4], [6, -4], [5, -2], [6, -2], [6, -1], [6, -1], [6, 1], [6, 1], [6, 2], [590, 256], [101, -82], [5, -4], [6, -3], [6, -2], [6, -2], [6, 0], [6, 0], [6, 1], [7, 2], [5, 2], [6, 4], [5, 4], [558, 484], [305, -122], [6, -2], [5, -2], [6, 0], [6, 1], [596, 79], [230, -106], [294, -460], [-16, -240], [0, -8], [0, -9], [1, -9], [2, -8], [2, -9], [3, -8], [3, -7], [3, -7], [4, -7], [5, -6], [5, -5], [5, -4], [6, -4], [518, -320], [5, -3], [6, -2], [6, -1], [435, -77], [47, -313], [2, -8], [2, -9], [3, -8], [3, -7], [4, -7], [294, -495], [4, -6], [5, -6], [5, -5], [5, -4], [5, -4], [6, -3], [6, -2], [6, -2], [6, 0], [6, 0], [381, 41], [564, -665], [-155, -44], [-6, -1], [-5, -3], [-5, -3], [-5, -4], [-5, -5], [-295, -309], [-488, 11], [-5, 0], [-369, -33], [-6, -1], [-7, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -8], [-4, -7], [-79, -204], [-558, 41], [-6, 0], [-6, 0], [-6, -2], [-5, -2], [-329, -151], [-314, 131], [-5, 2], [-6, 1], [-7, 1], [-6, -1], [-6, -1], [-209, -58], [-70, 41], [-5, 3], [-5, 2], [-1090, 365], [-6, 2], [-7, 1], [-6, 0], [-6, -2], [-7, -2], [-6, -2], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-251, -350], [-187, 98], [-6, 2], [-6, 2], [-6, 1], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-6, -5], [-4, -5], [-5, -6], [-4, -7], [-164, -292], [-141, -223], [-117, -168], [-506, 34], [-6, 0], [-7, -1], [-6, -3], [-7, -3], [-6, -3], [-6, -5], [-219, -206], [-5, -6], [-5, -6], [-4, -6], [-4, -8], [-3, -8], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -10], [5, -340], [-288, -399], [-281, -236], [-122, 31], [-6, 1], [-6, 0], [-5, 0], [-6, -1], [-479, -122], [-464, 177], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-7, -1], [-6, -3], [-5, -3], [-6, -4], [-5, -5], [-5, -5], [-5, -7], [-4, -6], [-3, -8], [-3, -7], [-3, -8], [-2, -9], [-1, -9], [-27, -227], [-665, -157], [-65, 60], [13, 117], [1, 9], [0, 9], [0, 9], [-1, 9], [-2, 8], [-3, 9], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-5, 5], [-6, 5], [-412, 353], [-6, 5], [-6, 3], [-6, 3], [-7, 2], [-6, 0], [-7, 0], [-6, -1], [-6, -2], [-562, -223], [-315, -31], [-139, 119], [-7, 5], [-6, 3], [-7, 3], [-7, 2], [-625, 90], [-129, 222], [-4, 6], [-4, 6], [-5, 6], [-6, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-242, 34], [-596, 121], [-167, 166], [-5, 4], [-5, 4], [-5, 3], [-6, 2], [-6, 2], [-5, 1], [-109, 9], [-7, 0], [-7, -1], [-437, -103], [-336, -43], [-2, 0], [-316, -56], [-147, 337]], [[23549, 26114], [327, 122], [5, 2], [6, 4], [5, 4], [5, 4], [83, 86], [41, 11], [6, 2], [6, 3], [6, 4], [5, 5], [5, 5], [5, 6], [4, 6], [4, 8], [3, 7], [3, 8], [150, 508], [3, 8], [1, 9], [1, 9], [0, 8], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-3, 8], [-3, 7], [-3, 8], [-4, 6], [-5, 6], [-5, 6], [-5, 4], [-214, 173], [189, 176], [229, 44], [6, 1], [6, 3], [6, 3], [6, 5], [6, 5], [5, 6], [4, 7], [4, 7], [4, 8], [131, 327], [2, 8], [3, 8], [1, 8], [1, 9], [1, 9], [0, 8], [-1, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 4], [-293, 252], [49, 65], [575, 473], [219, -189], [4, -3], [5, -4], [5, -2], [138, -59], [328, -149], [6, -2], [7, -2], [6, 0], [148, 1], [538, -69], [7, 0], [6, 1], [6, 1], [7, 2], [5, 4], [6, 4], [6, 4], [5, 6], [4, 6], [128, 190], [129, -73], [6, -3], [6, -2], [7, -1], [6, -1], [6, 1], [6, 1], [7, 3], [5, 3], [6, 4], [5, 5], [5, 5], [123, 148], [4, 7], [5, 7], [3, 7], [3, 8], [3, 9], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-1, 10], [-2, 8], [-73, 273], [31, 30], [343, 219], [6, 4], [5, 4], [5, 6], [4, 6], [4, 6], [4, 7], [3, 8], [2, 8], [92, 322], [259, 196], [5, 5], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [0, 9], [1, 9], [-1, 9], [-1, 9], [-1, 8], [-2, 5], [322, 79], [352, -280], [6, -4], [6, -3], [6, -2], [6, -2], [6, 0], [7, 0], [6, 2], [6, 2], [6, 3], [246, 143], [6, 4], [5, 4], [5, 5], [5, 6], [4, 6], [3, 7], [4, 7], [2, 8], [3, 8], [1, 8], [1, 8], [64, 652], [190, 368], [521, 573], [431, -24], [6, 0], [5, 1], [494, 93], [5, 1], [6, 2], [5, 3], [6, 4], [262, 202], [491, -200], [7, -2], [6, -1], [6, 0], [7, 0], [6, 2], [7, 3], [6, 3], [5, 4], [157, 133], [407, -258], [4, -410], [1, -9], [1, -9], [2, -9], [2, -9], [3, -9], [4, -7], [242, -463], [-227, -1320], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [2, -8], [3, -8], [4, -8], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [6, -4], [6, -2], [6, -2], [119, -25], [77, -53], [149, -383], [-328, -429], [-5, -6], [-4, -8], [-3, -7], [-3, -9], [-2, -8], [-2, -9], [-1, -9], [-1, -10], [1, -9], [1, -9], [53, -391], [-39, 12], [-6, 1], [-6, 1], [-6, -1], [-6, -1], [-6, -2], [-6, -2], [-5, -4], [-5, -4], [-5, -5], [-5, -5], [-4, -7], [-4, -6], [-3, -7], [-179, -423], [-545, -414], [-345, -64], [-6, -2], [-6, -2], [-6, -4], [-6, -4], [-5, -5], [-5, -6], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-30, -94], [-270, -118], [-6, -3], [-6, -4], [-5, -4], [-5, -5], [-4, -6], [-4, -6], [-247, -409], [-3, -7], [-4, -7], [-2, -8], [-3, -8], [-1, -8], [-1, -8], [-1, -9], [-14, -388], [-157, -4], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-5, -4], [-5, -6], [-4, -6], [-4, -6], [-4, -8], [-3, -7], [-3, -8], [-2, -9], [-62, -303], [-1, -8], [-1, -9], [-1, -9], [1, -8], [1, -9], [1, -8], [2, -9], [3, -7], [3, -8], [3, -7], [5, -7], [4, -5], [5, -6], [5, -4], [83, -66], [-443, -15], [-6, -1], [-6, -1], [-6, -2], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-140, -306], [-3, -7], [-2, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [48, -323], [1, -8], [2, -8], [3, -8], [3, -7], [4, -7], [4, -7], [4, -5], [5, -6], [5, -4], [6, -4], [158, -99], [96, -136], [208, -307], [5, -7], [5, -5], [6, -5], [6, -4], [6, -3], [6, -3], [7, -1], [328, -40], [4, 0], [547, -23], [159, -88], [143, -362], [3, -8], [4, -7], [4, -6], [5, -6], [5, -5], [5, -4], [161, -118], [-235, -138], [-214, 80], [-6, 2], [-7, 1], [-6, 0], [-7, -1], [-376, -85], [-7, -2], [-6, -3], [-7, -4], [-405, -297], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -9], [-39, -182], [-472, 256], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-564, -88], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-6, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -9], [-14, -69], [-361, -44], [-154, 168], [60, 659], [0, 9], [0, 10], [-1, 9], [-1, 9], [-2, 8], [-3, 9], [-3, 8], [-187, 405], [98, 384], [1, 9], [2, 8], [0, 9], [0, 9], [0, 8], [-1, 9], [-2, 8], [-2, 9], [-3, 7], [-3, 8], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-6, 2], [-6, 2], [-6, 1], [-6, 1], [-116, -2], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-274, -221], [-381, 59], [-6, 1], [-7, -1], [-6, -1], [-7, -3], [-6, -3], [-248, -152], [-373, 133], [-90, 60], [-5, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-5, -3], [-347, -159], [-360, 65], [-2, 8], [-47, 195], [-3, 9], [-3, 7], [-3, 8], [-4, 6], [-4, 7], [-5, 5], [-5, 6], [-5, 4], [-5, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-5, -3], [-345, -205], [-435, 194], [-78, 135], [-77, 301], [-2, 8], [-3, 7], [-3, 8], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-5, 4], [-6, 4], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-278, -15], [-314, 277], [-6, 5], [-7, 4], [-163, 82], [180, 201], [4, 6], [5, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 9], [1, 8], [0, 9], [0, 9], [-18, 400], [-1, 9], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 8], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-7, 0], [-6, 0], [-6, -1], [-6, -2], [-6, -4], [-6, -3], [-6, -5], [-199, -193], [-127, 580]], [[34392, 31459], [12, 164], [486, 931], [422, 293], [5, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 7], [2, 8], [2, 9], [1, 8], [1, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-2, 8], [-4, 7], [-3, 7], [-222, 372], [140, -8], [367, -188], [348, -313], [5, -4], [6, -4], [5, -3], [6, -2], [7, -1], [6, 0], [6, 0], [6, 2], [6, 2], [6, 3], [5, 4], [331, 253], [575, -93], [6, 0], [6, 0], [6, 1], [5, 1], [708, 258], [378, -236], [6, -3], [5, -3], [6, -1], [6, -1], [6, 0], [6, 1], [6, 2], [6, 2], [750, 375], [7, 4], [220, 152], [318, -270], [62, -68], [1, -1], [238, -254], [422, -482], [7, -7], [77, -65], [98, -99], [49, -127], [-9, -315], [0, -9], [1, -9], [1, -8], [2, -9], [2, -8], [150, -451], [3, -8], [4, -7], [3, -7], [5, -6], [4, -5], [5, -5], [6, -5], [5, -3], [6, -3], [6, -2], [6, -1], [6, 0], [7, 1], [6, 1], [5, 3], [6, 3], [259, 158], [131, -151], [5, -5], [5, -4], [5, -4], [6, -3], [6, -2], [6, -1], [6, -1], [7, 0], [255, 34], [268, -176], [115, -97], [6, -4], [6, -4], [7, -2], [6, -2], [325, -49], [-1, -7], [-2, -9], [0, -9], [-1, -9], [1, -9], [1, -9], [2, -9], [2, -8], [3, -8], [4, -8], [4, -7], [4, -6], [5, -6], [5, -5], [186, -160], [5, -4], [6, -3], [5, -3], [6, -1], [6, -1], [6, -1], [6, 1], [6, 1], [186, 57], [6, 2], [5, 3], [6, 4], [5, 4], [5, 5], [62, 73], [253, 205], [174, -271], [5, -6], [5, -6], [5, -5], [6, -4], [6, -3], [6, -3], [6, -1], [6, -1], [7, 0], [6, 1], [6, 2], [6, 3], [6, 4], [6, 4], [5, 5], [4, 6], [5, 7], [4, 7], [89, 182], [223, 274], [115, 29], [336, -76], [118, -341], [3, -8], [3, -7], [4, -7], [5, -6], [5, -6], [5, -5], [5, -4], [355, -232], [-30, -148], [-213, 61], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -3], [-7, -3], [-5, -4], [-415, -330], [-6, -4], [-5, -6], [-4, -6], [-4, -6], [-4, -8], [-3, -7], [-2, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -8], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -6], [5, -6], [5, -5], [5, -5], [316, -238], [130, -273], [-20, -16], [-5, -4], [-5, -5], [-5, -6], [-4, -7], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [0, -9], [0, -8], [1, -9], [1, -8], [2, -9], [3, -8], [3, -7], [3, -7], [4, -7], [4, -6], [169, -213], [53, -587], [-45, 0], [-6, 0], [-35, -5], [-6, -1], [-7, -3], [-6, -3], [-6, -4], [-6, -5], [-311, -308], [-69, 105], [-4, 5], [-4, 5], [-5, 5], [-204, 180], [-5, 5], [-6, 3], [-5, 3], [-6, 2], [-6, 1], [-6, 0], [-7, 0], [-6, -2], [-278, -84], [-146, 106], [-5, 4], [-6, 2], [-6, 2], [-6, 2], [-7, 0], [-6, -1], [-6, -1], [-521, -160], [-144, 550], [-2, 6], [-2, 7], [-3, 6], [-27, 55], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-6, 5], [-6, 3], [-6, 3], [-6, 2], [-7, 1], [-170, 13], [-7, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -4], [-6, -4], [-5, -5], [-201, -214], [-5, -6], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-45, -445], [-222, -221], [-252, 137], [-50, 212], [-3, 8], [-2, 7], [-4, 8], [-3, 7], [-5, 6], [-4, 6], [-5, 5], [-6, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-417, -5], [-6, -1], [-6, -1], [-7, -3], [-6, -3], [-5, -4], [-6, -5], [-5, -6], [-4, -6], [-5, -7], [-3, -7], [-162, -372], [-124, -16], [-7, -1], [-6, -3], [-7, -3], [-5, -4], [-456, -352], [-74, 89], [-5, 5], [-6, 5], [-6, 4], [-6, 3], [-6, 2], [-7, 2], [-6, 0], [-7, -1], [-756, -124], [-6, -1], [-7, -3], [-6, -3], [-6, -5], [-5, -5], [-5, -6], [-5, -6], [-4, -8], [-108, -211], [-513, 20], [-202, 409], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-6, -1], [-7, -2], [-6, -2], [-5, -3], [-6, -4], [-5, -4], [-5, -6], [-375, -448], [-267, -83], [-332, 42], [-196, 547], [-4, 8], [-3, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-426, -112], [-146, -21], [-440, 59], [-6, 0], [-7, 0], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-6, -4], [-5, -6], [-4, -5], [-5, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [24, -348], [-178, -41], [-393, 651], [52, 483], [1, 9], [0, 9], [-1, 10], [-1, 9], [-2, 9], [-3, 8], [-202, 575], [23, 75], [1, 5], [135, 518], [310, -43], [6, 0], [6, 0], [6, 1], [6, 3], [6, 3], [6, 3], [5, 5], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 8], [1, 8], [1, 9], [1, 9], [-1, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 7], [-4, 8], [-4, 6], [-575, 829], [-225, 503], [-3, 8], [-4, 6], [-4, 6], [-5, 6], [-5, 4], [-6, 4], [-5, 3], [-6, 3], [-405, 141]], [[23125, 7985], [144, 87], [2, -1], [6, -2], [6, -2], [6, 0], [7, 0], [397, 55], [510, -387], [6, -3], [6, -3], [6, -3], [7, -1], [6, 0], [6, 0], [7, 2], [6, 3], [6, 3], [6, 4], [5, 5], [5, 6], [239, 302], [4, 6], [4, 6], [3, 7], [3, 8], [3, 7], [2, 8], [1, 8], [1, 9], [5, 78], [191, 146], [163, -97], [6, -3], [7, -3], [7, -1], [7, 0], [463, 26], [7, 1], [6, 1], [6, 3], [6, 3], [6, 5], [5, 5], [5, 6], [5, 6], [4, 7], [3, 8], [3, 8], [2, 9], [2, 9], [1, 9], [0, 9], [3, 204], [90, 138], [221, -287], [5, -6], [5, -5], [5, -4], [6, -4], [6, -2], [6, -2], [6, -1], [6, 0], [6, 0], [6, 2], [6, 2], [6, 4], [6, 3], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 8], [2, 8], [1, 9], [0, 9], [-1, 306], [0, 8], [-1, 7], [-1, 8], [-55, 303], [-2, 7], [-2, 7], [-174, 558], [-74, 393], [11, 182], [0, 8], [0, 8], [-1, 9], [-2, 8], [-1, 8], [-3, 10], [225, 192], [5, 4], [5, 6], [4, 6], [4, 7], [3, 7], [3, 8], [3, 8], [2, 8], [1, 9], [1, 8], [18, 399], [72, 223], [291, 241], [145, -349], [4, -7], [4, -8], [5, -6], [5, -6], [5, -5], [6, -4], [109, -69], [39, -263], [1, -8], [2, -9], [3, -7], [3, -8], [4, -7], [4, -6], [4, -6], [5, -6], [6, -4], [5, -4], [6, -3], [6, -2], [6, -2], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [119, 66], [5, 3], [5, 4], [280, 243], [6, 6], [5, 6], [5, 7], [4, 8], [3, 8], [97, 263], [134, -463], [3, -9], [3, -9], [5, -8], [72, -116], [87, -340], [2, -7], [3, -6], [3, -7], [69, -145], [4, -7], [4, -7], [5, -6], [5, -5], [198, -180], [5, -5], [5, -3], [6, -3], [6, -2], [6, -1], [6, -1], [434, -3], [48, -67], [-129, -114], [-5, -5], [-5, -6], [-4, -6], [-4, -8], [-4, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [85, -417], [2, -9], [3, -8], [68, -181], [-37, -367], [0, -10], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -8], [4, -7], [166, -300], [-43, -188], [-1, -9], [-1, -10], [-1, -9], [1, -10], [19, -251], [0, -2], [59, -623], [2, -9], [1, -9], [68, -278], [2, -8], [3, -8], [4, -7], [3, -7], [5, -7], [4, -5], [5, -5], [6, -5], [5, -3], [6, -3], [6, -2], [7, -1], [6, 0], [671, 21], [-290, -132], [-5, -3], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-3, -7], [-4, -8], [-2, -8], [-2, -8], [-2, -9], [-1, -8], [0, -9], [1, -9], [0, -9], [2, -8], [2, -8], [3, -8], [127, -337], [4, -10], [19, -37], [-105, -261], [-3, -8], [-3, -8], [-1, -9], [-1, -9], [-1, -10], [0, -9], [1, -9], [60, -435], [-34, -54], [-200, -230], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -8], [2, -9], [90, -309], [3, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [180, -165], [75, -287], [-507, -139], [-7, -2], [-272, -118], [-6, -3], [-5, -4], [-5, -4], [-5, -5], [-5, -5], [-4, -7], [-4, -6], [-3, -8], [-57, -141], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -8], [-584, -200], [-6, -2], [-6, -4], [-5, -4], [-6, -5], [-5, -6], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -9], [-43, -244], [0, -3], [-30, -200], [-1, -9], [-1, -8], [0, -9], [1, -9], [2, -8], [2, -9], [2, -8], [3, -7], [3, -7], [4, -7], [5, -6], [5, -6], [5, -4], [5, -4], [210, -139], [-39, -51], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-1, -9], [-2, -8], [0, -9], [0, -9], [0, -9], [2, -9], [1, -8], [3, -8], [3, -8], [3, -8], [4, -6], [4, -7], [5, -5], [5, -5], [254, -220], [2, -14], [1, -9], [2, -9], [3, -8], [3, -8], [165, -370], [4, -7], [4, -6], [4, -6], [5, -6], [258, -261], [5, -5], [6, -4], [5, -3], [4, -2], [18, -9], [-27, -114], [-299, -83], [-6, -2], [-5, -3], [-6, -4], [-5, -4], [-5, -5], [-275, -313], [-4, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -8], [1, -9], [10, -52], [-448, 229], [-7, 3], [-7, 2], [-365, 69], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-678, -242], [-6, -3], [-5, -3], [-6, -4], [-399, -338], [-504, -40], [-5, 0], [-400, -79], [-462, 124], [91, 584], [142, 301], [194, -24], [6, -1], [6, 1], [7, 1], [6, 3], [6, 3], [5, 4], [6, 5], [5, 5], [5, 7], [4, 7], [3, 7], [3, 8], [3, 8], [2, 9], [55, 299], [165, 224], [4, 6], [4, 6], [3, 7], [3, 8], [29, 87], [3, 8], [1, 7], [75, 379], [1, 2], [65, 374], [2, 12], [5, 71], [38, 194], [2, 9], [0, 8], [1, 9], [-1, 9], [-1, 8], [-1, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-4, 5], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-506, 86], [35, 429], [275, 347], [5, 6], [4, 7], [4, 8], [3, 8], [2, 9], [2, 8], [1, 10], [1, 9], [12, 533], [0, 9], [0, 9], [-2, 8], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 5], [-5, 5], [-6, 4], [-5, 4], [-6, 2], [-5, 1], [50, 295], [2, 8], [1, 9], [0, 9], [0, 8], [0, 9], [-2, 8], [-1, 9], [-3, 8], [-2, 7], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-5, 4], [-477, 262], [1, 5], [1, 9], [1, 9], [0, 8], [-1, 9], [-1, 9], [-1, 8], [-3, 9], [-2, 8], [-4, 7], [-3, 7], [-5, 6], [-4, 6], [-5, 5], [-6, 5], [-6, 3], [-5, 3], [-208, 84], [-156, 344], [-101, 226], [-4, 7], [-4, 6], [-4, 6], [-5, 5], [-5, 5], [-132, 111], [19, 65], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-3, 9], [-3, 7], [-3, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-6, 3], [-443, 138], [-1, 0], [-55, 16], [34, 139], [2, 9], [1, 9], [1, 9], [0, 8], [-1, 9], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-4, 6], [-6, 5], [-5, 4], [-6, 3], [-6, 3], [-6, 1], [-7, 1], [-436, 19], [-34, 511], [100, 123], [4, 6], [4, 6], [4, 7], [3, 8], [2, 8], [2, 8], [2, 8], [0, 9], [1, 9], [-1, 8], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-3, 7], [-4, 6], [-5, 6], [-5, 6], [-27, 27]], [[33063, 16424], [307, 178], [101, -81], [6, -4], [6, -3], [6, -2], [6, -1], [6, -1], [6, 0], [6, 1], [6, 2], [927, 367], [90, -71], [66, -116], [5, -7], [5, -7], [5, -5], [5, -5], [6, -4], [7, -3], [6, -2], [7, -1], [578, -57], [122, -315], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [6, -5], [6, -3], [6, -3], [6, -2], [236, -56], [6, -1], [6, 0], [6, 0], [6, 2], [6, 2], [5, 3], [6, 4], [5, 5], [5, 5], [4, 6], [4, 6], [4, 7], [3, 8], [309, 819], [341, -63], [293, -221], [6, -4], [6, -3], [6, -2], [7, -2], [6, 0], [6, 1], [7, 1], [6, 3], [6, 3], [242, 152], [90, -139], [4, -6], [5, -6], [4, -4], [6, -4], [332, -234], [30, -677], [1, -9], [1, -9], [2, -8], [2, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [423, -450], [-174, -258], [-4, -6], [-4, -8], [-3, -7], [-2, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [1, -8], [3, -9], [2, -8], [4, -7], [3, -7], [5, -7], [4, -5], [5, -6], [192, -175], [-11, -68], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -9], [147, -423], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [5, -4], [6, -2], [6, -2], [6, -1], [7, 0], [332, 24], [6, 2], [7, 2], [7, 3], [6, 4], [124, 94], [111, -389], [2, -7], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [6, -3], [6, -4], [6, -2], [6, -2], [6, 0], [6, 0], [6, 1], [426, 96], [7, 2], [6, 2], [6, 4], [5, 4], [145, 128], [33, 25], [41, -356], [-99, -105], [-5, -6], [-4, -7], [-4, -7], [-4, -7], [-2, -8], [-3, -9], [-2, -9], [-1, -9], [-39, -449], [0, -9], [0, -9], [1, -9], [1, -8], [2, -9], [3, -8], [3, -7], [3, -8], [4, -6], [208, -315], [23, -90], [2, -7], [3, -7], [3, -7], [127, -250], [3, -7], [4, -6], [5, -5], [5, -5], [5, -5], [6, -3], [5, -3], [6, -2], [6, -1], [6, -1], [312, 0], [161, -214], [-311, -188], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -7], [-2, -9], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -9], [35, -237], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -6], [4, -6], [5, -6], [6, -4], [419, -314], [-4, -36], [-101, -60], [-378, -193], [-6, -3], [-5, -4], [-6, -6], [-4, -5], [-5, -7], [-172, -278], [-215, 151], [-6, 4], [-6, 3], [-6, 2], [-6, 1], [-7, 0], [-6, -1], [-7, -2], [-6, -3], [-6, -3], [-5, -4], [-6, -6], [-348, -373], [-218, 124], [-5, 2], [-179, 79], [-6, 2], [-7, 2], [-6, 0], [-7, -1], [-6, -1], [-7, -3], [-6, -3], [-6, -4], [-5, -5], [-5, -6], [-145, -184], [-268, -135], [-6, -3], [-6, -5], [-5, -5], [-5, -6], [-5, -6], [-4, -8], [-3, -7], [-3, -9], [-3, -8], [-1, -9], [-1, -9], [-1, -13], [-661, 96], [-252, 114], [-7, 3], [-6, 1], [-6, 0], [-6, 0], [-7, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -5], [-157, -147], [-204, -51], [-454, 56], [-6, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -3], [-6, -4], [-5, -4], [-5, -6], [-5, -6], [-4, -6], [-3, -7], [-40, -84], [-3, -8], [-3, -9], [-2, -8], [-2, -9], [0, -10], [-1, -9], [1, -9], [1, -10], [2, -9], [46, -185], [-149, -88], [-81, 146], [150, 223], [5, 7], [3, 7], [3, 8], [3, 8], [2, 8], [1, 8], [1, 9], [0, 9], [0, 9], [-1, 8], [-2, 9], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 6], [-351, 500], [-90, 188], [-4, 7], [-4, 6], [-5, 6], [-4, 5], [-6, 5], [-5, 3], [-6, 3], [-6, 3], [-6, 1], [-6, 0], [-7, 0], [-6, -1], [-6, -2], [-5, -3], [-6, -4], [-5, -4], [-5, -5], [-146, -165], [-285, 166], [66, 50], [5, 5], [5, 5], [5, 6], [4, 6], [4, 8], [3, 7], [3, 8], [2, 8], [118, 546], [1, 8], [1, 9], [1, 8], [-1, 9], [0, 9], [-2, 8], [-2, 8], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-184, 277], [-4, 6], [-5, 5], [-5, 5], [-5, 4], [-6, 3], [-5, 3], [-6, 1], [-6, 1], [-6, 0], [-502, -28], [-118, 75], [-52, 428], [153, 191], [4, 6], [4, 7], [4, 8], [3, 8], [2, 8], [2, 9], [2, 9], [0, 9], [0, 9], [0, 9], [-2, 9], [-2, 8], [-2, 9], [-3, 8], [-179, 411], [-4, 8], [-4, 7], [-5, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 3], [-210, 94], [-80, 118], [-1, 3], [-2, 8], [-3, 8], [-3, 8], [-160, 343], [-4, 8], [-4, 6], [-5, 7], [-5, 5], [-132, 124], [-104, 241], [-3, 7], [-4, 6], [-4, 6], [-4, 5], [-5, 5], [-235, 215], [144, 277], [3, 7], [3, 8], [2, 8], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-37, 334], [-2, 8], [-1, 9], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-5, 4], [-6, 4], [-266, 134], [-38, 578], [-1, 8], [-1, 8], [-2, 8], [-2, 8], [-166, 474]], [[21189, 18790], [233, 439], [-15, 446], [256, -6], [87, -54], [334, 284], [292, 536], [-214, 201], [132, 87], [209, 0], [456, 248], [29, 191], [-154, 372], [442, 315], [473, -480], [249, 463], [51, 397], [63, -66], [439, 496], [423, 144], [244, 21], [-201, 322], [236, 641], [295, 175], [29, -122], [1, -2], [26, -102], [455, -82], [352, 161], [81, -54], [422, -150], [271, 166], [404, -63], [295, 238], [29, 0], [-92, -362], [208, -452], [-66, -724], [241, -265], [483, 58], [28, 131], [517, 81], [508, -275], [49, -65], [-152, -104], [-489, -317], [-210, -304], [-98, 8], [-345, -370], [-314, 50], [-45, -165], [113, -376], [321, -390], [-327, -200], [-451, -128], [8, -446], [218, -476], [-72, -635], [71, -239], [-181, -2], [-488, -205], [-19, -18], [-248, 12], [-127, 49], [-137, -110], [-308, 79], [-309, 13], [-786, -260], [-394, -292], [-525, -129], [-209, 32], [-91, 22], [-47, 20], [-3, 1], [-122, 43], [-5, 2], [-396, 97], [-986, -15], [-787, -308], [-34, 15], [-190, -35], [-292, 532], [230, 299], [-164, 617], [-210, 344]], [[14220, 32264], [299, 692], [210, 282], [2, 3], [203, 301], [105, 132], [241, 264], [397, 220], [583, 70], [7, 1], [7, 2], [7, 4], [120, 76], [390, -70], [89, -253], [4, -8], [3, -8], [5, -7], [5, -6], [5, -6], [277, -259], [6, -5], [5, -4], [6, -2], [6, -3], [6, -1], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 4], [5, 4], [139, 128], [299, -152], [6, -3], [6, -1], [6, -1], [6, 0], [7, 1], [6, 2], [6, 2], [6, 4], [305, 209], [5, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 9], [1, 8], [1, 9], [18, 549], [387, 92], [88, -8], [165, -164], [5, -4], [5, -4], [6, -3], [6, -3], [6, -1], [609, -123], [3, -1], [221, -31], [129, -221], [4, -7], [4, -6], [5, -5], [6, -5], [5, -4], [6, -2], [6, -3], [6, -1], [635, -92], [144, -123], [5, -4], [6, -3], [7, -3], [6, -2], [6, 0], [7, 0], [336, 32], [6, 1], [7, 2], [545, 217], [364, -311], [-13, -116], [-1, -9], [0, -8], [0, -9], [2, -9], [1, -9], [2, -8], [3, -8], [4, -7], [3, -7], [5, -6], [4, -6], [5, -5], [111, -101], [6, -4], [6, -4], [7, -3], [6, -2], [7, -1], [6, 0], [7, 1], [596, 142], [-59, -132], [-3, -7], [-3, -8], [-1, -7], [-2, -8], [-1, -8], [-34, -379], [-247, 211], [-5, 4], [-6, 4], [-6, 2], [-7, 2], [-6, 1], [-6, 0], [-6, -1], [-7, -2], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-5, -6], [-3, -7], [-4, -8], [-3, -8], [-2, -8], [-2, -9], [-37, -237], [-588, -127], [-6, -2], [-6, -2], [-6, -3], [-5, -5], [-5, -4], [-5, -6], [-5, -6], [-4, -7], [-3, -7], [-232, -537], [-92, -53], [-189, 115], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-5, -2], [-6, -3], [-412, -214], [-6, -3], [-6, -5], [-5, -5], [-5, -6], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -9], [-2, -9], [-73, -509], [-270, 18], [-6, 0], [-7, -1], [-6, -2], [-6, -3], [-6, -4], [-6, -4], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-4, -8], [-3, -8], [-2, -9], [-13, -60], [-2, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [273, -466], [-65, -167], [-343, -93], [-6, -2], [-7, -3], [-6, -4], [-5, -5], [-6, -6], [-200, -246], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -9], [-2, -8], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -9], [2, -8], [3, -8], [4, -8], [4, -7], [5, -6], [5, -6], [29, -30], [-115, -113], [-5, -6], [-5, -6], [-122, -181], [-178, -40], [-502, 427], [-5, 4], [-6, 3], [-6, 3], [-7, 2], [-6, 0], [-6, 0], [-7, -1], [-6, -1], [-6, -3], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-152, -666], [-153, 65], [-6, 2], [-7, 1], [-6, 0], [-7, 0], [-6, -2], [-418, -136], [-137, 324], [-3, 8], [-4, 6], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 3], [-5, 3], [-6, 2], [-6, 1], [-791, 103], [-225, 224], [5, 182], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-4, 6], [-6, 4], [-5, 5], [-6, 3], [-417, 207], [-6, 3], [-6, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-205, -135], [-397, 257], [-228, 227], [-5, 4], [-263, 212], [-5, 4], [-6, 3], [-5, 2], [-473, 171], [-250, 197], [178, 61], [6, 3], [6, 3], [5, 4], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [3, 7], [2, 8], [2, 9], [2, 8], [1, 9], [0, 8], [-1, 9], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-367, 436], [-31, 45], [-10, 39]], [[12229, 36073], [79, 224], [190, 483], [146, 36], [6, 2], [6, 3], [5, 3], [6, 5], [5, 5], [5, 5], [4, 7], [4, 7], [3, 7], [3, 8], [2, 8], [2, 8], [41, 244], [246, 87], [743, -11], [6, 0], [7, 2], [6, 2], [6, 3], [6, 4], [5, 4], [5, 6], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 9], [101, 502], [202, 19], [373, -288], [5, -4], [6, -3], [6, -3], [7, -1], [6, -1], [84, 0], [9, 1], [704, 139], [6, 2], [6, 3], [6, 3], [6, 5], [5, 5], [5, 5], [5, 7], [215, 345], [388, 123], [6, 2], [6, 3], [6, 4], [5, 5], [5, 5], [4, 6], [4, 6], [4, 7], [3, 8], [2, 8], [120, 410], [305, 129], [6, 3], [5, 3], [5, 4], [5, 5], [4, 5], [4, 6], [239, 372], [247, 64], [5, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 5], [4, 7], [4, 6], [3, 8], [3, 7], [2, 8], [2, 8], [1, 9], [1, 8], [0, 9], [-11, 417], [364, -172], [6, -2], [6, -2], [7, -1], [6, 1], [6, 1], [6, 2], [645, 255], [6, 3], [6, 4], [6, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [138, 453], [162, 277], [684, -204], [42, -216], [2, -9], [3, -9], [3, -8], [4, -8], [5, -7], [69, -95], [5, -7], [6, -5], [6, -5], [576, -395], [4, -3], [5, -2], [611, -263], [120, -56], [423, -210], [376, -659], [-99, -26], [-6, -2], [-6, -2], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-4, -6], [-250, -411], [-547, -224], [-5, -3], [-6, -4], [-5, -4], [-5, -5], [-114, -125], [-349, 147], [-6, 2], [-7, 1], [-7, 0], [-7, 0], [-223, -46], [-453, 201], [-5, 3], [-6, 1], [-7, 1], [-117, 2], [-6, 0], [-6, -1], [-7, -2], [-6, -3], [-6, -4], [-5, -5], [-6, -6], [-230, -274], [-5, -6], [-4, -6], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [0, -9], [0, -8], [1, -9], [1, -8], [2, -8], [75, -288], [3, -8], [3, -8], [3, -7], [4, -6], [5, -7], [4, -5], [6, -5], [5, -4], [6, -3], [110, -56], [5, -3], [411, -148], [306, -234], [-189, -223], [-338, -165], [-6, -3], [-5, -4], [-5, -4], [-5, -6], [-4, -5], [-4, -7], [-4, -7], [-3, -7], [-2, -7], [-32, -105], [-2, -8], [-1, -8], [-1, -8], [-1, -8], [0, -8], [10, -276], [-106, -94], [-6, -5], [-5, -6], [-5, -7], [-43, -74], [-468, 358], [-144, 258], [-5, 7], [-4, 6], [-5, 6], [-6, 5], [-6, 4], [-6, 3], [-6, 2], [-7, 1], [-6, 1], [-6, -1], [-7, -1], [-6, -3], [-6, -3], [-6, -4], [-5, -5], [-398, -402], [-7, -8], [-168, -227], [-4, -6], [-3, -7], [-4, -7], [-2, -7], [-3, -8], [-1, -8], [-2, -8], [0, -9], [0, -8], [1, -77], [-48, -442], [-455, -6], [-7, 0], [-6, -2], [-6, -2], [-5, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-3, -7], [-4, -8], [-2, -8], [-3, -8], [-1, -8], [-1, -9], [-1, -8], [1, -9], [0, -9], [2, -8], [2, -9], [2, -8], [3, -7], [212, -486], [4, -8], [3, -6], [5, -6], [4, -6], [5, -4], [6, -4], [5, -4], [6, -2], [6, -2], [6, -1], [6, 0], [6, 0], [347, 62], [272, 34], [-16, -478], [-258, -177], [-302, 154], [-6, 3], [-6, 1], [-7, 1], [-6, 0], [-7, -1], [-6, -2], [-6, -3], [-6, -4], [-6, -4], [-132, -122], [-238, 223], [-96, 269], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 5], [-6, 4], [-5, 3], [-6, 2], [-7, 2], [-430, 77], [-6, 1], [-6, 0], [-6, -1], [-5, -2], [-6, -2], [-5, -3], [-126, -79], [-582, -70], [-6, -1], [-6, -2], [-6, -2], [-410, -228], [-6, -3], [-5, -4], [-5, -5], [-248, -271], [-3, -4], [-79, -99], [-224, 167], [-249, 537], [-4, 7], [-4, 6], [-4, 6], [-5, 5], [-5, 5], [-6, 4], [-5, 3], [-6, 2], [-6, 2], [-412, 78], [-1, 0], [-276, 44], [-6, 1], [-7, -1], [-192, -23], [-191, 30], [-63, 451], [-2, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 5], [-6, 5], [-5, 3], [-6, 3], [-287, 125], [0, 246], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 7], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-517, 502], [-5, 4], [-6, 4], [-5, 3], [-6, 2], [-6, 2], [-87, 17]], [[29917, 37117], [520, 76], [8, 2], [415, 136], [6, 3], [5, 3], [6, 4], [5, 4], [5, 5], [4, 6], [549, 798], [4, 6], [3, 6], [216, 448], [441, 163], [915, 121], [800, 91], [5, 0], [5, 2], [276, 97], [716, -64], [6, 0], [6, 1], [445, 80], [7, 2], [7, 4], [316, 169], [234, -58], [7, -2], [7, 0], [7, 1], [803, 177], [419, -34], [153, -315], [3, -7], [5, -7], [4, -6], [5, -5], [5, -4], [6, -4], [247, -142], [174, -276], [5, -7], [5, -6], [6, -5], [6, -4], [6, -4], [6, -2], [7, -2], [6, 0], [274, -4], [122, -182], [5, -6], [5, -6], [5, -4], [6, -4], [6, -3], [221, -103], [239, -529], [4, -8], [4, -7], [5, -6], [5, -6], [6, -4], [6, -4], [6, -3], [6, -3], [314, -82], [-45, -303], [-1, -8], [0, -9], [0, -9], [1, -9], [1, -8], [2, -8], [3, -8], [3, -8], [4, -7], [4, -7], [4, -6], [5, -5], [5, -5], [6, -4], [5, -3], [6, -3], [7, -1], [334, -62], [22, -24], [205, -401], [4, -7], [5, -7], [127, -166], [85, -131], [162, -397], [93, -408], [3, -8], [2, -9], [4, -7], [4, -7], [4, -7], [5, -6], [5, -5], [203, -179], [-70, -428], [-1, -8], [-1, -9], [0, -9], [1, -8], [1, -9], [2, -8], [2, -9], [3, -7], [4, -7], [4, -7], [4, -6], [5, -6], [5, -5], [5, -4], [6, -3], [6, -3], [6, -2], [6, -1], [653, -56], [-25, -548], [-84, -302], [-396, -45], [-505, 431], [-6, 4], [-6, 4], [-6, 3], [-6, 1], [-7, 1], [-6, 0], [-7, -1], [-6, -2], [-6, -3], [-158, -89], [-6, -4], [-5, -5], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-4, -7], [-2, -9], [-2, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [73, -509], [2, -9], [2, -8], [2, -8], [3, -7], [4, -7], [4, -7], [5, -6], [5, -5], [5, -5], [5, -3], [229, -141], [-244, -270], [-204, 217], [-65, 71], [-6, 6], [-344, 293], [-6, 4], [-6, 3], [-6, 3], [-6, 2], [-6, 0], [-6, 0], [-7, -1], [-6, -1], [-6, -3], [-6, -4], [-242, -167], [-728, -364], [-376, 235], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-6, -1], [-715, -261], [-582, 94], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-319, -244], [-327, 295], [-6, 4], [-7, 4], [-379, 194], [-6, 3], [-7, 2], [-6, 1], [-265, 15], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-4, -7], [-4, -6], [-4, -8], [-3, -7], [-2, -8], [-2, -9], [-1, -8], [-1, -9], [0, -9], [1, -8], [1, -9], [1, -8], [2, -8], [3, -8], [3, -8], [4, -7], [255, -426], [-375, -260], [-5, -4], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-501, -960], [-4, -8], [-3, -9], [-3, -9], [-1, -9], [-1, -10], [-16, -209], [-25, -16], [-306, -85], [-413, 79], [-224, 357], [-4, 6], [-4, 5], [-440, 497], [-5, 5], [-5, 5], [-5, 3], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-686, -171], [-7, -2], [-6, -3], [-5, -3], [-6, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-113, -367], [-277, -179], [-442, 279], [-5, 3], [-6, 2], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -3], [-5, -4], [-160, -135], [-449, 183], [10, 233], [0, 9], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-120, 372], [198, 338], [3, 7], [4, 7], [2, 8], [2, 9], [2, 8], [1, 9], [0, 9], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-5, 6], [-5, 6], [-5, 4], [-225, 175], [206, 147], [6, 4], [5, 6], [5, 6], [4, 6], [4, 7], [3, 8], [3, 8], [2, 9], [2, 9], [1, 9], [0, 9], [1, 268], [-1, 7], [0, 8], [-2, 8], [-1, 8], [-87, 339], [-2, 9], [-4, 8], [-3, 8], [-4, 7], [-5, 6], [-5, 6], [-6, 4], [-361, 289], [432, 93], [6, 2], [6, 3], [6, 3], [5, 4], [6, 5], [4, 6], [5, 6], [4, 7], [3, 8], [3, 8], [3, 8], [1, 9], [2, 8], [0, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-132, 308], [215, 218], [5, 5], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 8], [2, 9], [1, 8], [0, 9], [-1, 9], [-1, 9], [-1, 8], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-260, 445], [-4, 7], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-484, 275], [219, 229], [250, 70], [6, 2], [6, 3], [6, 4], [5, 4], [5, 6], [5, 6], [4, 6], [4, 7], [3, 8], [3, 8], [2, 8], [1, 9], [1, 9], [1, 9], [-1, 9], [-1, 8], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-559, 659]], [[49266, 15063], [19, 132], [158, 455], [3, 9], [2, 10], [1, 10], [34, 363], [403, 299], [331, -131], [222, -92], [6, -2], [6, -1], [7, 0], [6, 0], [6, 2], [7, 2], [6, 3], [5, 5], [6, 5], [5, 5], [4, 7], [4, 7], [4, 7], [3, 8], [3, 9], [95, 379], [406, -259], [160, -600], [3, -9], [4, -9], [4, -8], [232, -391], [4, -6], [5, -6], [4, -5], [5, -4], [6, -4], [5, -3], [255, -118], [1138, -531], [9, -3], [814, -198], [6, -1], [5, -1], [6, 1], [257, 32], [5, 1], [273, 68], [6, 2], [6, 2], [5, 4], [5, 4], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [2, 8], [3, 7], [211, 809], [401, -251], [4, -2], [375, -193], [6, -2], [6, -2], [7, -1], [6, 0], [6, 1], [7, 2], [6, 3], [6, 3], [5, 5], [5, 5], [5, 6], [5, 6], [4, 7], [3, 8], [3, 8], [2, 8], [92, 396], [321, 136], [0, 0], [835, 365], [8, 4], [620, 412], [293, -42], [6, -1], [7, 1], [823, 111], [696, -285], [298, -180], [373, -434], [152, -573], [-250, -395], [-4, -7], [-4, -7], [-2, -8], [-3, -8], [-2, -8], [-1, -8], [-1, -9], [0, -8], [1, -9], [39, -460], [1, -9], [2, -9], [2, -8], [3, -8], [4, -8], [4, -7], [4, -6], [5, -6], [5, -5], [6, -4], [6, -4], [234, -123], [-189, -641], [-2, -7], [-1, -7], [-1, -8], [-180, -1685], [-177, -434], [-1273, -234], [-752, -55], [-8, -1], [-715, -178], [-7, -2], [-7, -4], [-470, -280], [-7, -4], [-6, -6], [-354, -359], [-6, -6], [-194, -245], [-385, 156], [-6, 2], [-6, 1], [-7, 1], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-5, -4], [-445, -348], [-4, -3], [-4, -4], [-194, -211], [-259, 182], [-6, 4], [-5, 2], [-6, 2], [-7, 1], [-641, 69], [-5, 0], [-6, 0], [-540, -75], [-46, 27], [-5, 3], [-6, 2], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-5, -3], [-359, -202], [-521, 341], [-5, 3], [-6, 2], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-6, -3], [-5, -4], [-5, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -7], [-110, -304], [-146, 375], [-4, 8], [-4, 7], [-4, 7], [-5, 6], [-6, 5], [-6, 5], [-6, 3], [-6, 3], [-387, 131], [-343, 455], [-5, 5], [-6, 6], [-5, 4], [-6, 3], [-6, 3], [-7, 2], [-418, 86], [-23, 180], [-1, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 7], [-5, 5], [-6, 5], [-6, 3], [-6, 3], [-6, 2], [-604, 148], [175, 475], [165, 112], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [2, 8], [3, 8], [2, 9], [1, 8], [1, 9], [0, 9], [-1, 9], [-49, 486], [118, 230], [4, 7], [3, 8], [2, 9], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-2, 9], [-2, 9], [-2, 8], [-130, 357], [75, 373], [1, 9], [1, 10], [0, 10], [-1, 10], [-32, 288], [221, 69], [6, 2], [6, 4], [6, 4], [5, 4], [5, 6], [4, 6], [5, 7], [3, 7], [3, 8], [3, 8], [2, 9], [1, 8], [1, 9], [0, 9], [0, 9], [-32, 341], [-1, 8], [-1, 8], [-3, 8], [-2, 8], [-4, 8], [-3, 6], [-4, 7], [-5, 6], [-5, 5], [-79, 74], [-299, 450], [38, 386], [1, 9], [0, 9], [-1, 9], [-1, 8], [-2, 8], [-2, 9], [-3, 7], [-4, 8], [-4, 6], [-4, 7], [-5, 5], [-5, 5], [-5, 4], [-6, 4], [-5, 2], [-6, 2], [-6, 1], [-7, 1], [-6, -1], [-284, -49], [-298, 147], [-112, 118]], [[0, 22577], [162, 228], [343, 145], [373, -184], [6, -2], [7, -2], [6, -1], [7, 0], [351, 36], [6, 1], [6, 2], [6, 3], [5, 3], [6, 4], [5, 5], [4, 5], [5, 6], [4, 7], [151, 286], [686, -424], [110, -110], [5, -5], [6, -4], [6, -3], [6, -3], [6, -1], [6, -1], [7, 1], [6, 1], [6, 2], [6, 3], [357, 201], [6, 4], [6, 5], [5, 6], [65, 77], [411, -185], [161, -268], [5, -7], [5, -6], [6, -6], [6, -4], [6, -4], [366, -177], [5, -2], [5, -2], [105, -26], [211, -78], [146, -308], [4, -7], [4, -7], [5, -6], [5, -5], [6, -5], [5, -4], [6, -2], [7, -3], [6, -1], [6, 0], [663, 18], [210, -358], [4, -6], [4, -5], [5, -5], [5, -5], [5, -3], [235, -151], [6, -3], [6, -3], [6, -1], [7, -1], [6, 0], [6, 1], [6, 2], [6, 3], [290, 159], [396, -232], [6, -3], [6, -2], [6, -1], [7, -1], [6, 1], [6, 1], [6, 2], [6, 3], [5, 4], [6, 5], [5, 5], [4, 6], [276, 390], [441, -311], [6, -4], [6, -2], [6, -2], [7, -1], [6, 0], [7, 1], [6, 2], [6, 2], [6, 4], [375, 262], [5, 5], [5, 4], [5, 6], [4, 6], [4, 6], [3, 7], [3, 8], [2, 7], [71, 262], [246, 152], [199, 32], [210, -601], [3, -7], [4, -7], [4, -7], [4, -6], [4, -5], [5, -5], [6, -4], [5, -3], [6, -3], [6, -2], [328, -80], [129, -72], [-11, -229], [0, -9], [1, -9], [1, -8], [1, -9], [2, -8], [3, -7], [3, -8], [4, -7], [4, -6], [4, -6], [5, -5], [5, -4], [6, -4], [389, -235], [6, -3], [6, -2], [6, -1], [7, -1], [6, 1], [6, 1], [7, 2], [5, 3], [6, 4], [6, 5], [5, 5], [4, 6], [5, 7], [257, 452], [131, -422], [3, -8], [3, -7], [4, -7], [5, -7], [4, -6], [5, -5], [6, -4], [5, -4], [6, -3], [6, -2], [6, -1], [7, 0], [6, 1], [6, 1], [6, 2], [6, 3], [5, 4], [6, 5], [5, 5], [4, 6], [279, 405], [160, -149], [6, -4], [6, -4], [6, -3], [7, -2], [6, -1], [6, 0], [7, 1], [6, 1], [407, 141], [7, 3], [6, 4], [6, 4], [298, 263], [735, -395], [92, -57], [8, -4], [879, -357], [6, -2], [6, -1], [6, 0], [7, 0], [6, 2], [6, 2], [6, 3], [5, 4], [6, 5], [5, 5], [4, 6], [4, 7], [143, 254], [238, 16], [6, 1], [7, 2], [6, 3], [6, 3], [5, 5], [6, 5], [264, 291], [346, -259], [-290, -373], [-5, -7], [-4, -7], [-3, -8], [-3, -8], [-3, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [2, -5], [3, -8], [4, -7], [4, -7], [4, -6], [5, -6], [213, -206], [5, -4], [4, -4], [450, -291], [146, -353], [3, -8], [4, -7], [5, -6], [5, -6], [5, -5], [5, -4], [6, -4], [6, -2], [7, -2], [6, -1], [6, 0], [6, 1], [7, 2], [6, 2], [5, 4], [144, 98], [19, -141], [-414, -304], [-5, -4], [-5, -5], [-5, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-23, -308], [-146, -59], [-6, -3], [-6, -3], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-42, -86], [-585, -63], [-6, -2], [-6, -1], [-6, -3], [-5, -3], [-5, -5], [-5, -4], [-5, -6], [-4, -6], [-4, -6], [-284, -538], [-145, -99], [-219, 155], [-6, 3], [-6, 3], [-7, 2], [-435, 95], [-6, 1], [-7, 0], [-6, -1], [-6, -1], [-7, -3], [-6, -4], [-265, -186], [-5, -3], [-4, -4], [-377, -383], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -8], [-2, -9], [0, -8], [-1, -9], [1, -9], [1, -8], [1, -9], [2, -8], [3, -8], [3, -8], [4, -7], [4, -6], [5, -6], [5, -5], [119, -112], [-208, -225], [-435, 79], [-177, 495], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-6, -3], [-563, -328], [-513, 131], [-503, 361], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-425, -126], [-6, -2], [-5, -3], [-6, -3], [-5, -5], [-5, -5], [-4, -5], [-4, -6], [-4, -7], [-3, -7], [-184, -457], [-2, -6], [-74, -223], [-246, 27], [-6, 0], [-6, 0], [-6, -1], [-5, -2], [-6, -3], [-324, -185], [-6, -4], [-5, -4], [-5, -6], [-5, -6], [-4, -6], [-4, -8], [-3, -7], [-3, -8], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [158, -415], [-226, -209], [-5, -5], [-5, -5], [-4, -7], [-4, -7], [-3, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [0, -8], [0, -9], [0, -9], [2, -8], [1, -8], [3, -8], [3, -8], [3, -7], [4, -7], [4, -6], [5, -6], [290, -314], [-2, -8], [-2, -8], [-2, -9], [0, -9], [0, -9], [0, -9], [2, -9], [1, -8], [3, -8], [3, -8], [3, -8], [4, -7], [5, -6], [5, -6], [5, -5], [5, -4], [6, -3], [161, -81], [102, -244], [-91, -551], [-263, -308], [-399, 239], [-6, 3], [-6, 2], [-458, 129], [-6, 1], [-7, 1], [-6, -1], [-392, -55], [-431, 301], [-135, 398], [-25, 104], [-2, 8], [-3, 8], [-4, 8], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-6, 4], [-6, 2], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-7, -2], [-6, -3], [-459, -244], [-183, 283], [-4, 7], [-5, 5], [-6, 5], [-5, 4], [-6, 4], [-6, 2], [-6, 2], [-6, 1], [-7, 0], [-6, -1], [-233, -54], [-47, 102], [-4, 7], [-4, 7], [-5, 6], [-5, 6], [-6, 4], [-307, 224], [-498, 711], [-3, 4], [-437, 554], [120, 127], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [2, 8], [2, 9], [1, 8], [1, 9], [0, 9], [-1, 9], [-1, 8], [-2, 9], [-2, 8], [-3, 8], [-3, 7], [-234, 460], [-5, 9], [-5, 7], [-145, 174], [210, 340], [4, 7], [3, 7], [3, 7], [2, 8], [2, 8], [1, 9], [1, 8], [0, 8], [-14, 705], [114, 296], [2, 8], [3, 8], [1, 9], [1, 9], [1, 9], [-1, 9], [-1, 8], [-1, 9], [-2, 9], [-3, 8], [-3, 7], [-4, 8], [-4, 6], [-5, 6], [-5, 6], [-5, 4], [-6, 4], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-7, 0], [-6, -2], [-6, -2], [-6, -3], [-286, -171], [-425, -31], [-252, 625], [-3, 7], [-4, 7], [-4, 6], [-5, 5], [-656, 747], [-5, 5], [-6, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 1], [-6, -1], [-6, -1], [-6, -2], [-6, -3], [-194, -109], [-184, 489], [-4, 8], [-4, 8], [-5, 7], [-5, 6], [-5, 6], [-6, 4], [-222, 149], [-6, 3], [-6, 3], [-5, 2], [-6, 1], [-6, 0], [-6, -1], [-247, -40], [-326, 279], [-49, 323], [-1, 9], [-2, 8], [-3, 8], [-66, 173], [-4, 8], [-5, 8], [-4, 7], [-377, 488]], [[27642, 3061], [22, 143], [35, 200], [631, 216], [6, 3], [6, 3], [5, 4], [6, 5], [5, 6], [4, 6], [4, 7], [4, 8], [3, 8], [2, 8], [2, 8], [1, 9], [1, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-3, 9], [-3, 8], [-3, 7], [-4, 7], [-5, 6], [-3, 5], [26, 65], [251, 109], [563, 154], [6, 2], [6, 3], [6, 4], [5, 4], [5, 5], [5, 6], [4, 7], [4, 7], [3, 7], [3, 8], [2, 8], [2, 8], [1, 9], [0, 9], [0, 8], [-1, 9], [-1, 9], [-2, 8], [-101, 390], [-2, 7], [-3, 8], [-3, 7], [-4, 6], [-4, 6], [-5, 6], [-4, 4], [-181, 166], [-69, 238], [173, 199], [4, 5], [3, 5], [54, 86], [4, 7], [4, 8], [3, 8], [2, 9], [2, 9], [1, 9], [1, 10], [-1, 9], [-1, 9], [-60, 444], [111, 277], [3, 8], [2, 8], [2, 8], [1, 8], [1, 9], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-36, 71], [-96, 256], [349, 159], [479, -51], [7, 0], [7, 1], [6, 1], [6, 3], [6, 3], [6, 5], [256, 218], [374, -41], [5, 0], [6, 0], [6, 1], [6, 3], [6, 2], [5, 4], [5, 4], [5, 5], [4, 6], [118, 159], [588, 271], [2, 1], [51, 27], [1, 1], [57, 33], [173, -250], [90, -165], [4, -7], [4, -6], [5, -6], [6, -4], [5, -4], [6, -4], [6, -2], [6, -2], [6, 0], [7, 0], [6, 1], [6, 2], [6, 2], [170, 91], [6, 4], [6, 5], [6, 6], [546, 642], [4, 5], [164, 228], [1, 2], [15, 23], [228, -116], [15, -256], [1, -9], [1, -9], [2, -8], [3, -9], [3, -7], [4, -8], [4, -6], [5, -6], [5, -6], [5, -5], [6, -3], [143, -85], [-250, -333], [-4, -6], [-3, -6], [-4, -7], [-30, -70], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -8], [0, -9], [0, -9], [2, -9], [1, -8], [3, -9], [3, -8], [3, -7], [4, -7], [4, -6], [5, -6], [5, -5], [6, -4], [273, -188], [23, -138], [1, -8], [2, -7], [3, -8], [3, -7], [4, -7], [4, -6], [4, -6], [305, -353], [4, -5], [5, -4], [6, -4], [5, -3], [6, -2], [6, -2], [5, 0], [6, 0], [210, 15], [364, -18], [123, -294], [3, -8], [4, -7], [5, -6], [5, -6], [5, -5], [6, -4], [6, -4], [6, -2], [6, -2], [6, -1], [7, 1], [6, 1], [6, 1], [6, 3], [6, 4], [5, 4], [113, 101], [134, -225], [-262, -744], [-3, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [0, -9], [1, -8], [2, -9], [2, -8], [2, -8], [4, -7], [3, -7], [4, -6], [5, -6], [5, -6], [5, -4], [5, -4], [6, -3], [264, -119], [38, -124], [-394, -200], [-6, -4], [-5, -4], [-5, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-104, -306], [-197, -487], [-3, -8], [-2, -9], [-2, -9], [-1, -9], [-1, -9], [1, -9], [1, -9], [1, -9], [112, -545], [2, -8], [2, -8], [3, -7], [4, -7], [3, -6], [27, -42], [-195, -255], [-4, -6], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -8], [0, -9], [0, -9], [0, -8], [1, -9], [2, -8], [2, -9], [3, -7], [138, -345], [49, -198], [3, -9], [3, -8], [4, -8], [4, -8], [145, -215], [4, -5], [4, -5], [5, -4], [116, -104], [69, -947], [-595, -371], [-274, -19], [-5, 0], [-4, -2], [-758, -218], [-224, 9], [-628, 467], [-5, 3], [-6, 3], [-288, 125], [-5, 1], [-209, 67], [-6, 1], [-6, 1], [-5, 0], [-330, -24], [-515, -4], [-290, 282], [-6, 5], [-6, 4], [-6, 3], [-6, 3], [-7, 1], [-210, 26], [-1, 0], [-136, 13], [-6, 0], [-6, 0], [-6, -2], [-5, -2], [-446, -200], [-431, 39], [-6, 0], [-6, -1], [-6, -1], [-6, -2], [-5, -3], [-341, -206], [-559, 305], [-24, 119], [239, 271], [316, 88], [6, 2], [6, 3], [5, 4], [5, 4], [5, 5], [5, 6], [4, 6], [4, 7], [3, 8], [3, 8], [2, 8], [51, 219], [1, 8], [1, 9], [1, 9], [0, 10], [-1, 9], [-2, 8], [-2, 9], [-3, 8], [-3, 8], [-4, 8], [-4, 6], [-5, 6], [-5, 6], [-6, 4], [-5, 4], [-66, 37], [-242, 246], [-155, 345], [-3, 32], [-2, 8], [-1, 9], [-3, 8], [-3, 7], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-216, 186], [46, 60], [5, 6], [4, 7], [3, 7], [3, 8], [2, 8], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 8], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-243, 160]], [[21188, 15684], [35, 918], [200, -116], [6, -3], [6, -2], [6, -1], [6, -1], [6, 0], [6, 2], [6, 2], [6, 3], [6, 3], [5, 5], [390, 363], [780, 306], [961, 14], [384, -94], [119, -42], [50, -20], [7, -3], [95, -23], [4, -1], [217, -33], [6, -1], [6, 1], [6, 1], [540, 132], [7, 2], [6, 3], [6, 4], [388, 288], [757, 250], [286, -12], [318, -81], [6, -2], [6, 0], [6, 1], [7, 1], [6, 3], [6, 3], [5, 4], [113, 90], [59, -23], [92, -339], [-173, -605], [-189, -216], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -8], [0, -9], [0, -9], [1, -9], [1, -8], [131, -651], [-54, -335], [-2, -11], [0, -11], [4, -398], [-102, -328], [-32, -37], [-5, -7], [-4, -6], [-4, -8], [-3, -7], [-3, -9], [-2, -8], [-1, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [2, -9], [2, -8], [3, -8], [4, -8], [3, -7], [5, -6], [291, -390], [-82, -68], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-2, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [1, -9], [1, -9], [1, -8], [2, -8], [3, -8], [4, -8], [119, -241], [-69, -391], [-144, -192], [-5, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -8], [4, -6], [4, -6], [6, -6], [5, -5], [6, -3], [6, -3], [154, -68], [-142, -236], [-4, -7], [-3, -7], [-3, -8], [-2, -9], [-2, -9], [-1, -9], [-1, -9], [1, -9], [1, -8], [1, -9], [2, -9], [3, -8], [3, -8], [4, -7], [4, -7], [5, -6], [5, -5], [62, -59], [-136, -165], [-5, -6], [-4, -7], [-3, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [0, -9], [0, -9], [1, -8], [2, -9], [2, -8], [3, -8], [3, -8], [4, -7], [113, -190], [-109, -363], [-235, -429], [-80, 50], [-164, 392], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-6, 4], [-5, 4], [-6, 2], [-6, 2], [-7, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-348, -289], [-5, -5], [-5, -6], [-5, -7], [-4, -7], [-4, -8], [-3, -8], [-82, -256], [-3, -8], [-1, -8], [-1, -8], [-1, -8], [-17, -374], [-240, -203], [-5, -6], [-5, -5], [-4, -7], [-5, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [-1, -9], [1, -9], [0, -9], [2, -9], [2, -9], [15, -52], [-11, -177], [0, -11], [1, -10], [1, -10], [77, -410], [1, -7], [2, -6], [175, -558], [52, -289], [1, -132], [-173, 224], [-4, 6], [-6, 4], [-5, 5], [-6, 3], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-6, -4], [-6, -4], [-5, -4], [-5, -6], [-4, -6], [-139, -211], [-3, -6], [-4, -7], [-3, -7], [-2, -8], [-2, -7], [-1, -9], [-1, -8], [-1, -8], [-1, -164], [-404, -22], [-174, 104], [-6, 3], [-7, 2], [-6, 2], [-6, 0], [-6, 0], [-7, -2], [-6, -2], [-6, -3], [-5, -4], [-237, -181], [-5, -4], [-5, -6], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -9], [-1, -9], [-6, -88], [-197, -250], [-493, 374], [-6, 3], [-5, 3], [-7, 3], [-6, 1], [-6, 0], [-6, 0], [-372, -52], [-177, 818], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 7], [-5, 6], [-5, 5], [-6, 5], [-5, 3], [-6, 3], [-7, 2], [-584, 150], [-6, 1], [-6, 0], [-5, 0], [-6, -2], [-6, -2], [-35, -14], [3, 79], [0, 11], [-1, 10], [-57, 494], [-9, 241], [48, 501], [1, 8], [0, 9], [-1, 9], [-67, 604], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-4, 7], [-4, 7], [-4, 6], [-5, 6], [-6, 5], [-43, 35], [-25, 198], [73, 434], [2, 8], [0, 9], [0, 8], [0, 9], [-1, 8], [-2, 8], [-2, 8], [-3, 8], [-24, 60], [-12, 53], [-40, 312], [205, 167], [5, 5], [5, 5], [5, 7], [4, 7], [3, 7], [4, 9], [2, 8], [2, 9], [1, 9], [1, 9], [-1, 9], [0, 9], [-2, 9], [-2, 9], [-62, 230], [224, 78], [5, 3], [6, 3], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 7], [2, 9], [2, 8], [1, 9], [1, 8], [0, 9], [0, 9], [-24, 266], [-1, 9], [-2, 10], [-3, 9], [-3, 8], [-55, 126], [228, 300], [4, 7], [4, 6], [4, 8], [3, 8], [2, 8], [2, 8], [1, 9], [0, 9], [0, 8], [0, 9], [-1, 9], [-2, 8], [-3, 8], [-2, 8], [-343, 821], [271, 437], [4, 7], [4, 7], [3, 8], [2, 8], [2, 9], [1, 9], [0, 9], [0, 8], [0, 9], [-2, 9], [-1, 8], [-3, 9], [-3, 7], [-3, 8], [-4, 7], [-5, 6], [-5, 5], [-5, 5], [-5, 4], [-434, 286], [-5, 3], [-6, 3], [-6, 2], [-6, 0], [-5, 1], [-6, -1], [-6, -1], [-546, -168], [-239, 183], [-6, 4], [-5, 3], [-7, 2], [-6, 2], [-6, 0], [-284, 1]], [[38921, 20129], [20, 65], [3, 8], [1, 9], [1, 8], [64, 710], [292, 578], [4, 7], [2, 7], [3, 8], [1, 8], [2, 8], [25, 214], [834, -147], [6, -1], [6, 1], [6, 1], [7, 2], [6, 3], [5, 3], [6, 5], [5, 5], [413, 467], [354, 168], [434, -2], [160, -222], [5, -6], [5, -5], [6, -5], [6, -3], [6, -3], [6, -2], [6, -1], [7, -1], [6, 1], [244, 45], [5, 2], [252, 81], [307, -118], [6, -2], [7, -1], [6, 0], [6, 0], [6, 2], [6, 2], [6, 3], [5, 4], [6, 5], [5, 5], [4, 7], [4, 6], [65, 118], [177, 249], [564, -212], [7, -2], [6, -1], [7, 0], [7, 1], [6, 2], [6, 2], [6, 4], [393, 281], [5, 4], [5, 5], [5, 6], [4, 6], [4, 7], [3, 8], [3, 8], [2, 8], [2, 9], [1, 9], [1, 9], [-1, 8], [0, 9], [-2, 9], [-2, 8], [-2, 9], [-38, 107], [236, 318], [58, -31], [5, -2], [6, -2], [6, -1], [6, 0], [6, 0], [316, 54], [193, 11], [6, 1], [6, 2], [6, 2], [6, 4], [6, 4], [5, 5], [5, 6], [5, 7], [4, 7], [3, 7], [3, 8], [2, 9], [2, 9], [1, 9], [1, 9], [0, 9], [-1, 9], [-2, 9], [-2, 8], [-12, 45], [195, 30], [319, -414], [4, -5], [5, -5], [6, -4], [5, -4], [6, -2], [6, -2], [6, -1], [6, 0], [6, 0], [6, 2], [6, 2], [6, 3], [6, 4], [5, 5], [5, 5], [4, 6], [4, 7], [4, 7], [128, 278], [605, -284], [15, -38], [-432, -46], [-6, -1], [-7, -2], [-5, -3], [-6, -3], [-6, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-2, -9], [-1, -9], [0, -9], [0, -9], [18, -315], [-297, -62], [-450, 30], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-5, -4], [-6, -4], [-5, -4], [-5, -6], [-4, -6], [-4, -7], [-4, -7], [-3, -7], [-2, -8], [-2, -9], [-34, -179], [-104, -125], [-134, 3], [-21, 11], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -2], [-6, -4], [-6, -3], [-5, -5], [-5, -5], [-4, -6], [-4, -7], [-4, -7], [-3, -8], [-3, -8], [-2, -8], [-1, -8], [-1, -9], [0, -9], [1, -690], [0, -10], [1, -9], [2, -9], [2, -8], [3, -8], [290, -740], [160, -470], [72, -255], [2, -7], [3, -7], [3, -7], [212, -400], [13, -119], [1, -9], [2, -9], [2, -8], [3, -8], [105, -245], [4, -8], [5, -8], [93, -136], [6, -7], [6, -6], [6, -5], [362, -253], [0, -14], [0, -8], [1, -9], [1, -8], [2, -9], [3, -8], [3, -7], [3, -7], [4, -7], [5, -6], [4, -5], [6, -5], [244, -202], [49, -94], [2, -3], [217, -392], [-74, -474], [-1, -8], [0, -9], [0, -8], [1, -9], [1, -8], [2, -8], [2, -8], [54, -165], [3, -8], [3, -7], [4, -6], [4, -6], [4, -6], [5, -5], [91, -85], [-744, -678], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -7], [-2, -9], [-2, -8], [-1, -9], [0, -9], [0, -8], [1, -9], [1, -9], [2, -8], [2, -8], [-541, -184], [-364, 147], [35, 494], [0, 9], [0, 9], [-1, 8], [-2, 9], [-2, 8], [-2, 8], [-4, 8], [-3, 7], [-4, 6], [-5, 6], [-5, 6], [-5, 4], [-5, 4], [-6, 3], [-6, 3], [-6, 1], [-6, 1], [-7, -1], [-6, -1], [-6, -2], [-6, -2], [-5, -4], [-285, -201], [-89, 167], [-4, 7], [-5, 6], [-5, 6], [-5, 5], [-6, 4], [-5, 3], [-6, 3], [-7, 1], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-6, -4], [-6, -4], [-5, -5], [-226, -247], [-253, -105], [-63, 445], [-1, 9], [-2, 8], [-3, 8], [-3, 8], [-4, 7], [-4, 6], [-4, 6], [-5, 6], [-6, 4], [-5, 4], [-6, 3], [-6, 2], [-6, 2], [-7, 0], [-6, 0], [-6, -2], [-6, -2], [-6, -2], [-5, -4], [-6, -5], [-5, -5], [-4, -6], [-5, -6], [-4, -7], [-3, -8], [-60, -154], [-75, 13], [-407, 310], [-99, 249], [5, 155], [0, 8], [0, 9], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-6, 4], [-6, 3], [-6, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -1], [-6, -2], [-6, -3], [-209, -126], [-263, 140], [-6, 3], [-5, 1], [-6, 1], [-6, 1], [-6, -1], [-6, -1], [-6, -2], [-407, -174], [-161, 235], [-4, 6], [-6, 6], [-5, 4], [-6, 4], [-6, 3], [-7, 3], [-6, 1], [-232, 27], [-394, 319], [-6, 5], [-419, 252], [-126, 110], [-6, 4], [-5, 3], [-6, 3], [-7, 2], [-6, 1], [-6, 0], [-6, -1], [-6, -2], [-6, -2], [-120, -60], [-225, 80], [-375, 407], [-326, 520], [10, 318], [0, 8], [0, 9], [-2, 8], [-1, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-5, 6], [-5, 5], [-5, 4], [-296, 222], [-84, 129], [10, 100], [1, 9], [0, 9], [-1, 9], [-1, 9], [-2, 8], [-23, 86]], [[44182, 29399], [55, -25], [1, -1], [208, -86], [5, -2], [6, -1], [6, -1], [452, -4], [3, 0], [89, 5], [5, 1], [6, 1], [5, 2], [5, 3], [356, 208], [118, -183], [5, -7], [5, -5], [5, -5], [5, -4], [6, -3], [5, -3], [6, -2], [6, -1], [231, -21], [7, 0], [7, 1], [364, 87], [6, 2], [6, 2], [6, 4], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [3, 8], [3, 8], [2, 8], [59, 245], [153, -192], [5, -6], [5, -4], [5, -4], [6, -4], [6, -2], [5, -2], [6, -1], [7, 0], [6, 1], [498, 93], [6, 2], [6, 3], [6, 3], [6, 4], [5, 5], [5, 6], [4, 6], [4, 7], [4, 7], [3, 8], [3, 11], [3, 8], [2, 9], [1, 8], [0, 9], [0, 9], [0, 9], [-2, 9], [-1, 9], [-3, 8], [-211, 619], [23, 55], [190, -77], [473, -472], [134, -266], [4, -7], [4, -6], [5, -6], [5, -5], [6, -5], [6, -3], [6, -3], [6, -2], [6, -1], [6, 0], [7, 1], [6, 2], [6, 2], [6, 3], [5, 5], [6, 5], [5, 5], [4, 6], [4, 7], [4, 8], [3, 8], [2, 8], [2, 8], [75, 421], [42, -15], [128, -446], [-83, -167], [-3, -8], [-3, -8], [-3, -8], [-1, -9], [-1, -8], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -9], [3, -8], [3, -7], [4, -8], [4, -7], [4, -6], [5, -5], [6, -5], [5, -4], [6, -3], [6, -2], [7, -2], [6, 0], [421, -9], [80, -266], [3, -8], [3, -7], [4, -7], [4, -6], [4, -6], [5, -5], [6, -5], [5, -4], [6, -3], [6, -2], [6, -1], [264, -40], [6, 0], [6, 0], [6, 1], [6, 2], [6, 3], [6, 3], [5, 4], [5, 5], [4, 6], [5, 6], [3, 7], [145, 278], [171, -132], [5, -4], [6, -3], [6, -2], [5, -2], [6, 0], [6, 0], [282, 22], [7, 2], [7, 2], [196, 82], [260, -104], [416, -895], [27, -83], [3, -8], [4, -8], [4, -7], [275, -414], [101, -619], [-226, -936], [-2, -9], [-1, -9], [-1, -9], [0, -9], [1, -9], [1, -9], [2, -8], [3, -8], [3, -8], [4, -8], [4, -7], [4, -6], [253, -307], [-199, -532], [-236, -353], [-4, -7], [-3, -7], [-3, -7], [-3, -8], [-2, -8], [-1, -9], [-1, -8], [0, -9], [0, -8], [1, -9], [1, -8], [2, -8], [3, -8], [3, -8], [109, -240], [-384, -276], [-5, -5], [-5, -5], [-5, -6], [-4, -6], [-4, -7], [-3, -8], [-3, -8], [-187, -609], [-2, -8], [-2, -9], [-1, -10], [-1, -9], [1, -9], [1, -9], [1, -9], [3, -9], [3, -8], [3, -8], [85, -173], [-39, -644], [-189, 66], [-7, 2], [-7, 1], [-7, 0], [-6, -2], [-409, -109], [-148, 91], [-92, 197], [-3, 7], [-4, 6], [-5, 6], [-4, 5], [-5, 5], [-6, 3], [-5, 4], [-6, 2], [-6, 1], [-6, 1], [-562, 36], [-71, 119], [-4, 6], [-4, 6], [-5, 5], [-6, 5], [-5, 3], [-6, 3], [-6, 2], [-6, 2], [-6, 0], [-6, 0], [-6, -1], [-6, -2], [-6, -3], [-6, -4], [-5, -4], [-5, -5], [-5, -6], [-4, -7], [-4, -6], [-3, -8], [-3, -8], [-2, -8], [-62, -268], [-174, -198], [-143, -68], [-367, 292], [-5, 4], [-6, 3], [-5, 2], [-6, 2], [-6, 0], [-370, 29], [-399, 102], [-6, 1], [-6, 0], [-7, -1], [-6, -1], [-6, -3], [-6, -3], [-6, -4], [-6, -5], [-5, -6], [-4, -7], [-4, -7], [-4, -8], [-3, -8], [-2, -8], [-2, -9], [-102, -633], [-1, -9], [-1, -8], [0, -9], [1, -9], [1, -8], [2, -8], [2, -8], [3, -8], [3, -7], [4, -7], [4, -6], [5, -6], [5, -4], [5, -5], [6, -3], [6, -3], [183, -73], [-99, -256], [-266, -60], [-106, 443], [-2, 7], [-2, 8], [-3, 7], [-3, 6], [-83, 146], [-29, 348], [-1, 9], [-2, 9], [-2, 9], [-3, 8], [-3, 7], [-56, 112], [-49, 133], [67, 173], [3, 8], [2, 8], [2, 8], [1, 8], [0, 8], [7, 197], [0, 9], [-1, 8], [-1, 9], [-2, 8], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-193, 263], [-7, 89], [-1, 11], [-96, 623], [45, 438], [0, 8], [0, 9], [0, 8], [-1, 8], [-2, 8], [-2, 8], [-2, 8], [-4, 7], [-302, 636], [-206, 682], [-2, 8], [-4, 8], [-3, 7], [-336, 569], [-2, 4], [-2, 8], [-4, 7], [-3, 6], [-4, 7], [-5, 5], [-296, 333], [137, 321], [3, 8], [2, 8], [2, 8], [1, 9], [1, 9], [0, 9], [-1, 8], [-1, 9], [-2, 9], [-2, 8], [-3, 8], [-3, 7], [-4, 7], [-4, 6], [-42, 56], [-41, 331], [-2, 9], [-2, 9], [-3, 8], [-3, 8], [-4, 8], [-4, 7], [-5, 6], [-5, 5], [-365, 346], [3, 2], [5, 6], [5, 6], [4, 7], [4, 7], [3, 8], [3, 8], [2, 9], [1, 9], [1, 9], [0, 9], [0, 9], [-62, 696], [-1, 10], [-2, 9], [-3, 8], [-3, 8], [-3, 8], [-4, 7], [-5, 7], [-114, 143]]],\n  \"transform\": {\n    \"scale\": [0.0001568751583788854, 0.00011026373212105147],\n    \"translate\": [20.27617097538748, 43.62971195022283]\n  },\n  \"objects\": {\n    \"romania.counties\": {\n      \"type\": \"GeometryCollection\",\n      \"geometries\": [{\n        \"arcs\": [[0]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"AB\",\n          \"id\": \"AB\",\n          \"name\": \"Alba\",\n          \"region\": \"Centru\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"0\"\n      }, {\n        \"arcs\": [[1]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"AG\",\n          \"id\": \"AG\",\n          \"name\": \"Argeș\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"1\"\n      }, {\n        \"arcs\": [[2]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"AR\",\n          \"id\": \"AR\",\n          \"name\": \"Arad\",\n          \"region\": \"Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"2\"\n      }, {\n        \"arcs\": [[3]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"B\",\n          \"id\": \"B\",\n          \"name\": \"București\",\n          \"region\": \"București-Ilfov\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"3\"\n      }, {\n        \"arcs\": [[4]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"BC\",\n          \"id\": \"BC\",\n          \"name\": \"Bacău\",\n          \"region\": \"Nord-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"4\"\n      }, {\n        \"arcs\": [[5]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"BH\",\n          \"id\": \"BH\",\n          \"name\": \"Bihor\",\n          \"region\": \"Nord-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"5\"\n      }, {\n        \"arcs\": [[6]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"BN\",\n          \"id\": \"BN\",\n          \"name\": \"Bistrița-Năsăud\",\n          \"region\": \"Nord-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"6\"\n      }, {\n        \"arcs\": [[7]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"BR\",\n          \"id\": \"BR\",\n          \"name\": \"Brăila\",\n          \"region\": \"Sud-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"7\"\n      }, {\n        \"arcs\": [[8]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"BT\",\n          \"id\": \"BT\",\n          \"name\": \"Botoșani\",\n          \"region\": \"Nord-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"8\"\n      }, {\n        \"arcs\": [[9]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"BV\",\n          \"id\": \"BV\",\n          \"name\": \"Brașov\",\n          \"region\": \"Centru\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"9\"\n      }, {\n        \"arcs\": [[10]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"BZ\",\n          \"id\": \"BZ\",\n          \"name\": \"Buzău\",\n          \"region\": \"Sud-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"10\"\n      }, {\n        \"arcs\": [[11]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"CJ\",\n          \"id\": \"CJ\",\n          \"name\": \"Cluj\",\n          \"region\": \"Nord-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"11\"\n      }, {\n        \"arcs\": [[12]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"CL\",\n          \"id\": \"CL\",\n          \"name\": \"Călărași\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"12\"\n      }, {\n        \"arcs\": [[13]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"CS\",\n          \"id\": \"CS\",\n          \"name\": \"Caraș-Severin\",\n          \"region\": \"Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"13\"\n      }, {\n        \"arcs\": [[14]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"CT\",\n          \"id\": \"CT\",\n          \"name\": \"Constanța\",\n          \"region\": \"Sud-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"14\"\n      }, {\n        \"arcs\": [[15]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"CV\",\n          \"id\": \"CV\",\n          \"name\": \"Covasna\",\n          \"region\": \"Centru\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"15\"\n      }, {\n        \"arcs\": [[16]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"DB\",\n          \"id\": \"DB\",\n          \"name\": \"Dâmbovița\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"16\"\n      }, {\n        \"arcs\": [[17]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"DJ\",\n          \"id\": \"DJ\",\n          \"name\": \"Dolj\",\n          \"region\": \"Sud-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"17\"\n      }, {\n        \"arcs\": [[18]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"GJ\",\n          \"id\": \"GJ\",\n          \"name\": \"Gorj\",\n          \"region\": \"Sud-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"18\"\n      }, {\n        \"arcs\": [[19]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"GL\",\n          \"id\": \"GL\",\n          \"name\": \"Galați\",\n          \"region\": \"Sud-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"19\"\n      }, {\n        \"arcs\": [[20]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"GR\",\n          \"id\": \"GR\",\n          \"name\": \"Giurgiu\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"20\"\n      }, {\n        \"arcs\": [[21]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"HD\",\n          \"id\": \"HD\",\n          \"name\": \"Hunedoara\",\n          \"region\": \"Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"21\"\n      }, {\n        \"arcs\": [[22]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"HR\",\n          \"id\": \"HR\",\n          \"name\": \"Harghita\",\n          \"region\": \"Centru\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"22\"\n      }, {\n        \"arcs\": [[23], [24]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"IF\",\n          \"id\": \"IF\",\n          \"name\": \"Ilfov\",\n          \"region\": \"București-Ilfov\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"23\"\n      }, {\n        \"arcs\": [[25]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"IL\",\n          \"id\": \"IL\",\n          \"name\": \"Ialomița\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"24\"\n      }, {\n        \"arcs\": [[26]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"IS\",\n          \"id\": \"IS\",\n          \"name\": \"Iași\",\n          \"region\": \"Nord-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"25\"\n      }, {\n        \"arcs\": [[27]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"MH\",\n          \"id\": \"MH\",\n          \"name\": \"Mehedinți\",\n          \"region\": \"Sud-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"26\"\n      }, {\n        \"arcs\": [[28]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"MM\",\n          \"id\": \"MM\",\n          \"name\": \"Maramureș\",\n          \"region\": \"Nord-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"27\"\n      }, {\n        \"arcs\": [[29]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"MS\",\n          \"id\": \"MS\",\n          \"name\": \"Mureș\",\n          \"region\": \"Centru\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"28\"\n      }, {\n        \"arcs\": [[30]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"NT\",\n          \"id\": \"NT\",\n          \"name\": \"Neamț\",\n          \"region\": \"Nord-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"29\"\n      }, {\n        \"arcs\": [[31]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"OT\",\n          \"id\": \"OT\",\n          \"name\": \"Olt\",\n          \"region\": \"Sud-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"30\"\n      }, {\n        \"arcs\": [[32]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"PH\",\n          \"id\": \"PH\",\n          \"name\": \"Prahova\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"31\"\n      }, {\n        \"arcs\": [[33]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"SB\",\n          \"id\": \"SB\",\n          \"name\": \"Sibiu\",\n          \"region\": \"Centru\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"32\"\n      }, {\n        \"arcs\": [[34]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"SJ\",\n          \"id\": \"SJ\",\n          \"name\": \"Sălaj\",\n          \"region\": \"Nord-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"33\"\n      }, {\n        \"arcs\": [[35]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"SM\",\n          \"id\": \"SM\",\n          \"name\": \"SatuMare\",\n          \"region\": \"Nord-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"34\"\n      }, {\n        \"arcs\": [[36]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"SV\",\n          \"id\": \"SV\",\n          \"name\": \"Suceava\",\n          \"region\": \"Nord-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"35\"\n      }, {\n        \"arcs\": [[37]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"TL\",\n          \"id\": \"TL\",\n          \"name\": \"Tulcea\",\n          \"region\": \"Sud-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"36\"\n      }, {\n        \"arcs\": [[38]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"TM\",\n          \"id\": \"TM\",\n          \"name\": \"Timiș\",\n          \"region\": \"Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"37\"\n      }, {\n        \"arcs\": [[39]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"TR\",\n          \"id\": \"TR\",\n          \"name\": \"Teleorman\",\n          \"region\": \"Sud\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"38\"\n      }, {\n        \"arcs\": [[40]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"VL\",\n          \"id\": \"VL\",\n          \"name\": \"Vâlcea\",\n          \"region\": \"Sud-Vest\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"39\"\n      }, {\n        \"arcs\": [[41]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"VN\",\n          \"id\": \"VN\",\n          \"name\": \"Vrancea\",\n          \"region\": \"Sud-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"40\"\n      }, {\n        \"arcs\": [[42]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"VS\",\n          \"id\": \"VS\",\n          \"name\": \"Vaslui\",\n          \"region\": \"Nord-Est\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"41\"\n      }]\n    }\n  }\n};\nvar atusTopojson = {\n  \"type\": \"Topology\",\n  \"arcs\": [[[5671, 125], [39, -9]], [[5710, 116], [-4, -60]], [[5706, 56], [1, -7]], [[5707, 49], [0, -12]], [[5707, 37], [-130, -37]], [[5577, 0], [-14, 73], [72, 59]], [[5635, 132], [36, -7]], [[5671, 125], [39, -9]], [[5777, 186], [-66, -69]], [[5711, 117], [66, 69]], [[5617, 175], [18, -43]], [[5577, 0], [-150, 80]], [[5427, 80], [98, 119]], [[5525, 199], [30, 10]], [[5555, 209], [62, -34]], [[5080, 229], [26, -68]], [[5106, 161], [-23, 2]], [[5083, 163], [-3, 66]], [[5072, 259], [0, 51]], [[5072, 310], [0, -51]], [[5501, 225], [24, -26]], [[5427, 80], [-49, 21]], [[5378, 101], [107, 131]], [[5485, 232], [16, -7]], [[4901, 207], [8, 6]], [[4909, 213], [-8, -6]], [[4887, 249], [8, -45]], [[4895, 204], [35, -68]], [[4930, 136], [-62, -36], [-103, 55]], [[4765, 155], [-7, 34]], [[4758, 189], [104, 68]], [[4862, 257], [25, -8]], [[4765, 155], [-94, 47]], [[4671, 202], [3, 46]], [[4674, 248], [88, 22]], [[4762, 270], [-4, -81]], [[5706, 56], [1, -7]], [[5828, 275], [-51, -89]], [[5711, 117], [-1, -1]], [[5617, 175], [44, 58]], [[5661, 233], [167, 42]], [[4469, 280], [23, -107]], [[4492, 173], [-70, -58]], [[4422, 115], [4, 171]], [[4426, 286], [43, -6]], [[4026, 276], [0, -93]], [[4026, 183], [-71, 9]], [[3955, 192], [39, 92]], [[3994, 284], [32, -8]], [[5959, 122], [-94, -16]], [[5865, 106], [-13, 174]], [[5852, 280], [26, 9]], [[5878, 289], [75, -50], [6, -117]], [[4352, 287], [-88, -192]], [[4264, 95], [-90, 24]], [[4174, 119], [18, 112], [68, 54]], [[4260, 285], [92, 2]], [[4422, 115], [-88, -7]], [[4334, 108], [71, 186]], [[4405, 294], [21, -8]], [[5865, 106], [-158, -69]], [[5828, 275], [0, 25]], [[5828, 300], [24, -20]], [[5378, 101], [-36, 11]], [[5342, 112], [-26, 113]], [[5316, 225], [70, -33], [78, 113]], [[5464, 305], [21, -73]], [[4334, 108], [-70, -13]], [[4352, 287], [8, 22]], [[4360, 309], [45, -15]], [[6043, 199], [-84, -77]], [[5878, 289], [49, 49]], [[5927, 338], [116, -139]], [[4294, 332], [41, 2]], [[4335, 334], [15, -5]], [[4350, 329], [10, -20]], [[4260, 285], [11, 55]], [[4271, 340], [23, -8]], [[4814, 346], [12, -33]], [[4826, 313], [2, -6]], [[4828, 307], [30, -4]], [[4858, 303], [-96, -33]], [[4674, 248], [-13, 45]], [[4661, 293], [153, 53]], [[4651, 326], [10, -33]], [[4671, 202], [-179, -29]], [[4469, 280], [1, 17]], [[4470, 297], [46, -2]], [[4516, 295], [95, 56]], [[4611, 351], [40, -25]], [[4112, 150], [-86, 33]], [[4026, 276], [51, 79]], [[4077, 355], [59, -20], [-24, -185]], [[5803, 336], [-159, -65]], [[5644, 271], [-15, 35]], [[5629, 306], [-10, 48]], [[5619, 354], [176, 17]], [[5795, 371], [8, -35]], [[6116, 282], [-73, -83]], [[5927, 338], [28, 22]], [[5955, 360], [72, 10]], [[6027, 370], [89, -88]], [[4294, 332], [41, 2]], [[4426, 370], [44, -73]], [[4350, 329], [48, 43]], [[4398, 372], [28, -2]], [[4271, 340], [30, 40]], [[4301, 380], [5, 15]], [[4306, 395], [92, -23]], [[4517, 326], [-1, -31]], [[4426, 370], [14, 27]], [[4440, 397], [77, -71]], [[5412, 389], [25, -65]], [[5437, 324], [-5, -27]], [[5432, 297], [-130, -33]], [[5302, 264], [-35, 38]], [[5267, 302], [117, 99]], [[5384, 401], [28, -12]], [[6169, 359], [-53, -77]], [[6027, 370], [33, 39]], [[6060, 409], [32, 1]], [[6092, 410], [77, -51]], [[4786, 408], [28, -62]], [[4651, 326], [135, 82]], [[4589, 414], [18, -8]], [[4607, 406], [4, -55]], [[4517, 326], [5, 63]], [[4522, 389], [67, 25]], [[4204, 413], [97, -33]], [[4174, 119], [-62, 31]], [[4077, 355], [27, 58]], [[4104, 413], [100, 0]], [[4440, 397], [-10, 22]], [[4430, 419], [92, -30]], [[5244, 373], [-3, -53]], [[5241, 320], [-28, -38]], [[5213, 282], [-61, 37]], [[5152, 319], [33, 117]], [[5185, 436], [59, -63]], [[3690, 421], [-26, -161]], [[3664, 260], [-107, 27]], [[3557, 287], [36, 124]], [[3593, 411], [97, 10]], [[3929, 347], [-82, -114]], [[3847, 233], [-159, 35]], [[3688, 268], [112, 164]], [[3800, 432], [129, -85]], [[3791, 433], [9, -1]], [[3688, 268], [-24, -8]], [[3690, 421], [0, 1]], [[3690, 422], [101, 11]], [[3029, 263], [-106, 26]], [[2923, 289], [41, 140]], [[2964, 429], [74, -32], [-9, -134]], [[5152, 319], [-19, -14]], [[5133, 305], [-37, 24]], [[5096, 329], [-14, 20]], [[5082, 349], [94, 107]], [[5176, 456], [9, -20]], [[4785, 417], [1, -9]], [[4607, 406], [129, 52]], [[4736, 458], [49, -41]], [[4396, 452], [34, -33]], [[4306, 395], [13, 62]], [[4319, 457], [77, -5]], [[3941, 473], [79, -15]], [[4020, 458], [84, -45]], [[3994, 284], [-66, 67]], [[3928, 351], [-9, 113]], [[3919, 464], [22, 9]], [[3928, 351], [1, -4]], [[3791, 433], [5, 43]], [[3796, 476], [123, -12]], [[5828, 300], [-25, 36]], [[5795, 371], [-25, 59]], [[5770, 430], [41, 52]], [[5811, 482], [55, 2]], [[5866, 484], [89, -124]], [[4557, 484], [32, -6]], [[4589, 478], [0, -64]], [[4396, 452], [5, 22]], [[4401, 474], [156, 10]], [[3557, 287], [-119, 58]], [[3438, 345], [22, 141]], [[3460, 486], [20, 3]], [[3480, 489], [37, 4]], [[3517, 493], [76, -82]], [[3391, 345], [-41, -2]], [[3350, 343], [-27, 148]], [[3323, 491], [59, 6]], [[3382, 497], [9, -152]], [[4755, 481], [-19, -23]], [[4589, 478], [10, 22]], [[4599, 500], [106, 13]], [[4705, 513], [50, -32]], [[4405, 490], [-4, -16]], [[4319, 457], [11, 62]], [[4330, 519], [75, -29]], [[3715, 495], [-25, -73]], [[3517, 493], [2, 0]], [[3519, 493], [196, 2]], [[3438, 345], [-47, 0]], [[3382, 497], [1, 14]], [[3383, 511], [77, -25]], [[5156, 501], [20, -45]], [[5082, 349], [-30, -2]], [[5052, 347], [-42, 43]], [[5010, 390], [12, 22]], [[5022, 412], [79, 114]], [[5101, 526], [55, -25]], [[4904, 513], [-4, -27]], [[4900, 486], [-115, -69]], [[4755, 481], [142, 54]], [[4897, 535], [7, -22]], [[5962, 500], [98, -91]], [[5866, 484], [50, 48]], [[5916, 532], [46, -32]], [[2982, 489], [-18, -60]], [[2923, 289], [-130, 97]], [[2793, 386], [108, 106], [81, -3]], [[4331, 532], [-1, -13]], [[4204, 413], [10, 30]], [[4214, 443], [-7, 77]], [[4207, 520], [124, 12]], [[3201, 523], [48, -19]], [[3249, 504], [-9, -57]], [[3240, 447], [-66, -7]], [[3174, 440], [4, 87]], [[3178, 527], [23, -4]], [[4469, 542], [88, -58]], [[4405, 490], [27, 62]], [[4432, 552], [37, -10]], [[4573, 534], [26, -34]], [[4469, 542], [44, 18]], [[4513, 560], [60, -26]], [[6289, 558], [9, -90]], [[6298, 468], [-41, -53]], [[6257, 415], [-40, 44]], [[6217, 459], [-11, 69]], [[6206, 528], [61, 31]], [[6267, 559], [22, -1]], [[4132, 545], [22, -7]], [[4154, 538], [60, -95]], [[4020, 458], [25, 100]], [[4045, 558], [87, -13]], [[4210, 565], [-3, -45]], [[4154, 538], [56, 27]], [[4424, 571], [8, -19]], [[4331, 532], [7, 35]], [[4338, 567], [86, 4]], [[3764, 565], [11, -60]], [[3775, 505], [-60, -10]], [[3519, 493], [99, 78]], [[3618, 571], [146, -6]], [[3145, 542], [18, -8]], [[3163, 534], [-54, -115], [-3, -143]], [[3106, 276], [-77, -13]], [[2982, 489], [79, 54]], [[3061, 543], [84, -1]], [[4711, 547], [-6, -34]], [[4573, 534], [24, 34]], [[4597, 568], [105, 13]], [[4702, 581], [16, 8]], [[4718, 589], [-7, -42]], [[4241, 583], [97, -16]], [[4210, 565], [31, 18]], [[5482, 593], [-58, -124]], [[5424, 469], [-57, -48]], [[5367, 421], [-35, 36]], [[5332, 457], [95, 119]], [[5427, 576], [55, 17]], [[5781, 590], [19, -91]], [[5800, 499], [-53, 19]], [[5747, 518], [-15, 66]], [[5732, 584], [49, 6]], [[4013, 586], [32, -28]], [[3941, 473], [-20, 109]], [[3921, 582], [18, 3]], [[3939, 585], [74, 1]], [[4499, 603], [14, -43]], [[4424, 571], [18, 32]], [[4442, 603], [57, 0]], [[5377, 611], [50, -35]], [[5332, 457], [-31, 4]], [[5301, 461], [-14, 18]], [[5287, 479], [33, 27]], [[5320, 506], [57, 105]], [[3812, 597], [109, -15]], [[3796, 476], [-21, 29]], [[3764, 565], [5, 37]], [[3769, 602], [43, -5]], [[4569, 606], [28, -38]], [[4499, 603], [62, 18]], [[4561, 621], [8, -15]], [[6405, 585], [27, -39]], [[6432, 546], [-134, -78]], [[6289, 558], [116, 27]], [[5507, 629], [68, -39]], [[5575, 590], [26, -74]], [[5601, 516], [24, -59]], [[5625, 457], [-56, 14]], [[5569, 471], [-21, -5]], [[5548, 466], [-124, 3]], [[5482, 593], [-8, 37]], [[5474, 630], [33, -1]], [[4669, 646], [33, -65]], [[4569, 606], [100, 40]], [[5747, 518], [-146, -2]], [[5575, 590], [104, 57]], [[5679, 647], [53, -63]], [[2793, 386], [57, 172], [151, 65]], [[3001, 623], [60, -80]], [[3553, 654], [65, -83]], [[3480, 489], [27, 129]], [[3507, 618], [46, 36]], [[3420, 644], [87, -26]], [[3383, 511], [21, 145]], [[3404, 656], [16, -12]], [[5369, 667], [8, -56]], [[5320, 506], [-25, 131]], [[5295, 637], [34, 35]], [[5329, 672], [40, -5]], [[6117, 686], [83, -18]], [[6200, 668], [67, -109]], [[6206, 528], [-93, 126]], [[6113, 654], [4, 32]], [[3577, 681], [58, -11]], [[3635, 670], [104, -40]], [[3739, 630], [30, -28]], [[3553, 654], [0, 27]], [[3553, 681], [24, 0]], [[3536, 682], [17, -1]], [[3420, 644], [116, 38]], [[3364, 657], [40, -1]], [[3323, 491], [-74, 13]], [[3201, 523], [43, 161]], [[3244, 684], [120, -27]], [[4513, 692], [29, -23]], [[4542, 669], [19, -48]], [[4442, 603], [-46, 88]], [[4396, 691], [117, 1]], [[4825, 637], [8, -10]], [[4833, 627], [-115, -38]], [[4669, 646], [12, 50]], [[4681, 696], [47, 13]], [[4728, 709], [97, -72]], [[5369, 667], [70, 51]], [[5439, 718], [35, -88]], [[4542, 669], [76, 49]], [[4618, 718], [63, -22]], [[4345, 733], [51, -42]], [[4241, 583], [8, 90]], [[4249, 673], [50, 61]], [[4299, 734], [46, -1]], [[3111, 715], [60, -117], [-26, -56]], [[3001, 623], [17, 42]], [[3018, 665], [93, 50]], [[6355, 716], [23, -24]], [[6378, 692], [27, -107]], [[6200, 668], [33, 56]], [[6233, 724], [122, -8]], [[3686, 739], [53, -109]], [[3635, 670], [51, 69]], [[4132, 545], [-15, 64]], [[4117, 609], [84, 141]], [[4201, 750], [48, -77]], [[3533, 746], [3, -64]], [[3364, 657], [8, 22]], [[3372, 679], [73, 67]], [[3445, 746], [5, 0]], [[3450, 746], [83, 0]], [[6099, 656], [-32, -85]], [[6067, 571], [-105, -71]], [[5916, 532], [-12, 54]], [[5904, 586], [62, 95]], [[5966, 681], [39, 75]], [[6005, 756], [94, -100]], [[3372, 679], [15, 70]], [[3387, 749], [58, -3]], [[3942, 677], [-1, -10]], [[3941, 667], [-18, -52]], [[3923, 615], [16, -30]], [[3812, 597], [47, 144]], [[3859, 741], [3, 16]], [[3862, 757], [43, -2]], [[3905, 755], [37, -78]], [[4610, 757], [8, -39]], [[4513, 692], [7, 33]], [[4520, 725], [68, 50]], [[4588, 775], [22, -18]], [[4199, 760], [2, -10]], [[4117, 609], [-97, 74]], [[4020, 683], [3, 9]], [[4023, 692], [124, 86]], [[4147, 778], [52, -18]], [[3244, 684], [18, 58]], [[3262, 742], [92, 30]], [[3354, 772], [33, -23]], [[3214, 779], [30, 0]], [[3244, 779], [18, -37]], [[3178, 527], [-15, 7]], [[3111, 715], [-14, 65]], [[3097, 780], [117, -1]], [[4962, 775], [18, -67]], [[4980, 708], [-98, -26]], [[4882, 682], [-32, 84]], [[4850, 766], [78, 39]], [[4928, 805], [34, -30]], [[6632, 748], [-22, -17]], [[6610, 731], [-101, 1]], [[6509, 732], [-2, 13]], [[6507, 745], [62, 44]], [[6569, 789], [63, -41]], [[4371, 805], [99, -31]], [[4470, 774], [50, -49]], [[4345, 733], [5, 65]], [[4350, 798], [21, 7]], [[3686, 739], [-18, 64]], [[3668, 803], [191, -62]], [[4745, 814], [-17, -105]], [[4610, 757], [89, 58]], [[4699, 815], [46, -1]], [[6712, 809], [43, -15]], [[6755, 794], [-80, -37]], [[6675, 757], [11, 34]], [[6686, 791], [26, 18]], [[4299, 734], [2, 91]], [[4301, 825], [49, -27]], [[4882, 682], [-47, -20]], [[4835, 662], [-10, -25]], [[4745, 814], [55, 15]], [[4800, 829], [50, -63]], [[6308, 813], [47, -97]], [[6233, 724], [75, 89]], [[5620, 809], [23, -69]], [[5643, 740], [9, -43]], [[5652, 697], [-45, -6]], [[5607, 691], [-76, 138]], [[5531, 829], [89, -20]], [[6888, 775], [-1, -121]], [[6887, 654], [-195, -34], [-59, 14]], [[6633, 634], [-23, 97]], [[6632, 748], [43, 9]], [[6755, 794], [86, 22]], [[6841, 816], [47, -41]], [[3029, 806], [58, -10]], [[3087, 796], [10, -16]], [[3018, 665], [-89, 53]], [[2929, 718], [40, 57]], [[2969, 775], [60, 31]], [[4289, 827], [12, -2]], [[4199, 760], [9, 49]], [[4208, 809], [81, 18]], [[5366, 808], [-84, -71]], [[5282, 737], [-38, 39]], [[5244, 776], [-6, 11]], [[5238, 787], [61, 52]], [[5299, 839], [67, -31]], [[7035, 774], [36, -76]], [[7071, 698], [-184, -44]], [[6888, 775], [60, 52]], [[6948, 827], [87, -53]], [[5607, 691], [-100, -62]], [[5439, 718], [-33, 91]], [[5406, 809], [22, 14]], [[5428, 823], [80, 28]], [[5508, 851], [23, -22]], [[6125, 842], [-8, -156]], [[6113, 654], [-14, 2]], [[6099, 656], [-36, 115], [40, 76]], [[6103, 847], [22, -5]], [[4913, 857], [15, -52]], [[4800, 829], [17, 28]], [[4817, 857], [96, 0]], [[2837, 839], [49, -2]], [[2886, 837], [83, -62]], [[2929, 718], [-101, 52]], [[2828, 770], [9, 69]], [[6589, 848], [-20, -59]], [[6507, 745], [3, 82]], [[6510, 827], [79, 21]], [[6589, 848], [65, 19]], [[6654, 867], [32, -76]], [[5685, 682], [-10, 14]], [[5675, 696], [10, -14]], [[5738, 864], [100, -43]], [[5838, 821], [-44, -53]], [[5794, 768], [-151, -28]], [[5620, 809], [5, 11]], [[5625, 820], [92, 64]], [[5717, 884], [21, -20]], [[3378, 836], [-24, -64]], [[3244, 779], [67, 88]], [[3311, 867], [67, -31]], [[4525, 855], [-55, -81]], [[4371, 805], [23, 57]], [[4394, 862], [131, -7]], [[6041, 884], [47, -11]], [[6088, 873], [15, -26]], [[6005, 756], [36, 128]], [[5014, 876], [43, -66]], [[5057, 810], [-95, -35]], [[4913, 857], [35, 40]], [[4948, 897], [66, -21]], [[3458, 838], [-8, -92]], [[3378, 836], [40, 44]], [[3418, 880], [40, -42]], [[6488, 854], [22, -27]], [[6509, 732], [-82, 61]], [[6427, 793], [12, 58]], [[6439, 851], [28, 34]], [[6467, 885], [21, -31]], [[3521, 884], [18, -6]], [[3539, 878], [41, -92]], [[3580, 786], [-47, -40]], [[3458, 838], [63, 46]], [[3743, 872], [121, -33]], [[3864, 839], [-2, -82]], [[3668, 803], [-3, 41]], [[3665, 844], [27, 44]], [[3692, 888], [51, -16]], [[5288, 886], [11, -47]], [[5238, 787], [-46, 39]], [[5192, 826], [-2, 2]], [[5190, 828], [94, 72]], [[5284, 900], [4, -14]], [[3989, 823], [-84, -68]], [[3864, 839], [21, 53]], [[3885, 892], [104, -69]], [[4390, 867], [4, -5]], [[4289, 827], [12, 64]], [[4301, 891], [89, -24]], [[2975, 874], [54, -68]], [[2886, 837], [89, 37]], [[3302, 871], [9, -4]], [[3214, 779], [-12, 62]], [[3202, 841], [24, 41]], [[3226, 882], [76, -11]], [[4588, 775], [-30, 81]], [[4558, 856], [133, 53]], [[4691, 909], [8, -94]], [[5516, 860], [-8, -9]], [[5428, 823], [-34, 71]], [[5394, 894], [71, 19]], [[5465, 913], [51, -53]], [[6304, 863], [4, -50]], [[6125, 842], [117, 70]], [[6242, 912], [62, -49]], [[7146, 744], [-75, -46]], [[7035, 774], [6, 115]], [[7041, 889], [105, -145]], [[4017, 893], [-27, -71]], [[3990, 822], [-1, 1]], [[3885, 892], [-2, 18]], [[3883, 910], [67, -2]], [[3950, 908], [67, -15]], [[6654, 867], [18, 1]], [[6672, 868], [59, 43]], [[6731, 911], [8, 2]], [[6739, 913], [-27, -104]], [[8098, 760], [-88, -46]], [[8010, 714], [-94, 133]], [[7916, 847], [95, 31]], [[8011, 878], [69, -13]], [[8080, 865], [29, 13]], [[8109, 878], [-11, -118]], [[6817, 885], [30, -57]], [[6847, 828], [-6, -12]], [[6739, 913], [78, -28]], [[5406, 809], [-40, -1]], [[5288, 886], [54, 48]], [[5342, 934], [52, -40]], [[3743, 872], [136, 56]], [[3879, 928], [4, -18]], [[5058, 939], [23, -22]], [[5081, 917], [-12, -18]], [[5069, 899], [-55, -23]], [[4948, 897], [10, 15]], [[4958, 912], [100, 27]], [[6948, 827], [45, 88]], [[6993, 915], [48, -26]], [[2964, 900], [11, -26]], [[2837, 839], [-19, 71]], [[2818, 910], [93, 9]], [[2911, 919], [53, -19]], [[4301, 893], [0, -2]], [[4208, 809], [-44, 93]], [[4164, 902], [42, 42]], [[4206, 944], [95, -51]], [[6942, 932], [-95, -104]], [[6817, 885], [20, 20]], [[6837, 905], [105, 27]], [[6942, 932], [19, 77]], [[6961, 1009], [22, 27]], [[6983, 1036], [20, 0]], [[7003, 1036], [16, -29]], [[7019, 1007], [-3, -26]], [[7016, 981], [-7, -32]], [[7009, 949], [-9, -18]], [[7000, 931], [-58, 1]], [[3394, 896], [24, -16]], [[3302, 871], [29, 62]], [[3331, 933], [63, -37]], [[7000, 931], [-7, -16]], [[4398, 892], [-8, -25]], [[4301, 893], [53, 60]], [[4354, 953], [44, -61]], [[4530, 865], [-5, -10]], [[4398, 892], [84, 61]], [[4482, 953], [7, 6]], [[4489, 959], [41, -94]], [[6488, 854], [64, 99]], [[6552, 953], [37, -105]], [[2828, 770], [-81, 45]], [[2747, 815], [32, 116]], [[2779, 931], [39, -21]], [[4072, 949], [92, -47]], [[4147, 778], [-116, 22]], [[4031, 800], [-41, 22]], [[4017, 893], [36, 67]], [[4053, 960], [19, -11]], [[3064, 935], [32, -80]], [[3096, 855], [-9, -59]], [[2964, 900], [67, 42]], [[3031, 942], [33, -7]], [[4817, 857], [18, 62]], [[4835, 919], [61, 47]], [[4896, 966], [50, 25]], [[4946, 991], [12, -79]], [[4685, 915], [-85, 77]], [[4600, 992], [116, 3]], [[4716, 995], [-31, -80]], [[6197, 981], [-1, -8]], [[6196, 973], [46, -61]], [[6088, 873], [49, 103]], [[6137, 976], [60, 5]], [[6846, 984], [13, -40]], [[6859, 944], [-22, -39]], [[6731, 911], [115, 73]], [[5163, 987], [-28, -28]], [[5135, 959], [-54, -42]], [[5058, 939], [43, 67]], [[5101, 1006], [62, -19]], [[2960, 977], [71, -35]], [[2911, 919], [35, 62]], [[2946, 981], [14, -4]], [[4582, 1011], [18, -19]], [[4685, 915], [6, -6]], [[4558, 856], [-28, 9]], [[4489, 959], [93, 52]], [[4762, 996], [40, -41]], [[4802, 955], [33, -36]], [[4716, 995], [41, 18]], [[4757, 1013], [5, -17]], [[4802, 955], [90, 61]], [[4892, 1016], [4, -50]], [[3696, 924], [-4, -36]], [[3665, 844], [-126, 34]], [[3521, 884], [-22, 88]], [[3499, 972], [104, 32]], [[3603, 1004], [93, -80]], [[3950, 908], [-24, 38]], [[3926, 946], [70, 64]], [[3996, 1010], [57, -50]], [[6355, 937], [-72, 37]], [[6283, 974], [32, 27]], [[6315, 1001], [40, -64]], [[2742, 976], [33, -15]], [[2775, 961], [4, -30]], [[2747, 815], [-96, 60]], [[2651, 875], [65, 113]], [[2716, 988], [26, -12]], [[5284, 900], [-64, 81]], [[5220, 981], [95, 42]], [[5315, 1023], [27, -89]], [[3887, 1009], [39, -63]], [[3879, 928], [-17, 45]], [[3862, 973], [25, 36]], [[3394, 896], [75, 114]], [[3469, 1010], [30, -38]], [[4464, 1026], [2, -29]], [[4466, 997], [16, -44]], [[4354, 953], [-1, 5]], [[4353, 958], [28, 43]], [[4381, 1001], [83, 25]], [[6250, 1009], [33, -35]], [[6355, 937], [24, -15]], [[6379, 922], [-75, -59]], [[6196, 973], [54, 36]], [[2775, 961], [16, 19]], [[2791, 980], [26, 19]], [[2817, 999], [129, -18]], [[6859, 944], [102, 65]], [[4214, 955], [-8, -11]], [[4072, 949], [73, 83]], [[4145, 1032], [69, -77]], [[3933, 1040], [54, -26]], [[3987, 1014], [9, -4]], [[3887, 1009], [46, 31]], [[5652, 899], [-5, 1]], [[5647, 900], [12, 9]], [[5659, 909], [-7, -10]], [[5812, 1042], [24, -56]], [[5836, 986], [-53, -23]], [[5783, 963], [-81, -66]], [[5702, 897], [-43, 13]], [[5659, 910], [48, 133]], [[5707, 1043], [37, 2]], [[5744, 1045], [68, -3]], [[4968, 1042], [-22, -51]], [[4892, 1016], [6, 31]], [[4898, 1047], [63, 8]], [[4961, 1055], [7, -13]], [[5432, 1038], [26, -98]], [[5458, 940], [7, -27]], [[5315, 1023], [1, 17]], [[5316, 1040], [88, 17]], [[5404, 1057], [28, -19]], [[4353, 958], [-29, 34]], [[4324, 992], [7, 67]], [[4331, 1059], [50, -58]], [[6826, 1042], [-1, -16]], [[6825, 1026], [-197, -52]], [[6628, 974], [20, 66]], [[6648, 1040], [4, 7]], [[6652, 1047], [72, -11]], [[6724, 1036], [102, 6]], [[4762, 996], [86, 67]], [[4848, 1063], [50, -16]], [[4613, 1031], [-31, -20]], [[4466, 997], [44, 44]], [[4510, 1041], [103, -10]], [[3303, 1027], [28, -94]], [[3226, 882], [-24, 71]], [[3202, 953], [22, 65]], [[3224, 1018], [79, 9]], [[5209, 1008], [-46, -21]], [[5101, 1006], [26, 57]], [[5127, 1063], [26, 8]], [[5153, 1071], [56, -63]], [[3489, 1049], [96, 6]], [[3585, 1055], [20, 0]], [[3605, 1055], [-2, -51]], [[3469, 1010], [-78, 51]], [[3391, 1061], [98, -12]], [[6473, 990], [-46, -57]], [[6427, 933], [-31, -9]], [[6396, 924], [-17, -2]], [[6315, 1001], [10, 34]], [[6325, 1035], [50, 32]], [[6375, 1067], [14, 3]], [[6389, 1070], [84, -80]], [[3202, 953], [-108, 44]], [[3094, 997], [16, 48]], [[3110, 1045], [49, 12]], [[3159, 1057], [65, -39]], [[4739, 1078], [18, -65]], [[4613, 1031], [21, 19]], [[4634, 1050], [76, 27]], [[4710, 1077], [29, 1]], [[7692, 1042], [-12, -101], [57, -174]], [[7737, 767], [-134, -5]], [[7603, 762], [-6, 157], [53, 128]], [[7650, 1047], [42, -5]], [[3351, 1067], [40, -6]], [[3303, 1027], [48, 40]], [[7870, 1050], [46, -203]], [[7916, 847], [-59, -45]], [[7857, 802], [-32, 18], [10, 231]], [[7835, 1051], [35, -1]], [[7325, 1066], [-19, -133], [20, -151]], [[7326, 782], [-54, -8]], [[7272, 774], [-63, 167]], [[7209, 941], [114, 125]], [[7323, 1066], [2, 0]], [[4331, 1060], [0, -1]], [[4324, 992], [-51, 0]], [[4273, 992], [-24, 48]], [[4249, 1040], [45, 38]], [[4294, 1078], [37, -18]], [[7788, 1055], [47, -4]], [[7857, 802], [-36, -25]], [[7821, 777], [-55, -17]], [[7766, 760], [20, 277]], [[7786, 1037], [2, 18]], [[4097, 1094], [31, -24]], [[4128, 1070], [17, -38]], [[3987, 1014], [110, 80]], [[4458, 1085], [6, -59]], [[4331, 1060], [121, 37]], [[4452, 1097], [6, -12]], [[6024, 1024], [-50, -28]], [[5974, 996], [-111, 13]], [[5863, 1009], [-27, -23]], [[5812, 1042], [134, 56]], [[5946, 1098], [78, -74]], [[3079, 1076], [31, -31]], [[3094, 997], [-30, -62]], [[2960, 977], [30, 83]], [[2990, 1060], [89, 16]], [[4502, 1094], [8, -53]], [[4458, 1085], [44, 9]], [[7381, 960], [62, -84], [9, -95]], [[7452, 781], [-126, 1]], [[7325, 1066], [9, 13]], [[7334, 1079], [18, 7]], [[7352, 1086], [29, -126]], [[7766, 760], [-29, 7]], [[7692, 1042], [94, -5]], [[4261, 1103], [33, -25]], [[4249, 1040], [-64, 17]], [[4185, 1057], [58, 44]], [[4243, 1101], [18, 2]], [[6892, 1097], [91, -61]], [[6846, 984], [-21, 42]], [[6826, 1042], [66, 55]], [[6652, 1047], [49, 28]], [[6701, 1075], [23, -39]], [[2742, 976], [49, 4]], [[2604, 1084], [59, -61]], [[2663, 1023], [50, -6]], [[2713, 1017], [-87, -70]], [[2626, 947], [-98, 72]], [[2528, 1019], [76, 65]], [[2913, 1087], [77, -27]], [[2817, 999], [24, 80]], [[2841, 1079], [72, 8]], [[4823, 1103], [25, -40]], [[4739, 1078], [63, 55]], [[4802, 1133], [21, -30]], [[7209, 941], [-57, 51]], [[7152, 992], [51, 67]], [[7203, 1059], [120, 7]], [[5095, 1136], [4, -51]], [[5099, 1085], [-131, -43]], [[4961, 1055], [50, 90]], [[5011, 1145], [84, -9]], [[3585, 1135], [0, -80]], [[3489, 1049], [20, 83]], [[3509, 1132], [76, 3]], [[3782, 1135], [96, -52]], [[3878, 1083], [64, -28]], [[3942, 1055], [-9, -15]], [[3862, 973], [-71, 23]], [[3791, 996], [-55, 66]], [[3736, 1062], [3, 51]], [[3739, 1113], [43, 22]], [[3702, 1140], [37, -27]], [[3736, 1062], [-114, -6]], [[3622, 1056], [28, 84]], [[3650, 1140], [52, 0]], [[3341, 1079], [10, -12]], [[3159, 1057], [45, 77]], [[3204, 1134], [137, -55]], [[4105, 1118], [-8, -24]], [[3942, 1055], [66, 92]], [[4008, 1147], [20, -6]], [[4028, 1141], [77, -23]], [[7572, 1125], [-25, -167], [21, -211]], [[7568, 747], [-116, 34]], [[7381, 960], [54, 13]], [[7435, 973], [88, 29], [49, 123]], [[7472, 1092], [-37, -119]], [[7352, 1086], [101, 44]], [[7453, 1130], [19, -38]], [[7870, 1050], [27, 68]], [[7897, 1118], [114, -240]], [[7152, 992], [-136, -11]], [[7019, 1007], [138, 134]], [[7157, 1141], [46, -82]], [[4999, 1162], [12, -17]], [[4823, 1103], [48, 55]], [[4871, 1158], [128, 4]], [[2770, 1138], [52, -34]], [[2822, 1104], [19, -25]], [[2716, 988], [-3, 29]], [[2663, 1023], [13, 68], [94, 47]], [[7793, 1123], [-5, -68]], [[7650, 1047], [-20, 95]], [[7630, 1142], [163, -19]], [[4497, 1157], [5, -63]], [[4452, 1097], [-21, 53]], [[4431, 1150], [16, 19]], [[4447, 1169], [50, -12]], [[5604, 1179], [-6, -13]], [[5598, 1166], [-52, -45]], [[5546, 1121], [-87, -29]], [[5459, 1092], [47, 49]], [[5506, 1141], [57, 44]], [[5563, 1185], [41, -6]], [[5208, 1168], [23, -18]], [[5231, 1150], [-78, -79]], [[5127, 1063], [-28, 22]], [[5095, 1136], [46, 39]], [[5141, 1175], [67, -7]], [[3309, 1161], [71, -9]], [[3380, 1152], [-39, -73]], [[3204, 1134], [0, 17]], [[3204, 1151], [105, 10]], [[3380, 1152], [20, 21]], [[3400, 1173], [109, -41]], [[5892, 1191], [43, -74]], [[5935, 1117], [7, -14]], [[5942, 1103], [4, -5]], [[5744, 1045], [60, 102]], [[5804, 1147], [88, 44]], [[5437, 1194], [69, -53]], [[5459, 1092], [1, -31]], [[5460, 1061], [-28, -23]], [[5404, 1057], [3, 121]], [[5407, 1178], [30, 16]], [[4377, 1151], [54, -1]], [[4261, 1103], [6, 56]], [[4267, 1159], [110, -8]], [[5707, 1043], [-52, 59]], [[5655, 1102], [130, 87]], [[5785, 1189], [19, -42]], [[7577, 1163], [-5, -38]], [[7472, 1092], [105, 71]], [[7897, 1118], [74, 32]], [[7971, 1150], [111, -217], [-2, -68]], [[6765, 1184], [53, -21]], [[6818, 1163], [66, -24]], [[6884, 1139], [8, -42]], [[6701, 1075], [64, 109]], [[4151, 1165], [-46, -47]], [[4028, 1141], [75, 65]], [[4103, 1206], [48, -41]], [[3016, 1167], [63, -91]], [[2913, 1087], [35, 99]], [[2948, 1186], [68, -19]], [[4018, 1187], [-10, -40]], [[3878, 1083], [32, 28]], [[3910, 1111], [23, 79]], [[3933, 1190], [85, -3]], [[7146, 1161], [11, -20]], [[7003, 1036], [34, 158]], [[7037, 1194], [27, -4]], [[7064, 1190], [82, -29]], [[6648, 1040], [-35, 55]], [[6613, 1095], [119, 108]], [[6732, 1203], [33, -19]], [[4748, 1207], [54, -74]], [[4710, 1077], [-3, 96]], [[4707, 1173], [14, 40]], [[4721, 1213], [27, -6]], [[3781, 1210], [1, -75]], [[3702, 1140], [18, 37]], [[3720, 1177], [61, 33]], [[4999, 1162], [3, 47]], [[5002, 1209], [101, 13]], [[5103, 1222], [38, -47]], [[4260, 1207], [7, -48]], [[4243, 1101], [-71, 61]], [[4172, 1162], [-3, 47]], [[4169, 1209], [91, -2]], [[6000, 1212], [0, -15]], [[6000, 1197], [-65, -80]], [[5892, 1191], [2, 1]], [[5894, 1192], [106, 20]], [[3592, 1196], [58, -56]], [[3622, 1056], [-17, -1]], [[3585, 1135], [-19, 55]], [[3566, 1190], [26, 6]], [[6058, 1150], [-116, -47]], [[6000, 1197], [58, 24]], [[6058, 1221], [0, -71]], [[4377, 1151], [29, 75]], [[4406, 1226], [41, -57]], [[7622, 1195], [8, -53]], [[7603, 762], [-3, -2]], [[7600, 760], [-32, -13]], [[7577, 1163], [4, 23]], [[7581, 1186], [41, 9]], [[2822, 1104], [82, 99]], [[2904, 1203], [44, -17]], [[3400, 1173], [47, 41]], [[3447, 1214], [119, -24]], [[5253, 1114], [-22, 36]], [[5208, 1168], [22, 29]], [[5230, 1197], [102, 45]], [[5332, 1242], [-79, -128]], [[4165, 1231], [4, -22]], [[4172, 1162], [-21, 3]], [[4103, 1206], [-30, 33]], [[4073, 1239], [92, -8]], [[3196, 1225], [81, -16]], [[3277, 1209], [32, -48]], [[3204, 1151], [-56, 38]], [[3148, 1189], [48, 36]], [[3277, 1209], [68, 16]], [[3345, 1225], [102, -11]], [[7336, 1166], [-2, -87]], [[7146, 1161], [73, 63]], [[7219, 1224], [117, -58]], [[7453, 1130], [-25, 66]], [[7428, 1196], [153, -10]], [[7407, 1220], [21, -24]], [[7336, 1166], [71, 54]], [[3016, 1167], [75, 61]], [[3091, 1228], [57, -39]], [[4018, 1187], [47, 59]], [[4065, 1246], [8, -7]], [[4707, 1173], [-76, -28]], [[4631, 1145], [1, 79]], [[4632, 1224], [52, 26]], [[4684, 1250], [37, -37]], [[2526, 1214], [52, -29]], [[2578, 1185], [26, -101]], [[2528, 1019], [-76, 61], [-25, 117]], [[2427, 1197], [99, 17]], [[4401, 1246], [0, -3]], [[4401, 1243], [5, -17]], [[4260, 1207], [-4, 48]], [[4256, 1255], [145, -9]], [[4859, 1205], [12, -47]], [[4748, 1207], [45, 54]], [[4793, 1261], [66, -56]], [[2678, 1223], [88, -70]], [[2766, 1153], [4, -15]], [[2578, 1185], [100, 38]], [[5213, 1251], [17, -54]], [[5103, 1222], [49, 40]], [[5152, 1262], [61, -11]], [[5658, 1249], [-54, -70]], [[5563, 1185], [-7, 75]], [[5556, 1260], [63, 11]], [[5619, 1271], [39, -22]], [[3650, 1256], [37, -45]], [[3687, 1211], [33, -34]], [[3592, 1196], [-15, 23]], [[3577, 1219], [70, 43]], [[3647, 1262], [3, -6]], [[3889, 1272], [-22, -123], [43, -38]], [[3781, 1210], [-13, 12]], [[3768, 1222], [121, 50]], [[5681, 1286], [45, -37]], [[5726, 1249], [59, -60]], [[5655, 1102], [-5, 29]], [[5650, 1131], [-52, 35]], [[5658, 1249], [23, 37]], [[5846, 1270], [48, -78]], [[5726, 1249], [64, 43]], [[5790, 1292], [56, -22]], [[5967, 1272], [23, -11]], [[5990, 1261], [10, -49]], [[5846, 1270], [26, 9]], [[5872, 1279], [95, -7]], [[5146, 1298], [6, -36]], [[5002, 1209], [-22, 57]], [[4980, 1266], [166, 32]], [[4065, 1246], [-14, 12]], [[4051, 1258], [-6, 8]], [[4045, 1266], [91, 28]], [[4136, 1294], [29, -63]], [[6066, 1294], [-8, -73]], [[5990, 1261], [40, 31]], [[6030, 1292], [36, 2]], [[5437, 1194], [93, 107]], [[5530, 1301], [26, -41]], [[3481, 1263], [96, -44]], [[3345, 1225], [17, 63]], [[3362, 1288], [119, -25]], [[5286, 1303], [55, -56]], [[5341, 1247], [-9, -5]], [[5213, 1251], [73, 52]], [[3650, 1256], [56, 39]], [[3706, 1295], [-19, -84]], [[7045, 1265], [27, -47]], [[7072, 1218], [-8, -28]], [[7037, 1194], [-40, 4]], [[6997, 1198], [-10, 43]], [[6987, 1241], [58, 24]], [[3706, 1295], [9, 9]], [[3715, 1304], [53, -82]], [[3366, 1295], [-4, -7]], [[3196, 1225], [42, 67]], [[3238, 1292], [128, 3]], [[4646, 1310], [38, -60]], [[4632, 1224], [-27, 9]], [[4605, 1233], [2, 76]], [[4607, 1309], [39, 1]], [[4977, 1316], [3, -50]], [[4859, 1205], [-10, 104]], [[4849, 1309], [128, 7]], [[3616, 1285], [31, -23]], [[3481, 1263], [25, 44]], [[3506, 1307], [110, -22]], [[8454, 1165], [-38, -51]], [[8416, 1114], [-7, -33]], [[8409, 1081], [-176, 60]], [[8233, 1141], [-47, 108]], [[8186, 1249], [44, 20], [171, -53], [53, -51]], [[2928, 1261], [-24, -58]], [[2766, 1153], [4, 78]], [[2770, 1231], [69, 63]], [[2839, 1294], [89, -33]], [[3026, 1287], [65, -59]], [[2928, 1261], [98, 26]], [[8157, 1254], [29, -5]], [[8233, 1141], [-116, -27], [-24, 86]], [[8093, 1200], [64, 54]], [[4646, 1310], [89, 27]], [[4735, 1337], [58, -76]], [[5416, 1339], [-25, -132]], [[5391, 1207], [-34, 49]], [[5357, 1256], [59, 83]], [[4367, 1314], [34, -68]], [[4256, 1255], [-21, 24]], [[4235, 1279], [40, 59]], [[4275, 1338], [92, -24]], [[3238, 1292], [-5, 22]], [[3233, 1314], [38, 10]], [[3271, 1324], [95, -29]], [[5565, 1348], [54, -77]], [[5530, 1301], [28, 37]], [[5558, 1338], [7, 10]], [[4846, 1351], [3, -42]], [[4735, 1337], [5, 12]], [[4740, 1349], [106, 2]], [[6108, 1299], [5, -49]], [[6113, 1250], [-47, 44]], [[6030, 1292], [-11, 33]], [[6019, 1325], [35, 30]], [[6054, 1355], [54, -56]], [[4504, 1356], [-14, -68]], [[4490, 1288], [-89, -45]], [[4367, 1314], [1, 19]], [[4368, 1333], [121, 25]], [[4489, 1358], [15, -2]], [[4178, 1358], [57, -79]], [[4136, 1294], [1, 13]], [[4137, 1307], [41, 51]], [[7644, 1301], [-22, -106]], [[7407, 1220], [16, 78]], [[7423, 1298], [49, 22]], [[7472, 1320], [62, 3]], [[7534, 1323], [110, -22]], [[6869, 1344], [35, -68]], [[6904, 1276], [-41, -70]], [[6863, 1206], [-66, 83], [61, 69]], [[6858, 1358], [11, -14]], [[5407, 1178], [-16, 29]], [[5416, 1339], [24, 24]], [[5440, 1363], [118, -25]], [[3715, 1304], [-19, 38]], [[3696, 1342], [136, 28]], [[3832, 1370], [57, -98]], [[6821, 1372], [37, -14]], [[6863, 1206], [-45, -43]], [[6732, 1203], [-11, 52]], [[6721, 1255], [7, 77], [93, 40]], [[5731, 1381], [45, -22]], [[5776, 1359], [14, -67]], [[5681, 1286], [50, 95]], [[7189, 1345], [-117, -127]], [[7045, 1265], [39, 73]], [[7084, 1338], [50, 22]], [[7134, 1360], [55, -15]], [[6102, 1383], [33, -37]], [[6135, 1346], [-27, -47]], [[6054, 1355], [-2, 2]], [[6052, 1357], [50, 26]], [[5300, 1321], [-14, -18]], [[5146, 1298], [-14, 21]], [[5132, 1319], [111, 53]], [[5243, 1372], [11, 16]], [[5254, 1388], [46, -67]], [[2905, 1361], [117, -42]], [[3022, 1319], [4, -32]], [[2839, 1294], [-13, 19]], [[2826, 1313], [79, 48]], [[5913, 1384], [54, -112]], [[5872, 1279], [4, 77]], [[5876, 1356], [28, 32]], [[5904, 1388], [9, -4]], [[5992, 1367], [27, -42]], [[5913, 1384], [79, -17]], [[4974, 1394], [20, -52]], [[4994, 1342], [-17, -26]], [[4846, 1351], [9, 38]], [[4855, 1389], [119, 5]], [[5776, 1359], [62, 43]], [[5838, 1402], [38, -46]], [[3418, 1362], [88, -55]], [[3271, 1324], [-26, 42]], [[3245, 1366], [65, 15]], [[3310, 1381], [108, -19]], [[4333, 1395], [69, -20]], [[4402, 1375], [-34, -42]], [[4275, 1338], [-22, 52]], [[4253, 1390], [80, 5]], [[4178, 1358], [2, 20]], [[4180, 1378], [41, 31]], [[4221, 1409], [32, -19]], [[2642, 1346], [70, -42]], [[2712, 1304], [8, -34]], [[2720, 1270], [-42, -47]], [[2526, 1214], [63, 166]], [[2589, 1380], [53, -34]], [[5112, 1393], [20, -74]], [[4994, 1342], [118, 51]], [[3624, 1401], [72, -59]], [[3616, 1285], [-54, 42]], [[3562, 1327], [62, 74]], [[5454, 1399], [-14, -36]], [[5357, 1256], [-16, -9]], [[5300, 1321], [110, 94]], [[5410, 1415], [44, -16]], [[4137, 1307], [-90, 66]], [[4047, 1373], [1, 7]], [[4048, 1380], [77, 50]], [[4125, 1430], [55, -52]], [[8447, 1335], [45, -53]], [[8492, 1282], [3, -18]], [[8495, 1264], [-41, -99]], [[8157, 1254], [-28, 47]], [[8129, 1301], [149, 78], [169, -44]], [[2427, 1197], [67, 174], [95, 9]], [[7507, 1399], [28, -9]], [[7535, 1390], [-1, -67]], [[7472, 1320], [-1, 78]], [[7471, 1398], [36, 1]], [[4740, 1349], [-16, 46]], [[4724, 1395], [73, 27]], [[4797, 1422], [26, 23]], [[4823, 1445], [32, -56]], [[6721, 1255], [-10, 0]], [[6711, 1255], [-68, 72]], [[6643, 1327], [29, 27]], [[6672, 1354], [62, 71]], [[6734, 1425], [87, -53]], [[7902, 1414], [69, -141]], [[7971, 1273], [2, -106]], [[7973, 1167], [-2, -17]], [[7793, 1123], [-1, 153], [58, 36]], [[7850, 1312], [52, 102]], [[7423, 1298], [-72, 36]], [[7351, 1334], [45, 92]], [[7396, 1426], [75, -28]], [[5882, 1462], [27, -30]], [[5909, 1432], [-5, -44]], [[5838, 1402], [1, 37]], [[5839, 1439], [43, 23]], [[4402, 1375], [3, 38]], [[4405, 1413], [-1, 54]], [[4404, 1467], [62, 5]], [[4466, 1472], [23, -114]], [[5375, 1474], [35, -59]], [[5254, 1388], [121, 86]], [[4358, 1472], [47, -59]], [[4333, 1395], [0, 40]], [[4333, 1435], [25, 37]], [[6978, 1411], [106, -73]], [[6987, 1241], [-83, 35]], [[6869, 1344], [7, 26]], [[6876, 1370], [102, 41]], [[3735, 1449], [38, -25]], [[3773, 1424], [59, -54]], [[3624, 1401], [11, 55]], [[3635, 1456], [100, -7]], [[4048, 1380], [-37, 55]], [[4011, 1435], [97, 47]], [[4108, 1482], [17, -52]], [[3158, 1428], [-38, -40]], [[3120, 1388], [-99, -5]], [[3021, 1383], [33, 74]], [[3054, 1457], [14, 5]], [[3068, 1462], [90, -34]], [[4724, 1395], [-16, 82]], [[4708, 1477], [57, 13]], [[4765, 1490], [32, -68]], [[5668, 1484], [46, -80]], [[5714, 1404], [17, -23]], [[5565, 1348], [2, 12]], [[5567, 1360], [101, 124]], [[6848, 1445], [28, -75]], [[6734, 1425], [9, 22]], [[6743, 1447], [13, 32]], [[6756, 1479], [92, -34]], [[2881, 1391], [24, -30]], [[2826, 1313], [-60, 22]], [[2766, 1335], [3, 127]], [[2769, 1462], [112, -71]], [[6223, 1422], [-36, -70]], [[6187, 1352], [-22, -17]], [[6165, 1335], [-30, 11]], [[6102, 1383], [0, 25]], [[6102, 1408], [110, 82]], [[6212, 1490], [11, -68]], [[5964, 1463], [-55, -31]], [[5882, 1462], [19, 30]], [[5901, 1492], [44, 3]], [[5945, 1495], [19, -32]], [[5835, 1447], [4, -8]], [[5714, 1404], [58, 92]], [[5772, 1496], [63, -49]], [[3606, 1494], [29, -38]], [[3562, 1327], [-137, 42]], [[3425, 1369], [36, 57]], [[3461, 1426], [145, 68]], [[4894, 1498], [58, -4]], [[4952, 1494], [22, -100]], [[4823, 1445], [6, 66]], [[4829, 1511], [65, -13]], [[2766, 1335], [-54, -31]], [[2642, 1346], [37, 99]], [[2679, 1445], [71, 37]], [[2750, 1482], [19, -20]], [[4358, 1472], [-12, 11]], [[4346, 1483], [49, 35]], [[4395, 1518], [9, -51]], [[5550, 1519], [17, -159]], [[5454, 1399], [23, 76]], [[5477, 1475], [73, 44]], [[4533, 1526], [49, -141]], [[4582, 1385], [-78, -29]], [[4466, 1472], [18, 48]], [[4484, 1520], [49, 6]], [[5668, 1484], [2, 7]], [[5670, 1491], [38, 19]], [[5708, 1510], [64, -14]], [[7972, 1279], [-1, -6]], [[7902, 1414], [20, 63]], [[7922, 1477], [17, 21]], [[7939, 1498], [39, -90], [-6, -129]], [[6830, 1509], [24, -51]], [[6854, 1458], [-6, -13]], [[6756, 1479], [37, 50]], [[6793, 1529], [37, -20]], [[3928, 1339], [20, -19]], [[3948, 1320], [-21, -26]], [[3927, 1294], [-38, -22]], [[3773, 1424], [50, 104]], [[3823, 1528], [19, 7]], [[3842, 1535], [86, -196]], [[4110, 1520], [-2, -38]], [[4011, 1435], [24, 82]], [[4035, 1517], [75, 3]], [[4271, 1539], [75, -56]], [[4333, 1435], [-89, 95]], [[4244, 1530], [27, 9]], [[7446, 1513], [70, -71]], [[7516, 1442], [-9, -43]], [[7396, 1426], [37, 90]], [[7433, 1516], [13, -3]], [[3942, 1510], [32, -143]], [[3974, 1367], [-46, -28]], [[3842, 1535], [100, -25]], [[4186, 1526], [35, -117]], [[4110, 1520], [29, 33]], [[4139, 1553], [47, -27]], [[5858, 1547], [43, -55]], [[5835, 1447], [-15, 111]], [[5820, 1558], [38, -11]], [[4224, 1560], [20, -30]], [[4186, 1526], [13, 35]], [[4199, 1561], [25, -1]], [[6088, 1542], [-1, -122]], [[6087, 1420], [-97, 110]], [[5990, 1530], [58, 26]], [[6048, 1556], [40, -14]], [[8026, 1493], [22, -105]], [[8048, 1388], [-38, -119]], [[8010, 1269], [-38, 10]], [[7939, 1498], [23, 13]], [[7962, 1511], [64, -18]], [[7090, 1549], [42, -77]], [[7132, 1472], [2, -63]], [[7134, 1409], [0, -49]], [[6978, 1411], [34, 129]], [[7012, 1540], [78, 9]], [[8088, 1527], [18, -76]], [[8106, 1451], [-33, -51]], [[8073, 1400], [-25, -12]], [[8026, 1493], [62, 34]], [[5687, 1581], [21, -71]], [[5670, 1491], [-31, 19]], [[5639, 1510], [14, 63]], [[5653, 1573], [34, 8]], [[7634, 1473], [2, -100]], [[7636, 1373], [-101, 17]], [[7516, 1442], [40, 112]], [[7556, 1554], [78, -81]], [[6743, 1447], [-45, 74]], [[6698, 1521], [70, 54]], [[6768, 1575], [25, -46]], [[3428, 1570], [46, -80]], [[3474, 1490], [-13, -64]], [[3461, 1426], [-56, 32]], [[3405, 1458], [-66, 70]], [[3339, 1528], [85, 47]], [[3424, 1575], [4, -5]], [[4816, 1545], [13, -34]], [[4765, 1490], [-30, 89]], [[4735, 1579], [81, -34]], [[5319, 1564], [31, -40]], [[5350, 1524], [-149, 20]], [[5201, 1544], [37, 44]], [[5238, 1588], [81, -24]], [[3612, 1550], [-6, -56]], [[3474, 1490], [35, 27]], [[3509, 1517], [104, 65]], [[3613, 1582], [-1, -32]], [[3114, 1535], [-46, -73]], [[3054, 1457], [-75, 50]], [[2979, 1507], [-27, 35]], [[2952, 1542], [15, 30]], [[2967, 1572], [147, -37]], [[5790, 1563], [30, -5]], [[5687, 1581], [27, 28]], [[5714, 1609], [76, -46]], [[4708, 1477], [-63, 80]], [[4645, 1557], [66, 51]], [[4711, 1608], [24, -29]], [[5427, 1503], [-46, -24]], [[5381, 1479], [-31, 45]], [[5319, 1564], [75, 50]], [[5394, 1614], [33, -111]], [[4271, 1539], [39, 66]], [[4310, 1605], [55, 6]], [[4365, 1611], [30, -93]], [[6957, 1594], [46, -48]], [[7003, 1546], [9, -6]], [[6854, 1458], [62, 148]], [[6916, 1606], [41, -12]], [[5799, 1618], [-9, -55]], [[5714, 1609], [13, 6]], [[5727, 1615], [72, 3]], [[4428, 1627], [56, -107]], [[4365, 1611], [63, 16]], [[5569, 1633], [33, -99]], [[5602, 1534], [-35, 3]], [[5567, 1537], [-62, 74]], [[5505, 1611], [14, 18]], [[5519, 1629], [50, 4]], [[7822, 1595], [-36, -156]], [[7786, 1439], [-27, 157]], [[7759, 1596], [63, -1]], [[4299, 1633], [11, -28]], [[4224, 1560], [53, 70]], [[4277, 1630], [22, 3]], [[3224, 1579], [26, -41]], [[3250, 1538], [12, -77]], [[3262, 1461], [-104, -33]], [[3114, 1535], [5, 55]], [[3119, 1590], [-5, 25]], [[3114, 1615], [110, -36]], [[5428, 1637], [77, -26]], [[5567, 1537], [-17, -18]], [[5477, 1475], [-50, 28]], [[5394, 1614], [-3, 1]], [[5391, 1615], [37, 22]], [[4004, 1607], [31, -90]], [[4047, 1373], [-72, -10]], [[3975, 1363], [-1, 4]], [[3942, 1510], [-14, 77]], [[3928, 1587], [33, 35]], [[3961, 1622], [27, 11]], [[3988, 1633], [16, -26]], [[5927, 1634], [-69, -87]], [[5799, 1618], [7, 18]], [[5806, 1636], [121, -2]], [[7690, 1589], [-56, -116]], [[7556, 1554], [28, 47]], [[7584, 1601], [106, -12]], [[4215, 1593], [-16, -32]], [[4139, 1553], [-3, 84]], [[4136, 1637], [79, -44]], [[3501, 1629], [8, -112]], [[3428, 1570], [8, 62]], [[3436, 1632], [65, -3]], [[7875, 1478], [-27, -42]], [[7848, 1436], [-55, -12]], [[7793, 1424], [-7, 15]], [[7822, 1595], [32, 12]], [[7854, 1607], [21, -129]], [[5957, 1652], [28, -32]], [[5985, 1620], [41, -3]], [[6026, 1617], [22, -61]], [[5990, 1530], [-45, -35]], [[5927, 1634], [30, 18]], [[6148, 1614], [-24, -69]], [[6124, 1545], [-36, -3]], [[6026, 1617], [70, 19]], [[6096, 1636], [29, 19]], [[6125, 1655], [23, -41]], [[7364, 1626], [33, -93]], [[7397, 1533], [-106, -78]], [[7291, 1455], [-5, -2]], [[7286, 1453], [60, 181]], [[7346, 1634], [18, -8]], [[7517, 1625], [39, -15]], [[7556, 1610], [28, -9]], [[7446, 1513], [71, 112]], [[3697, 1621], [-85, -71]], [[3613, 1582], [2, 10]], [[3615, 1592], [29, 60]], [[3644, 1652], [53, -31]], [[6657, 1646], [25, -125]], [[6682, 1521], [-26, -33]], [[6656, 1488], [-45, 48]], [[6611, 1536], [-30, 50]], [[6581, 1586], [46, 66]], [[6627, 1652], [30, -6]], [[7922, 1477], [-47, 1]], [[7854, 1607], [0, 12]], [[7854, 1619], [59, 11]], [[7913, 1630], [49, -119]], [[8276, 1583], [-20, -134], [-143, -76]], [[8113, 1373], [-40, 27]], [[8106, 1451], [49, 149]], [[8155, 1600], [121, -17]], [[5653, 1573], [-6, 75]], [[5647, 1648], [80, -33]], [[2899, 1569], [-166, -43]], [[2733, 1526], [-23, 42]], [[2710, 1568], [39, 81]], [[2749, 1649], [150, -80]], [[7122, 1634], [-32, -85]], [[7003, 1546], [69, 115]], [[7072, 1661], [50, -27]], [[7223, 1636], [-91, -164]], [[7122, 1634], [51, 25]], [[7173, 1659], [50, -23]], [[4581, 1680], [60, -124]], [[4641, 1556], [-104, -27]], [[4537, 1529], [-10, 120]], [[4527, 1649], [54, 31]], [[2967, 1572], [-38, 70]], [[2929, 1642], [95, 19]], [[3024, 1661], [95, -71]], [[4255, 1689], [22, -59]], [[4215, 1593], [3, 74]], [[4218, 1667], [37, 22]], [[5985, 1620], [70, 63]], [[6055, 1683], [41, -47]], [[4922, 1657], [23, -80], [-51, -79]], [[4816, 1545], [19, 99]], [[4835, 1644], [75, 51]], [[4910, 1695], [12, -38]], [[7312, 1653], [34, -19]], [[7286, 1453], [-26, 10]], [[7260, 1463], [-3, 173]], [[7257, 1636], [14, 34]], [[7271, 1670], [41, -17]], [[8131, 1625], [24, -25]], [[8088, 1527], [-72, 114]], [[8016, 1641], [115, -16]], [[5494, 1695], [7, -12]], [[5501, 1683], [18, -54]], [[5428, 1637], [3, 17]], [[5431, 1654], [63, 41]], [[3928, 1587], [-66, 72]], [[3862, 1659], [81, 34]], [[3943, 1693], [18, -71]], [[5067, 1695], [55, -24]], [[5122, 1671], [14, -36]], [[5136, 1635], [-72, -93]], [[5064, 1542], [-4, 12]], [[5060, 1554], [-12, 147]], [[5048, 1701], [19, -6]], [[4815, 1670], [20, -26]], [[4711, 1608], [-8, 93]], [[4703, 1701], [112, -31]], [[3823, 1528], [1, 32]], [[3824, 1560], [-10, 83]], [[3814, 1643], [-1, 42]], [[3813, 1685], [49, -26]], [[1589, 1627], [17, -72]], [[1606, 1555], [-135, 20]], [[1471, 1575], [118, 52]], [[5640, 1665], [7, -17]], [[5639, 1510], [-37, 24]], [[5569, 1633], [30, 61]], [[5599, 1694], [41, -29]], [[4537, 1529], [-4, -3]], [[4428, 1627], [56, 74]], [[4484, 1701], [43, -52]], [[3310, 1564], [-86, 15]], [[3114, 1615], [24, 37]], [[3138, 1652], [109, 30]], [[3247, 1682], [40, 6]], [[3287, 1688], [23, -124]], [[5338, 1689], [53, -74]], [[5238, 1588], [-16, 34]], [[5222, 1622], [41, 87]], [[5263, 1709], [75, -20]], [[3587, 1707], [28, -115]], [[3501, 1629], [86, 78]], [[7080, 1674], [-8, -13]], [[6957, 1594], [82, 106]], [[7039, 1700], [41, -26]], [[5002, 1719], [46, -18]], [[5060, 1554], [-108, -60]], [[4922, 1657], [80, 62]], [[7411, 1689], [89, -14]], [[7500, 1675], [17, -50]], [[7433, 1516], [-36, 17]], [[7364, 1626], [47, 63]], [[2859, 1678], [70, -36]], [[2952, 1542], [-53, 27]], [[2749, 1649], [2, 7]], [[2751, 1656], [108, 22]], [[5931, 1685], [26, -33]], [[5806, 1636], [14, 74]], [[5820, 1710], [24, 14]], [[5844, 1724], [87, -39]], [[4354, 1712], [-2, -33]], [[4352, 1679], [13, -68]], [[4299, 1633], [-34, 93]], [[4265, 1726], [89, -14]], [[6014, 1726], [41, -43]], [[5931, 1685], [22, 14]], [[5953, 1699], [61, 27]], [[4691, 1726], [12, -25]], [[4645, 1557], [-4, -1]], [[4581, 1680], [1, 26]], [[4582, 1706], [109, 20]], [[6701, 1679], [-44, -33]], [[6627, 1652], [-28, 17]], [[6599, 1669], [56, 35]], [[6655, 1704], [46, -25]], [[6916, 1606], [85, 109]], [[7001, 1715], [38, -15]], [[4484, 1729], [0, -28]], [[4352, 1679], [132, 50]], [[4165, 1732], [53, -65]], [[4136, 1637], [4, 10]], [[4140, 1647], [11, 88]], [[4151, 1735], [14, -3]], [[3158, 1682], [-20, -30]], [[3024, 1661], [-7, 12]], [[3017, 1673], [36, 43]], [[3053, 1716], [105, -34]], [[6844, 1651], [-31, -19]], [[6813, 1632], [8, 37]], [[6821, 1669], [84, 57]], [[6905, 1726], [-61, -75]], [[5709, 1744], [25, -37]], [[5734, 1707], [-94, -42]], [[5599, 1694], [33, 55]], [[5632, 1749], [8, 0]], [[5640, 1749], [69, -5]], [[4872, 1749], [38, -54]], [[4815, 1670], [-6, 51]], [[4809, 1721], [63, 28]], [[5734, 1707], [37, 38]], [[5771, 1745], [49, -35]], [[3327, 1736], [97, -161]], [[3339, 1528], [-29, 36]], [[3287, 1688], [-35, 52]], [[3252, 1740], [75, -4]], [[4140, 1647], [-91, 22]], [[4049, 1669], [12, 74]], [[4061, 1743], [83, 11]], [[4144, 1754], [7, -19]], [[3158, 1682], [-2, 40]], [[3156, 1722], [22, 18]], [[3178, 1740], [69, -58]], [[6959, 1747], [42, -32]], [[6916, 1606], [-36, 10]], [[6880, 1616], [-36, 35]], [[6905, 1726], [11, 24]], [[6916, 1750], [43, -3]], [[3686, 1722], [-42, -70]], [[3587, 1707], [2, 11]], [[3589, 1718], [2, 36]], [[3591, 1754], [95, -32]], [[7257, 1636], [-28, -172]], [[7229, 1464], [-95, -55]], [[7223, 1636], [50, 111]], [[7273, 1747], [-2, -77]], [[6606, 1745], [42, -24]], [[6648, 1721], [7, -17]], [[6599, 1669], [-51, 56]], [[6548, 1725], [27, 33]], [[6575, 1758], [31, -13]], [[2661, 1743], [30, -23]], [[2691, 1720], [60, -64]], [[2710, 1568], [-19, 18]], [[2691, 1586], [-86, 108]], [[2605, 1694], [56, 49]], [[5431, 1654], [41, 123]], [[5472, 1777], [22, -82]], [[4426, 1776], [49, -19]], [[4475, 1757], [9, -28]], [[4354, 1712], [-4, 13]], [[4350, 1725], [46, 38]], [[4396, 1763], [30, 13]], [[5067, 1695], [28, 90]], [[5095, 1785], [27, -114]], [[7526, 1753], [59, -57]], [[7585, 1696], [-29, -86]], [[7500, 1675], [26, 78]], [[6371, 1756], [-40, -34]], [[6331, 1722], [-28, -26]], [[6303, 1696], [-53, 47]], [[6250, 1743], [30, 37]], [[6280, 1780], [91, -24]], [[2349, 1743], [40, -100]], [[2389, 1643], [-83, -52]], [[2306, 1591], [-39, 94]], [[2267, 1685], [82, 58]], [[6399, 1776], [6, -4]], [[6405, 1772], [65, -38]], [[6470, 1734], [30, -32]], [[6500, 1702], [-1, -17]], [[6499, 1685], [-123, 18]], [[6376, 1703], [-45, 19]], [[6371, 1756], [28, 20]], [[2969, 1709], [48, -36]], [[2859, 1678], [7, 14]], [[2866, 1692], [45, 49]], [[2911, 1741], [58, -32]], [[8009, 1727], [7, -86]], [[7913, 1630], [-22, 117]], [[7891, 1747], [56, 0]], [[7947, 1747], [62, -20]], [[6436, 1783], [34, -49]], [[6405, 1772], [31, 11]], [[1796, 1703], [-56, -156]], [[1740, 1547], [-134, 8]], [[1589, 1627], [6, 24]], [[1595, 1651], [90, 78]], [[1685, 1729], [111, -26]], [[7854, 1619], [-3, 115]], [[7851, 1734], [40, 13]], [[4557, 1800], [31, -18]], [[4588, 1782], [-6, -76]], [[4475, 1757], [60, 31]], [[4535, 1788], [22, 12]], [[6756, 1758], [8, -35]], [[6764, 1723], [-21, -68]], [[6743, 1655], [-42, 24]], [[6648, 1721], [64, 67]], [[6712, 1788], [44, -30]], [[7312, 1653], [42, 125]], [[7354, 1778], [57, -89]], [[7276, 1754], [-3, -7]], [[7173, 1659], [33, 121]], [[7206, 1780], [70, -26]], [[7759, 1596], [-16, 53]], [[7743, 1649], [-16, 15]], [[7727, 1664], [20, 67]], [[7747, 1731], [32, 39]], [[7779, 1770], [72, -36]], [[7080, 1674], [112, 114]], [[7192, 1788], [14, -8]], [[5106, 1811], [56, -44]], [[5162, 1767], [74, -28]], [[5236, 1739], [27, -30]], [[5222, 1622], [-86, 13]], [[5095, 1785], [0, 28]], [[5095, 1813], [11, -2]], [[2969, 1709], [15, 70]], [[2984, 1779], [69, -63]], [[5699, 1783], [10, -39]], [[5640, 1749], [28, 53]], [[5668, 1802], [31, -19]], [[6548, 1725], [-48, -23]], [[6436, 1783], [21, 7]], [[6457, 1790], [118, -32]], [[3925, 1807], [18, -114]], [[3813, 1685], [8, 84]], [[3821, 1769], [104, 38]], [[5448, 1796], [-94, -113]], [[5354, 1683], [-12, 134]], [[5342, 1817], [106, -21]], [[4348, 1781], [2, -56]], [[4265, 1726], [-14, 29]], [[4251, 1755], [-5, 27]], [[4246, 1782], [51, 36]], [[4297, 1818], [51, -37]], [[5338, 1689], [16, -6]], [[5448, 1796], [10, 26]], [[5458, 1822], [14, -45]], [[6948, 1789], [9, -4]], [[6957, 1785], [2, -38]], [[6916, 1750], [-11, 42]], [[6905, 1792], [43, -3]], [[6096, 1787], [61, -85]], [[6157, 1702], [-32, -47]], [[6014, 1726], [35, 61]], [[6049, 1787], [31, 33]], [[6080, 1820], [16, -33]], [[6957, 1785], [216, 17]], [[7173, 1802], [19, -14]], [[5074, 1807], [21, 6]], [[5002, 1719], [3, 98]], [[5005, 1817], [69, -10]], [[6209, 1822], [27, -74]], [[6236, 1748], [-50, -52]], [[6186, 1696], [-8, -15]], [[6178, 1681], [-21, 21]], [[6096, 1787], [63, 32]], [[6159, 1819], [50, 3]], [[5778, 1823], [8, -28]], [[5786, 1795], [-15, -50]], [[5699, 1783], [41, 39]], [[5740, 1822], [38, 1]], [[5345, 1831], [-3, -14]], [[5236, 1739], [20, 62]], [[5256, 1801], [89, 30]], [[1638, 1753], [47, -24]], [[1595, 1651], [-1, 112]], [[1594, 1763], [44, -10]], [[8146, 1779], [-15, -154]], [[8009, 1727], [86, 48]], [[8095, 1775], [51, 4]], [[7276, 1754], [38, 55]], [[7314, 1809], [40, -31]], [[3301, 1791], [26, -55]], [[3252, 1740], [-41, 36]], [[3211, 1776], [75, 43]], [[3286, 1819], [15, -28]], [[6821, 1669], [-6, 25]], [[6815, 1694], [77, 128]], [[6892, 1822], [13, -30]], [[5976, 1828], [73, -41]], [[5953, 1699], [3, 138]], [[5956, 1837], [20, -9]], [[2691, 1720], [71, 79]], [[2762, 1799], [24, 11]], [[2786, 1810], [80, -118]], [[3695, 1827], [29, -35]], [[3724, 1792], [-38, -70]], [[3591, 1754], [33, 58]], [[3624, 1812], [51, 15]], [[3675, 1827], [20, 0]], [[3999, 1834], [-11, -201]], [[3925, 1807], [3, 30]], [[3928, 1837], [71, -3]], [[4134, 1837], [10, -83]], [[4061, 1743], [29, 77]], [[4090, 1820], [44, 17]], [[6241, 1827], [39, -47]], [[6250, 1743], [-14, 5]], [[6209, 1822], [32, 5]], [[4399, 1832], [-3, -69]], [[4348, 1781], [-2, 49]], [[4346, 1830], [53, 2]], [[3344, 1836], [29, -19]], [[3373, 1817], [63, -185]], [[3301, 1791], [43, 45]], [[8261, 1716], [58, -126]], [[8319, 1590], [-43, -7]], [[8146, 1779], [115, -63]], [[4527, 1840], [8, -52]], [[4426, 1776], [78, 79]], [[4504, 1855], [23, -15]], [[4861, 1846], [22, -74]], [[4883, 1772], [-11, -23]], [[4809, 1721], [-44, 43]], [[4765, 1764], [24, 70]], [[4789, 1834], [72, 12]], [[5844, 1724], [107, 132]], [[5951, 1856], [5, -19]], [[4212, 1853], [34, -71]], [[4251, 1755], [-20, 2]], [[4231, 1757], [-66, -25]], [[4134, 1837], [33, 22]], [[4167, 1859], [45, -6]], [[3527, 1714], [62, 4]], [[3373, 1817], [45, 32]], [[3418, 1849], [109, -135]], [[3099, 1797], [57, -75]], [[2984, 1779], [-5, 49]], [[2979, 1828], [120, -31]], [[6241, 1827], [40, 22]], [[6281, 1849], [58, 12]], [[6339, 1861], [60, -85]], [[5162, 1767], [41, 82]], [[5203, 1849], [53, 24]], [[5256, 1873], [0, -72]], [[2905, 1778], [6, -37]], [[2786, 1810], [69, 34]], [[2855, 1844], [50, -66]], [[3095, 1849], [83, -109]], [[3099, 1797], [-4, 52]], [[6878, 1858], [14, -36]], [[6815, 1694], [-51, 29]], [[6756, 1758], [99, 87]], [[6855, 1845], [23, 13]], [[5786, 1795], [134, 81]], [[5920, 1876], [31, -20]], [[1471, 1575], [-35, 134]], [[1436, 1709], [76, 99]], [[1512, 1808], [2, 1]], [[1514, 1809], [80, -46]], [[2375, 1828], [-8, -19]], [[2367, 1809], [-18, -66]], [[2267, 1685], [-127, 100]], [[2140, 1785], [21, 32]], [[2161, 1817], [139, 22]], [[2300, 1839], [75, -11]], [[2612, 1845], [49, -102]], [[2605, 1694], [-16, 21]], [[2589, 1715], [-15, 128]], [[2574, 1843], [38, 2]], [[3809, 1870], [12, -101]], [[3814, 1643], [-64, 23]], [[3750, 1666], [48, 213]], [[3798, 1879], [11, -9]], [[5716, 1880], [24, -58]], [[5668, 1802], [-23, 20]], [[5645, 1822], [-6, 56]], [[5639, 1878], [77, 2]], [[3472, 1876], [56, -82]], [[3528, 1794], [-1, -80]], [[3418, 1849], [54, 27]], [[6712, 1788], [61, 94]], [[6773, 1882], [82, -37]], [[3598, 1884], [26, -72]], [[3528, 1794], [15, 42]], [[3543, 1836], [55, 48]], [[6150, 1851], [9, -32]], [[6080, 1820], [6, 74]], [[6086, 1894], [64, -43]], [[5524, 1876], [3, -85]], [[5527, 1791], [-26, -108]], [[5458, 1822], [29, 62]], [[5487, 1884], [37, -8]], [[8015, 1859], [80, -84]], [[7947, 1747], [-1, 94]], [[7946, 1841], [69, 18]], [[6606, 1745], [34, 136]], [[6640, 1881], [121, 14]], [[6761, 1895], [12, -13]], [[3809, 1870], [117, 32]], [[3926, 1902], [2, -65]], [[7779, 1770], [8, 10]], [[7787, 1780], [68, 91]], [[7855, 1871], [91, -30]], [[7560, 1877], [69, -15]], [[7629, 1862], [41, -93]], [[7670, 1769], [-73, -52]], [[7597, 1717], [-12, -21]], [[7526, 1753], [8, 130]], [[7534, 1883], [26, -6]], [[4631, 1910], [31, -104]], [[4662, 1806], [-74, -24]], [[4557, 1800], [74, 110]], [[2904, 1880], [1, -102]], [[2855, 1844], [-1, 1]], [[2854, 1845], [-3, 45]], [[2851, 1890], [53, -10]], [[7057, 1897], [121, -41]], [[7178, 1856], [-5, -54]], [[6948, 1789], [67, 100]], [[7015, 1889], [42, 8]], [[1751, 1815], [69, -83]], [[1820, 1732], [-24, -29]], [[1638, 1753], [51, 102]], [[1689, 1855], [62, -40]], [[7339, 1838], [-25, -29]], [[7178, 1856], [34, 43]], [[7212, 1899], [127, -61]], [[5263, 1924], [-7, -51]], [[5203, 1849], [-11, 68]], [[5192, 1917], [71, 7]], [[4399, 1832], [14, 44]], [[4413, 1876], [61, 48]], [[4474, 1924], [30, -69]], [[2655, 1889], [20, -24]], [[2675, 1865], [87, -66]], [[2612, 1845], [43, 44]], [[4625, 1926], [6, -16]], [[4527, 1840], [46, 81]], [[4573, 1921], [52, 5]], [[2675, 1865], [179, -20]], [[1485, 1847], [27, -39]], [[1436, 1709], [-215, 46]], [[1221, 1755], [154, 70]], [[1375, 1825], [110, 22]], [[6385, 1922], [10, -15]], [[6395, 1907], [60, -113]], [[6455, 1794], [2, -4]], [[6339, 1861], [-10, 40]], [[6329, 1901], [56, 21]], [[3792, 1921], [6, -42]], [[3750, 1666], [-7, -17]], [[3743, 1649], [-46, -28]], [[3724, 1792], [68, 129]], [[2933, 1905], [23, -22]], [[2956, 1883], [23, -55]], [[2904, 1880], [29, 25]], [[6603, 1904], [37, -23]], [[6455, 1794], [112, 124]], [[6567, 1918], [20, 2]], [[6587, 1920], [16, -16]], [[3048, 1905], [3, -3]], [[3051, 1902], [45, -51]], [[3096, 1851], [-1, -2]], [[2956, 1883], [92, 22]], [[4346, 1830], [-19, 76]], [[4327, 1906], [44, 23]], [[4371, 1929], [42, -53]], [[6209, 1916], [72, -67]], [[6150, 1851], [50, 77]], [[6200, 1928], [9, -12]], [[5766, 1912], [12, -89]], [[5716, 1880], [26, 52]], [[5742, 1932], [24, -20]], [[7688, 1860], [14, -1]], [[7702, 1859], [85, -79]], [[7747, 1731], [-77, 38]], [[7629, 1862], [59, -2]], [[4234, 1922], [63, -104]], [[4212, 1853], [-9, 78]], [[4203, 1931], [31, -9]], [[6558, 1924], [9, -6]], [[6395, 1907], [49, 14]], [[6444, 1921], [114, 3]], [[5766, 1912], [71, 31]], [[5837, 1943], [83, -67]], [[4111, 1940], [40, -52]], [[4151, 1888], [16, -29]], [[4090, 1820], [-68, 35]], [[4022, 1855], [3, 31]], [[4025, 1886], [86, 54]], [[5951, 1856], [4, 56]], [[5955, 1912], [72, 30]], [[6027, 1942], [-51, -114]], [[6286, 1933], [43, -32]], [[6209, 1916], [77, 17]], [[6067, 1907], [19, -13]], [[6027, 1942], [0, 1]], [[6027, 1943], [11, 2]], [[6038, 1945], [29, -38]], [[1672, 1875], [17, -20]], [[1514, 1809], [158, 66]], [[5729, 1942], [13, -10]], [[5639, 1878], [-50, -2]], [[5589, 1876], [-3, 49]], [[5586, 1925], [122, 26]], [[5708, 1951], [21, -9]], [[6983, 1931], [32, -42]], [[6878, 1858], [3, 22]], [[6881, 1880], [37, 58]], [[6918, 1938], [65, -7]], [[3472, 1876], [1, 63]], [[3473, 1939], [70, -103]], [[6761, 1895], [41, 42]], [[6802, 1937], [79, -57]], [[4317, 1952], [10, -46]], [[4234, 1922], [67, 33]], [[4301, 1955], [16, -3]], [[1334, 1879], [41, -54]], [[1221, 1755], [-24, 114], [137, 10]], [[8307, 1807], [-29, -76]], [[8278, 1731], [-17, -15]], [[8015, 1859], [63, 56]], [[8078, 1915], [77, -1], [30, -97], [122, -10]], [[1857, 1907], [55, -143], [-46, -76]], [[1866, 1688], [-46, 44]], [[1751, 1815], [106, 92]], [[5472, 1953], [15, -69]], [[5345, 1831], [7, 38]], [[5352, 1869], [78, 0], [14, 103]], [[5444, 1972], [28, -19]], [[6067, 1907], [67, 53]], [[6134, 1960], [66, -32]], [[4844, 1917], [54, -58]], [[4898, 1859], [4, -6]], [[4902, 1853], [-41, -7]], [[4789, 1834], [-4, 121]], [[4785, 1955], [59, -38]], [[4176, 1972], [27, -41]], [[4151, 1888], [14, 88]], [[4165, 1976], [11, -4]], [[3478, 1965], [-5, -26]], [[3344, 1836], [-9, 88]], [[3335, 1924], [63, 36]], [[3398, 1960], [80, 5]], [[7415, 1953], [33, -10]], [[7448, 1943], [86, -60]], [[7339, 1838], [54, 98]], [[7393, 1936], [22, 17]], [[5527, 1978], [59, -53]], [[5589, 1876], [-65, 0]], [[5472, 1953], [55, 25]], [[4765, 1764], [-36, 61]], [[4729, 1825], [-21, 153]], [[4708, 1978], [47, 11]], [[4755, 1989], [30, -34]], [[3615, 1973], [-17, -89]], [[3478, 1965], [137, 8]], [[3307, 1947], [28, -23]], [[3286, 1819], [-124, 100]], [[3162, 1919], [15, 53]], [[3177, 1972], [130, -25]], [[5955, 1912], [-48, 72]], [[5907, 1984], [120, -41]], [[1997, 1928], [111, -130]], [[2108, 1798], [-15, -108]], [[2093, 1690], [-64, 57], [-97, 186]], [[1932, 1933], [65, -5]], [[5645, 1993], [63, -42]], [[5527, 1978], [2, 16]], [[5529, 1994], [74, 4]], [[5603, 1998], [42, -5]], [[4729, 1825], [-54, -40]], [[4675, 1785], [-13, 21]], [[4625, 1926], [11, 64]], [[4636, 1990], [45, 8]], [[4681, 1998], [27, -20]], [[4096, 1991], [15, -51]], [[4025, 1886], [-21, 109]], [[4004, 1995], [92, -4]], [[3934, 1939], [-8, -37]], [[3792, 1921], [13, 75]], [[3805, 1996], [129, -57]], [[2093, 1690], [-39, -22]], [[2054, 1668], [-9, -39]], [[2045, 1629], [-179, 59]], [[1857, 1907], [75, 26]], [[4022, 1855], [-23, -21]], [[3934, 1939], [-21, 54]], [[3913, 1993], [65, 3]], [[3978, 1996], [26, -1]], [[4096, 1991], [51, 16]], [[4147, 2007], [18, -31]], [[6343, 1999], [42, -77]], [[6286, 1933], [34, 75]], [[6320, 2008], [23, -9]], [[7022, 1964], [-39, -33]], [[6918, 1938], [5, 60]], [[6923, 1998], [99, -34]], [[7068, 1994], [23, -19]], [[7091, 1975], [21, -27]], [[7112, 1948], [-55, -51]], [[7022, 1964], [46, 30]], [[6796, 1979], [6, -42]], [[6603, 1904], [82, 69]], [[6685, 1973], [111, 6]], [[4516, 2018], [-42, -94]], [[4371, 1929], [55, 56]], [[4426, 1985], [90, 33]], [[5880, 2002], [3, -3]], [[5883, 1999], [24, -15]], [[5837, 1943], [-17, 78]], [[5820, 2021], [60, -19]], [[7212, 1990], [0, -91]], [[7112, 1948], [100, 42]], [[3805, 1996], [-4, 12]], [[3801, 2008], [66, 11]], [[3867, 2019], [46, -26]], [[3798, 2019], [3, -11]], [[3695, 1827], [11, 137]], [[3706, 1964], [92, 55]], [[4176, 1972], [59, 56]], [[4235, 2028], [66, -73]], [[5525, 2025], [4, -31]], [[5444, 1972], [-53, 40]], [[5391, 2012], [134, 13]], [[4570, 2029], [3, -108]], [[4516, 2018], [54, 11]], [[6518, 2018], [40, -94]], [[6444, 1921], [14, 101]], [[6458, 2022], [60, -4]], [[2975, 2005], [73, -100]], [[2933, 1905], [-48, 82]], [[2885, 1987], [90, 18]], [[3635, 2027], [40, -200]], [[3615, 1973], [20, 54]], [[7281, 2014], [112, -78]], [[7212, 1990], [69, 24]], [[5729, 1942], [-7, 86]], [[5722, 2028], [62, 15]], [[5784, 2043], [36, -22]], [[2443, 2006], [84, -166]], [[2527, 1840], [-5, -16]], [[2522, 1824], [-139, 28]], [[2383, 1852], [60, 154]], [[1483, 1887], [2, -40]], [[1334, 1879], [58, 89]], [[1392, 1968], [91, -81]], [[2855, 2019], [3, -3]], [[2858, 2016], [27, -29]], [[2851, 1890], [-24, 125]], [[2827, 2015], [28, 4]], [[5141, 2017], [-6, -58]], [[5135, 1959], [-112, -38]], [[5023, 1921], [3, 63]], [[5026, 1984], [-2, 14]], [[5024, 1998], [44, 50]], [[5068, 2048], [45, 4]], [[5113, 2052], [28, -35]], [[2655, 1889], [-9, 12]], [[2646, 1901], [75, 68]], [[2721, 1969], [78, -2]], [[2799, 1967], [28, 48]], [[5188, 2054], [4, -137]], [[5106, 1811], [29, 148]], [[5141, 2017], [47, 37]], [[4309, 2060], [48, -17]], [[4357, 2043], [-40, -91]], [[4235, 2028], [-3, 20]], [[4232, 2048], [77, 12]], [[6662, 2053], [23, -80]], [[6587, 1920], [24, 114]], [[6611, 2034], [32, 13]], [[6643, 2047], [19, 6]], [[6796, 1979], [68, 39]], [[6864, 2018], [60, 32]], [[6924, 2050], [-1, -52]], [[6518, 2018], [33, 44]], [[6551, 2062], [60, -28]], [[5687, 2072], [35, -44]], [[5645, 1993], [18, 62]], [[5663, 2055], [24, 17]], [[2417, 2032], [26, -26]], [[2383, 1852], [-8, -24]], [[2300, 1839], [22, 82], [94, 110]], [[2416, 2031], [1, 1]], [[6000, 2072], [38, -127]], [[5883, 1999], [104, 73]], [[5987, 2072], [13, 0]], [[3689, 2069], [17, -105]], [[3635, 2027], [5, 20]], [[3640, 2047], [49, 22]], [[4426, 2073], [0, -88]], [[4357, 2043], [7, 35]], [[4364, 2078], [62, -5]], [[5603, 1998], [-26, 26]], [[5577, 2024], [33, 45]], [[5610, 2069], [53, -14]], [[4570, 2029], [34, 40]], [[4604, 2069], [32, -79]], [[6343, 1999], [33, 63]], [[6376, 2062], [64, 14]], [[6440, 2076], [18, -54]], [[6073, 2070], [28, -22]], [[6101, 2048], [78, -61]], [[6179, 1987], [-45, -27]], [[6000, 2072], [73, -2]], [[5248, 2084], [2, -23]], [[5250, 2061], [14, -103]], [[5264, 1958], [-1, -34]], [[5188, 2054], [60, 30]], [[4973, 2091], [51, -93]], [[5026, 1984], [-56, -4]], [[4970, 1980], [-55, 91]], [[4915, 2071], [46, 18]], [[4961, 2089], [12, 2]], [[5561, 2082], [16, -58]], [[5525, 2025], [-29, 64]], [[5496, 2089], [17, 8]], [[5513, 2097], [48, -15]], [[5561, 2082], [20, 16]], [[5581, 2098], [29, -29]], [[3269, 2066], [38, -119]], [[3177, 1972], [-36, 20]], [[3141, 1992], [100, 88]], [[3241, 2080], [28, -14]], [[3343, 2081], [73, -39]], [[3416, 2042], [-18, -82]], [[3269, 2066], [74, 15]], [[5869, 2087], [11, -85]], [[5784, 2043], [-28, 57]], [[5756, 2100], [113, -13]], [[1770, 2039], [87, -132]], [[1672, 1875], [36, 114]], [[1708, 1989], [62, 50]], [[7515, 2050], [-67, -107]], [[7415, 1953], [26, 122]], [[7441, 2075], [74, -25]], [[7560, 1877], [49, 192]], [[7609, 2069], [44, 4]], [[7653, 2073], [41, -24], [-6, -189]], [[3416, 2042], [145, 55]], [[3561, 2097], [79, -50]], [[4582, 2090], [22, -21]], [[4426, 2073], [51, 23]], [[4477, 2096], [105, -6]], [[3719, 2097], [71, -16]], [[3790, 2081], [8, -62]], [[3689, 2069], [7, 36]], [[3696, 2105], [23, -8]], [[4851, 2095], [14, -39]], [[4865, 2056], [59, -91]], [[4924, 1965], [-65, -24]], [[4859, 1941], [-78, 118]], [[4781, 2059], [-25, 53]], [[4756, 2112], [95, -17]], [[4147, 2007], [-55, 93]], [[4092, 2100], [56, 14]], [[4148, 2114], [84, -66]], [[6326, 2108], [50, -46]], [[6320, 2008], [-33, 11]], [[6287, 2019], [-47, 47]], [[6240, 2066], [86, 42]], [[5720, 2111], [36, -11]], [[5687, 2072], [33, 39]], [[5951, 2099], [36, -27]], [[5869, 2087], [31, 37]], [[5900, 2124], [51, -25]], [[5426, 2127], [70, -38]], [[5391, 2012], [-42, 46]], [[5349, 2058], [-2, 50]], [[5347, 2108], [79, 19]], [[3961, 2114], [17, -118]], [[3867, 2019], [19, 100]], [[3886, 2119], [70, 4]], [[3956, 2123], [5, -9]], [[7413, 2103], [28, -28]], [[7281, 2014], [19, 50]], [[7300, 2064], [12, 37]], [[7312, 2101], [101, 2]], [[6440, 2076], [11, 29]], [[6451, 2105], [79, 20]], [[6530, 2125], [21, -63]], [[6943, 2117], [18, -15]], [[6961, 2102], [71, -38]], [[7032, 2064], [36, -70]], [[6924, 2050], [-6, 24]], [[6918, 2074], [17, 34]], [[6935, 2108], [8, 9]], [[7515, 2050], [57, 53]], [[7572, 2103], [37, -34]], [[3961, 2114], [42, 19]], [[4003, 2133], [93, -142]], [[2721, 1969], [-77, 109]], [[2644, 2078], [9, 26]], [[2653, 2104], [95, -52], [51, -85]], [[5043, 2142], [27, -81]], [[5070, 2061], [-2, -13]], [[4973, 2091], [70, 51]], [[7229, 2083], [71, -19]], [[7091, 1975], [56, 144]], [[7147, 2119], [82, -36]], [[5169, 2133], [-56, -81]], [[5070, 2061], [19, 46]], [[5089, 2107], [80, 26]], [[5581, 2098], [1, 2]], [[5582, 2100], [41, 26]], [[5623, 2126], [54, 17]], [[5677, 2143], [43, -32]], [[3133, 1993], [-25, -6]], [[3108, 1987], [-81, 82]], [[3027, 2069], [65, 53]], [[3092, 2122], [41, -129]], [[5253, 2093], [-5, -9]], [[5169, 2133], [4, 7]], [[5173, 2140], [80, -47]], [[4665, 2145], [16, -147]], [[4582, 2090], [35, 56]], [[4617, 2146], [48, -1]], [[5298, 2148], [49, -40]], [[5349, 2058], [-22, -3]], [[5327, 2055], [-77, 6]], [[5253, 2093], [45, 55]], [[2180, 2096], [67, -55]], [[2247, 2041], [-31, -142], [-61, -48]], [[2155, 1851], [-41, 134]], [[2114, 1985], [45, 94]], [[2159, 2079], [21, 17]], [[6214, 2122], [11, -36]], [[6225, 2086], [-46, -98]], [[6179, 1988], [0, -1]], [[6101, 2048], [55, 76]], [[6156, 2124], [51, 22]], [[6207, 2146], [7, -24]], [[2985, 2110], [2, -10]], [[2987, 2100], [-12, -95]], [[2858, 2016], [44, 83], [83, 11]], [[2286, 2103], [130, -72]], [[2161, 1817], [-6, 34]], [[2247, 2041], [39, 62]], [[3561, 2097], [7, 34]], [[3568, 2131], [67, 16]], [[3635, 2147], [61, -42]], [[6003, 2156], [70, -86]], [[5951, 2099], [52, 57]], [[6173, 2182], [34, -30]], [[6207, 2152], [0, -6]], [[6156, 2124], [0, 32]], [[6156, 2156], [17, 26]], [[4477, 2096], [50, 55]], [[4527, 2151], [47, 13]], [[4574, 2164], [43, -18]], [[4260, 2159], [49, -99]], [[4148, 2114], [-25, 30]], [[4123, 2144], [44, 13]], [[4167, 2157], [79, 10]], [[4246, 2167], [14, -8]], [[5547, 2163], [35, -63]], [[5513, 2097], [4, 75]], [[5517, 2172], [30, -9]], [[6671, 2066], [3, -9]], [[6674, 2057], [-12, -4]], [[6643, 2047], [-58, 119]], [[6585, 2166], [86, -100]], [[5572, 2179], [51, -53]], [[5547, 2163], [25, 16]], [[7032, 2064], [63, 96]], [[7095, 2160], [52, -41]], [[6897, 2103], [21, -29]], [[6864, 2018], [-99, 54]], [[6765, 2072], [-22, 42]], [[6743, 2114], [-4, 18]], [[6739, 2132], [37, 24]], [[6776, 2156], [62, 12]], [[6838, 2168], [59, -65]], [[1669, 2058], [38, -68]], [[1707, 1990], [-166, 4]], [[1541, 1994], [-43, 19]], [[1498, 2013], [5, 72]], [[1503, 2085], [166, -27]], [[6326, 2108], [16, 43]], [[6342, 2151], [42, 28]], [[6384, 2179], [1, 0]], [[6385, 2179], [66, -74]], [[3508, 2173], [67, -22]], [[3575, 2151], [-7, -20]], [[3343, 2081], [11, 37]], [[3354, 2118], [154, 55]], [[6583, 2178], [0, -8]], [[6583, 2170], [2, -4]], [[6530, 2125], [-10, 34]], [[6520, 2159], [36, 19]], [[6556, 2178], [27, 0]], [[3186, 2154], [55, -74]], [[3141, 1992], [-8, 1]], [[3092, 2122], [7, 20]], [[3099, 2142], [57, 33]], [[3156, 2175], [30, -21]], [[1440, 2120], [63, -35]], [[1498, 2013], [-114, 11]], [[1384, 2024], [-34, 35]], [[1350, 2059], [43, 61]], [[1393, 2120], [47, 0]], [[8074, 2005], [-8, -14]], [[8066, 1991], [12, -76]], [[7855, 1871], [61, 113]], [[7916, 1984], [-8, 60]], [[7908, 2044], [93, 111]], [[8001, 2155], [0, -117], [73, -33]], [[6088, 2166], [68, -10]], [[6003, 2156], [9, 42]], [[6012, 2198], [76, -32]], [[1233, 2118], [117, -59]], [[1384, 2024], [-15, -42]], [[1369, 1982], [-95, 31], [-41, 105]], [[3816, 2168], [-26, -87]], [[3719, 2097], [78, 102]], [[3797, 2199], [19, -31]], [[2290, 2161], [-4, -58]], [[2180, 2096], [25, 50]], [[2205, 2146], [85, 15]], [[4684, 2175], [-3, -11]], [[4681, 2164], [-16, -19]], [[4574, 2164], [28, 36]], [[4602, 2200], [82, -25]], [[4508, 2205], [19, -54]], [[4364, 2078], [11, 8]], [[4375, 2086], [133, 119]], [[5869, 2194], [31, -70]], [[5756, 2100], [74, 111]], [[5830, 2211], [39, -17]], [[4315, 2185], [24, -6]], [[4339, 2179], [36, -93]], [[4260, 2159], [25, 45]], [[4285, 2204], [30, -19]], [[6702, 2186], [37, -54]], [[6743, 2114], [-72, -5]], [[6671, 2109], [-16, 56]], [[6655, 2165], [7, 19]], [[6662, 2184], [40, 2]], [[5089, 2107], [17, 91]], [[5106, 2198], [82, 18]], [[5188, 2216], [-15, -76]], [[4036, 2207], [56, -107]], [[4003, 2133], [8, 65]], [[4011, 2198], [25, 9]], [[4223, 2203], [23, -36]], [[4167, 2157], [-19, 41]], [[4148, 2198], [75, 5]], [[5298, 2148], [-7, 51]], [[5291, 2199], [40, 9]], [[5331, 2208], [95, -81]], [[2838, 2067], [17, -48]], [[2653, 2104], [-5, 70]], [[2648, 2174], [68, -10], [122, -97]], [[2114, 1985], [-140, 179]], [[1974, 2164], [185, -85]], [[8191, 2066], [-47, -101], [-78, 26]], [[8074, 2005], [90, 133]], [[8164, 2138], [33, 34]], [[8197, 2172], [-6, -106]], [[7312, 2101], [1, 88]], [[7313, 2189], [67, 8]], [[7380, 2197], [33, -94]], [[6385, 2179], [87, 36]], [[6472, 2215], [48, -56]], [[5198, 2226], [93, -27]], [[5188, 2216], [10, 10]], [[4223, 2203], [2, 2]], [[4225, 2205], [11, 15]], [[4236, 2220], [49, -16]], [[5677, 2143], [-10, 33]], [[5667, 2176], [57, 41]], [[5724, 2217], [89, 19]], [[5813, 2236], [17, -25]], [[1233, 2118], [51, 37]], [[1284, 2155], [109, -35]], [[4756, 2112], [-75, 52]], [[4684, 2175], [29, 52]], [[4713, 2227], [111, 13]], [[4824, 2240], [27, -145]], [[3919, 2204], [37, -81]], [[3886, 2119], [-20, 66]], [[3866, 2185], [-4, 45]], [[3862, 2230], [57, -26]], [[3988, 2239], [23, -41]], [[3919, 2204], [69, 35]], [[3380, 2196], [-26, -78]], [[3186, 2154], [31, 44]], [[3217, 2198], [48, 8]], [[3265, 2206], [55, 13]], [[3320, 2219], [60, -23]], [[6516, 2239], [40, -61]], [[6472, 2215], [5, 13]], [[6477, 2228], [39, 11]], [[3782, 2233], [15, -34]], [[3635, 2147], [45, 49]], [[3680, 2196], [102, 37]], [[3145, 2196], [11, -21]], [[3099, 2142], [-18, 48]], [[3081, 2190], [64, 6]], [[7093, 2230], [2, -70]], [[6961, 2102], [104, 113]], [[7065, 2215], [28, 15]], [[6646, 2235], [16, -51]], [[6655, 2165], [-72, 5]], [[6583, 2178], [30, 67]], [[6613, 2245], [33, -10]], [[5494, 2254], [5, -8]], [[5499, 2246], [3, -50]], [[5502, 2196], [-84, 62]], [[5418, 2258], [76, -4]], [[7211, 2217], [18, -134]], [[7093, 2230], [118, -13]], [[6010, 2201], [2, -3]], [[6003, 2156], [-50, 46]], [[5953, 2202], [-2, 21]], [[5951, 2223], [11, 37]], [[5962, 2260], [48, -59]], [[6115, 2258], [70, -46]], [[6185, 2212], [-12, -30]], [[6088, 2166], [27, 92]], [[5651, 2230], [16, -54]], [[5572, 2179], [5, 12]], [[5577, 2191], [13, 41]], [[5590, 2232], [31, 34]], [[5621, 2266], [2, 0]], [[5623, 2266], [28, -36]], [[5651, 2230], [64, 37]], [[5715, 2267], [9, -50]], [[4195, 2246], [30, -41]], [[4148, 2198], [-18, 63]], [[4130, 2261], [65, -15]], [[5021, 2261], [22, -119]], [[4961, 2089], [-17, 135]], [[4944, 2224], [77, 37]], [[7508, 2236], [64, -133]], [[7380, 2197], [59, 36]], [[7439, 2233], [47, 4]], [[7486, 2237], [22, -1]], [[3515, 2236], [-7, -63]], [[3380, 2196], [43, 47]], [[3423, 2243], [77, 16]], [[3500, 2259], [15, -23]], [[7211, 2217], [1, 19]], [[7212, 2236], [22, 14]], [[7234, 2250], [79, -61]], [[2644, 2078], [-117, 69]], [[2527, 2147], [68, 88]], [[2595, 2235], [53, -61]], [[4715, 2242], [-2, -15]], [[4602, 2200], [14, 75]], [[4616, 2275], [99, -33]], [[6943, 2117], [3, 5]], [[6946, 2122], [2, 51]], [[6948, 2173], [96, 84]], [[7044, 2257], [21, -42]], [[6516, 2239], [42, 21]], [[6558, 2260], [55, -15]], [[6389, 2254], [-5, -75]], [[6342, 2151], [-47, 3]], [[6295, 2154], [14, 14]], [[6309, 2168], [10, 54]], [[6319, 2222], [9, 44]], [[6328, 2266], [61, -12]], [[5419, 2277], [-1, -19]], [[5502, 2196], [15, -24]], [[5331, 2208], [-14, 31]], [[5317, 2239], [13, 35]], [[5330, 2274], [89, 3]], [[6708, 2262], [-6, -76]], [[6646, 2235], [5, 33]], [[6651, 2268], [57, -6]], [[4074, 2275], [16, -59]], [[4090, 2216], [-54, -9]], [[3988, 2239], [-2, 34]], [[3986, 2273], [16, 8]], [[4002, 2281], [72, -6]], [[7637, 2238], [10, -155]], [[7647, 2083], [6, -10]], [[7508, 2236], [39, 7]], [[7547, 2243], [90, -5]], [[3210, 2278], [7, -80]], [[3145, 2196], [65, 82]], [[3614, 2289], [63, -30]], [[3677, 2259], [3, -63]], [[3575, 2151], [18, 127]], [[3593, 2278], [21, 11]], [[6103, 2298], [12, -40]], [[6010, 2201], [62, 96]], [[6072, 2297], [31, 1]], [[3515, 2236], [78, 42]], [[7652, 2261], [-3, -11]], [[7649, 2250], [-12, -12]], [[7547, 2243], [36, 16]], [[7583, 2259], [69, 2]], [[6471, 2300], [6, -72]], [[6389, 2254], [22, 9]], [[6411, 2263], [60, 37]], [[2278, 2264], [12, -103]], [[2205, 2146], [-10, 22]], [[2195, 2168], [-7, 48]], [[2188, 2216], [90, 48]], [[5591, 2302], [30, -36]], [[5590, 2232], [-43, 32]], [[5547, 2264], [-10, 6]], [[5537, 2270], [2, 41]], [[5539, 2311], [52, -9]], [[3739, 2299], [64, -15]], [[3803, 2284], [-21, -51]], [[3677, 2259], [62, 40]], [[3825, 2304], [23, -43]], [[3848, 2261], [14, -31]], [[3866, 2185], [-50, -17]], [[3803, 2284], [22, 20]], [[6545, 2285], [13, -25]], [[6471, 2300], [1, 3]], [[6472, 2303], [73, -18]], [[1890, 2233], [45, -242], [62, -63]], [[1770, 2039], [16, 136], [54, 60]], [[1840, 2235], [17, 19]], [[1857, 2254], [33, -21]], [[4079, 2314], [52, -48]], [[4131, 2266], [-1, -5]], [[4123, 2144], [-33, 72]], [[4074, 2275], [5, 39]], [[5785, 2296], [27, -57]], [[5812, 2239], [1, -3]], [[5715, 2267], [45, 52]], [[5760, 2319], [25, -23]], [[5245, 2322], [55, -39]], [[5300, 2283], [17, -44]], [[5198, 2226], [35, 88]], [[5233, 2314], [12, 8]], [[6189, 2256], [-4, -44]], [[6103, 2298], [40, 13]], [[6143, 2311], [46, -55]], [[6769, 2305], [7, -149]], [[6708, 2262], [22, 23]], [[6730, 2285], [39, 20]], [[5809, 2322], [55, -45]], [[5864, 2277], [-52, -38]], [[5785, 2296], [24, 26]], [[6332, 2319], [-4, -53]], [[6319, 2222], [-44, 51]], [[6275, 2273], [38, 32]], [[6313, 2305], [19, 14]], [[3848, 2261], [46, 58]], [[3894, 2319], [92, -46]], [[4592, 2321], [24, -46]], [[4508, 2205], [20, 72]], [[4528, 2277], [-2, 10]], [[4526, 2287], [66, 34]], [[8352, 2274], [75, -4]], [[8427, 2270], [-8, -284]], [[8419, 1986], [-107, 2]], [[8312, 1988], [-121, 78]], [[8197, 2172], [-19, 92]], [[8178, 2264], [7, 22]], [[8185, 2286], [143, -61], [24, 49]], [[5466, 2339], [28, -85]], [[5419, 2277], [11, 28]], [[5430, 2305], [36, 34]], [[6395, 2324], [16, -61]], [[6332, 2319], [32, 14]], [[6364, 2333], [31, -9]], [[5106, 2198], [-8, 59]], [[5098, 2257], [5, 20]], [[5103, 2277], [80, 59]], [[5183, 2336], [50, -22]], [[3335, 2254], [-15, -35]], [[3265, 2206], [5, 115]], [[3270, 2321], [65, -67]], [[4360, 2303], [-13, -51]], [[4347, 2252], [-29, -15]], [[4318, 2237], [-42, 48]], [[4276, 2285], [0, 26]], [[4276, 2311], [84, -8]], [[4855, 2330], [-22, -68]], [[4833, 2262], [-9, -22]], [[4715, 2242], [-4, 57]], [[4711, 2299], [61, 42]], [[4772, 2341], [83, -11]], [[1670, 2232], [-1, -174]], [[1440, 2120], [-2, 47]], [[1438, 2167], [60, 47]], [[1498, 2214], [76, 58]], [[1574, 2272], [96, -40]], [[5330, 2274], [20, 47]], [[5350, 2321], [59, 23]], [[5409, 2344], [21, -39]], [[6038, 2334], [34, -37]], [[5962, 2260], [9, 32]], [[5971, 2292], [67, 42]], [[5957, 2338], [14, -46]], [[5951, 2223], [-42, 57]], [[5909, 2280], [15, 51]], [[5924, 2331], [33, 7]], [[2527, 2147], [-69, -78]], [[2458, 2069], [-41, -37]], [[2278, 2264], [178, -10], [34, 54]], [[2490, 2308], [105, -73]], [[1708, 1989], [-1, 1]], [[1670, 2232], [33, 34]], [[1703, 2266], [20, 16]], [[1723, 2282], [117, -47]], [[5537, 2270], [-38, -24]], [[5466, 2339], [19, 5]], [[5485, 2344], [54, -33]], [[6824, 2327], [14, -159]], [[6769, 2305], [55, 22]], [[5101, 2306], [2, -29]], [[5098, 2257], [-76, 7]], [[5022, 2264], [-18, 64]], [[5004, 2328], [83, 24]], [[5087, 2352], [14, -46]], [[2066, 2273], [54, -113], [75, 8]], [[1974, 2164], [30, 133]], [[2004, 2297], [62, -24]], [[6677, 2336], [-26, -68]], [[6545, 2285], [13, 25]], [[6558, 2310], [45, 9]], [[6603, 2319], [74, 17]], [[2066, 2273], [122, -57]], [[7439, 2233], [-42, 54]], [[7397, 2287], [71, 43]], [[7468, 2330], [18, -93]], [[6111, 2355], [32, -44]], [[6038, 2334], [4, 10]], [[6042, 2344], [69, 11]], [[6849, 2300], [47, -74]], [[6896, 2226], [50, -104]], [[6935, 2108], [-38, -5]], [[6824, 2327], [25, -27]], [[7011, 2301], [33, -44]], [[6948, 2173], [-52, 53]], [[6849, 2300], [59, 41]], [[6908, 2341], [103, -40]], [[4592, 2321], [26, 22]], [[4618, 2343], [63, 22]], [[4681, 2365], [30, -66]], [[7056, 2346], [65, -21]], [[7121, 2325], [91, -89]], [[7011, 2301], [45, 45]], [[7377, 2311], [20, -24]], [[7234, 2250], [64, 97]], [[7298, 2347], [79, -36]], [[5591, 2302], [-9, 36]], [[5582, 2338], [88, 32]], [[5670, 2370], [-47, -104]], [[5007, 2374], [-3, -46]], [[5022, 2264], [-1, -3]], [[4944, 2224], [-3, 23]], [[4941, 2247], [-12, 124]], [[4929, 2371], [78, 3]], [[1284, 2155], [87, 144]], [[1371, 2299], [18, 11]], [[1389, 2310], [49, -143]], [[6302, 2330], [11, -25]], [[6275, 2273], [-20, -49]], [[6255, 2224], [-28, 39]], [[6227, 2263], [-17, 96]], [[6210, 2359], [21, 17]], [[6231, 2376], [71, -46]], [[6677, 2336], [25, 21]], [[6702, 2357], [18, 13]], [[6720, 2370], [10, -85]], [[6142, 2378], [45, -4]], [[6187, 2374], [23, -15]], [[6227, 2263], [-38, -7]], [[6111, 2355], [6, 17]], [[6117, 2372], [25, 6]], [[5287, 2390], [13, -107]], [[5245, 2322], [29, 60]], [[5274, 2382], [13, 8]], [[4480, 2271], [-72, 12]], [[4408, 2283], [-25, 28]], [[4383, 2311], [34, 71]], [[4417, 2382], [36, 7]], [[4453, 2389], [27, -118]], [[5783, 2381], [26, -59]], [[5760, 2319], [-18, 42]], [[5742, 2361], [41, 20]], [[6426, 2386], [22, -13]], [[6448, 2373], [-53, -49]], [[6364, 2333], [6, 46]], [[6370, 2379], [56, 7]], [[5287, 2390], [21, 7]], [[5308, 2397], [42, -76]], [[1574, 2272], [6, 41]], [[1580, 2313], [123, -47]], [[8343, 2297], [9, -23]], [[8185, 2286], [13, 41]], [[8198, 2327], [145, -30]], [[6549, 2376], [9, -66]], [[6472, 2303], [19, 67]], [[6491, 2370], [1, 2]], [[6492, 2372], [57, 4]], [[5101, 2306], [30, 91]], [[5131, 2397], [36, 3]], [[5167, 2400], [16, -64]], [[6448, 2373], [43, -3]], [[6308, 2383], [-6, -53]], [[6231, 2376], [41, 21]], [[6272, 2397], [36, -14]], [[2140, 1785], [-32, 13]], [[1890, 2233], [72, 114]], [[1962, 2347], [42, -50]], [[5405, 2389], [4, -45]], [[5308, 2397], [14, 5]], [[5322, 2402], [83, -13]], [[5670, 2370], [-1, 16]], [[5669, 2386], [24, 19]], [[5693, 2405], [49, -44]], [[4843, 2406], [12, -76]], [[4772, 2341], [-3, 15]], [[4769, 2356], [74, 50]], [[1389, 2310], [43, 22]], [[1432, 2332], [66, -118]], [[6549, 2376], [31, 23]], [[6580, 2399], [23, -80]], [[7225, 2384], [73, -37]], [[7121, 2325], [18, 62]], [[7139, 2387], [86, -3]], [[4719, 2408], [50, -52]], [[4681, 2365], [7, 42]], [[4688, 2407], [12, 14]], [[4700, 2421], [19, -13]], [[4506, 2417], [19, -4]], [[4525, 2413], [1, -126]], [[4528, 2277], [-48, -6]], [[4453, 2389], [30, 21]], [[4483, 2410], [23, 7]], [[6356, 2408], [14, -29]], [[6308, 2383], [48, 25]], [[6117, 2408], [0, -36]], [[6042, 2344], [-8, 78]], [[6034, 2422], [83, -14]], [[7549, 2326], [34, -67]], [[7468, 2330], [81, -4]], [[4929, 2371], [-4, 34]], [[4925, 2405], [65, 22]], [[4990, 2427], [17, -53]], [[5183, 2427], [91, -45]], [[5167, 2400], [16, 27]], [[5405, 2389], [50, 32]], [[5455, 2421], [30, -77]], [[4558, 2421], [60, -78]], [[4525, 2413], [33, 8]], [[4558, 2421], [9, 9]], [[4567, 2430], [121, -23]], [[4200, 2369], [-5, -123]], [[4131, 2266], [22, 171]], [[4153, 2437], [47, -68]], [[7110, 2424], [29, -37]], [[7056, 2346], [-17, 26]], [[7039, 2372], [71, 52]], [[5930, 2447], [5, -5]], [[5935, 2442], [22, -104]], [[5924, 2331], [-36, 38]], [[5888, 2369], [-15, 52]], [[5873, 2421], [26, 22]], [[5899, 2443], [31, 4]], [[6384, 2444], [42, -58]], [[6356, 2408], [0, 33]], [[6356, 2441], [28, 3]], [[5582, 2338], [-53, 120]], [[5529, 2458], [81, -92], [59, 20]], [[5289, 2448], [33, -46]], [[5183, 2427], [58, 33]], [[5241, 2460], [48, -12]], [[5790, 2414], [-7, -33]], [[5693, 2405], [30, 58]], [[5723, 2463], [67, -49]], [[7391, 2419], [43, -24]], [[7434, 2395], [-57, -84]], [[7225, 2384], [47, 57]], [[7272, 2441], [119, -22]], [[6466, 2444], [26, -72]], [[6384, 2444], [82, 0]], [[5984, 2452], [50, -30]], [[5935, 2442], [49, 10]], [[6263, 2446], [9, -49]], [[6187, 2374], [5, 82]], [[6192, 2456], [71, -10]], [[6897, 2449], [11, -108]], [[6720, 2370], [81, 66]], [[6801, 2436], [70, 1]], [[6871, 2437], [26, 12]], [[5137, 2449], [-6, -52]], [[5087, 2352], [-13, 33]], [[5074, 2385], [30, 86]], [[5104, 2471], [33, -22]], [[1666, 2381], [57, -99]], [[1580, 2313], [-1, 59]], [[1579, 2372], [38, 35]], [[1617, 2407], [49, -26]], [[6621, 2466], [16, -22]], [[6637, 2444], [65, -87]], [[6580, 2399], [-4, 59]], [[6576, 2458], [45, 8]], [[7104, 2450], [6, -26]], [[7039, 2372], [-28, 65]], [[7011, 2437], [15, 25]], [[7026, 2462], [78, -12]], [[4666, 2482], [34, -61]], [[4567, 2430], [19, 60]], [[4586, 2490], [80, -8]], [[4383, 2311], [-10, 2]], [[4373, 2313], [-93, 176]], [[4280, 2489], [137, -107]], [[6142, 2378], [-28, 122]], [[6114, 2500], [78, -44]], [[3038, 2471], [-45, -78], [88, -203]], [[3027, 2069], [-40, 31]], [[2985, 2110], [-12, 117], [-90, 208]], [[2883, 2435], [155, 36]], [[4824, 2508], [19, -102]], [[4719, 2408], [28, 25]], [[4747, 2433], [77, 75]], [[8034, 2449], [10, -64]], [[8044, 2385], [-113, -67]], [[7931, 2318], [-47, 44]], [[7884, 2362], [19, 59]], [[7903, 2421], [52, 25]], [[7955, 2446], [79, 3]], [[2729, 2467], [106, -168], [-51, -118], [54, -114]], [[2490, 2308], [40, 63]], [[2530, 2371], [98, 89]], [[2628, 2460], [101, 7]], [[6897, 2449], [35, 24]], [[6932, 2473], [79, -36]], [[1745, 2453], [118, -60]], [[1863, 2393], [-6, -139]], [[1666, 2381], [79, 72]], [[5455, 2421], [11, 99]], [[5466, 2520], [63, -62]], [[5146, 2515], [22, -17]], [[5168, 2498], [-31, -49]], [[5104, 2471], [-10, 31]], [[5094, 2502], [52, 13]], [[7884, 2362], [-122, 25]], [[7762, 2387], [-42, -5]], [[7720, 2382], [63, 72]], [[7783, 2454], [9, 30]], [[7792, 2484], [111, -63]], [[1529, 2451], [50, -79]], [[1432, 2332], [70, 119]], [[1502, 2451], [27, 0]], [[6466, 2444], [4, 21]], [[6470, 2465], [72, 52]], [[6542, 2517], [34, -59]], [[8210, 2470], [12, -35]], [[8222, 2435], [-55, -71]], [[8167, 2364], [-123, 21]], [[8034, 2449], [22, 6]], [[8056, 2455], [87, -7]], [[8143, 2448], [67, 22]], [[6801, 2436], [-30, 17]], [[6771, 2453], [107, 63]], [[6878, 2516], [-7, -79]], [[7495, 2447], [-61, -52]], [[7391, 2419], [74, 83]], [[7465, 2502], [30, -55]], [[4694, 2529], [53, -96]], [[4666, 2482], [-5, 48]], [[4661, 2530], [33, -1]], [[6878, 2516], [54, -43]], [[8464, 2451], [44, -63]], [[8508, 2388], [55, -81]], [[8563, 2307], [15, -13]], [[8578, 2294], [-35, -134]], [[8543, 2160], [10, -132]], [[8553, 2028], [-14, -130]], [[8539, 1898], [-69, -120]], [[8470, 1778], [-38, -59]], [[8432, 1719], [-45, -7]], [[8387, 1712], [32, 274]], [[8427, 2270], [19, 108], [-37, 99]], [[8409, 2477], [55, -26]], [[6704, 2516], [67, -63]], [[6637, 2444], [56, 83]], [[6693, 2527], [11, -11]], [[2465, 2494], [9, -47], [-110, -106], [-101, -27], [-72, 64]], [[2191, 2378], [17, 45], [205, 43], [32, 34]], [[2445, 2500], [20, -6]], [[7291, 2476], [-19, -35]], [[7104, 2450], [-2, 15]], [[7102, 2465], [29, 59]], [[7131, 2524], [160, -48]], [[3304, 2523], [59, -224], [-28, -45]], [[3270, 2321], [-19, 113], [45, 95]], [[3296, 2529], [8, -6]], [[6308, 2544], [48, -103]], [[6263, 2446], [-5, 66]], [[6258, 2512], [50, 32]], [[4990, 2427], [-23, 126]], [[4967, 2553], [15, 0]], [[4982, 2553], [92, -168]], [[3210, 2278], [-17, 211]], [[3193, 2489], [54, 46]], [[3247, 2535], [49, -6]], [[4023, 2541], [56, -227]], [[4002, 2281], [-38, 101], [6, 169]], [[3970, 2551], [53, -10]], [[5873, 2421], [-83, -7]], [[5723, 2463], [-6, 57]], [[5717, 2520], [86, 37]], [[5803, 2557], [96, -114]], [[4416, 2556], [67, -146]], [[4280, 2489], [-14, 23]], [[4266, 2512], [150, 44]], [[8387, 1712], [-109, 19]], [[8307, 1807], [5, 181]], [[8343, 2297], [9, 136]], [[8352, 2433], [32, 70]], [[8384, 2503], [25, -26]], [[4925, 2405], [-15, 38]], [[4910, 2443], [-12, 103]], [[4898, 2546], [69, 7]], [[4585, 2559], [1, -69]], [[4506, 2417], [-52, 145]], [[4454, 2562], [131, -3]], [[1962, 2347], [3, 63]], [[1965, 2410], [101, -27]], [[2066, 2383], [125, -5]], [[2465, 2494], [21, 33]], [[2486, 2527], [44, -156]], [[3894, 2319], [-63, 146], [52, 81]], [[3883, 2546], [87, 5]], [[2220, 2514], [225, -14]], [[2066, 2383], [-2, 65]], [[2064, 2448], [156, 66]], [[4416, 2556], [27, 12]], [[4443, 2568], [11, -6]], [[6311, 2567], [100, -39]], [[6411, 2528], [19, -28]], [[6430, 2500], [40, -35]], [[6308, 2544], [3, 23]], [[8290, 2501], [17, -40]], [[8307, 2461], [-85, -26]], [[8210, 2470], [20, 35]], [[8230, 2505], [60, -4]], [[5984, 2452], [10, 124]], [[5994, 2576], [123, -168]], [[3423, 2243], [-2, 138], [121, 186]], [[3542, 2567], [-41, -80], [-1, -228]], [[5994, 2576], [37, 5]], [[6031, 2581], [83, -81]], [[5472, 2572], [-6, -52]], [[5289, 2448], [0, 65]], [[5289, 2513], [183, 59]], [[4827, 2509], [-3, -1]], [[4694, 2529], [93, 59]], [[4787, 2588], [40, -79]], [[4848, 2583], [50, -37]], [[4910, 2443], [-83, 66]], [[4787, 2588], [61, -5]], [[7437, 2551], [28, -49]], [[7291, 2476], [19, 42]], [[7310, 2518], [15, 1]], [[7325, 2519], [73, 46]], [[7398, 2565], [39, -14]], [[3304, 2523], [47, 48]], [[3351, 2571], [26, 10]], [[3377, 2581], [81, -60], [84, 46]], [[8042, 2518], [14, -63]], [[7955, 2446], [-21, 75]], [[7934, 2521], [108, -3]], [[7102, 2465], [-16, 102]], [[7086, 2567], [11, 12]], [[7097, 2579], [34, -55]], [[7485, 2569], [34, -3]], [[7519, 2566], [54, -90], [-39, -67]], [[7534, 2409], [-39, 38]], [[7437, 2551], [48, 18]], [[7026, 2462], [-8, 121]], [[7018, 2583], [-2, 3]], [[7016, 2586], [70, -19]], [[3825, 2304], [-29, 144], [12, 146]], [[3808, 2594], [75, -48]], [[3608, 2603], [3, -5]], [[3611, 2598], [33, -181], [-30, -128]], [[3542, 2567], [10, 16]], [[3552, 2583], [56, 20]], [[6704, 2516], [134, 82]], [[6838, 2598], [2, 3]], [[6840, 2601], [38, -85]], [[1673, 2551], [72, -98]], [[1617, 2407], [42, 145]], [[1659, 2552], [14, -1]], [[6840, 2601], [18, 2]], [[6858, 2603], [160, -20]], [[7792, 2484], [85, 102]], [[7877, 2586], [14, 5]], [[7891, 2591], [43, -70]], [[1529, 2451], [57, 102]], [[1586, 2553], [73, -1]], [[6252, 2514], [6, -2]], [[6031, 2581], [26, 54]], [[6057, 2635], [124, -115], [71, -6]], [[5803, 2557], [11, 88]], [[5814, 2645], [116, -198]], [[6693, 2527], [-10, 88]], [[6683, 2615], [90, 19]], [[6773, 2634], [65, -36]], [[7659, 2611], [58, -43]], [[7717, 2568], [-34, -158]], [[7683, 2410], [-86, -26]], [[7597, 2384], [-10, 7]], [[7587, 2391], [36, 217]], [[7623, 2608], [36, 3]], [[7587, 2391], [-53, 18]], [[7519, 2566], [104, 42]], [[1171, 2514], [-4, -87]], [[1167, 2427], [-69, -10], [-104, 125]], [[994, 2542], [142, 20]], [[1136, 2562], [35, -48]], [[6686, 2621], [-4, -5]], [[6682, 2616], [-64, -46], [3, -104]], [[6542, 2517], [-25, 86]], [[6517, 2603], [-1, 4]], [[6516, 2607], [109, 35]], [[6625, 2642], [61, -21]], [[5809, 2652], [5, -7]], [[5717, 2520], [-59, 130]], [[5658, 2650], [151, 2]], [[7152, 2637], [23, -3]], [[7175, 2634], [107, -102]], [[7282, 2532], [28, -14]], [[7097, 2579], [55, 58]], [[7215, 2633], [67, -101]], [[7175, 2634], [40, -1]], [[7409, 2619], [-11, -54]], [[7325, 2519], [4, 118]], [[7329, 2637], [4, 4]], [[7333, 2641], [76, -22]], [[9354, 2530], [-6, -82]], [[9348, 2448], [-112, -53]], [[9236, 2395], [-47, 23]], [[9189, 2418], [47, 11], [40, 148], [78, -47]], [[7783, 2454], [-34, 130]], [[7749, 2584], [35, 53]], [[7784, 2637], [93, -51]], [[2408, 2550], [78, -23]], [[2220, 2514], [-23, 60]], [[2197, 2574], [20, 53]], [[2217, 2627], [191, -77]], [[1954, 2570], [7, -19]], [[1961, 2551], [-114, -27], [-38, 56]], [[1809, 2580], [63, 34]], [[1872, 2614], [82, -44]], [[1666, 2595], [7, -44]], [[1586, 2553], [-1, 10]], [[1585, 2563], [81, 32]], [[5469, 2695], [16, -50]], [[5485, 2645], [-13, -73]], [[5289, 2513], [-20, 110]], [[5269, 2623], [143, 56]], [[5412, 2679], [19, 6]], [[5431, 2685], [38, 10]], [[4982, 2553], [29, 162]], [[5011, 2715], [83, -213]], [[1961, 2551], [14, 1]], [[1975, 2552], [12, -72]], [[1987, 2480], [-124, -87]], [[1666, 2595], [54, 60]], [[1720, 2655], [89, -75]], [[3351, 2571], [-78, 130]], [[3273, 2701], [104, -120]], [[6896, 2714], [-52, -78]], [[6844, 2636], [-10, 68]], [[6834, 2704], [62, 10]], [[5627, 2736], [31, -86]], [[5485, 2645], [96, 63]], [[5581, 2708], [46, 28]], [[6844, 2636], [14, -33]], [[6773, 2634], [3, 40]], [[6776, 2674], [43, 43]], [[6819, 2717], [15, -13]], [[6311, 2567], [12, 160]], [[6323, 2727], [88, -199]], [[6677, 2719], [9, -98]], [[6625, 2642], [-2, 81]], [[6623, 2723], [54, -4]], [[3249, 2719], [24, -18]], [[3247, 2535], [-15, 119], [-63, 45]], [[3169, 2699], [80, 20]], [[7409, 2619], [22, 68]], [[7431, 2687], [55, 23]], [[7486, 2710], [-1, -141]], [[7117, 2681], [35, -44]], [[7016, 2586], [-11, 98]], [[7005, 2684], [102, 32]], [[7107, 2716], [10, -35]], [[7220, 2718], [-5, -85]], [[7117, 2681], [53, 28]], [[7170, 2709], [44, 11]], [[7214, 2720], [6, -2]], [[4542, 2742], [-87, -84]], [[4455, 2658], [-20, 37]], [[4435, 2695], [107, 47]], [[4408, 2737], [27, -42]], [[4455, 2658], [-35, -76]], [[4420, 2582], [-116, 152]], [[4304, 2734], [104, 3]], [[7220, 2718], [109, -81]], [[5066, 2749], [91, -91]], [[5157, 2658], [-11, -143]], [[5011, 2715], [55, 34]], [[8342, 2678], [81, 2]], [[8423, 2680], [-7, -67]], [[8416, 2613], [-27, -77]], [[8389, 2536], [-99, -35]], [[8230, 2505], [-10, 169]], [[8220, 2674], [32, 24]], [[8252, 2698], [90, -20]], [[6715, 2753], [61, -79]], [[6683, 2615], [-1, 1]], [[6677, 2719], [38, 34]], [[1118, 2675], [55, -67]], [[1173, 2608], [-37, -46]], [[994, 2542], [-5, 19]], [[989, 2561], [40, 82]], [[1029, 2643], [89, 32]], [[6932, 2755], [73, -71]], [[6896, 2714], [24, 45]], [[6920, 2759], [12, -4]], [[2293, 2730], [140, -130], [-25, -50]], [[2217, 2627], [-56, 23]], [[2161, 2650], [20, 72]], [[2181, 2722], [112, 8]], [[7122, 2765], [48, -56]], [[7107, 2716], [-32, 39]], [[7075, 2755], [24, 17]], [[7099, 2772], [23, -7]], [[6077, 2708], [-20, -73]], [[5809, 2652], [-7, 47]], [[5802, 2699], [106, 88]], [[5908, 2787], [105, -10], [64, -69]], [[2016, 2748], [46, -107]], [[2062, 2641], [-87, -89]], [[1954, 2570], [6, 155]], [[1960, 2725], [56, 23]], [[1872, 2614], [-47, 66]], [[1825, 2680], [95, 71]], [[1920, 2751], [40, -26]], [[6904, 2772], [16, -13]], [[6819, 2717], [-22, 42]], [[6797, 2759], [107, 13]], [[1049, 2714], [56, 0]], [[1105, 2714], [13, -39]], [[1029, 2643], [-30, 75]], [[999, 2718], [50, -4]], [[5241, 2460], [-17, 52]], [[5224, 2512], [22, 120], [-36, 184]], [[5210, 2816], [59, -193]], [[7156, 2795], [37, -27]], [[7193, 2768], [21, -48]], [[7122, 2765], [34, 30]], [[6715, 2753], [37, 54]], [[6752, 2807], [45, -48]], [[6516, 2607], [-46, 127]], [[6470, 2734], [105, 78]], [[6575, 2812], [48, -89]], [[5896, 2809], [12, -22]], [[5802, 2699], [-89, 63]], [[5713, 2762], [183, 47]], [[1659, 2761], [36, -55]], [[1695, 2706], [25, -51]], [[1585, 2563], [-84, 65]], [[1501, 2628], [33, 71]], [[1534, 2699], [125, 62]], [[1784, 2741], [41, -61]], [[1695, 2706], [89, 35]], [[7662, 2784], [109, -102]], [[7771, 2682], [6, -16]], [[7777, 2666], [-107, -36]], [[7670, 2630], [-72, 29], [7, 96]], [[7605, 2755], [13, 41]], [[7618, 2796], [44, -12]], [[5224, 2512], [-31, 7]], [[5193, 2519], [-36, 139]], [[5066, 2749], [18, 40]], [[5084, 2789], [126, 27]], [[6320, 2802], [3, -75]], [[6252, 2514], [-50, 201], [50, 88]], [[6252, 2803], [48, 29]], [[6300, 2832], [20, -30]], [[2161, 2650], [-99, -9]], [[2016, 2748], [3, 17]], [[2019, 2765], [62, 24]], [[2081, 2789], [100, -67]], [[5431, 2685], [-42, 156]], [[5389, 2841], [80, -146]], [[8618, 2774], [83, -51], [28, -105]], [[8729, 2618], [-26, 5]], [[8703, 2623], [-67, 6]], [[8636, 2629], [-77, 83]], [[8559, 2712], [59, 62]], [[7250, 2818], [82, -152]], [[7332, 2666], [1, -25]], [[7193, 2768], [57, 50]], [[1468, 2765], [66, -66]], [[1501, 2628], [-134, -56]], [[1367, 2572], [-32, 16]], [[1335, 2588], [4, 11]], [[1339, 2599], [86, 186]], [[1425, 2785], [43, -20]], [[6200, 2841], [52, -38]], [[6077, 2708], [57, 145], [66, -12]], [[5412, 2679], [-62, -4], [7, 178]], [[5357, 2853], [9, 11]], [[5366, 2864], [23, -23]], [[7012, 2847], [63, -92]], [[6932, 2755], [42, 84]], [[6974, 2839], [38, 8]], [[5835, 2876], [61, -67]], [[5713, 2762], [-22, 17]], [[5691, 2779], [49, 92]], [[5740, 2871], [95, 5]], [[7605, 2755], [-78, -2]], [[7527, 2753], [28, 98]], [[7555, 2851], [63, -55]], [[7068, 2852], [31, -80]], [[7012, 2847], [56, 5]], [[838, 2746], [-28, -161]], [[810, 2585], [-140, 158]], [[670, 2743], [45, 32]], [[715, 2775], [123, -29]], [[3169, 2699], [-1, 0]], [[3168, 2699], [46, 123], [89, 46]], [[3303, 2868], [26, -73], [-80, -76]], [[1403, 2809], [22, -24]], [[1339, 2599], [-42, 184]], [[1297, 2783], [106, 26]], [[1188, 2804], [23, -102], [-38, -94]], [[1105, 2714], [58, 90]], [[1163, 2804], [25, 0]], [[1335, 2588], [-164, -74]], [[1188, 2804], [109, -21]], [[1917, 2820], [3, -69]], [[1784, 2741], [49, 94]], [[1833, 2835], [84, -15]], [[7249, 2857], [1, -39]], [[7156, 2795], [-31, 56]], [[7125, 2851], [76, 31]], [[7201, 2882], [48, -25]], [[5498, 2857], [8, -82], [75, -67]], [[5366, 2864], [132, -7]], [[2772, 2873], [-117, -174]], [[2655, 2699], [-37, 148]], [[2618, 2847], [154, 26]], [[5630, 2744], [-3, -8]], [[5498, 2857], [72, 32]], [[5570, 2889], [60, -145]], [[1012, 2794], [37, -80]], [[999, 2718], [-108, -15]], [[891, 2703], [-53, 43]], [[715, 2775], [13, 3]], [[728, 2778], [82, 31]], [[810, 2809], [202, -15]], [[7093, 2896], [32, -45]], [[7068, 2852], [-17, 48]], [[7051, 2900], [42, -4]], [[7805, 2883], [78, -51]], [[7883, 2832], [28, -26]], [[7911, 2806], [-140, -124]], [[7662, 2784], [73, 102]], [[7735, 2886], [70, -3]], [[4408, 2737], [174, 192]], [[4582, 2929], [-40, -187]], [[7571, 2895], [-16, -44]], [[7527, 2753], [-41, -43]], [[7431, 2687], [-13, 93]], [[7418, 2780], [11, 55]], [[7429, 2835], [3, 14]], [[7432, 2849], [21, 22]], [[7453, 2871], [88, 30]], [[7541, 2901], [30, -6]], [[1610, 2862], [49, -101]], [[1468, 2765], [142, 97]], [[8207, 2884], [-11, -71]], [[8196, 2813], [-56, -110]], [[8140, 2703], [-26, -7]], [[8114, 2696], [-62, 68]], [[8052, 2764], [88, 87]], [[8140, 2851], [67, 33]], [[7374, 2915], [-11, -38]], [[7363, 2877], [-63, 10]], [[7300, 2887], [-15, 31]], [[7285, 2918], [89, -3]], [[1012, 2794], [43, 25]], [[1055, 2819], [92, 40]], [[1147, 2859], [20, 5]], [[1167, 2864], [-4, -60]], [[4619, 2945], [2, -159], [-49, -56], [13, -171]], [[4443, 2568], [-23, 14]], [[4582, 2929], [-4, 5]], [[4578, 2934], [23, 18]], [[4601, 2952], [18, -7]], [[4666, 2943], [-53, -205], [55, -114], [-7, -94]], [[4619, 2945], [47, -2]], [[5115, 2958], [134, -6]], [[5249, 2952], [108, -99]], [[5084, 2789], [-17, 159]], [[5067, 2948], [48, 10]], [[2421, 2917], [-50, -88], [147, -100]], [[2518, 2729], [90, -82]], [[2608, 2647], [20, -187]], [[2293, 2730], [6, 37]], [[2299, 2767], [36, 156]], [[2335, 2923], [86, -6]], [[2421, 2917], [41, 20]], [[2462, 2937], [-22, -77], [78, -131]], [[7437, 2939], [16, -68]], [[7432, 2849], [-69, 28]], [[7374, 2915], [2, 7]], [[7376, 2922], [61, 17]], [[7679, 2943], [56, -57]], [[7571, 2895], [43, 55]], [[7614, 2950], [65, -7]], [[4850, 2979], [-32, -187], [30, -209]], [[4666, 2943], [5, 4]], [[4671, 2947], [80, 33]], [[4751, 2980], [44, 0]], [[4795, 2980], [47, 7]], [[4842, 2987], [8, -8]], [[4914, 2979], [98, -14]], [[5012, 2965], [34, 1]], [[5046, 2966], [21, -18]], [[4850, 2979], [37, 11]], [[4887, 2990], [27, -11]], [[2515, 2950], [103, -103]], [[2655, 2699], [-47, -52]], [[2462, 2937], [13, 10]], [[2475, 2947], [40, 3]], [[2299, 2767], [-14, 6]], [[2285, 2773], [-40, 44], [10, 139]], [[2255, 2956], [80, -33]], [[7443, 2953], [-6, -14]], [[7376, 2922], [-47, 49]], [[7329, 2971], [114, -18]], [[2872, 2976], [15, -23]], [[2887, 2953], [-36, -46]], [[2851, 2907], [-63, -22]], [[2788, 2885], [24, 60]], [[2812, 2945], [60, 31]], [[677, 2854], [51, -76]], [[670, 2743], [-83, 103]], [[587, 2846], [90, 8]], [[8052, 2764], [-30, 34]], [[8022, 2798], [40, 73], [-8, 93]], [[8054, 2964], [86, -113]], [[2285, 2773], [-93, 30], [35, 160]], [[2227, 2963], [28, -7]], [[6983, 2955], [68, -55]], [[6974, 2839], [-74, 74], [11, 84]], [[6911, 2997], [72, -42]], [[7443, 2953], [17, 35]], [[7460, 2988], [81, -87]], [[1418, 2854], [-15, -45]], [[1167, 2864], [111, 59]], [[1278, 2923], [15, 11]], [[1293, 2934], [125, -80]], [[2081, 2789], [79, 165]], [[2160, 2954], [31, 20]], [[2191, 2974], [36, -11]], [[1609, 2891], [2, -1]], [[1611, 2890], [-1, -28]], [[1418, 2854], [32, 77]], [[1450, 2931], [73, 21]], [[1523, 2952], [86, -61]], [[3039, 2957], [1, -32]], [[3040, 2925], [-64, -19]], [[2976, 2906], [-94, -48]], [[2882, 2858], [-31, 49]], [[2887, 2953], [72, 52]], [[2959, 3005], [80, -48]], [[2783, 2962], [29, -17]], [[2788, 2885], [-16, -12]], [[2515, 2950], [70, 46]], [[2585, 2996], [54, -35], [144, 1]], [[6904, 2772], [-68, 140], [29, 93]], [[6865, 3005], [23, 11]], [[6888, 3016], [23, -19]], [[7992, 2956], [-44, -70]], [[7948, 2886], [-75, -26]], [[7873, 2860], [14, 86]], [[7887, 2946], [105, 10]], [[6752, 2807], [69, 212]], [[6821, 3019], [44, -14]], [[6983, 2955], [101, 68]], [[7084, 3023], [9, -127]], [[1055, 2819], [-71, 110]], [[984, 2929], [2, 5]], [[986, 2934], [70, 20]], [[1056, 2954], [91, -95]], [[8486, 2983], [83, -90], [49, -119]], [[8559, 2712], [-60, 23]], [[8499, 2735], [-76, -55]], [[8342, 2678], [-11, 64]], [[8331, 2742], [12, 69]], [[8343, 2811], [93, 79]], [[8436, 2890], [50, 93]], [[7873, 2860], [10, -28]], [[7805, 2883], [42, 133]], [[7847, 3016], [40, -70]], [[5392, 3043], [115, -58]], [[5507, 2985], [55, -28]], [[5562, 2957], [8, -68]], [[5249, 2952], [18, 84]], [[5267, 3036], [76, 20]], [[5343, 3056], [49, -13]], [[6168, 3053], [75, -23]], [[6243, 3030], [91, -131], [-12, -51]], [[6322, 2848], [-22, -16]], [[6200, 2841], [-39, 67]], [[6161, 2908], [-53, 69]], [[6108, 2977], [33, 74]], [[6141, 3051], [27, 2]], [[4361, 3049], [-20, -141]], [[4341, 2908], [-160, -71]], [[4181, 2837], [-37, 5]], [[4144, 2842], [26, 82], [112, 33], [79, 92]], [[7686, 3011], [-7, -68]], [[7614, 2950], [-31, 43]], [[7583, 2993], [28, 38]], [[7611, 3031], [75, -20]], [[5706, 3044], [-23, -78]], [[5683, 2966], [-23, 100]], [[5660, 3066], [46, -22]], [[4061, 2976], [-62, -9]], [[3999, 2967], [142, 95]], [[4141, 3062], [-80, -86]], [[810, 2809], [-10, 112]], [[800, 2921], [94, 36]], [[894, 2957], [90, -28]], [[1316, 2985], [66, -4]], [[1382, 2981], [68, -50]], [[1293, 2934], [23, 51]], [[4472, 2950], [-131, -42]], [[4361, 3049], [32, 29]], [[4393, 3078], [79, -128]], [[5474, 3081], [64, -31]], [[5538, 3050], [-31, -65]], [[5392, 3043], [82, 38]], [[2773, 3033], [10, -71]], [[2585, 2996], [55, 34]], [[2640, 3030], [133, 3]], [[5858, 3080], [18, -11]], [[5876, 3069], [73, -104], [155, -71], [57, 14]], [[5835, 2876], [23, 204]], [[677, 2854], [8, 113]], [[685, 2967], [12, 7]], [[697, 2974], [103, -53]], [[5633, 3060], [-71, -103]], [[5538, 3050], [22, 29]], [[5560, 3079], [73, -19]], [[6888, 3016], [81, 44]], [[6969, 3060], [73, 12]], [[7042, 3072], [42, -49]], [[7526, 3051], [1, 0]], [[7527, 3051], [56, -58]], [[7460, 2988], [-20, 26]], [[7440, 3014], [30, 18]], [[7470, 3032], [56, 19]], [[5987, 3099], [121, -122]], [[5876, 3069], [58, 23]], [[5934, 3092], [53, 7]], [[7837, 3033], [10, -17]], [[7686, 3011], [4, 32]], [[7690, 3043], [103, 26]], [[7793, 3069], [44, -36]], [[7112, 3072], [6, -11]], [[7118, 3061], [13, -107], [70, -72]], [[7042, 3072], [70, 0]], [[6019, 3109], [122, -58]], [[5987, 3099], [32, 10]], [[7577, 3079], [34, -48]], [[7527, 3051], [50, 28]], [[2346, 3077], [129, -130]], [[2191, 2974], [50, 92]], [[2241, 3066], [105, 11]], [[4061, 2976], [-29, -103]], [[4032, 2873], [-166, -2]], [[3866, 2871], [13, 51]], [[3879, 2922], [120, 45]], [[4367, 3119], [23, -31]], [[4390, 3088], [3, -10]], [[4144, 2842], [-16, 4]], [[4128, 2846], [-9, 4]], [[4119, 2850], [-21, 7]], [[4098, 2857], [58, 95]], [[4156, 2952], [130, 136]], [[4286, 3088], [81, 31]], [[7470, 3032], [-6, 58]], [[7464, 3090], [0, 6]], [[7464, 3096], [62, -45]], [[1056, 2954], [57, 67]], [[1113, 3021], [165, -98]], [[4523, 2948], [-51, 2]], [[4390, 3088], [125, -32], [8, -108]], [[587, 2846], [-10, 109]], [[577, 2955], [108, 12]], [[4275, 3121], [11, -33]], [[4156, 2952], [56, 158], [63, 11]], [[5474, 3081], [83, 54]], [[5557, 3135], [3, -56]], [[1886, 3050], [113, -83]], [[1999, 2967], [-66, -65]], [[1933, 2902], [-121, 106]], [[1812, 3008], [-7, 46]], [[1805, 3054], [81, -4]], [[986, 2934], [17, 87]], [[1003, 3021], [36, 21]], [[1039, 3042], [62, 15]], [[1101, 3057], [12, -36]], [[2396, 3109], [237, -34]], [[2633, 3075], [7, -45]], [[2346, 3077], [10, 20]], [[2356, 3097], [32, 13]], [[2388, 3110], [8, -1]], [[1523, 2952], [12, 43]], [[1535, 2995], [154, 97]], [[1689, 3092], [-2, -135], [-78, -66]], [[3006, 3133], [55, -62], [-22, -114]], [[2959, 3005], [-85, 85]], [[2874, 3090], [-1, 4]], [[2873, 3094], [133, 39]], [[5726, 3165], [-20, -121]], [[5660, 3066], [-17, 7]], [[5643, 3073], [65, 91]], [[5708, 3164], [18, 1]], [[1978, 3049], [66, -51]], [[2044, 2998], [-45, -31]], [[1886, 3050], [31, 61]], [[1917, 3111], [61, -62]], [[8151, 3120], [105, -54]], [[8256, 3066], [-3, -84]], [[8253, 2982], [-101, -12]], [[8152, 2970], [-95, 21]], [[8057, 2991], [-7, 0]], [[8050, 2991], [11, 59]], [[8061, 3050], [2, 42]], [[8063, 3092], [88, 28]], [[6190, 3106], [-22, -53]], [[6019, 3109], [20, 50]], [[6039, 3159], [151, -53]], [[7413, 3118], [46, -24]], [[7459, 3094], [-118, -30], [-49, 57]], [[7292, 3121], [-6, 16]], [[7286, 3137], [14, 11]], [[7300, 3148], [113, -30]], [[2183, 3099], [58, -33]], [[2160, 2954], [-41, 28]], [[2119, 2982], [-75, 16]], [[1978, 3049], [55, 63]], [[2033, 3112], [150, -13]], [[5425, 3168], [13, -13]], [[5438, 3155], [119, -20]], [[5343, 3056], [82, 112]], [[7292, 3121], [32, -80]], [[7324, 3041], [-19, -21]], [[7305, 3020], [-135, 100]], [[7170, 3120], [13, 36]], [[7183, 3156], [103, -19]], [[1512, 3042], [23, -47]], [[1382, 2981], [-21, 134]], [[1361, 3115], [151, -73]], [[5867, 3194], [-21, -101]], [[5846, 3093], [-51, 87]], [[5795, 3180], [62, 16]], [[5857, 3196], [10, -2]], [[2878, 3138], [-5, -44]], [[2874, 3090], [-92, -52]], [[2782, 3038], [6, 81]], [[2788, 3119], [18, 43]], [[2806, 3162], [72, -24]], [[2664, 3135], [-4, -29]], [[2660, 3106], [-27, -31]], [[2396, 3109], [94, 30]], [[2490, 3139], [174, -4]], [[1101, 3057], [9, 21]], [[1110, 3078], [120, 39]], [[1230, 3117], [86, -132]], [[6259, 3166], [35, -94]], [[6294, 3072], [-51, -42]], [[6190, 3106], [-4, 83]], [[6186, 3189], [1, 2]], [[6187, 3191], [72, -25]], [[7040, 3149], [-71, -89]], [[6821, 3019], [-124, 162]], [[6697, 3181], [214, -26]], [[6911, 3155], [129, -6]], [[5846, 3093], [12, -13]], [[5740, 2871], [-57, 95]], [[5726, 3165], [41, 34]], [[5767, 3199], [28, -19]], [[875, 3057], [19, -100]], [[697, 2974], [25, 89], [85, 38]], [[807, 3101], [68, -44]], [[6408, 3089], [-114, -17]], [[6259, 3166], [19, 35]], [[6278, 3201], [74, -22], [56, -90]], [[986, 3107], [53, -65]], [[1003, 3021], [-78, 60]], [[925, 3081], [48, 32]], [[973, 3113], [13, -6]], [[6169, 3191], [17, -2]], [[6039, 3159], [1, 37]], [[6040, 3196], [24, -5]], [[6064, 3191], [105, 0]], [[7484, 3143], [-20, -47]], [[7464, 3090], [-5, 4]], [[7413, 3118], [21, 45]], [[7434, 3163], [50, -20]], [[4704, 3209], [47, -229]], [[4671, 2947], [-18, 267]], [[4653, 3214], [51, -5]], [[5020, 3206], [26, -240]], [[5012, 2965], [-67, 170], [29, 62]], [[4974, 3197], [46, 9]], [[5934, 3092], [20, 124]], [[5954, 3216], [3, -1]], [[5957, 3215], [83, -19]], [[8066, 3161], [-3, -69]], [[8061, 3050], [-67, 26]], [[7994, 3076], [-14, 83]], [[7980, 3159], [86, 2]], [[7595, 3095], [-18, -16]], [[7484, 3143], [40, 53]], [[7524, 3196], [71, -101]], [[3371, 3040], [61, -89]], [[3432, 2951], [-71, -46]], [[3361, 2905], [-54, 21]], [[3307, 2926], [-107, 30]], [[3200, 2956], [-124, 203]], [[3076, 3159], [29, 25]], [[3105, 3184], [21, 18]], [[3126, 3202], [81, -24], [32, -81], [132, -57]], [[7692, 3190], [18, -41]], [[7710, 3149], [-55, -35]], [[7655, 3114], [37, 76]], [[7300, 3148], [-2, 7]], [[7298, 3155], [72, 48]], [[7370, 3203], [64, -40]], [[5683, 3207], [25, -43]], [[5643, 3073], [-10, -13]], [[5438, 3155], [64, 74], [181, -22]], [[4098, 2857], [-66, 16]], [[4141, 3062], [13, 77]], [[4154, 3139], [61, 94]], [[4215, 3233], [60, -112]], [[5222, 3192], [45, -156]], [[5115, 2958], [41, 102], [-27, 171]], [[5129, 3231], [93, -39]], [[1351, 3163], [10, -48]], [[1230, 3117], [13, 32]], [[1243, 3149], [35, 5]], [[1278, 3154], [73, 9]], [[6620, 3168], [-24, -40]], [[6596, 3128], [-74, 107]], [[6522, 3235], [98, -67]], [[1659, 3163], [50, -31]], [[1709, 3132], [-15, -39]], [[1694, 3093], [-5, -1]], [[1512, 3042], [64, 139]], [[1576, 3181], [83, -18]], [[7080, 3203], [-40, -54]], [[6911, 3155], [3, 23]], [[6914, 3178], [166, 25]], [[4058, 3225], [-266, -203]], [[3792, 3022], [42, 113]], [[3834, 3135], [117, 28], [60, 79]], [[4011, 3242], [47, -17]], [[6286, 3386], [-4, -11]], [[6282, 3375], [-13, -68]], [[6269, 3307], [9, -106]], [[6278, 3201], [-93, 1]], [[6185, 3202], [23, 166]], [[6208, 3368], [15, 30]], [[6223, 3398], [63, -12]], [[1102, 3147], [8, -69]], [[986, 3107], [116, 40]], [[7167, 3237], [16, -81]], [[7170, 3120], [-58, -48]], [[7080, 3203], [0, 21]], [[7080, 3224], [87, 13]], [[4914, 2979], [1, 276]], [[4915, 3255], [59, -58]], [[796, 3154], [11, -53]], [[577, 2955], [11, 105]], [[588, 3060], [50, 50]], [[638, 3110], [80, -18], [58, 66]], [[776, 3158], [20, -4]], [[5114, 3247], [15, -16]], [[5020, 3206], [15, 47]], [[5035, 3253], [79, -6]], [[1906, 3196], [11, -85]], [[1805, 3054], [-111, 39]], [[1709, 3132], [107, 9], [64, 59]], [[1880, 3200], [26, -4]], [[4905, 3272], [10, -17]], [[4887, 2990], [-12, 235], [30, 47]], [[8554, 3203], [20, -67]], [[8574, 3136], [-160, -25]], [[8414, 3111], [-23, 66]], [[8391, 3177], [163, 26]], [[6030, 3270], [34, -79]], [[5957, 3215], [38, 58]], [[5995, 3273], [35, -3]], [[1414, 3201], [144, -21]], [[1558, 3180], [18, 1]], [[1351, 3163], [63, 38]], [[4572, 3282], [-77, -82], [106, -248]], [[4578, 2934], [-55, 14]], [[4367, 3119], [-13, 45]], [[4354, 3164], [150, 91]], [[4504, 3255], [68, 27]], [[925, 3081], [-50, -24]], [[796, 3154], [141, 23]], [[937, 3177], [36, -64]], [[2003, 3196], [30, -84]], [[1906, 3196], [97, 0]], [[7425, 3260], [84, -25]], [[7509, 3235], [17, -24]], [[7526, 3211], [-2, -15]], [[7370, 3203], [-21, 25]], [[7349, 3228], [76, 32]], [[6575, 2812], [-49, 141]], [[6526, 2953], [70, 175]], [[6620, 3168], [26, 110]], [[6646, 3278], [51, -97]], [[5767, 3199], [11, 10]], [[5778, 3209], [36, 77]], [[5814, 3286], [43, -90]], [[4572, 3282], [47, 12]], [[4619, 3294], [34, -80]], [[3024, 3235], [81, -51]], [[3076, 3159], [-70, -26]], [[2878, 3138], [62, 131]], [[2940, 3269], [84, -34]], [[5439, 3251], [-14, -83]], [[5222, 3192], [10, 31]], [[5232, 3223], [91, 62]], [[5323, 3285], [116, -34]], [[3987, 3098], [-6, -11]], [[3981, 3087], [3, -11]], [[3984, 3076], [-32, 5], [-22, -66]], [[3930, 3015], [-50, -38]], [[3880, 2977], [18, 102], [89, 19]], [[4056, 3150], [5, -6]], [[4061, 3144], [-44, -40]], [[4017, 3104], [39, 46]], [[4132, 3293], [-11, -72]], [[4121, 3221], [-37, -23]], [[4084, 3198], [-26, 27]], [[4011, 3242], [15, 50]], [[4026, 3292], [106, 1]], [[7007, 3281], [71, -22]], [[7078, 3259], [2, -35]], [[6914, 3178], [93, 103]], [[6269, 3307], [82, -10]], [[6351, 3297], [171, -62]], [[6526, 2953], [-67, 54]], [[6459, 3007], [-51, 82]], [[3814, 2945], [-42, -55]], [[3772, 2890], [36, 59]], [[3808, 2949], [6, -4]], [[3766, 3250], [-7, -17]], [[3759, 3233], [-5, 13]], [[3754, 3246], [12, 4]], [[3886, 3299], [-104, -45]], [[3782, 3254], [23, 47]], [[3805, 3301], [81, -2]], [[2186, 3221], [-3, -122]], [[2003, 3196], [18, 40]], [[2021, 3236], [92, 29]], [[2113, 3265], [73, -44]], [[1180, 3227], [63, -78]], [[1102, 3147], [20, 53]], [[1122, 3200], [58, 27]], [[7298, 3155], [-10, 129]], [[7288, 3284], [8, 19]], [[7296, 3303], [53, -75]], [[4821, 3299], [21, -312]], [[4795, 2980], [-4, 161], [-39, 139]], [[4752, 3280], [69, 19]], [[1766, 3254], [93, -32]], [[1859, 3222], [21, -22]], [[1659, 3163], [50, 102]], [[1709, 3265], [57, -11]], [[4728, 3313], [24, -33]], [[4704, 3209], [-50, 119]], [[4654, 3328], [74, -15]], [[1180, 3227], [1, 11]], [[1181, 3238], [89, 8]], [[1270, 3246], [8, -92]], [[4619, 3294], [26, 36]], [[4645, 3330], [9, -2]], [[3764, 3321], [41, -20]], [[3782, 3254], [-16, -4]], [[3754, 3246], [-41, 32]], [[3713, 3278], [51, 43]], [[4912, 3327], [-7, -55]], [[4821, 3299], [71, 42]], [[4892, 3341], [20, -14]], [[5554, 3343], [70, -78]], [[5624, 3265], [59, -58]], [[5439, 3251], [115, 92]], [[7296, 3303], [129, -43]], [[3130, 3309], [15, -18]], [[3145, 3291], [-19, -89]], [[3024, 3235], [9, 69]], [[3033, 3304], [97, 5]], [[717, 3244], [59, -86]], [[638, 3110], [43, 133]], [[681, 3243], [36, 1]], [[2272, 3307], [29, -132], [55, -78]], [[2186, 3221], [-3, 64]], [[2183, 3285], [89, 22]], [[6907, 3333], [115, -10]], [[7022, 3323], [-15, -42]], [[6646, 3278], [-18, 28]], [[6628, 3306], [2, 23]], [[6630, 3329], [113, 25], [164, -21]], [[6030, 3270], [37, 94]], [[6067, 3364], [88, -85], [14, -88]], [[619, 3260], [62, -17]], [[588, 3060], [19, 177]], [[607, 3237], [12, 23]], [[4158, 3354], [-26, -61]], [[4026, 3292], [3, 59]], [[4029, 3351], [129, 3]], [[6120, 3371], [88, -3]], [[6185, 3202], [2, -11]], [[6067, 3364], [1, 10]], [[6068, 3374], [52, -3]], [[1920, 3322], [42, -27]], [[1962, 3295], [59, -59]], [[1859, 3222], [61, 100]], [[7096, 3305], [-18, -46]], [[7022, 3323], [34, 39]], [[7056, 3362], [40, -57]], [[4912, 3327], [70, 57]], [[4982, 3384], [53, -131]], [[6282, 3375], [42, -14]], [[6324, 3361], [27, -64]], [[6324, 3361], [160, 10], [144, -65]], [[8522, 3257], [32, -54]], [[8391, 3177], [-41, 11]], [[8350, 3188], [73, 140]], [[8423, 3328], [99, -71]], [[2580, 3347], [14, -22]], [[2594, 3325], [-124, -99]], [[2470, 3226], [-7, 51]], [[2463, 3277], [7, 19]], [[2470, 3296], [110, 51]], [[7167, 3237], [54, 121]], [[7221, 3358], [26, 7]], [[7247, 3365], [41, -81]], [[1681, 3326], [28, -61]], [[1558, 3180], [20, 62]], [[1578, 3242], [103, 84]], [[1175, 3294], [6, -56]], [[1122, 3200], [-9, 69]], [[1113, 3269], [-6, 24]], [[1107, 3293], [68, 1]], [[5193, 3398], [39, -175]], [[5114, 3247], [1, 14]], [[5115, 3261], [38, 131]], [[5153, 3392], [40, 6]], [[1072, 3301], [35, -8]], [[1113, 3269], [-68, 42]], [[1045, 3311], [27, -10]], [[2320, 3366], [143, -89]], [[2470, 3226], [-82, -116]], [[2272, 3307], [46, 60]], [[2318, 3367], [2, -1]], [[5115, 3261], [-9, 131]], [[5106, 3392], [47, 0]], [[867, 3262], [57, -2]], [[924, 3260], [13, -83]], [[717, 3244], [49, 56]], [[766, 3300], [101, -38]], [[5916, 3345], [-17, -110]], [[5899, 3235], [-32, -41]], [[5814, 3286], [-1, 25]], [[5813, 3311], [54, 105]], [[5867, 3416], [1, 1]], [[5868, 3417], [48, -72]], [[3165, 3396], [-35, -87]], [[3033, 3304], [-7, 1]], [[3026, 3305], [11, 46]], [[3037, 3351], [113, 45]], [[3150, 3396], [15, 0]], [[5282, 3417], [58, -18]], [[5340, 3399], [-17, -114]], [[5193, 3398], [35, 24]], [[5228, 3422], [54, -5]], [[3866, 2871], [-135, -52]], [[3731, 2819], [-7, 3]], [[3724, 2822], [48, 68]], [[3814, 2945], [23, -3]], [[3837, 2942], [42, -20]], [[3834, 3135], [-75, 98]], [[3886, 3299], [8, 58]], [[3894, 3357], [84, 59]], [[3978, 3416], [51, -65]], [[990, 3319], [55, -8]], [[924, 3260], [66, 59]], [[1480, 3350], [67, -50]], [[1547, 3300], [31, -58]], [[1414, 3201], [66, 149]], [[5560, 3356], [-6, -13]], [[5340, 3399], [220, -43]], [[5813, 3311], [-72, 73]], [[5741, 3384], [89, 42]], [[5830, 3426], [37, -10]], [[3227, 3391], [34, -123]], [[3261, 3268], [-116, 23]], [[3165, 3396], [62, -5]], [[6018, 3396], [50, -22]], [[5995, 3273], [-79, 72]], [[5868, 3417], [150, -21]], [[1962, 3295], [10, 81]], [[1972, 3376], [141, -111]], [[2802, 3408], [41, -81]], [[2843, 3327], [-109, -7]], [[2734, 3320], [68, 88]], [[4452, 3374], [52, -119]], [[4354, 3164], [-57, 98]], [[4297, 3262], [3, 85]], [[4300, 3347], [48, 90]], [[4348, 3437], [104, -63]], [[3764, 3434], [0, -113]], [[3713, 3278], [-12, 8]], [[3701, 3286], [-38, 34]], [[3663, 3320], [64, 114]], [[3727, 3434], [37, 0]], [[2283, 3400], [35, -33]], [[2183, 3285], [-20, 21]], [[2163, 3306], [119, 96]], [[2282, 3402], [1, -2]], [[4611, 3435], [43, -107]], [[4645, 3330], [-77, 95]], [[4568, 3425], [43, 10]], [[1786, 3348], [-20, -94]], [[1681, 3326], [31, 37]], [[1712, 3363], [74, -15]], [[7301, 3424], [206, -156]], [[7507, 3268], [2, -33]], [[7247, 3365], [54, 59]], [[3642, 3406], [21, -86]], [[3701, 3286], [-55, 1]], [[3646, 3287], [-108, -98], [5, -86]], [[3543, 3103], [-29, 85], [24, 64], [-11, 173]], [[3527, 3425], [115, -19]], [[6991, 3438], [76, -35]], [[7067, 3403], [-11, -41]], [[6907, 3333], [77, 107]], [[6984, 3440], [7, -2]], [[766, 3322], [0, -22]], [[619, 3260], [39, 47]], [[658, 3307], [74, 44]], [[732, 3351], [34, -29]], [[622, 3337], [36, -30]], [[607, 3237], [-133, -37], [-46, 111]], [[428, 3311], [67, 11]], [[495, 3322], [127, 15]], [[8528, 3373], [-6, -116]], [[8423, 3328], [-13, 51]], [[8410, 3379], [21, 23]], [[8431, 3402], [97, -29]], [[6120, 3371], [29, 81]], [[6149, 3452], [74, -54]], [[4135, 3443], [40, -19]], [[4175, 3424], [-3, -64]], [[4172, 3360], [-14, -6]], [[3978, 3416], [1, 2]], [[3979, 3418], [34, 44]], [[4013, 3462], [122, -19]], [[5741, 3384], [-127, -19]], [[5614, 3365], [-41, 7]], [[5573, 3372], [0, 15]], [[5573, 3387], [37, 78]], [[5610, 3465], [118, 5]], [[5728, 3470], [102, -44]], [[3840, 3460], [54, -103]], [[3764, 3434], [40, 26]], [[3804, 3460], [36, 0]], [[7171, 3355], [-75, -50]], [[7067, 3403], [-1, 52]], [[7066, 3455], [105, -100]], [[1905, 3392], [15, -70]], [[1786, 3348], [39, 75]], [[1825, 3423], [80, -31]], [[3642, 3406], [38, 57]], [[3680, 3463], [47, 11]], [[3727, 3474], [0, -40]], [[6414, 3462], [123, -97], [93, 0]], [[6630, 3365], [-5, -16]], [[6625, 3349], [5, -20]], [[6286, 3386], [19, 16]], [[6305, 3402], [109, 60]], [[4360, 3487], [-12, -50]], [[4300, 3347], [-128, 13]], [[4175, 3424], [185, 63]], [[1588, 3421], [120, -27]], [[1708, 3394], [4, -31]], [[1547, 3300], [41, 121]], [[1337, 3402], [-89, -108], [22, -48]], [[1175, 3294], [56, 81]], [[1231, 3375], [106, 27]], [[6025, 3424], [-7, -28]], [[5868, 3417], [40, 72]], [[5908, 3489], [2, 1]], [[5910, 3490], [115, -66]], [[7358, 3430], [139, -74]], [[7497, 3356], [37, -18]], [[7534, 3338], [-27, -70]], [[7301, 3424], [7, 45]], [[7308, 3469], [50, -39]], [[4452, 3374], [-13, 113]], [[4439, 3487], [34, 4]], [[4473, 3491], [95, -66]], [[1072, 3301], [-7, 91]], [[1065, 3392], [166, -17]], [[2672, 3456], [96, -6]], [[2768, 3450], [61, -14]], [[2829, 3436], [-27, -28]], [[2734, 3320], [-39, -29]], [[2695, 3291], [-101, 34]], [[2580, 3347], [51, 27]], [[2631, 3374], [41, 82]], [[1959, 3444], [13, -68]], [[1905, 3392], [54, 52]], [[766, 3322], [65, 77]], [[831, 3399], [25, 6]], [[856, 3405], [11, -143]], [[922, 3386], [68, -67]], [[856, 3405], [66, -19]], [[4391, 3507], [48, -20]], [[4360, 3487], [2, 12]], [[4362, 3499], [29, 8]], [[5728, 3470], [-4, 35]], [[5724, 3505], [184, -16]], [[5391, 3473], [182, -86]], [[5573, 3372], [-13, -16]], [[5282, 3417], [4, 102]], [[5286, 3519], [105, -46]], [[6982, 3444], [2, -4]], [[6625, 3349], [89, 124], [123, -19], [83, -58], [62, 48]], [[7067, 3489], [-1, -34]], [[6991, 3438], [43, 62]], [[7034, 3500], [33, -11]], [[622, 3337], [21, 64]], [[643, 3401], [31, 9]], [[674, 3410], [58, -59]], [[2441, 3473], [-19, -91], [48, -86]], [[2320, 3366], [-37, 34]], [[2282, 3402], [56, 70]], [[2338, 3472], [103, 1]], [[3911, 3498], [68, -80]], [[3840, 3460], [71, 38]], [[8079, 3361], [12, -37]], [[8091, 3324], [-103, -4]], [[7988, 3320], [5, 53]], [[7993, 3373], [71, 104]], [[8064, 3477], [15, -116]], [[4669, 3510], [129, -19]], [[4798, 3491], [16, -6]], [[4814, 3485], [-3, -12]], [[4811, 3473], [-79, -43], [-4, -117]], [[4611, 3435], [17, 89]], [[4628, 3524], [41, -14]], [[3978, 3524], [35, -62]], [[3911, 3498], [3, 19]], [[3914, 3517], [64, 7]], [[3447, 3524], [32, -235]], [[3479, 3289], [-101, 161]], [[3378, 3450], [21, 43]], [[3399, 3493], [28, 31]], [[3427, 3524], [20, 0]], [[2143, 3429], [20, -123]], [[1959, 3444], [34, 45]], [[1993, 3489], [150, -60]], [[3519, 3530], [8, -105]], [[3543, 3103], [-4, -22]], [[3539, 3081], [-70, 83], [10, 125]], [[3447, 3524], [72, 6]], [[5234, 3528], [52, -9]], [[5228, 3422], [-87, 79]], [[5141, 3501], [93, 27]], [[1462, 3468], [18, -118]], [[1337, 3402], [46, 64]], [[1383, 3466], [79, 2]], [[3718, 3537], [9, -63]], [[3680, 3463], [-34, 64]], [[3646, 3527], [72, 10]], [[3292, 3538], [107, -45]], [[3378, 3450], [-48, -12]], [[3330, 3438], [-90, 79]], [[3240, 3517], [52, 21]], [[6641, 3486], [-11, -121]], [[6414, 3462], [6, 71]], [[6420, 3533], [9, 15]], [[6429, 3548], [150, -89], [62, 27]], [[674, 3410], [81, 38]], [[755, 3448], [76, -49]], [[6144, 3556], [5, -104]], [[6025, 3424], [16, 51]], [[6041, 3475], [90, 80]], [[6131, 3555], [13, 1]], [[5723, 3549], [1, -44]], [[5610, 3465], [22, 69]], [[5632, 3534], [27, 24]], [[5659, 3558], [64, -9]], [[6305, 3402], [-33, 45]], [[6272, 3447], [65, 78]], [[6337, 3525], [83, 8]], [[6144, 3556], [128, -109]], [[7269, 3517], [39, -48]], [[7221, 3358], [-50, -3]], [[7067, 3489], [121, 46]], [[7188, 3535], [81, -18]], [[7922, 3475], [-5, -49]], [[7917, 3426], [-87, -28]], [[7830, 3398], [-122, 9]], [[7708, 3407], [-19, 66]], [[7689, 3473], [86, 58]], [[7775, 3531], [4, -2]], [[7779, 3529], [143, -54]], [[6982, 3444], [-81, 61]], [[6901, 3505], [91, 49]], [[6992, 3554], [42, -54]], [[4135, 3443], [48, 110]], [[4183, 3553], [108, 3], [71, -57]], [[4518, 3570], [110, -46]], [[4473, 3491], [45, 79]], [[1708, 3394], [14, 102]], [[1722, 3496], [70, 23]], [[1792, 3519], [33, -96]], [[2266, 3534], [70, -51]], [[2336, 3483], [2, -11]], [[2143, 3429], [73, 51]], [[2216, 3480], [50, 54]], [[1065, 3427], [0, -35]], [[922, 3386], [-3, 72]], [[919, 3458], [93, 24], [53, -55]], [[5949, 3569], [92, -94]], [[5910, 3490], [12, 66]], [[5922, 3556], [4, 14]], [[5926, 3570], [23, -1]], [[3978, 3524], [73, 48]], [[4051, 3572], [95, 13]], [[4146, 3585], [37, -32]], [[1181, 3489], [123, -35]], [[1304, 3454], [79, 12]], [[1065, 3427], [116, 62]], [[1588, 3421], [46, 29]], [[1634, 3450], [54, 77]], [[1688, 3527], [34, -31]], [[3804, 3460], [49, 112]], [[3853, 3572], [32, 15]], [[3885, 3587], [29, -70]], [[5853, 3596], [69, -40]], [[5723, 3549], [18, 22]], [[5741, 3571], [112, 25]], [[7116, 3557], [72, -22]], [[6992, 3554], [4, 26]], [[6996, 3580], [120, -23]], [[6692, 3585], [-51, -99]], [[6429, 3548], [62, 58]], [[6491, 3606], [147, -52], [54, 31]], [[5527, 3602], [105, -68]], [[5391, 3473], [86, 131]], [[5477, 3604], [50, -2]], [[627, 3483], [16, -82]], [[495, 3322], [-30, 106]], [[465, 3428], [72, 47]], [[537, 3475], [67, 27]], [[604, 3502], [23, -19]], [[4923, 3539], [-109, -54]], [[4798, 3491], [-1, 98]], [[4797, 3589], [126, -50]], [[428, 3311], [-112, 125]], [[316, 3436], [68, 57]], [[384, 3493], [81, -65]], [[2662, 3572], [10, -116]], [[2631, 3374], [-77, 108]], [[2554, 3482], [6, 78]], [[2560, 3560], [102, 12]], [[3617, 3568], [29, -41]], [[3519, 3530], [38, 82]], [[3557, 3612], [60, -44]], [[1977, 3498], [16, -9]], [[1792, 3519], [55, 47]], [[1847, 3566], [130, -68]], [[5432, 3609], [7, -8]], [[5439, 3601], [38, 3]], [[5234, 3528], [118, 48]], [[5352, 3576], [66, 51]], [[5418, 3627], [14, -18]], [[6122, 3567], [9, -12]], [[5949, 3569], [173, -2]], [[1462, 3468], [20, 21]], [[1482, 3489], [152, -39]], [[7689, 3473], [-1, 33]], [[7688, 3506], [3, 85]], [[7691, 3591], [38, 2]], [[7729, 3593], [46, -62]], [[5659, 3558], [0, 65]], [[5659, 3623], [90, 6]], [[5749, 3629], [-8, -58]], [[3060, 3520], [-41, -53]], [[3019, 3467], [-116, 36]], [[2903, 3503], [-39, 31]], [[2864, 3534], [95, 71]], [[2959, 3605], [101, -85]], [[754, 3488], [1, -40]], [[627, 3483], [56, 41]], [[683, 3524], [71, -36]], [[4526, 3618], [-8, -48]], [[4391, 3507], [-5, 92]], [[4386, 3599], [18, 29]], [[4404, 3628], [68, -3]], [[4472, 3625], [54, -7]], [[6317, 3553], [20, -28]], [[6122, 3567], [7, 38]], [[6129, 3605], [5, 28]], [[6134, 3633], [183, -80]], [[8195, 3591], [60, -131]], [[8255, 3460], [-13, -113]], [[8242, 3347], [-52, 3]], [[8190, 3350], [-9, 93]], [[8181, 3443], [-27, 64]], [[8154, 3507], [11, 83]], [[8165, 3590], [15, 3]], [[8180, 3593], [15, -2]], [[3739, 3581], [-21, -44]], [[3617, 3568], [31, 37]], [[3648, 3605], [28, 20]], [[3676, 3625], [63, -44]], [[2481, 3590], [-21, -114]], [[2460, 3476], [-19, -3]], [[2336, 3483], [16, 52], [129, 55]], [[2075, 3578], [141, -98]], [[1977, 3498], [32, 91]], [[2009, 3589], [66, -11]], [[7382, 3489], [-24, -59]], [[7269, 3517], [-40, 110]], [[7229, 3627], [153, -138]], [[6506, 3620], [-15, -14]], [[6317, 3553], [30, 54]], [[6347, 3607], [85, 31]], [[6432, 3638], [11, 2]], [[6443, 3640], [14, 5]], [[6457, 3645], [49, -25]], [[1455, 3554], [30, -16]], [[1485, 3538], [-3, -49]], [[1304, 3454], [-3, 18]], [[1301, 3472], [97, 96]], [[1398, 3568], [57, -14]], [[6850, 3607], [51, -102]], [[6692, 3585], [6, 48]], [[6698, 3633], [152, -26]], [[384, 3493], [10, 15]], [[394, 3508], [97, 32]], [[491, 3540], [46, -65]], [[4234, 3661], [152, -62]], [[4146, 3585], [88, 76]], [[6024, 3657], [105, -52]], [[5926, 3570], [98, 87]], [[5290, 3668], [62, -92]], [[5141, 3501], [-81, 141]], [[5060, 3642], [39, 26]], [[5099, 3668], [156, -38], [35, 38]], [[932, 3545], [-13, -87]], [[754, 3488], [138, 82]], [[892, 3570], [40, -25]], [[3300, 3617], [-8, -79]], [[3240, 3517], [-10, 116]], [[3230, 3633], [70, -16]], [[3855, 3646], [-2, -74]], [[3739, 3581], [61, 60]], [[3800, 3641], [55, 5]], [[1181, 3489], [10, 59]], [[1191, 3548], [65, 44]], [[1256, 3592], [45, -120]], [[4745, 3677], [52, -88]], [[4669, 3510], [10, 127]], [[4679, 3637], [14, 20]], [[4693, 3657], [52, 20]], [[3364, 3652], [63, -128]], [[3300, 3617], [35, 40]], [[3335, 3657], [29, -5]], [[2708, 3641], [42, -62]], [[2750, 3579], [18, -129]], [[2662, 3572], [13, 79]], [[2675, 3651], [33, -10]], [[4526, 3618], [52, 54]], [[4578, 3672], [101, -35]], [[3364, 3652], [89, 22]], [[3453, 3674], [104, -62]], [[1110, 3604], [81, -56]], [[932, 3545], [125, -13], [53, 72]], [[284, 3556], [95, -1]], [[379, 3555], [15, -47]], [[316, 3436], [-116, 94]], [[200, 3530], [48, 35]], [[248, 3565], [36, -9]], [[578, 3548], [26, -46]], [[491, 3540], [29, 42]], [[520, 3582], [6, 0]], [[526, 3582], [52, -34]], [[6138, 3675], [-4, -42]], [[6024, 3657], [13, 26]], [[6037, 3683], [101, -8]], [[7137, 3682], [92, -55]], [[7116, 3557], [-21, 118]], [[7095, 3675], [42, 7]], [[6850, 3607], [72, 80]], [[6922, 3687], [74, -107]], [[1946, 3626], [63, -37]], [[1847, 3566], [15, 52]], [[1862, 3618], [84, 8]], [[4887, 3705], [91, -115]], [[4978, 3590], [-37, -52]], [[4941, 3538], [-18, 1]], [[4745, 3677], [70, 20]], [[4815, 3697], [72, 8]], [[629, 3599], [22, -36]], [[651, 3563], [32, -39]], [[578, 3548], [51, 51]], [[7562, 3644], [0, -117]], [[7562, 3527], [-53, -9]], [[7509, 3518], [-35, 16]], [[7474, 3534], [26, 99]], [[7500, 3633], [25, 50]], [[7525, 3683], [37, -39]], [[379, 3555], [85, 36]], [[464, 3591], [56, -9]], [[7474, 3534], [-199, 123]], [[7275, 3657], [-38, 19]], [[7237, 3676], [12, 21]], [[7249, 3697], [251, -64]], [[7182, 3696], [55, -20]], [[7275, 3657], [129, -106], [8, -55]], [[7412, 3496], [-30, -7]], [[7137, 3682], [45, 14]], [[1677, 3631], [11, -104]], [[1485, 3538], [90, 109], [102, -16]], [[2805, 3692], [-10, -137]], [[2795, 3555], [-45, 24]], [[2708, 3641], [77, 53]], [[2785, 3694], [20, -2]], [[3928, 3717], [45, -69]], [[3973, 3648], [-88, -61]], [[3855, 3646], [30, 66]], [[3885, 3712], [43, 5]], [[2554, 3482], [-94, -6]], [[2481, 3590], [37, 103]], [[2518, 3693], [42, -133]], [[4098, 3720], [-11, -84]], [[4087, 3636], [-35, -64]], [[4052, 3572], [-76, 76]], [[3976, 3648], [87, 75]], [[4063, 3723], [29, 5]], [[4092, 3728], [6, -8]], [[4051, 3572], [1, 0]], [[4087, 3636], [67, 5], [75, 90]], [[4229, 3731], [5, -70]], [[7064, 3716], [31, -41]], [[6922, 3687], [142, 29]], [[4405, 3711], [49, -29]], [[4454, 3682], [18, -57]], [[4404, 3628], [-81, 98]], [[4323, 3726], [82, -15]], [[5432, 3609], [7, -8]], [[5395, 3693], [23, -66]], [[5290, 3668], [45, 71]], [[5335, 3739], [60, -46]], [[853, 3634], [39, -64]], [[651, 3563], [84, 68]], [[735, 3631], [118, 3]], [[2943, 3685], [16, -80]], [[2864, 3534], [-69, 21]], [[2805, 3692], [3, 3]], [[2808, 3695], [59, 10]], [[2867, 3705], [76, -20]], [[3711, 3708], [-35, -83]], [[3648, 3605], [-9, 126]], [[3639, 3731], [72, -23]], [[6688, 3692], [10, -59]], [[6506, 3620], [123, 115]], [[6629, 3735], [59, -43]], [[7942, 3684], [44, -17]], [[7986, 3667], [-83, -76]], [[7903, 3591], [-21, 85]], [[7882, 3676], [60, 8]], [[7765, 3709], [34, -76]], [[7799, 3633], [2, -88]], [[7801, 3545], [-22, -16]], [[7729, 3593], [-24, 104]], [[7705, 3697], [60, 12]], [[1256, 3592], [14, 50]], [[1270, 3642], [47, 28]], [[1317, 3670], [81, -102]], [[4268, 3753], [55, -27]], [[4229, 3731], [39, 22]], [[3976, 3648], [-3, 0]], [[3928, 3717], [135, 6]], [[4478, 3768], [45, -14]], [[4523, 3754], [16, -18]], [[4539, 3736], [39, -64]], [[4454, 3682], [24, 86]], [[3805, 3754], [-5, -113]], [[3711, 3708], [25, 45]], [[3736, 3753], [69, 1]], [[5626, 3731], [0, -2]], [[5626, 3729], [2, -27]], [[5628, 3702], [-101, -100]], [[5395, 3693], [63, -18], [86, 102]], [[5544, 3777], [10, 3]], [[5554, 3780], [72, -49]], [[7613, 3723], [14, -21]], [[7627, 3702], [-7, -35]], [[7620, 3667], [-23, -27]], [[7597, 3640], [-28, 1]], [[7569, 3641], [-17, 78]], [[7552, 3719], [54, 29]], [[7606, 3748], [7, -25]], [[3877, 3756], [8, -44]], [[3805, 3754], [41, 20]], [[3846, 3774], [31, -18]], [[200, 3530], [-108, 44], [-9, 60]], [[83, 3634], [77, 13], [88, -82]], [[1659, 3705], [167, -68]], [[1826, 3637], [36, -19]], [[1677, 3631], [-18, 74]], [[2592, 3748], [40, -2]], [[2632, 3746], [43, -95]], [[2518, 3693], [2, 15]], [[2520, 3708], [72, 40]], [[2632, 3746], [24, 18]], [[2656, 3764], [129, -70]], [[6260, 3792], [87, -185]], [[6138, 3675], [17, 90]], [[6155, 3765], [43, 13]], [[6198, 3778], [62, 14]], [[4307, 3790], [89, -55]], [[4396, 3735], [9, -24]], [[4268, 3753], [19, 40]], [[4287, 3793], [20, -3]], [[6062, 3758], [2, -1]], [[6064, 3757], [24, 4]], [[6088, 3761], [67, 4]], [[6037, 3683], [-9, 122]], [[6028, 3805], [34, -47]], [[4283, 3807], [4, -14]], [[4098, 3720], [163, 85]], [[4261, 3805], [22, 2]], [[7249, 3697], [35, 47]], [[7284, 3744], [102, -37], [68, 47]], [[7454, 3754], [71, -71]], [[8516, 3737], [-25, -159]], [[8491, 3578], [-115, 16]], [[8376, 3594], [-7, 157]], [[8369, 3751], [103, 1]], [[8472, 3752], [44, -15]], [[7762, 3776], [3, -67]], [[7705, 3697], [-78, 5]], [[7613, 3723], [87, 58]], [[7700, 3781], [62, -5]], [[668, 3702], [39, -15]], [[707, 3687], [28, -56]], [[629, 3599], [20, 107]], [[649, 3706], [19, -4]], [[1029, 3714], [34, -41]], [[1063, 3673], [47, -69]], [[853, 3634], [52, 56]], [[905, 3690], [104, 24]], [[1009, 3714], [20, 0]], [[6062, 3758], [2, -1]], [[1186, 3703], [68, -52]], [[1254, 3651], [16, -9]], [[1063, 3673], [123, 30]], [[6317, 3810], [61, -19], [-6, -114], [60, -39]], [[6260, 3792], [57, 18]], [[7861, 3765], [5, -62]], [[7866, 3703], [-67, -70]], [[7762, 3776], [89, 9]], [[7851, 3785], [10, -20]], [[2266, 3534], [-7, 39]], [[2259, 3573], [96, 27], [30, 188]], [[2385, 3788], [5, -60], [130, -20]], [[1478, 3720], [31, -119], [-54, -47]], [[1317, 3670], [23, 70]], [[1340, 3740], [138, -20]], [[4092, 3728], [-76, 70]], [[4016, 3798], [39, 24]], [[4055, 3822], [12, 1]], [[4067, 3823], [122, 7]], [[4189, 3830], [72, -25]], [[4386, 3833], [10, -98]], [[4307, 3790], [79, 43]], [[2122, 3765], [16, -87], [-63, -100]], [[1946, 3626], [111, 139], [65, 0]], [[1254, 3651], [-2, 111]], [[1252, 3762], [88, -22]], [[3705, 3841], [31, -88]], [[3639, 3731], [-17, 42]], [[3622, 3773], [81, 68]], [[3703, 3841], [2, 0]], [[2972, 3773], [-29, -88]], [[2867, 3705], [-9, 116]], [[2858, 3821], [114, -48]], [[5494, 3843], [50, -66]], [[5335, 3739], [-73, 49]], [[5262, 3788], [62, 36]], [[5324, 3824], [17, 8]], [[5341, 3832], [153, 11]], [[7075, 3807], [2, -13]], [[7077, 3794], [6, -29]], [[7083, 3765], [-19, -49]], [[6688, 3692], [199, 128]], [[6887, 3820], [17, -15]], [[6904, 3805], [124, 36], [47, -34]], [[7331, 3836], [112, -54]], [[7443, 3782], [11, -28]], [[7284, 3744], [47, 92]], [[6639, 3793], [-10, -58]], [[6457, 3645], [66, 86], [26, 117]], [[6549, 3848], [31, 6]], [[6580, 3854], [59, -61]], [[3911, 3846], [-34, -90]], [[3846, 3774], [-5, 85]], [[3841, 3859], [70, -13]], [[4478, 3768], [4, 77]], [[4482, 3845], [58, 29]], [[4540, 3874], [6, 0]], [[4546, 3874], [-23, -120]], [[2269, 3814], [-36, -104], [26, -137]], [[2122, 3765], [31, 32]], [[2153, 3797], [116, 17]], [[7509, 3839], [43, -120]], [[7569, 3641], [-7, 3]], [[7443, 3782], [50, 65]], [[7493, 3847], [16, -8]], [[1186, 3703], [8, 93]], [[1194, 3796], [58, -34]], [[5605, 3883], [80, -30]], [[5685, 3853], [-59, -122]], [[5554, 3780], [51, 103]], [[4444, 3872], [38, -27]], [[4386, 3833], [7, 19]], [[4393, 3852], [51, 20]], [[3332, 3859], [188, -143]], [[3520, 3716], [-67, -42]], [[3335, 3657], [-38, 213]], [[3297, 3870], [35, -11]], [[4588, 3884], [11, -39]], [[4599, 3845], [-60, -109]], [[4546, 3874], [42, 10]], [[7943, 3842], [27, -3]], [[7970, 3839], [-10, -47]], [[7960, 3792], [-18, -108]], [[7882, 3676], [-16, 27]], [[7861, 3765], [72, 83]], [[7933, 3848], [10, -6]], [[6438, 3672], [5, -32]], [[6317, 3810], [142, 75]], [[6459, 3885], [-58, -156], [37, -57]], [[7563, 3848], [35, 2]], [[7598, 3850], [8, -102]], [[7509, 3839], [54, 9]], [[3825, 3886], [16, -27]], [[3705, 3841], [120, 45]], [[5760, 3895], [-10, -176]], [[5750, 3719], [-124, 10]], [[5685, 3853], [75, 42]], [[5994, 3860], [34, -55]], [[5853, 3596], [18, 177]], [[5871, 3773], [20, 108], [71, 22]], [[5962, 3903], [32, -43]], [[8369, 3751], [-18, 37]], [[8351, 3788], [63, 52]], [[8414, 3840], [58, -88]], [[897, 3806], [8, -116]], [[707, 3687], [77, 107]], [[784, 3794], [113, 12]], [[403, 3766], [50, -59], [11, -116]], [[284, 3556], [-8, 126]], [[276, 3682], [107, 103]], [[383, 3785], [20, -19]], [[3911, 3846], [24, 63]], [[3935, 3909], [81, -111]], [[7641, 3884], [58, -74]], [[7699, 3810], [1, -29]], [[7598, 3850], [-7, 26]], [[7591, 3876], [50, 8]], [[5378, 3900], [-37, -68]], [[5324, 3824], [-72, 97]], [[5252, 3921], [14, 1]], [[5266, 3922], [112, -22]], [[2087, 3870], [26, -7]], [[2113, 3863], [5, 0]], [[2118, 3863], [35, -66]], [[1826, 3637], [-9, 156]], [[1817, 3793], [117, 67]], [[1934, 3860], [153, 10]], [[464, 3800], [92, -120], [-30, -98]], [[403, 3766], [61, 34]], [[83, 3634], [-11, 29]], [[72, 3663], [80, 15], [15, 120]], [[167, 3798], [60, 6]], [[227, 3804], [49, -122]], [[3443, 3921], [176, -74], [-7, -49]], [[3612, 3798], [-187, 109]], [[3425, 3907], [18, 14]], [[557, 3783], [92, -77]], [[464, 3800], [16, 17]], [[480, 3817], [77, -34]], [[8235, 3820], [-12, -51]], [[8223, 3769], [-33, -37]], [[8190, 3732], [-31, -13]], [[8159, 3719], [-66, 51]], [[8093, 3770], [1, 76]], [[8094, 3846], [91, 33]], [[8185, 3879], [37, 7]], [[8222, 3886], [13, -66]], [[3270, 3906], [27, -36]], [[3230, 3633], [-8, 2]], [[3222, 3635], [-4, 46], [-143, 103]], [[3075, 3784], [-32, 103]], [[3043, 3887], [24, 20]], [[3067, 3907], [156, 16]], [[3223, 3923], [47, -17]], [[6234, 3925], [-36, -147]], [[6088, 3761], [51, 47], [-24, 115]], [[6115, 3923], [20, 20]], [[6135, 3943], [99, -18]], [[6939, 3910], [-52, -90]], [[6639, 3793], [89, 90], [131, 47]], [[6859, 3930], [24, 4]], [[6883, 3934], [56, -24]], [[5468, 3903], [26, -60]], [[5378, 3900], [26, 42]], [[5404, 3942], [64, -39]], [[3829, 3894], [-4, -8]], [[3703, 3841], [-31, 38]], [[3672, 3879], [39, 63]], [[3711, 3942], [19, -3]], [[3730, 3939], [99, -45]], [[3075, 3784], [-47, 2]], [[3028, 3786], [-56, -13]], [[2858, 3821], [-34, 24]], [[2824, 3845], [-17, 53]], [[2807, 3898], [9, 18]], [[2816, 3916], [109, 16]], [[2925, 3932], [118, -45]], [[7061, 3934], [14, -127]], [[6904, 3805], [116, 103]], [[7020, 3908], [41, 26]], [[1372, 3878], [103, -29]], [[1475, 3849], [-117, -9]], [[1358, 3840], [14, 38]], [[4446, 3946], [-2, -74]], [[4393, 3852], [-16, 106]], [[4377, 3958], [69, -12]], [[7005, 3943], [15, -35]], [[6939, 3910], [23, 34]], [[6962, 3944], [43, -1]], [[4592, 3939], [-4, -55]], [[4540, 3874], [-16, 89]], [[4524, 3963], [68, -24]], [[72, 3663], [-72, 90], [100, 77], [67, -32]], [[7940, 3899], [3, -57]], [[7933, 3848], [-79, 2]], [[7854, 3850], [1, 33]], [[7855, 3883], [30, 48]], [[7885, 3931], [55, -32]], [[4446, 3946], [62, 28]], [[4508, 3974], [16, -11]], [[7819, 3931], [36, -48]], [[7854, 3850], [-14, -36]], [[7840, 3814], [-141, -4]], [[7641, 3884], [10, 39]], [[7651, 3923], [168, 8]], [[2549, 3907], [38, -57]], [[2587, 3850], [5, -102]], [[2385, 3788], [-13, 55]], [[2372, 3843], [10, 68]], [[2382, 3911], [38, 30]], [[2420, 3941], [129, -34]], [[4705, 3956], [-41, -131]], [[4664, 3825], [-65, 20]], [[4592, 3939], [45, 28]], [[4637, 3967], [68, -11]], [[8094, 3846], [-26, 34]], [[8068, 3880], [117, -1]], [[7228, 3935], [0, -2]], [[7228, 3933], [-26, -68], [-119, -100]], [[7077, 3794], [48, 130]], [[7125, 3924], [36, 11]], [[7161, 3935], [59, 32]], [[7220, 3967], [8, -32]], [[227, 3804], [31, 56], [125, -75]], [[1594, 3859], [-22, -65]], [[1572, 3794], [-94, -74]], [[1340, 3740], [18, 100]], [[1475, 3849], [34, 45]], [[1509, 3894], [35, 25]], [[1544, 3919], [50, -60]], [[1379, 3951], [-29, 6]], [[1350, 3957], [-46, -2]], [[1304, 3955], [24, 35]], [[1328, 3990], [25, 19]], [[1353, 4009], [26, -58]], [[5930, 3966], [32, -63]], [[5871, 3773], [-121, -54]], [[5760, 3895], [114, 88]], [[5874, 3983], [6, 1]], [[5880, 3984], [50, -18]], [[6883, 3934], [34, 44]], [[6917, 3978], [45, -34]], [[6580, 3854], [11, 23]], [[6591, 3877], [209, 95]], [[6800, 3972], [59, -42]], [[4776, 3996], [-18, -72]], [[4758, 3924], [-65, -132]], [[4693, 3792], [-29, 33]], [[4705, 3956], [50, 39]], [[4755, 3995], [21, 1]], [[2354, 3839], [-85, -25]], [[2118, 3863], [133, 87], [103, -111]], [[1372, 3878], [2, 43]], [[1374, 3921], [16, 4]], [[1390, 3925], [119, -31]], [[3499, 3985], [173, -106]], [[3622, 3773], [-7, 5]], [[3615, 3778], [-3, 20]], [[3443, 3921], [56, 64]], [[4366, 4002], [8, -34]], [[4374, 3968], [3, -10]], [[4283, 3807], [20, 158]], [[4303, 3965], [63, 37]], [[4189, 3830], [34, 170]], [[4223, 4000], [80, -35]], [[4826, 3997], [34, -159]], [[4860, 3838], [31, -111]], [[4891, 3727], [-4, -22]], [[4815, 3697], [-57, 227]], [[4776, 3996], [20, 11]], [[4796, 4007], [30, -10]], [[719, 3906], [65, -112]], [[668, 3702], [8, 203]], [[676, 3905], [43, 1]], [[3822, 3979], [26, -62]], [[3848, 3917], [-19, -23]], [[3730, 3939], [92, 40]], [[6137, 3999], [-2, -56]], [[6115, 3923], [-121, -63]], [[5962, 3903], [157, 110]], [[6119, 4013], [18, -14]], [[4928, 4014], [37, -193]], [[4965, 3821], [-105, 17]], [[4826, 3997], [102, 17]], [[1262, 3933], [-25, -59]], [[1237, 3874], [-35, 49]], [[1202, 3923], [60, 10]], [[8053, 3895], [-52, -26]], [[8001, 3869], [9, 62]], [[8010, 3931], [43, -36]], [[2960, 4002], [103, -83]], [[3063, 3919], [4, -12]], [[2925, 3932], [5, 67]], [[2930, 3999], [30, 3]], [[4207, 4027], [16, -27]], [[4067, 3823], [83, 145], [-18, 47]], [[4132, 4015], [75, 12]], [[671, 3924], [5, -19]], [[557, 3783], [114, 141]], [[5930, 3966], [171, 70]], [[6101, 4036], [18, -23]], [[3440, 4026], [66, -28]], [[3506, 3998], [-7, -13]], [[3425, 3907], [-93, -48]], [[3270, 3906], [170, 120]], [[3506, 3998], [89, 34]], [[3595, 4032], [116, -90]], [[5252, 3921], [-32, 18]], [[5220, 3939], [44, 93]], [[5264, 4032], [41, 13]], [[5305, 4045], [-39, -123]], [[5095, 4035], [30, -93]], [[5125, 3942], [-92, 59]], [[5033, 4001], [-18, 24]], [[5015, 4025], [80, 10]], [[7936, 3998], [4, -99]], [[7885, 3931], [20, 77]], [[7905, 4008], [31, -10]], [[1350, 3957], [24, -36]], [[1194, 3796], [43, 78]], [[1262, 3933], [42, 22]], [[5605, 3883], [33, 77]], [[5638, 3960], [173, 34], [54, 57]], [[5865, 4051], [9, -68]], [[5305, 4045], [2, 2]], [[5307, 4047], [97, -105]], [[2659, 4021], [32, -109]], [[2691, 3912], [9, -93]], [[2700, 3819], [-44, -55]], [[2587, 3850], [56, 39], [16, 132]], [[3090, 3977], [-27, -58]], [[2960, 4002], [41, 26]], [[3001, 4028], [89, -51]], [[5185, 4045], [79, -13]], [[5220, 3939], [-95, 3]], [[5095, 4035], [14, 23]], [[5109, 4058], [76, -13]], [[7013, 3992], [-8, -49]], [[6917, 3978], [13, 59]], [[6930, 4037], [83, -45]], [[4055, 3822], [-29, 123], [-53, 25]], [[3973, 3970], [11, 38]], [[3984, 4008], [24, 46]], [[4008, 4054], [124, -39]], [[1162, 3939], [40, -16]], [[1029, 3714], [-32, 73]], [[997, 3787], [6, 154]], [[1003, 3941], [63, 17]], [[1066, 3958], [96, -19]], [[3226, 4004], [-3, -81]], [[3090, 3977], [51, 65]], [[3141, 4042], [85, -38]], [[8350, 3971], [17, -20]], [[8367, 3951], [-62, -74]], [[8305, 3877], [-83, 10]], [[8222, 3887], [19, 114]], [[8241, 4001], [109, -30]], [[4986, 4043], [29, -18]], [[5033, 4001], [-16, -104]], [[5017, 3897], [-52, -76]], [[4928, 4014], [-12, 40]], [[4916, 4054], [70, -11]], [[8524, 3864], [-8, -127]], [[8414, 3840], [-109, 37]], [[8367, 3951], [61, 60]], [[8428, 4011], [34, -107], [62, -40]], [[7379, 4021], [42, -27]], [[7421, 3994], [-141, -49], [-60, 22]], [[7220, 3967], [-13, 29]], [[7207, 3996], [156, 46]], [[7363, 4042], [16, -21]], [[5671, 4071], [-33, -111]], [[5468, 3903], [66, 116]], [[5534, 4019], [55, 38]], [[5589, 4057], [34, 22]], [[5623, 4079], [48, -8]], [[6100, 4046], [1, -10]], [[5880, 3984], [163, 92]], [[6043, 4076], [57, -30]], [[6889, 4067], [41, -30]], [[6800, 3972], [89, 95]], [[3874, 4077], [110, -69]], [[3973, 3970], [-11, -17]], [[3962, 3953], [-114, -36]], [[3822, 3979], [11, 97]], [[3833, 4076], [41, 1]], [[2194, 4033], [-81, -170]], [[2087, 3870], [-30, 118]], [[2057, 3988], [16, 43]], [[2073, 4031], [121, 2]], [[5671, 4071], [14, -1]], [[5685, 4070], [126, 18]], [[5811, 4088], [54, -37]], [[3328, 4067], [120, -29]], [[3448, 4038], [-8, -12]], [[3226, 4004], [32, 67]], [[3258, 4071], [70, -4]], [[7818, 3951], [1, -20]], [[7651, 3923], [13, 142]], [[7664, 4065], [154, -114]], [[5423, 4096], [13, -15]], [[5436, 4081], [98, -62]], [[5307, 4047], [41, 34]], [[5348, 4081], [75, 15]], [[789, 3965], [-70, -59]], [[671, 3924], [9, 59]], [[680, 3983], [109, -18]], [[2887, 4072], [43, -73]], [[2816, 3916], [-3, 68]], [[2813, 3984], [45, 90]], [[2858, 4074], [29, -2]], [[7207, 3996], [-24, 76]], [[7183, 4072], [174, 3]], [[7357, 4075], [6, -33]], [[1934, 3860], [-2, 144]], [[1932, 4004], [125, -16]], [[5533, 4056], [56, 1]], [[5436, 4081], [57, 23]], [[5493, 4104], [40, -48]], [[4671, 4099], [80, -70]], [[4751, 4029], [4, -34]], [[4637, 3967], [-17, 115]], [[4620, 4082], [51, 17]], [[2443, 3992], [-23, -51]], [[2382, 3911], [-77, 56], [22, 97]], [[2327, 4064], [116, -72]], [[2549, 3907], [17, 14]], [[2566, 3921], [107, 159]], [[2673, 4080], [-14, -59]], [[1155, 4020], [7, -81]], [[1066, 3958], [-14, 52]], [[1052, 4010], [103, 10]], [[480, 3817], [47, 135], [153, 31]], [[3098, 4072], [16, -4]], [[3114, 4068], [27, -26]], [[3001, 4028], [7, 50]], [[3008, 4078], [90, -6]], [[1872, 4034], [60, -30]], [[1817, 3793], [-140, 84]], [[1677, 3877], [86, 44], [-11, 137]], [[1752, 4058], [120, -24]], [[963, 4022], [40, -81]], [[997, 3787], [-7, -7]], [[990, 3780], [-93, 26]], [[789, 3965], [82, -25], [92, 82]], [[8100, 4070], [131, -52]], [[8231, 4018], [10, -17]], [[8222, 3887], [0, -1]], [[8068, 3880], [-15, 15]], [[8010, 3931], [5, 64]], [[8015, 3995], [85, 75]], [[4872, 4118], [44, -64]], [[4796, 4007], [76, 111]], [[6113, 4126], [21, -3]], [[6134, 4123], [-34, -77]], [[6043, 4076], [70, 50]], [[3992, 4120], [16, -66]], [[3874, 4077], [95, 52]], [[3969, 4129], [23, -9]], [[8001, 3869], [-31, -30]], [[7936, 3998], [47, 94]], [[7983, 4092], [32, -97]], [[2828, 4083], [30, -9]], [[2813, 3984], [-122, -72]], [[2673, 4080], [22, 23]], [[2695, 4103], [133, -20]], [[3772, 4119], [61, -43]], [[3595, 4032], [13, 50]], [[3608, 4082], [71, 43]], [[3679, 4125], [93, -6]], [[8351, 4080], [-1, -109]], [[8231, 4018], [76, 64]], [[8307, 4082], [44, -2]], [[1259, 4022], [69, -32]], [[1155, 4020], [15, 34]], [[1170, 4054], [89, -32]], [[7486, 4090], [31, -81]], [[7517, 4009], [-47, -96]], [[7470, 3913], [-25, 34]], [[7445, 3947], [-24, 47]], [[7379, 4021], [102, 91]], [[7481, 4112], [5, -22]], [[5493, 4104], [15, 40]], [[5508, 4144], [54, 3]], [[5562, 4147], [-29, -91]], [[5619, 4148], [-45, 5]], [[5574, 4153], [66, 36]], [[5640, 4189], [-21, -41]], [[3467, 4125], [-19, -87]], [[3328, 4067], [10, 65]], [[3338, 4132], [129, -7]], [[7647, 4110], [11, -23]], [[7658, 4087], [6, -22]], [[7591, 3876], [-20, 149]], [[7571, 4025], [11, 83]], [[7582, 4108], [65, 2]], [[4978, 4098], [8, -55]], [[4872, 4118], [18, 30]], [[4890, 4148], [88, -50]], [[5619, 4148], [4, -69]], [[5562, 4147], [12, 6]], [[2887, 4072], [84, 56]], [[2971, 4128], [37, -50]], [[4508, 3974], [-1, 2]], [[4507, 3976], [28, 173]], [[4535, 4149], [85, -67]], [[4041, 4148], [45, -22]], [[4086, 4126], [107, -46]], [[4193, 4080], [14, -53]], [[3992, 4120], [49, 28]], [[5114, 4153], [7, -4]], [[5121, 4149], [-12, -91]], [[4978, 4098], [24, 51]], [[5002, 4149], [112, 4]], [[3467, 4125], [14, 17]], [[3481, 4142], [127, -60]], [[4425, 4137], [51, -121]], [[4476, 4016], [-65, 4]], [[4411, 4020], [-47, 113]], [[4364, 4133], [10, 17]], [[4374, 4150], [51, -13]], [[1552, 3979], [-8, -60]], [[1390, 3925], [-11, 26]], [[1353, 4009], [103, 92]], [[1456, 4101], [97, -50], [-1, -72]], [[2000, 4118], [77, -12]], [[2077, 4106], [-4, -75]], [[1872, 4034], [6, 87]], [[1878, 4121], [122, -3]], [[4671, 4099], [-3, 45]], [[4668, 4144], [82, 34]], [[4750, 4178], [1, -149]], [[7835, 4134], [70, -126]], [[7818, 3951], [-9, 181]], [[7809, 4132], [26, 2]], [[8077, 4127], [15, -37]], [[8092, 4090], [8, -20]], [[7983, 4092], [-2, 11]], [[7981, 4103], [38, 31]], [[8019, 4134], [18, 4]], [[8037, 4138], [40, -11]], [[1031, 4058], [21, -48]], [[963, 4022], [48, 70]], [[1011, 4092], [20, -34]], [[5811, 4088], [-2, 7]], [[5809, 4095], [201, 87]], [[6010, 4182], [103, -56]], [[4183, 4144], [17, -21]], [[4200, 4123], [30, -18]], [[4230, 4105], [-37, -25]], [[4086, 4126], [97, 18]], [[1664, 4120], [76, -20]], [[1740, 4100], [12, -42]], [[1677, 3877], [-83, -18]], [[1552, 3979], [77, 114]], [[1629, 4093], [35, 27]], [[2605, 4136], [-64, -150], [25, -65]], [[2443, 3992], [69, 38], [15, 123], [78, -17]], [[4504, 4188], [16, -18]], [[4520, 4170], [15, -21]], [[4507, 3976], [-31, 40]], [[4425, 4137], [24, 34]], [[4449, 4171], [55, 17]], [[2605, 4136], [17, 21]], [[2622, 4157], [73, -54]], [[1456, 4101], [4, 2]], [[1460, 4103], [34, 20]], [[1494, 4123], [135, -30]], [[5185, 4045], [-10, 88], [98, 62]], [[5273, 4195], [75, -114]], [[7311, 4163], [41, -62]], [[7352, 4101], [5, -26]], [[7183, 4072], [-41, 30]], [[7142, 4102], [-24, 48]], [[7118, 4150], [101, -24], [61, 53]], [[7280, 4179], [31, -16]], [[8589, 4106], [-50, -106], [-15, -136]], [[8428, 4011], [0, 115]], [[8428, 4126], [39, 17]], [[8467, 4143], [122, -37]], [[4677, 4200], [73, -4]], [[4750, 4196], [0, -18]], [[4668, 4144], [-23, 60]], [[4645, 4204], [32, -4]], [[2883, 4178], [76, -25]], [[2959, 4153], [12, -25]], [[2828, 4083], [-34, 64]], [[2794, 4147], [89, 31]], [[5275, 4198], [-2, -3]], [[5121, 4149], [154, 49]], [[6394, 4155], [5, -58]], [[6399, 4097], [-9, -48]], [[6390, 4049], [-112, -49]], [[6278, 4000], [-141, -1]], [[6134, 4123], [82, 63]], [[6216, 4186], [178, -31]], [[8351, 4151], [0, -71]], [[8307, 4082], [-68, 43]], [[8239, 4125], [112, 26]], [[7835, 4134], [11, 20]], [[7846, 4154], [106, 13]], [[7952, 4167], [29, -64]], [[3706, 4189], [113, -48]], [[3819, 4141], [-47, -22]], [[3679, 4125], [-69, 48]], [[3610, 4173], [12, 26]], [[3622, 4199], [84, -10]], [[1867, 4145], [11, -24]], [[1740, 4100], [23, 42]], [[1763, 4142], [104, 3]], [[2327, 4064], [23, 100]], [[2350, 4164], [80, -9]], [[2430, 4155], [187, 30]], [[2617, 4185], [5, -28]], [[4371, 4181], [3, -31]], [[4364, 4133], [-89, -19]], [[4275, 4114], [-1, 5]], [[4274, 4119], [97, 62]], [[6014, 4204], [-4, -22]], [[5809, 4095], [-2, 107]], [[5807, 4202], [188, 22]], [[5995, 4224], [19, -20]], [[4638, 4213], [7, -9]], [[4520, 4170], [52, 27]], [[4572, 4197], [66, 16]], [[3506, 4215], [104, -42]], [[3481, 4142], [-2, 40]], [[3479, 4182], [27, 33]], [[5803, 4231], [4, -29]], [[5685, 4070], [84, 172]], [[5769, 4242], [34, -11]], [[7267, 4207], [13, -28]], [[7118, 4150], [-14, 51]], [[7104, 4201], [4, 22]], [[7108, 4223], [159, -16]], [[3312, 4230], [26, -98]], [[3258, 4071], [-24, 149]], [[3234, 4220], [78, 10]], [[1011, 4092], [6, 63]], [[1017, 4155], [14, -97]], [[8363, 4181], [65, -55]], [[8351, 4151], [-8, 39]], [[8343, 4190], [20, -9]], [[5995, 4226], [0, -2]], [[5803, 4231], [192, -5]], [[4200, 4242], [-17, -98]], [[4041, 4148], [45, 48]], [[4086, 4196], [49, 50]], [[4135, 4246], [65, -4]], [[2791, 4219], [77, -15]], [[2868, 4204], [15, -26]], [[2794, 4147], [-44, 51]], [[2750, 4198], [41, 21]], [[5766, 4246], [3, -4]], [[5640, 4189], [126, 57]], [[6943, 4234], [25, -20]], [[6968, 4214], [-23, -62]], [[6945, 4152], [-65, -34]], [[6880, 4118], [-43, 60]], [[6837, 4178], [-12, 14]], [[6825, 4192], [59, 42]], [[6884, 4234], [59, 0]], [[7571, 4025], [-85, 65]], [[7481, 4112], [-6, 99]], [[7475, 4211], [107, -103]], [[4951, 4235], [51, -86]], [[4890, 4148], [-76, 50]], [[4814, 4198], [38, 34]], [[4852, 4232], [3, 7]], [[4855, 4239], [53, 14]], [[4908, 4253], [43, -18]], [[8239, 4125], [-45, 64]], [[8194, 4189], [149, 1]], [[7469, 4221], [6, -10]], [[7352, 4101], [76, 113]], [[7428, 4214], [41, 7]], [[2617, 4185], [47, 37]], [[2664, 4222], [86, -24]], [[1951, 4200], [11, -8]], [[1962, 4192], [38, -74]], [[1867, 4145], [84, 55]], [[2277, 4212], [-83, -179]], [[2077, 4106], [45, 10]], [[2122, 4116], [155, 96]], [[3312, 4230], [167, -48]], [[8198, 4201], [-4, -12]], [[8092, 4090], [58, 91]], [[8150, 4181], [48, 20]], [[2372, 3843], [-18, -4]], [[2277, 4212], [7, 6]], [[2284, 4218], [66, -54]], [[1420, 4126], [40, -23]], [[1259, 4022], [8, 117], [56, 45]], [[1323, 4184], [97, -58]], [[2968, 4237], [-9, -84]], [[2868, 4204], [17, 21]], [[2885, 4225], [83, 12]], [[6788, 4215], [-141, -73], [-76, -1]], [[6571, 4141], [113, 108]], [[6684, 4249], [76, 5]], [[6760, 4254], [28, -39]], [[3910, 4247], [27, -69]], [[3937, 4178], [32, -49]], [[3819, 4141], [71, 117]], [[3890, 4258], [20, -11]], [[4083, 4266], [3, -70]], [[3937, 4178], [93, 45]], [[4030, 4223], [6, -1]], [[4036, 4222], [47, 44]], [[3114, 4068], [26, 151], [48, 34]], [[3188, 4253], [46, -33]], [[7107, 4253], [1, -1]], [[7108, 4252], [0, -29]], [[7104, 4201], [-103, -84]], [[7001, 4117], [-56, 35]], [[6968, 4214], [139, 39]], [[7264, 4233], [3, -26]], [[7108, 4252], [156, -19]], [[3954, 4271], [76, -48]], [[3910, 4247], [44, 24]], [[1645, 4186], [19, -66]], [[1494, 4123], [60, 82]], [[1554, 4205], [91, -19]], [[7757, 4239], [52, -107]], [[7658, 4087], [57, 11]], [[7715, 4098], [42, 141]], [[5079, 4241], [35, -88]], [[4951, 4235], [35, 49]], [[4986, 4284], [93, -43]], [[7311, 4163], [29, 93]], [[7340, 4256], [17, 1]], [[7357, 4257], [71, -43]], [[3706, 4189], [22, 73], [139, 15]], [[3867, 4277], [23, -19]], [[1073, 4191], [114, -89]], [[1187, 4102], [-17, -48]], [[1017, 4155], [56, 36]], [[7924, 4256], [28, -89]], [[7846, 4154], [31, 86]], [[7877, 4240], [47, 16]], [[5963, 4285], [42, -40]], [[6005, 4245], [-10, -19]], [[5769, 4242], [133, 62], [61, -19]], [[7596, 4226], [51, -116]], [[7469, 4221], [57, 62]], [[7526, 4283], [70, -57]], [[6230, 4264], [-15, -39]], [[6215, 4225], [-201, -21]], [[6005, 4245], [127, 65]], [[6132, 4310], [98, -46]], [[1472, 4222], [-52, -96]], [[1323, 4184], [8, 1]], [[1331, 4185], [6, 8]], [[1337, 4193], [120, 46]], [[1457, 4239], [15, -17]], [[5545, 4316], [-37, -172]], [[5423, 4096], [80, 221]], [[5503, 4317], [42, -1]], [[2501, 4248], [-71, -93]], [[2284, 4218], [10, 9]], [[2294, 4227], [137, 56], [70, -35]], [[1472, 4222], [66, 30]], [[1538, 4252], [16, -47]], [[1419, 4274], [38, -35]], [[1337, 4193], [82, 81]], [[4449, 4171], [-25, 144]], [[4424, 4315], [22, 2]], [[4446, 4317], [58, -129]], [[2501, 4248], [21, 27]], [[2522, 4275], [81, 21]], [[2603, 4296], [61, -74]], [[3630, 4301], [-8, -102]], [[3506, 4215], [9, 33]], [[3515, 4248], [59, 61]], [[3574, 4309], [56, -8]], [[4767, 4334], [85, -102]], [[4814, 4198], [-64, -2]], [[4677, 4200], [51, 128]], [[4728, 4328], [39, 6]], [[1869, 4259], [82, -59]], [[1763, 4142], [30, 135]], [[1793, 4277], [76, -18]], [[7083, 4315], [-3, -14]], [[7080, 4301], [27, -48]], [[6943, 4234], [100, 74]], [[7043, 4308], [40, 7]], [[5275, 4198], [15, 55]], [[5290, 4253], [92, -6], [96, 94]], [[5478, 4341], [25, -24]], [[4371, 4181], [-9, 140]], [[4362, 4321], [33, 17]], [[4395, 4338], [29, -23]], [[1211, 4215], [-24, -113]], [[1073, 4191], [70, 61]], [[1143, 4252], [17, 5]], [[1160, 4257], [51, -42]], [[6000, 4325], [-37, -40]], [[5766, 4246], [-26, 63]], [[5740, 4309], [58, 34], [202, -18]], [[1276, 4261], [55, -76]], [[1211, 4215], [65, 46]], [[6898, 4321], [-14, -87]], [[6825, 4192], [-37, 23]], [[6760, 4254], [37, 62]], [[6797, 4316], [62, 19]], [[6859, 4335], [39, -14]], [[4251, 4346], [-51, -223]], [[4200, 4242], [40, 105]], [[4240, 4347], [11, -1]], [[4294, 4350], [68, -29]], [[4274, 4119], [-44, -14]], [[4251, 4346], [43, 4]], [[3049, 4278], [-2, -129], [51, -77]], [[2968, 4237], [25, 89]], [[2993, 4326], [56, -48]], [[8510, 4259], [121, -93]], [[8631, 4166], [-42, -60]], [[8467, 4143], [-22, 77]], [[8445, 4220], [65, 39]], [[3225, 4313], [-37, -60]], [[3049, 4278], [84, 58]], [[3133, 4336], [92, -23]], [[2441, 4323], [36, -28]], [[2477, 4295], [45, -20]], [[2294, 4227], [-36, 24]], [[2258, 4251], [1, 5]], [[2259, 4256], [79, 61], [103, 6]], [[3225, 4313], [35, 10]], [[3260, 4323], [22, 17]], [[3282, 4340], [233, -92]], [[2978, 4335], [15, -9]], [[2885, 4225], [-46, 112]], [[2839, 4337], [139, -2]], [[7924, 4256], [5, 70]], [[7929, 4326], [90, -192]], [[4544, 4322], [52, -13]], [[4596, 4309], [-24, -112]], [[4446, 4317], [17, 52]], [[4463, 4369], [81, -47]], [[4135, 4246], [60, 120]], [[4195, 4366], [45, -19]], [[4968, 4370], [44, -26]], [[5012, 4344], [-26, -60]], [[4908, 4253], [33, 71]], [[4941, 4324], [27, 46]], [[8296, 4317], [67, -136]], [[8198, 4201], [0, 63]], [[8198, 4264], [98, 53]], [[2122, 4116], [-48, 63]], [[2074, 4179], [65, 149]], [[2139, 4328], [14, -125], [105, 48]], [[4790, 4375], [2, -13]], [[4792, 4362], [-25, -28]], [[4728, 4328], [-23, 16]], [[4705, 4344], [9, 28]], [[4714, 4372], [76, 3]], [[4008, 4349], [28, -127]], [[3954, 4271], [-45, 74]], [[3909, 4345], [55, 28]], [[3964, 4373], [44, -24]], [[2141, 4334], [-2, -6]], [[2074, 4179], [-37, 110]], [[2037, 4289], [104, 45]], [[8088, 4337], [62, -156]], [[8077, 4127], [-40, 210]], [[8037, 4337], [26, 6]], [[8063, 4343], [25, -6]], [[5118, 4319], [-39, -78]], [[5012, 4344], [5, 28]], [[5017, 4372], [32, 18]], [[5049, 4390], [69, -71]], [[2236, 4348], [23, -92]], [[2141, 4334], [4, 1]], [[2145, 4335], [10, -3]], [[2155, 4332], [7, 5]], [[2162, 4337], [74, 11]], [[4073, 4373], [10, -107]], [[4008, 4349], [65, 24]], [[8510, 4259], [31, 33]], [[8541, 4292], [7, 3]], [[8548, 4295], [72, 29]], [[8620, 4324], [49, -58], [-38, -100]], [[6016, 4346], [-16, -21]], [[5740, 4309], [-1, 37]], [[5739, 4346], [38, 52]], [[5777, 4398], [239, -52]], [[2618, 4361], [-15, -65]], [[2477, 4295], [96, 68]], [[2573, 4363], [45, -2]], [[8037, 4138], [-50, 151]], [[7987, 4289], [38, 63]], [[8025, 4352], [12, -15]], [[6898, 4321], [39, 44]], [[6937, 4365], [37, 18]], [[6974, 4383], [69, -75]], [[4073, 4373], [16, 17]], [[4089, 4390], [10, 2]], [[4099, 4392], [27, 6]], [[4126, 4398], [69, -32]], [[7757, 4239], [-36, 114]], [[7721, 4353], [119, 11]], [[7840, 4364], [37, -124]], [[3282, 4340], [62, 36]], [[3344, 4376], [230, -67]], [[1780, 4291], [13, -14]], [[1645, 4186], [64, 128]], [[1709, 4314], [71, -23]], [[7956, 4353], [31, -64]], [[7929, 4326], [27, 27]], [[5229, 4333], [61, -80]], [[5118, 4319], [43, 69]], [[5161, 4388], [50, 22]], [[5211, 4410], [18, -77]], [[8395, 4256], [50, -36]], [[8296, 4317], [12, 42]], [[8308, 4359], [87, -103]], [[5462, 4404], [16, -63]], [[5229, 4333], [122, 7], [111, 64]], [[6859, 4335], [-31, 26]], [[6828, 4361], [22, 47]], [[6850, 4408], [56, 1]], [[6906, 4409], [31, -44]], [[5545, 4316], [39, 107]], [[5584, 4423], [155, -77]], [[6797, 4316], [-62, 31]], [[6735, 4347], [12, 65]], [[6747, 4412], [81, -51]], [[8088, 4337], [97, 40]], [[8185, 4377], [13, -113]], [[2841, 4380], [-2, -43]], [[2791, 4219], [4, 177]], [[2795, 4396], [46, -16]], [[4809, 4427], [8, -27]], [[4817, 4400], [-27, -25]], [[4714, 4372], [18, 48]], [[4732, 4420], [77, 7]], [[2939, 4399], [39, -64]], [[2841, 4380], [98, 19]], [[6309, 4338], [-72, -65]], [[6237, 4273], [-7, -9]], [[6132, 4310], [-26, 123]], [[6106, 4433], [203, -95]], [[3922, 4427], [42, -54]], [[3909, 4345], [-26, 10]], [[3883, 4355], [39, 72]], [[5049, 4390], [52, 54]], [[5101, 4444], [60, -56]], [[2441, 4323], [-9, 79]], [[2432, 4402], [9, 4]], [[2441, 4406], [132, -43]], [[2236, 4348], [126, 39]], [[2362, 4387], [49, 26]], [[2411, 4413], [21, -11]], [[2362, 4387], [49, 26]], [[7636, 4393], [24, -177], [55, -118]], [[7596, 4226], [12, 153]], [[7608, 4379], [-5, 44]], [[7603, 4423], [33, -30]], [[4857, 4451], [93, -26]], [[4950, 4425], [18, -55]], [[4941, 4324], [-124, 76]], [[4809, 4427], [2, 13]], [[4811, 4440], [46, 11]], [[2078, 4386], [67, -51]], [[2037, 4289], [-19, -19]], [[2018, 4270], [-131, 25]], [[1887, 4295], [30, 29]], [[1917, 4324], [157, 82]], [[2074, 4406], [4, -20]], [[6987, 4439], [99, -14]], [[7086, 4425], [-6, -57]], [[7080, 4368], [3, -53]], [[6974, 4383], [13, 56]], [[2764, 4430], [31, -34]], [[2664, 4222], [73, 45], [5, 159]], [[2742, 4426], [22, 4]], [[1597, 4351], [112, -37]], [[1538, 4252], [-15, 130]], [[1523, 4382], [74, -31]], [[4244, 4421], [38, -34]], [[4282, 4387], [12, -37]], [[4126, 4398], [55, 58]], [[4181, 4456], [63, -35]], [[4362, 4460], [33, -122]], [[4282, 4387], [60, 78]], [[4342, 4465], [20, -5]], [[7177, 4422], [-3, -15]], [[7174, 4407], [-94, -39]], [[7086, 4425], [91, -3]], [[2618, 4361], [81, 69]], [[2699, 4430], [43, -4]], [[5558, 4459], [20, -5]], [[5578, 4454], [6, -31]], [[5462, 4404], [32, 66]], [[5494, 4470], [64, -11]], [[4244, 4421], [45, 49]], [[4289, 4470], [53, -5]], [[7663, 4449], [58, -96]], [[7636, 4393], [27, 56]], [[8151, 4433], [34, -47]], [[8185, 4386], [0, -9]], [[8063, 4343], [88, 90]], [[4166, 4471], [15, -15]], [[4099, 4392], [26, 86]], [[4125, 4478], [41, -7]], [[5152, 4481], [66, -50]], [[5218, 4431], [-7, -21]], [[5101, 4444], [51, 37]], [[6016, 4346], [29, 31]], [[6045, 4377], [72, 85]], [[6117, 4462], [34, 30]], [[6151, 4492], [-45, -59]], [[3565, 4472], [95, -99]], [[3660, 4373], [-30, -72]], [[3344, 4376], [159, 94]], [[3503, 4470], [62, 2]], [[5025, 4502], [-8, -130]], [[4950, 4425], [37, 70]], [[4987, 4495], [38, 7]], [[5902, 4499], [65, -105], [78, -17]], [[5777, 4398], [42, 42]], [[5819, 4440], [83, 59]], [[4732, 4420], [-63, 2]], [[4669, 4422], [33, 83]], [[4702, 4505], [109, -65]], [[6803, 4481], [47, -73]], [[6747, 4412], [-24, 50]], [[6723, 4462], [80, 19]], [[1204, 4399], [22, -81], [-66, -61]], [[1143, 4252], [-62, 77], [49, 89]], [[1130, 4418], [74, -19]], [[4955, 4499], [32, -4]], [[4857, 4451], [13, 55]], [[4870, 4506], [85, -7]], [[4586, 4489], [2, -37]], [[4588, 4452], [-1, -7]], [[4587, 4445], [-23, -102]], [[4564, 4343], [-20, -21]], [[4463, 4369], [45, 89]], [[4508, 4458], [25, 54]], [[4533, 4512], [53, -23]], [[7971, 4465], [54, -113]], [[7956, 4353], [-7, 121]], [[7949, 4474], [22, -9]], [[7840, 4364], [-17, 115]], [[7823, 4479], [21, 1]], [[7844, 4480], [85, -154]], [[7459, 4469], [13, -137]], [[7472, 4332], [-114, 1]], [[7358, 4333], [-16, 19]], [[7342, 4352], [42, 132]], [[7384, 4484], [75, -15]], [[2366, 4479], [76, -45]], [[2442, 4434], [-1, -28]], [[2162, 4337], [183, 94], [-12, 54]], [[2333, 4485], [33, -6]], [[4359, 4527], [3, -67]], [[4289, 4470], [-12, 11]], [[4277, 4481], [48, 34]], [[4325, 4515], [34, 12]], [[4629, 4470], [-41, -18]], [[4586, 4489], [43, -19]], [[4705, 4509], [-3, -4]], [[4669, 4422], [-37, 49]], [[4632, 4471], [35, 59]], [[4667, 4530], [38, -21]], [[1412, 4455], [7, -181]], [[1276, 4261], [66, 176]], [[1342, 4437], [65, 18]], [[1407, 4455], [5, 0]], [[7663, 4449], [-1, 3]], [[7662, 4452], [92, 35]], [[7754, 4487], [69, -8]], [[4508, 4458], [-59, 63]], [[4449, 4521], [38, 7]], [[4487, 4528], [46, -16]], [[1806, 4389], [-26, -98]], [[1597, 4351], [61, 98]], [[1658, 4449], [78, 27]], [[1736, 4476], [70, -87]], [[7971, 4465], [101, 23]], [[8072, 4488], [24, 4]], [[8096, 4492], [55, -59]], [[5902, 4499], [24, 40]], [[5926, 4539], [78, -117], [113, 40]], [[7342, 4352], [-49, 13]], [[7293, 4365], [-18, 120]], [[7275, 4485], [36, 14]], [[7311, 4499], [73, -15]], [[2155, 4332], [37, 95], [115, 78]], [[2307, 4505], [26, -20]], [[6977, 4524], [10, -85]], [[6906, 4409], [20, 103]], [[6926, 4512], [51, 12]], [[6803, 4481], [62, 56]], [[6865, 4537], [61, -25]], [[8385, 4493], [56, -137], [-46, -100]], [[8308, 4359], [-9, 37]], [[8299, 4396], [50, 83]], [[8349, 4479], [36, 14]], [[1630, 4461], [28, -12]], [[1523, 4382], [5, 56]], [[1528, 4438], [102, 23]], [[8659, 4484], [-39, -160]], [[8548, 4295], [-15, 191]], [[8533, 4486], [126, -2]], [[4318, 4556], [7, -41]], [[4277, 4481], [-39, 66]], [[4238, 4547], [80, 9]], [[6443, 4554], [71, -153]], [[6514, 4401], [-125, -99]], [[6389, 4302], [12, 179]], [[6401, 4481], [-8, 58]], [[6393, 4539], [50, 15]], [[8433, 4457], [108, -165]], [[8385, 4493], [48, -36]], [[4168, 4562], [70, -15]], [[4166, 4471], [2, 91]], [[4874, 4527], [-4, -21]], [[4705, 4509], [28, 57]], [[4733, 4566], [141, -39]], [[1204, 4399], [70, 86]], [[1274, 4485], [68, -48]], [[4125, 4478], [-51, 40]], [[4074, 4518], [48, 43]], [[4122, 4561], [41, 8]], [[4163, 4569], [5, -7]], [[5903, 4575], [23, -36]], [[5819, 4440], [-30, 115], [114, 20]], [[4389, 4578], [60, -57]], [[4359, 4527], [30, 51]], [[7136, 4563], [61, -66]], [[7197, 4497], [-3, -11]], [[7194, 4486], [-96, 28]], [[7098, 4514], [38, 49]], [[5430, 4582], [64, -112]], [[5218, 4431], [158, 83], [32, 74]], [[5408, 4588], [22, -6]], [[4956, 4600], [38, -24]], [[4994, 4576], [-39, -77]], [[4874, 4527], [78, 78]], [[4952, 4605], [4, -5]], [[7907, 4554], [22, -48]], [[7929, 4506], [20, -32]], [[7844, 4480], [25, 86]], [[7869, 4566], [38, -12]], [[3329, 4585], [5, -7]], [[3334, 4578], [-151, -87], [-50, -155]], [[2939, 4399], [70, 103]], [[3009, 4502], [206, 78]], [[3215, 4580], [114, 5]], [[2248, 4564], [27, -17]], [[2275, 4547], [32, -42]], [[2078, 4386], [159, 108], [11, 70]], [[4436, 4607], [73, -9]], [[4509, 4598], [-22, -70]], [[4389, 4578], [47, 29]], [[2442, 4434], [85, 122]], [[2527, 4556], [55, 17], [117, -143]], [[2366, 4479], [57, 76]], [[2423, 4555], [104, 1]], [[8024, 4553], [48, -65]], [[7929, 4506], [74, 39]], [[8003, 4545], [21, 8]], [[1977, 4529], [30, -46]], [[2007, 4483], [-24, -17]], [[1983, 4466], [-177, -77]], [[1736, 4476], [25, 58]], [[1761, 4534], [71, -32], [145, 27]], [[1248, 4528], [26, -43]], [[1130, 4418], [27, 106], [91, 4]], [[5152, 4481], [-19, 44]], [[5133, 4525], [34, 47]], [[5167, 4572], [199, 49]], [[5366, 4621], [42, -33]], [[3990, 4616], [132, -55]], [[4074, 4518], [-79, -56]], [[3995, 4462], [-65, 30]], [[3930, 4492], [-22, 107]], [[3908, 4599], [82, 17]], [[5730, 4621], [-79, -150], [-73, -17]], [[5558, 4459], [42, 140], [131, 25]], [[5731, 4624], [-1, -3]], [[7098, 4594], [38, -31]], [[7098, 4514], [-82, 40]], [[7016, 4554], [12, 38]], [[7028, 4592], [70, 2]], [[8276, 4577], [38, -45]], [[8314, 4532], [35, -53]], [[8299, 4396], [-91, 11]], [[8208, 4407], [38, 81]], [[8246, 4488], [30, 89]], [[7354, 4590], [30, -106]], [[7311, 4499], [-21, 4]], [[7290, 4503], [15, 102]], [[7305, 4605], [49, -15]], [[6796, 4615], [18, -21]], [[6814, 4594], [51, -57]], [[6723, 4462], [-79, 91]], [[6644, 4553], [152, 62]], [[3034, 4577], [-25, -75]], [[2764, 4430], [8, 104]], [[2772, 4534], [146, 67]], [[2918, 4601], [68, 7]], [[2986, 4608], [48, -31]], [[7290, 4503], [-44, 88]], [[7246, 4591], [59, 14]], [[4580, 4610], [87, -80]], [[4632, 4471], [-3, -1]], [[4509, 4598], [37, 35]], [[4546, 4633], [34, -23]], [[6194, 4623], [17, -122], [72, -131]], [[6283, 4370], [26, -32]], [[6151, 4492], [-29, 69]], [[6122, 4561], [72, 62]], [[2376, 4590], [47, -35]], [[2275, 4547], [30, 36]], [[2305, 4583], [71, 7]], [[4318, 4556], [-5, 36]], [[4313, 4592], [97, 45]], [[4410, 4637], [26, -30]], [[6547, 4557], [75, -60], [53, -176]], [[6675, 4321], [9, -72]], [[6571, 4141], [-172, -44]], [[6394, 4155], [175, 65], [-55, 181]], [[6443, 4554], [66, 78]], [[6509, 4632], [38, -75]], [[7907, 4554], [19, 40]], [[7926, 4594], [77, -49]], [[7194, 4602], [9, -95]], [[7203, 4507], [-6, -10]], [[7098, 4594], [-2, 20]], [[7096, 4614], [98, -12]], [[4642, 4644], [90, -40]], [[4732, 4604], [1, -38]], [[4580, 4610], [62, 34]], [[1564, 4566], [9, -2]], [[1573, 4564], [57, -103]], [[1528, 4438], [-116, 17]], [[1407, 4455], [8, 22]], [[1415, 4477], [68, 78]], [[1483, 4555], [81, 11]], [[4269, 4643], [44, -51]], [[4163, 4569], [23, 56]], [[4186, 4625], [83, 18]], [[1248, 4528], [30, 26]], [[1278, 4554], [74, 3], [63, -80]], [[2217, 4584], [31, -20]], [[2074, 4406], [0, 65]], [[2074, 4471], [35, 51]], [[2109, 4522], [48, 75]], [[2157, 4597], [60, -13]], [[4785, 4648], [130, -40]], [[4915, 4608], [37, -3]], [[4732, 4604], [40, 48]], [[4772, 4652], [13, -4]], [[7703, 4563], [51, -76]], [[7662, 4452], [-57, 62]], [[7605, 4514], [28, 65]], [[7633, 4579], [70, -16]], [[3583, 4619], [27, -94]], [[3610, 4525], [-45, -53]], [[3503, 4470], [-27, 18]], [[3476, 4488], [42, 124]], [[3518, 4612], [24, 28]], [[3542, 4640], [41, -21]], [[6401, 4481], [-118, -111]], [[6194, 4623], [26, 3]], [[6220, 4626], [74, 19], [99, -106]], [[1747, 4597], [14, -63]], [[1573, 4564], [174, 33]], [[8395, 4601], [44, -54]], [[8439, 4547], [-6, -90]], [[8314, 4532], [81, 69]], [[5949, 4645], [-46, -70]], [[5730, 4621], [219, 24]], [[3249, 4644], [-34, -64]], [[3034, 4577], [30, 50], [185, 17]], [[5949, 4645], [55, 24]], [[6004, 4669], [118, -108]], [[3476, 4488], [-83, 27]], [[3393, 4515], [-59, 63]], [[3329, 4585], [68, 65]], [[3397, 4650], [121, -38]], [[8045, 4613], [13, -12]], [[8058, 4601], [-34, -48]], [[7926, 4594], [34, 39]], [[7960, 4633], [85, -20]], [[7483, 4647], [32, -73]], [[7515, 4574], [-8, -16]], [[7507, 4558], [-24, -35]], [[7483, 4523], [-85, 107]], [[7398, 4630], [77, 18]], [[7475, 4648], [8, -1]], [[8155, 4567], [53, -40]], [[8208, 4527], [-112, -35]], [[8058, 4601], [20, 28]], [[8078, 4629], [77, -62]], [[5171, 4650], [94, 15], [101, -44]], [[5167, 4572], [-17, 56], [-156, -52]], [[4956, 4600], [72, 62]], [[5028, 4662], [143, -12]], [[7832, 4629], [37, -63]], [[7703, 4563], [82, 81]], [[7785, 4644], [47, -15]], [[6924, 4660], [78, -43]], [[7002, 4617], [26, -25]], [[7016, 4554], [-39, -30]], [[6814, 4594], [83, 63]], [[6897, 4657], [27, 3]], [[7275, 4485], [-35, -12]], [[7240, 4473], [-37, 34]], [[7194, 4602], [-6, 37], [23, 11], [2, 9], [22, 3]], [[7235, 4662], [-5, -16], [22, -6], [-6, -49]], [[2217, 4584], [9, 49]], [[2226, 4633], [77, 11]], [[2303, 4644], [2, -61]], [[4744, 4684], [28, -32]], [[4642, 4644], [-5, 14]], [[4637, 4658], [52, 16]], [[4689, 4674], [55, 10]], [[7239, 4661], [-4, 1]], [[7096, 4614], [-1, 47]], [[7095, 4661], [38, 15], [54, -3], [52, -9], [0, -3]], [[4591, 4699], [46, -41]], [[4546, 4633], [0, 25]], [[4546, 4658], [45, 41]], [[7360, 4673], [8, -52]], [[7368, 4621], [-14, -31]], [[7239, 4661], [17, 10]], [[7256, 4671], [104, 2]], [[2064, 4649], [45, -127]], [[2074, 4471], [-67, 12]], [[1977, 4529], [-24, 47]], [[1953, 4576], [32, 50]], [[1985, 4626], [79, 23]], [[4124, 4677], [62, -52]], [[3990, 4616], [2, 27]], [[3992, 4643], [52, 42]], [[4044, 4685], [80, -8]], [[7088, 4660], [7, 1]], [[7002, 4617], [34, 70]], [[7036, 4687], [52, -27]], [[8144, 4634], [11, -67]], [[8078, 4629], [21, 32]], [[8099, 4661], [45, -27]], [[6796, 4615], [-25, 34]], [[6771, 4649], [106, 46]], [[6877, 4695], [20, -38]], [[4915, 4608], [-45, 85]], [[4870, 4693], [20, -3]], [[4890, 4690], [138, -28]], [[4840, 4710], [30, -17]], [[4785, 4648], [55, 62]], [[1747, 4597], [22, 13]], [[1769, 4610], [102, 44]], [[1871, 4654], [82, -78]], [[2157, 4597], [-1, 57]], [[2156, 4654], [38, 14]], [[2194, 4668], [32, -35]], [[4394, 4714], [93, -11]], [[4487, 4703], [59, -45]], [[4410, 4637], [-41, 77]], [[4369, 4714], [25, 0]], [[8247, 4643], [29, -66]], [[8246, 4488], [-38, 39]], [[8144, 4634], [19, 30]], [[8163, 4664], [84, -21]], [[6741, 4683], [30, -34]], [[6644, 4553], [-97, 4]], [[6509, 4632], [9, 65]], [[6518, 4697], [223, -14]], [[7832, 4629], [73, 53]], [[7905, 4682], [55, -49]], [[8592, 4665], [67, -181]], [[8533, 4486], [-39, 67]], [[8494, 4553], [58, 73]], [[8552, 4626], [40, 39]], [[3137, 4720], [121, -68]], [[3258, 4652], [-9, -8]], [[2986, 4608], [62, 82]], [[3048, 4690], [89, 30]], [[4542, 4725], [49, -26]], [[4487, 4703], [27, 38]], [[4514, 4741], [28, -16]], [[2064, 4649], [32, 40]], [[2096, 4689], [60, -35]], [[5517, 4717], [210, -61]], [[5727, 4656], [4, -32]], [[5430, 4582], [-12, 85], [62, 79]], [[5480, 4746], [37, -29]], [[7785, 4644], [-40, 39]], [[7745, 4683], [115, 23]], [[7860, 4706], [45, -24]], [[4313, 4739], [56, -25]], [[4269, 4643], [20, 106]], [[4289, 4749], [24, -10]], [[3519, 4731], [23, -91]], [[3397, 4650], [42, 84]], [[3439, 4734], [80, -3]], [[7026, 4729], [10, -42]], [[6924, 4660], [30, 68]], [[6954, 4728], [72, 1]], [[1278, 4554], [95, 121]], [[1373, 4675], [110, -120]], [[7711, 4721], [34, -38]], [[7633, 4579], [-10, 13]], [[7623, 4592], [-8, 60]], [[7615, 4652], [81, 67]], [[7696, 4719], [15, 2]], [[6886, 4729], [-9, -34]], [[6741, 4683], [130, 62]], [[6871, 4745], [15, -16]], [[7623, 4592], [-140, 55]], [[7475, 4648], [-6, 26]], [[7469, 4674], [60, 58]], [[7529, 4732], [86, -80]], [[8388, 4676], [8, -27]], [[8396, 4649], [-1, -48]], [[8247, 4643], [37, 27]], [[8284, 4670], [42, 37]], [[8326, 4707], [62, -31]], [[4755, 4757], [-11, -73]], [[4689, 4674], [-22, 96]], [[4667, 4770], [88, -13]], [[4542, 4725], [22, 26]], [[4564, 4751], [79, 20]], [[4643, 4771], [24, -1]], [[6955, 4751], [-1, -23]], [[6886, 4729], [69, 22]], [[3992, 4643], [-24, 84]], [[3968, 4727], [22, 53]], [[3990, 4780], [54, -95]], [[4124, 4677], [19, 24]], [[4143, 4701], [104, 83]], [[4247, 4784], [42, -35]], [[2424, 4727], [-121, -83]], [[2194, 4668], [6, 38]], [[2200, 4706], [20, 12]], [[2220, 4718], [60, -24], [144, 33]], [[1536, 4689], [28, -123]], [[1373, 4675], [-5, 12]], [[1368, 4687], [168, 2]], [[7644, 4757], [52, -38]], [[7529, 4732], [6, 0]], [[7535, 4732], [19, 0]], [[7554, 4732], [60, 23]], [[7614, 4755], [30, 2]], [[2479, 4754], [18, -5]], [[2497, 4749], [25, -37], [-146, -122]], [[2424, 4727], [55, 27]], [[8484, 4725], [103, -45]], [[8587, 4680], [5, -15]], [[8552, 4626], [-156, 23]], [[8388, 4676], [18, 45]], [[8406, 4721], [78, 4]], [[7860, 4706], [4, 14]], [[7864, 4720], [54, 18]], [[7918, 4738], [127, -125]], [[3428, 4747], [11, -13]], [[3258, 4652], [66, 125]], [[3324, 4777], [9, 2]], [[3333, 4779], [95, -32]], [[1923, 4739], [10, -5]], [[1933, 4734], [52, -108]], [[1871, 4654], [52, 85]], [[2086, 4704], [10, -15]], [[1933, 4734], [153, -30]], [[1711, 4698], [58, -88]], [[1536, 4689], [34, 39]], [[1570, 4728], [141, -30]], [[2132, 4753], [68, -47]], [[2086, 4704], [3, 21]], [[2089, 4725], [43, 28]], [[2929, 4773], [45, -110], [-56, -62]], [[2772, 4534], [-83, 107]], [[2689, 4641], [172, 127]], [[2861, 4768], [68, 5]], [[4380, 4800], [14, -86]], [[4313, 4739], [56, 62]], [[4369, 4801], [11, -1]], [[7142, 4784], [-54, -124]], [[7026, 4729], [-2, 22]], [[7024, 4751], [118, 33]], [[5803, 4811], [-76, -155]], [[5517, 4717], [142, 31]], [[5659, 4748], [144, 63]], [[2575, 4776], [81, -60]], [[2656, 4716], [33, -75]], [[2497, 4749], [78, 27]], [[6206, 4723], [14, -97]], [[6004, 4669], [9, 87]], [[6013, 4756], [127, 51], [66, -84]], [[7825, 4768], [39, -48]], [[7711, 4721], [43, 65]], [[7754, 4786], [71, -18]], [[6856, 4760], [15, -15]], [[6518, 4697], [-24, 35]], [[6494, 4732], [131, 10], [107, 50]], [[6732, 4792], [50, 20]], [[6782, 4812], [74, -52]], [[3008, 4770], [40, -80]], [[2929, 4773], [79, -3]], [[4245, 4787], [2, -3]], [[4143, 4701], [14, 121]], [[4157, 4822], [15, 6]], [[4172, 4828], [73, -41]], [[4380, 4800], [85, 32]], [[4465, 4832], [49, -91]], [[8099, 4661], [-15, 51]], [[8084, 4712], [36, 74]], [[8120, 4786], [43, -122]], [[7207, 4818], [5, -10]], [[7212, 4808], [27, -102]], [[7239, 4706], [17, -35]], [[7142, 4784], [35, 36]], [[7177, 4820], [30, -2]], [[7644, 4757], [47, 40]], [[7691, 4797], [63, -11]], [[3123, 4820], [14, -100]], [[3008, 4770], [28, 37]], [[3036, 4807], [87, 13]], [[7469, 4674], [-18, 26]], [[7451, 4700], [-6, 108]], [[7445, 4808], [90, -76]], [[2463, 4810], [10, -20]], [[2473, 4790], [6, -36]], [[2220, 4718], [59, 61]], [[2279, 4779], [44, -30], [140, 61]], [[5630, 4826], [29, -78]], [[5480, 4746], [-31, 77]], [[5449, 4823], [181, 3]], [[5374, 4854], [35, -15]], [[5409, 4839], [23, -5]], [[5432, 4834], [17, -11]], [[5171, 4650], [-145, 93]], [[5026, 4743], [260, 75]], [[5286, 4818], [88, 36]], [[3990, 4780], [47, 31]], [[4037, 4811], [41, 38]], [[4078, 4849], [79, -27]], [[7451, 4700], [-86, 15]], [[7365, 4715], [-28, 20]], [[7337, 4735], [35, 81]], [[7372, 4816], [29, 17]], [[7401, 4833], [44, -25]], [[5977, 4857], [36, -101]], [[5803, 4811], [26, 15]], [[5829, 4826], [148, 31]], [[8109, 4801], [11, -15]], [[8084, 4712], [-54, 54]], [[8030, 4766], [60, 51]], [[8090, 4817], [19, -16]], [[6950, 4848], [5, -97]], [[6856, 4760], [38, 75]], [[6894, 4835], [56, 13]], [[7936, 4816], [-18, -78]], [[7825, 4768], [73, 56]], [[7898, 4824], [38, -8]], [[7024, 4751], [4, 97]], [[7028, 4848], [149, -28]], [[1680, 4795], [31, -97]], [[1570, 4728], [33, 65]], [[1603, 4793], [77, 2]], [[3123, 4820], [18, 3]], [[3141, 4823], [50, 28], [133, -74]], [[7965, 4825], [65, -59]], [[7936, 4816], [29, 9]], [[4904, 4864], [95, -26]], [[4999, 4838], [-16, -24]], [[4983, 4814], [-119, -53]], [[4864, 4761], [-6, 19]], [[4858, 4780], [6, 34]], [[4864, 4814], [24, 63]], [[4888, 4877], [16, -13]], [[3993, 4857], [44, -46]], [[3968, 4727], [-69, 68]], [[3899, 4795], [-1, 2]], [[3898, 4797], [47, 72]], [[3945, 4869], [48, -12]], [[8221, 4743], [63, -73]], [[8109, 4801], [49, 27]], [[8158, 4828], [63, -85]], [[2266, 4835], [13, -56]], [[2132, 4753], [29, 21]], [[2161, 4774], [105, 61]], [[4782, 4881], [82, -67]], [[4858, 4780], [-76, 27]], [[4782, 4807], [0, 74]], [[2872, 4826], [-11, -58]], [[2656, 4716], [86, 127], [130, -17]], [[2089, 4725], [-27, 71]], [[2062, 4796], [43, 31]], [[2105, 4827], [56, -53]], [[4549, 4807], [15, -56]], [[4465, 4832], [-15, 26]], [[4450, 4858], [29, 20]], [[4479, 4878], [70, -71]], [[1901, 4789], [22, -14]], [[1923, 4775], [0, -36]], [[1680, 4795], [41, 31]], [[1721, 4826], [45, -49], [135, 12]], [[5026, 4743], [118, 148]], [[5144, 4891], [142, -73]], [[6202, 4833], [36, -16]], [[6238, 4817], [-32, -94]], [[5977, 4857], [6, 18]], [[5983, 4875], [70, -38], [149, -4]], [[1999, 4835], [63, -39]], [[1923, 4775], [76, 60]], [[8427, 4838], [57, -113]], [[8406, 4721], [-27, 114]], [[8379, 4835], [48, 3]], [[4369, 4801], [-14, 93]], [[4355, 4894], [95, -36]], [[6708, 4868], [41, -32]], [[6749, 4836], [-17, -44]], [[6494, 4732], [-23, 50]], [[6471, 4782], [26, 57]], [[6497, 4839], [51, 34]], [[6548, 4873], [45, 18]], [[6593, 4891], [115, -23]], [[5118, 4910], [24, -19]], [[5142, 4891], [2, 0]], [[4890, 4690], [93, 124]], [[4999, 4838], [106, 68]], [[5105, 4906], [10, 5]], [[5115, 4911], [3, -1]], [[2935, 4887], [84, -55]], [[3019, 4832], [17, -25]], [[2872, 4826], [63, 61]], [[8514, 4834], [73, -154]], [[8427, 4838], [37, 15]], [[8464, 4853], [50, -19]], [[3898, 4797], [-163, 80]], [[3735, 4877], [-7, 24]], [[3728, 4901], [13, 6]], [[3741, 4907], [204, -38]], [[3179, 4881], [-38, -58]], [[3019, 4832], [47, 39]], [[3066, 4871], [78, 25]], [[3144, 4896], [35, -15]], [[7655, 4878], [15, 1]], [[7670, 4879], [21, -82]], [[7614, 4755], [-36, 124]], [[7578, 4879], [77, -1]], [[2402, 4861], [61, -51]], [[2266, 4835], [87, 49]], [[2353, 4884], [49, -23]], [[4282, 4905], [-37, -118]], [[4172, 4828], [18, 90]], [[4190, 4918], [92, -13]], [[5646, 4846], [-16, -20]], [[5432, 4834], [38, 39]], [[5470, 4873], [117, 54]], [[5587, 4927], [59, -81]], [[7865, 4890], [33, -66]], [[7754, 4786], [8, 93]], [[7762, 4879], [40, -3]], [[7802, 4876], [63, 14]], [[5081, 4906], [-177, -42]], [[4888, 4877], [49, 50]], [[4937, 4927], [144, -21]], [[4039, 4935], [39, -86]], [[3993, 4857], [-21, 39]], [[3972, 4896], [23, 35]], [[3995, 4931], [44, 4]], [[6802, 4930], [3, -15]], [[6805, 4915], [-56, -79]], [[6708, 4868], [58, 61]], [[6766, 4929], [36, 1]], [[5728, 4943], [45, -16]], [[5773, 4927], [56, -101]], [[5646, 4846], [51, 105]], [[5697, 4951], [31, -8]], [[6238, 4817], [54, 76]], [[6292, 4893], [82, 45]], [[6374, 4938], [97, -156]], [[5081, 4906], [24, 0]], [[4909, 4935], [28, -8]], [[4782, 4881], [32, 53]], [[4814, 4934], [43, 24]], [[4857, 4958], [52, -23]], [[1368, 4687], [-6, 144], [91, 49]], [[1453, 4880], [61, -76], [89, -11]], [[4159, 4936], [31, -18]], [[4039, 4935], [120, 1]], [[3335, 4940], [109, -76]], [[3444, 4864], [-16, -117]], [[3333, 4779], [-35, 153]], [[3298, 4932], [37, 8]], [[4476, 4969], [9, -4]], [[4485, 4965], [-6, -87]], [[4355, 4894], [-38, 23]], [[4317, 4917], [3, 20]], [[4320, 4937], [56, 31]], [[4376, 4968], [100, 1]], [[3038, 4934], [28, -63]], [[2935, 4887], [-34, 64]], [[2901, 4951], [137, -17]], [[6593, 4891], [113, 81]], [[6706, 4972], [60, -43]], [[6174, 4972], [83, 5], [35, -84]], [[6202, 4833], [-72, 85], [22, 61]], [[6152, 4979], [22, -7]], [[1638, 4880], [28, 12]], [[1666, 4892], [55, -66]], [[1453, 4880], [12, 27]], [[1465, 4907], [109, -52], [64, 25]], [[4909, 4935], [48, 59]], [[4957, 4994], [158, -83]], [[5604, 4995], [-17, -68]], [[5470, 4873], [134, 122]], [[3741, 4907], [22, 50]], [[3763, 4957], [61, 32]], [[3824, 4989], [58, 16]], [[3882, 5005], [90, -109]], [[1989, 4956], [19, -87]], [[2008, 4869], [-9, -34]], [[1901, 4789], [-31, 77]], [[1870, 4866], [119, 90]], [[5983, 4875], [88, 87]], [[6071, 4962], [39, 39]], [[6110, 5001], [42, -22]], [[1801, 4940], [69, -74]], [[1666, 4892], [62, 45]], [[1728, 4937], [73, 3]], [[3684, 5012], [79, -55]], [[3728, 4901], [-162, 37]], [[3566, 4938], [118, 74]], [[2279, 4968], [7, -13]], [[2286, 4955], [66, -51]], [[2352, 4904], [1, -20]], [[2105, 4827], [72, 145]], [[2177, 4972], [102, -4]], [[2856, 4995], [45, -44]], [[2575, 4776], [97, 26], [53, 115]], [[2725, 4917], [131, 78]], [[3500, 5004], [0, -31]], [[3500, 4973], [-21, -67]], [[3479, 4906], [-35, -42]], [[3335, 4940], [23, 33]], [[3358, 4973], [31, 30]], [[3389, 5003], [111, 1]], [[2008, 4869], [64, 77]], [[2072, 4946], [43, 26]], [[2115, 4972], [62, 0]], [[5668, 5030], [29, -79]], [[5604, 4995], [64, 35]], [[6840, 5015], [51, -33]], [[6891, 4982], [-19, -79]], [[6872, 4903], [-67, 12]], [[6802, 4930], [24, 90]], [[6826, 5020], [14, -5]], [[2724, 4942], [1, -25]], [[2473, 4790], [159, 106], [-18, 105]], [[2614, 5001], [110, -59]], [[3930, 5028], [80, -19]], [[4010, 5009], [-15, -78]], [[3882, 5005], [12, 20]], [[3894, 5025], [36, 3]], [[3179, 4881], [119, 51]], [[8410, 4969], [16, -32]], [[8426, 4937], [-83, -37]], [[8343, 4900], [-46, 76]], [[8297, 4976], [113, -7]], [[1628, 4986], [10, -106]], [[1465, 4907], [39, 86]], [[1504, 4993], [124, -7]], [[4869, 5071], [-12, -113]], [[4814, 4934], [-63, 49]], [[4751, 4983], [118, 88]], [[2512, 5024], [-30, -114], [-80, -49]], [[2352, 4904], [60, 91], [82, 39]], [[2494, 5034], [18, -10]], [[7783, 5005], [38, -73]], [[7821, 4932], [-19, -56]], [[7762, 4879], [-25, 38]], [[7737, 4917], [-21, 88]], [[7716, 5005], [21, 33]], [[7737, 5038], [46, -33]], [[2856, 4995], [1, 38]], [[2857, 5033], [1, 8]], [[2858, 5041], [23, 11]], [[2881, 5052], [157, -118]], [[1671, 5018], [57, -81]], [[1628, 4986], [43, 32]], [[6706, 4972], [-28, 10]], [[6678, 4982], [-11, 57]], [[6667, 5039], [63, 25]], [[6730, 5064], [25, 8]], [[6755, 5072], [71, -52]], [[4957, 4994], [80, 103]], [[5037, 5097], [81, -187]], [[2638, 5049], [-24, -48]], [[2512, 5024], [126, 25]], [[1989, 4956], [8, 73]], [[1997, 5029], [75, -83]], [[1989, 5040], [8, -11]], [[1801, 4940], [40, 29]], [[1841, 4969], [89, 68]], [[1930, 5037], [59, 3]], [[3641, 5072], [43, -60]], [[3566, 4938], [-66, 35]], [[3500, 5004], [51, 93]], [[3551, 5097], [90, -25]], [[5971, 5104], [100, -142]], [[5773, 4927], [198, 177]], [[6667, 5039], [-37, 48]], [[6630, 5087], [30, 19]], [[6660, 5106], [70, -42]], [[3076, 5083], [71, -67], [-3, -120]], [[2881, 5052], [5, 5]], [[2886, 5057], [190, 26]], [[6378, 5075], [-4, -137]], [[6174, 4972], [4, 86], [99, 58]], [[6277, 5116], [101, -41]], [[2746, 5043], [-22, -101]], [[2638, 5049], [35, 40]], [[2673, 5089], [73, -46]], [[3188, 5087], [170, -114]], [[3076, 5083], [6, 18]], [[3082, 5101], [16, 3]], [[3098, 5104], [90, -17]], [[3292, 5106], [41, -29]], [[3333, 5077], [39, -57]], [[3372, 5020], [17, -17]], [[3188, 5087], [104, 19]], [[2147, 5078], [100, 4]], [[2247, 5082], [32, -114]], [[2115, 4972], [19, 105]], [[2134, 5077], [13, 1]], [[3779, 5006], [45, -17]], [[3641, 5072], [25, 48]], [[3666, 5120], [113, -114]], [[3487, 5121], [64, -24]], [[3372, 5020], [115, 101]], [[5374, 4854], [-57, 179], [88, 115]], [[5405, 5148], [44, -83], [-40, -226]], [[4903, 5136], [-34, -65]], [[4751, 4983], [-71, -17]], [[4680, 4966], [2, 31]], [[4682, 4997], [68, 98], [128, 53]], [[4878, 5148], [25, -12]], [[2479, 5110], [15, -76]], [[2286, 4955], [45, 32]], [[2331, 4987], [85, 105]], [[2416, 5092], [63, 18]], [[4270, 5157], [50, -220]], [[4317, 4917], [-18, -8]], [[4299, 4909], [-61, 64]], [[4238, 4973], [-62, 45]], [[4176, 5018], [2, 79]], [[4178, 5097], [92, 60]], [[1606, 5093], [65, -75]], [[1504, 4993], [41, 84]], [[1545, 5077], [61, 16]], [[3981, 5122], [-51, -94]], [[3894, 5025], [-5, 121]], [[3889, 5146], [92, -24]], [[4682, 4997], [-24, 54]], [[4658, 5051], [6, 107]], [[4664, 5158], [214, -10]], [[4069, 5154], [4, -3]], [[4073, 5151], [-13, -90]], [[4060, 5061], [-50, -52]], [[3981, 5122], [88, 32]], [[1841, 4969], [-44, 122]], [[1797, 5091], [81, 25]], [[1878, 5116], [52, -79]], [[2097, 5080], [37, -3]], [[1989, 5040], [18, 82]], [[2007, 5122], [90, -42]], [[6903, 5162], [-42, -86]], [[6861, 5076], [-81, 77]], [[6780, 5153], [80, 7]], [[6860, 5160], [43, 2]], [[2378, 5143], [38, -51]], [[2331, 4987], [7, 154]], [[2338, 5141], [40, 2]], [[4316, 5178], [60, -210]], [[4270, 5157], [46, 21]], [[6861, 5076], [-21, -61]], [[6755, 5072], [-1, 110]], [[6754, 5182], [26, -29]], [[4186, 5176], [-8, -79]], [[4176, 5018], [-116, 43]], [[4073, 5151], [113, 25]], [[2284, 5150], [54, -9]], [[2247, 5082], [16, 70]], [[2263, 5152], [21, -2]], [[1724, 5116], [73, -25]], [[1606, 5093], [-4, 0]], [[1602, 5093], [73, 40]], [[1675, 5133], [49, -17]], [[6177, 5163], [100, -47]], [[6110, 5001], [25, 132], [-32, 72]], [[6103, 5205], [74, -42]], [[3098, 5104], [38, 60]], [[3136, 5164], [70, 30]], [[3206, 5194], [86, -88]], [[5932, 5189], [39, -85]], [[5728, 4943], [55, 58], [-26, 111]], [[5757, 5112], [87, 97]], [[5844, 5209], [10, 6]], [[5854, 5215], [78, -26]], [[2162, 5170], [101, -18]], [[2147, 5078], [15, 92]], [[3333, 5077], [103, 128]], [[3436, 5205], [51, -84]], [[2589, 5162], [45, -35]], [[2634, 5127], [39, -38]], [[2479, 5110], [28, 81]], [[2507, 5191], [82, -29]], [[5932, 5189], [18, 16]], [[5950, 5205], [153, 0]], [[4498, 5134], [-76, -55], [54, -110]], [[4316, 5178], [18, 39]], [[4334, 5217], [51, 11]], [[4385, 5228], [113, -94]], [[3787, 5203], [41, -44]], [[3828, 5159], [-29, -72]], [[3799, 5087], [-99, 110]], [[3700, 5197], [87, 6]], [[3493, 5214], [120, -10]], [[3613, 5204], [14, 4]], [[3627, 5208], [39, -88]], [[3436, 5205], [2, 12]], [[3438, 5217], [55, -3]], [[5073, 5231], [-36, -134]], [[4903, 5136], [93, 99]], [[4996, 5235], [77, -4]], [[4075, 5193], [-6, -39]], [[3889, 5146], [-28, 29]], [[3861, 5175], [107, 66]], [[3968, 5241], [107, -48]], [[1973, 5176], [34, -54]], [[1878, 5116], [39, 71]], [[1917, 5187], [10, 7]], [[1927, 5194], [46, -18]], [[6876, 5222], [-16, -62]], [[6754, 5182], [-3, 3]], [[6751, 5185], [125, 37]], [[3103, 5186], [33, -22]], [[3082, 5101], [-105, 118]], [[2977, 5219], [9, 14]], [[2986, 5233], [117, -47]], [[5691, 5095], [-23, -65]], [[5405, 5148], [-1, 77]], [[5404, 5225], [55, 34]], [[5459, 5259], [126, -58], [106, -106]], [[4664, 5158], [-1, 6]], [[4663, 5164], [7, 10]], [[4670, 5174], [238, 86]], [[4908, 5260], [88, -25]], [[2069, 5213], [28, -133]], [[1973, 5176], [96, 37]], [[1721, 5200], [3, -84]], [[1675, 5133], [6, 67]], [[1681, 5200], [40, 0]], [[5325, 5274], [79, -49]], [[5142, 4891], [151, 357]], [[5293, 5248], [32, 26]], [[4702, 5265], [-32, -91]], [[4663, 5164], [-113, -7]], [[4550, 5157], [6, 56], [146, 52]], [[4878, 5274], [30, -14]], [[4702, 5265], [45, 15]], [[4747, 5280], [131, -6]], [[5073, 5231], [132, 52]], [[5205, 5283], [88, -35]], [[2730, 5246], [59, -45]], [[2789, 5201], [-4, -133]], [[2785, 5068], [-39, -25]], [[2634, 5127], [82, 127]], [[2716, 5254], [14, -8]], [[1545, 5077], [41, 148]], [[1586, 5225], [16, -132]], [[4286, 5260], [48, -43]], [[4186, 5176], [-21, 89]], [[4165, 5265], [11, 10]], [[4176, 5275], [110, -15]], [[2986, 5233], [27, 24]], [[3013, 5257], [39, 26]], [[3052, 5283], [51, -97]], [[1659, 5238], [22, -38]], [[1586, 5225], [73, 13]], [[6371, 5158], [10, -52]], [[6381, 5106], [-3, -31]], [[6177, 5163], [85, 135]], [[6262, 5298], [48, 5]], [[6310, 5303], [61, -145]], [[2835, 5268], [-1, -46]], [[2834, 5222], [-45, -21]], [[2730, 5246], [105, 22]], [[2162, 5170], [-16, 44]], [[2146, 5214], [146, 72]], [[2292, 5286], [-8, -136]], [[2069, 5266], [0, -53]], [[1927, 5194], [30, 57]], [[1957, 5251], [77, 17]], [[2034, 5268], [35, -2]], [[2108, 5264], [38, -50]], [[2069, 5266], [39, -2]], [[1917, 5187], [-114, 65]], [[1803, 5252], [47, 26]], [[1850, 5278], [107, -27]], [[7788, 5293], [11, -61]], [[7799, 5232], [-129, -73]], [[7670, 5159], [3, 46]], [[7673, 5205], [14, 81]], [[7687, 5286], [101, 7]], [[3208, 5285], [-2, -55]], [[3206, 5230], [0, -36]], [[3052, 5283], [83, 36]], [[3135, 5319], [73, -34]], [[4410, 5280], [-25, -52]], [[4286, 5260], [26, 76]], [[4312, 5336], [98, -56]], [[2627, 5315], [46, -28]], [[2673, 5287], [-84, -125]], [[2507, 5191], [-66, 50]], [[2441, 5241], [57, 19]], [[2498, 5260], [127, 57]], [[2625, 5317], [2, -2]], [[1721, 5200], [3, 88]], [[1724, 5288], [79, -36]], [[3768, 5296], [-75, -84]], [[3693, 5212], [-66, -4]], [[3613, 5204], [2, 121]], [[3615, 5325], [23, 13]], [[3638, 5338], [78, 9]], [[3716, 5347], [52, -51]], [[4176, 5352], [0, -77]], [[4165, 5265], [-84, 28]], [[4081, 5293], [-6, 45]], [[4075, 5338], [28, 14]], [[4103, 5352], [73, 0]], [[3493, 5214], [15, 96]], [[3508, 5310], [71, 36]], [[3579, 5346], [36, -21]], [[2363, 5308], [34, -87]], [[2397, 5221], [-19, -78]], [[2292, 5286], [2, 20]], [[2294, 5306], [69, 2]], [[5950, 5205], [12, 34]], [[5962, 5239], [105, 36], [107, 96]], [[6174, 5371], [88, -73]], [[2956, 5358], [13, -5]], [[2969, 5353], [44, -96]], [[2977, 5219], [-4, -7]], [[2973, 5212], [-97, 92]], [[2876, 5304], [15, 39]], [[2891, 5343], [65, 15]], [[4251, 5378], [23, -13]], [[4274, 5365], [38, -29]], [[4176, 5352], [38, 32]], [[4214, 5384], [37, -6]], [[3488, 5350], [20, -40]], [[3438, 5217], [-87, 54]], [[3351, 5271], [13, 102]], [[3364, 5373], [29, 8]], [[3393, 5381], [95, -31]], [[2160, 5357], [113, -27]], [[2273, 5330], [21, -24]], [[2108, 5264], [-30, 84]], [[2078, 5348], [82, 9]], [[6876, 5376], [-142, -86]], [[6734, 5290], [44, 83]], [[6778, 5373], [79, 22]], [[6857, 5395], [19, -19]], [[2577, 5368], [48, -51]], [[2498, 5260], [-65, 75]], [[2433, 5335], [-7, 10]], [[2426, 5345], [81, 28]], [[2507, 5373], [70, -5]], [[3984, 5395], [23, -74]], [[4007, 5321], [-49, -27]], [[3958, 5294], [-24, 35]], [[3934, 5329], [50, 66]], [[1730, 5358], [15, -2]], [[1745, 5356], [-21, -68]], [[1659, 5238], [71, 120]], [[1963, 5374], [71, -106]], [[1850, 5278], [36, 73]], [[1886, 5351], [77, 23]], [[1842, 5363], [44, -12]], [[1745, 5356], [97, 7]], [[4737, 5434], [-1, -85], [110, -13]], [[4846, 5336], [32, -62]], [[4747, 5280], [-70, 23], [-28, 116]], [[4649, 5419], [88, 15]], [[3593, 5420], [-14, -74]], [[3488, 5350], [19, 82]], [[3507, 5432], [26, 3]], [[3533, 5435], [60, -15]], [[3064, 5425], [55, -93]], [[3119, 5332], [16, -13]], [[2969, 5353], [6, 70]], [[2975, 5423], [89, 2]], [[4081, 5413], [22, -61]], [[4075, 5338], [-34, -8]], [[4041, 5330], [-22, 121]], [[4019, 5451], [62, -38]], [[5962, 5239], [86, 140], [98, 78]], [[6146, 5457], [28, -86]], [[2891, 5343], [-47, 29]], [[2844, 5372], [45, 56]], [[2889, 5428], [67, -70]], [[3285, 5402], [-77, -117]], [[3119, 5332], [83, 92]], [[3202, 5424], [83, -22]], [[4818, 5468], [26, -128]], [[4844, 5340], [2, -4]], [[4737, 5434], [26, 20]], [[4763, 5454], [55, 14]], [[3786, 5453], [52, -72]], [[3838, 5381], [51, -39]], [[3889, 5342], [-111, 37], [-62, -32]], [[3638, 5338], [41, 93]], [[3679, 5431], [107, 22]], [[2048, 5418], [30, -70]], [[1963, 5374], [10, 27]], [[1973, 5401], [75, 17]], [[4552, 5465], [46, -15]], [[4598, 5450], [18, -32]], [[4616, 5418], [-103, -92]], [[4513, 5326], [-59, 39]], [[4454, 5365], [19, 96]], [[4473, 5461], [79, 4]], [[2110, 5407], [50, -50]], [[2048, 5418], [21, 1]], [[2069, 5419], [41, -12]], [[3393, 5381], [88, 84]], [[3481, 5465], [26, -33]], [[4081, 5413], [25, 34]], [[4106, 5447], [40, 25]], [[4146, 5472], [68, -88]], [[3648, 5471], [31, -40]], [[3593, 5420], [55, 51]], [[8114, 5441], [58, -91]], [[8172, 5350], [-59, -12]], [[8113, 5338], [-72, 78]], [[8041, 5416], [73, 25]], [[2208, 5434], [65, -104]], [[2110, 5407], [98, 27]], [[5673, 5271], [-75, 83], [-118, -29]], [[5480, 5325], [113, 166]], [[5593, 5491], [28, -65], [110, -28], [-58, -127]], [[4906, 5481], [-35, -76]], [[4871, 5405], [-27, -65]], [[4818, 5468], [32, 26]], [[4850, 5494], [56, -13]], [[7741, 5454], [43, -31]], [[7784, 5423], [4, -130]], [[7687, 5286], [27, 168]], [[7714, 5454], [27, 0]], [[6902, 5485], [9, -29]], [[6911, 5456], [24, -69]], [[6935, 5387], [-48, -38]], [[6887, 5349], [-11, 27]], [[6857, 5395], [-13, 11]], [[6844, 5406], [58, 79]], [[3064, 5425], [30, 53]], [[3094, 5478], [18, 0]], [[3112, 5478], [90, -54]], [[4041, 5330], [-34, -9]], [[3984, 5395], [-17, 93]], [[3967, 5488], [13, 9]], [[3980, 5497], [39, -46]], [[3850, 5457], [-12, -76]], [[3786, 5453], [8, 51]], [[3794, 5504], [56, -47]], [[2580, 5471], [25, -6]], [[2605, 5465], [25, -11]], [[2630, 5454], [-53, -86]], [[2507, 5373], [34, 106]], [[2541, 5479], [39, -8]], [[6299, 5495], [128, -77], [-84, -101]], [[6343, 5317], [-33, -14]], [[6146, 5457], [-8, 10]], [[6138, 5467], [60, 44]], [[6198, 5511], [101, -16]], [[4315, 5395], [-41, -30]], [[4251, 5378], [15, 54]], [[4266, 5432], [34, 76]], [[4300, 5508], [24, 9]], [[4324, 5517], [-9, -122]], [[7976, 5462], [55, -34]], [[8031, 5428], [-64, -57]], [[7967, 5371], [-45, 22]], [[7922, 5393], [10, 71]], [[7932, 5464], [44, -2]], [[2762, 5492], [20, -124]], [[2782, 5368], [-71, -2]], [[2711, 5366], [-69, 80]], [[2642, 5446], [115, 44]], [[2757, 5490], [5, 2]], [[3027, 5496], [67, -18]], [[2975, 5423], [52, 73]], [[2379, 5471], [43, -111]], [[2422, 5360], [4, -15]], [[2433, 5335], [-70, -27]], [[2208, 5434], [3, 1]], [[2211, 5435], [118, 52]], [[2329, 5487], [50, -16]], [[1842, 5430], [0, -67]], [[1730, 5358], [18, 116]], [[1748, 5474], [94, -44]], [[2476, 5482], [-54, -122]], [[2379, 5471], [-5, 7]], [[2374, 5478], [102, 4]], [[2821, 5518], [79, -76]], [[2900, 5442], [-11, -14]], [[2844, 5372], [-62, -4]], [[2762, 5492], [59, 26]], [[3858, 5541], [109, -53]], [[3934, 5329], [-45, 13]], [[3850, 5457], [8, 84]], [[5589, 5499], [4, -8]], [[5480, 5325], [-21, -66]], [[5325, 5274], [0, 88]], [[5325, 5362], [138, 164]], [[5463, 5526], [88, 33]], [[5551, 5559], [38, -60]], [[4447, 5520], [26, -59]], [[4454, 5365], [-139, 30]], [[4324, 5517], [60, 40]], [[4384, 5557], [63, -37]], [[6013, 5552], [65, -32]], [[6078, 5520], [60, -53]], [[5854, 5215], [89, 203], [75, 50], [-53, 87]], [[5965, 5555], [48, -3]], [[1946, 5508], [27, -107]], [[1842, 5430], [64, 53]], [[1906, 5483], [40, 25]], [[4060, 5535], [46, -88]], [[3980, 5497], [80, 38]], [[5844, 5209], [-131, -1], [-40, 63]], [[5589, 5499], [57, 22]], [[5646, 5521], [80, -12], [157, 55]], [[5883, 5564], [82, -9]], [[6618, 5560], [48, -44]], [[6666, 5516], [-132, -55]], [[6534, 5461], [-44, 37]], [[6490, 5498], [128, 62]], [[2513, 5530], [28, -51]], [[2476, 5482], [37, 48]], [[3624, 5501], [24, -30]], [[3533, 5435], [13, 94]], [[3546, 5529], [78, -28]], [[1748, 5474], [15, 48]], [[1763, 5522], [143, -39]], [[2082, 5499], [-13, -80]], [[1946, 5508], [10, 4]], [[1956, 5512], [126, -13]], [[3434, 5558], [46, -92]], [[3480, 5466], [-80, 40], [-92, -29]], [[3308, 5477], [5, 33]], [[3313, 5510], [45, 60]], [[3358, 5570], [76, -12]], [[4816, 5587], [24, -19]], [[4840, 5568], [10, -74]], [[4763, 5454], [-26, 142]], [[4737, 5596], [79, -9]], [[3030, 5571], [15, -6]], [[3045, 5565], [-18, -69]], [[2900, 5442], [14, 81]], [[2914, 5523], [10, 24]], [[2924, 5547], [106, 24]], [[3736, 5577], [58, -73]], [[3624, 5501], [112, 76]], [[4146, 5472], [13, 123]], [[4159, 5595], [6, -87], [101, -76]], [[6720, 5540], [11, -12]], [[6731, 5528], [-65, -12]], [[6618, 5560], [43, 29]], [[6661, 5589], [59, -49]], [[4978, 5579], [113, -42]], [[5091, 5537], [-185, -56]], [[4840, 5568], [70, 34]], [[4910, 5602], [68, -23]], [[3880, 5588], [-22, -47]], [[3736, 5577], [1, 0]], [[3737, 5577], [143, 11]], [[3114, 5571], [14, -60]], [[3128, 5511], [-16, -33]], [[3045, 5565], [69, 6]], [[4447, 5520], [46, 66]], [[4493, 5586], [26, 22]], [[4519, 5608], [33, -143]], [[2230, 5567], [-19, -132]], [[2082, 5499], [38, 35]], [[2120, 5534], [110, 33]], [[2821, 5518], [1, 67]], [[2822, 5585], [51, 5]], [[2873, 5590], [41, -67]], [[5353, 5615], [-51, -93], [23, -160]], [[5205, 5283], [3, 50]], [[5208, 5333], [-41, 175]], [[5167, 5508], [52, 82]], [[5219, 5590], [134, 25]], [[2276, 5571], [53, -84]], [[2230, 5567], [2, 7]], [[2232, 5574], [44, -3]], [[3481, 5465], [-1, 1]], [[3434, 5558], [81, 49]], [[3515, 5607], [31, -78]], [[2658, 5600], [109, -17], [-10, -93]], [[2642, 5446], [-12, 8]], [[2605, 5465], [50, 130]], [[2655, 5595], [3, 5]], [[2589, 5596], [-9, -125]], [[2513, 5530], [35, 50]], [[2548, 5580], [18, 23]], [[2566, 5603], [23, -7]], [[4269, 5576], [31, -68]], [[4159, 5595], [3, 33]], [[4162, 5628], [107, -52]], [[2589, 5596], [66, -1]], [[4678, 5641], [59, -45]], [[4649, 5419], [-33, -1]], [[4598, 5450], [-8, 71]], [[4590, 5521], [72, 113]], [[4662, 5634], [16, 7]], [[4879, 5638], [31, -36]], [[4816, 5587], [19, 56]], [[4835, 5643], [44, -5]], [[2502, 5614], [46, -34]], [[2374, 5478], [38, 118]], [[2412, 5596], [15, 1]], [[2427, 5597], [75, 17]], [[4052, 5627], [25, -6]], [[4077, 5621], [-17, -86]], [[3880, 5588], [6, 49]], [[3886, 5637], [166, -10]], [[3027, 5604], [3, -33]], [[2924, 5547], [19, 59]], [[2943, 5606], [28, 26]], [[2971, 5632], [56, -28]], [[6596, 5643], [65, -54]], [[6490, 5498], [-67, 41]], [[6423, 5539], [67, 32]], [[6490, 5571], [76, 74]], [[6566, 5645], [30, -2]], [[4948, 5658], [30, -79]], [[4879, 5638], [47, 29]], [[4926, 5667], [22, -9]], [[4590, 5521], [-10, 146]], [[4580, 5667], [82, -33]], [[7712, 5622], [88, -70]], [[7800, 5552], [15, -64]], [[7815, 5488], [-66, -6]], [[7749, 5482], [-132, 77]], [[7617, 5559], [75, 74]], [[7692, 5633], [20, -11]], [[4129, 5664], [33, -36]], [[4077, 5621], [52, 43]], [[2276, 5571], [76, 61]], [[2352, 5632], [60, -36]], [[2895, 5650], [48, -44]], [[2873, 5590], [22, 60]], [[3515, 5623], [0, -16]], [[3358, 5570], [19, 91]], [[3377, 5661], [138, -38]], [[6490, 5571], [16, 86]], [[6506, 5657], [11, 13]], [[6517, 5670], [49, -25]], [[2658, 5600], [146, 54]], [[2804, 5654], [18, -69]], [[3669, 5666], [71, -59]], [[3740, 5607], [-3, -30]], [[3515, 5623], [57, 5]], [[3572, 5628], [97, 38]], [[4419, 5678], [23, -23]], [[4442, 5655], [-1, -34]], [[4441, 5621], [-48, -54]], [[4393, 5567], [26, 111]], [[5069, 5680], [49, -153]], [[5118, 5527], [-27, 10]], [[4948, 5658], [57, 20]], [[5005, 5678], [64, 2]], [[4536, 5676], [-17, -68]], [[4493, 5586], [-52, 35]], [[4442, 5655], [94, 21]], [[3217, 5659], [8, -8]], [[3225, 5651], [-111, -80]], [[3027, 5604], [52, 35]], [[3079, 5639], [138, 20]], [[2120, 5534], [-8, 94]], [[2112, 5628], [85, 15]], [[2197, 5643], [35, -69]], [[6423, 5539], [-124, -44]], [[6198, 5511], [-12, 48], [110, 105]], [[6296, 5664], [80, 21]], [[6376, 5685], [130, -28]], [[1883, 5644], [73, -132]], [[1763, 5522], [54, 116], [66, 6]], [[5883, 5564], [-28, 89]], [[5855, 5653], [113, 48], [45, -149]], [[5388, 5715], [19, -37]], [[5407, 5678], [54, -41], [2, -111]], [[5353, 5615], [35, 100]], [[5589, 5690], [-38, -131]], [[5407, 5678], [129, 42]], [[5536, 5720], [53, -30]], [[5118, 5715], [101, -125]], [[5167, 5508], [-49, 19]], [[5069, 5680], [49, 35]], [[3353, 5702], [24, -41]], [[3313, 5510], [-43, 20]], [[3270, 5530], [12, 110]], [[3282, 5640], [29, 68]], [[3311, 5708], [42, -6]], [[7366, 5643], [-149, -16], [-86, 41]], [[7131, 5668], [95, -12], [145, 45]], [[7371, 5701], [-5, -58]], [[6669, 5704], [-8, -115]], [[6596, 5643], [14, 56]], [[6610, 5699], [59, 5]], [[3740, 5607], [61, 120]], [[3801, 5727], [85, -90]], [[2780, 5698], [24, -44]], [[2566, 5603], [43, 45]], [[2609, 5648], [70, 38]], [[2679, 5686], [101, 12]], [[2780, 5698], [23, 14]], [[2803, 5712], [92, -62]], [[3643, 5729], [26, -63]], [[3572, 5628], [-38, 97]], [[3534, 5725], [109, 4]], [[2073, 5643], [39, -15]], [[1883, 5644], [31, 35]], [[1914, 5679], [46, 8]], [[1960, 5687], [113, -44]], [[5711, 5688], [1, -117], [-66, -50]], [[5589, 5690], [105, 60]], [[5694, 5750], [17, -62]], [[6577, 5736], [33, -37]], [[6517, 5670], [12, 66]], [[6529, 5736], [48, 0]], [[3282, 5640], [-57, 11]], [[3217, 5659], [-10, 69]], [[3207, 5728], [104, -20]], [[2458, 5706], [44, -92]], [[2427, 5597], [-40, 123]], [[2387, 5720], [71, -14]], [[5806, 5730], [49, -77]], [[5711, 5688], [95, 42]], [[3353, 5702], [13, 15]], [[3366, 5717], [72, 26]], [[3438, 5743], [96, -18]], [[3083, 5742], [-4, -103]], [[2971, 5632], [-6, 93]], [[2965, 5725], [60, 10]], [[3025, 5735], [58, 7]], [[6512, 5751], [17, -15]], [[6376, 5685], [73, 78]], [[6449, 5763], [63, -12]], [[2340, 5727], [47, -7]], [[2352, 5632], [-46, 91]], [[2306, 5723], [34, 4]], [[2203, 5710], [-6, -67]], [[2073, 5643], [18, 35]], [[2091, 5678], [24, 11]], [[2115, 5689], [88, 21]], [[2266, 5729], [40, -6]], [[2203, 5710], [63, 19]], [[3728, 5740], [73, -13]], [[3643, 5729], [8, 28]], [[3651, 5757], [77, -17]], [[4181, 5798], [-52, -134]], [[4052, 5627], [-61, 56], [48, 78]], [[4039, 5761], [59, 31]], [[4098, 5792], [83, 6]], [[2027, 5749], [64, -71]], [[1960, 5687], [67, 62]], [[6325, 5782], [-29, -118]], [[6078, 5520], [31, 73]], [[6109, 5593], [144, 134], [41, 75]], [[6294, 5802], [31, -20]], [[4738, 5809], [23, -74], [-83, -94]], [[4580, 5667], [141, 91], [17, 51]], [[6109, 5593], [-57, 150]], [[6052, 5743], [24, 24]], [[6076, 5767], [51, -4]], [[6127, 5763], [35, 11]], [[6162, 5774], [132, 28]], [[3158, 5759], [-75, -17]], [[3025, 5735], [-8, 70]], [[3017, 5805], [141, -46]], [[6556, 5823], [22, -20]], [[6578, 5803], [16, -39]], [[6594, 5764], [-17, -28]], [[6512, 5751], [44, 72]], [[5925, 5828], [127, -85]], [[5806, 5730], [70, 98]], [[5876, 5828], [49, 0]], [[2891, 5811], [37, -3]], [[2928, 5808], [37, -83]], [[2803, 5712], [88, 99]], [[6736, 5801], [2, -68]], [[6738, 5733], [-69, -29]], [[6594, 5764], [60, 67]], [[6654, 5831], [82, -30]], [[4309, 5827], [4, -141], [-44, -110]], [[4181, 5798], [128, 29]], [[5260, 5771], [123, -27]], [[5383, 5744], [5, -29]], [[5118, 5715], [103, 21], [17, 108]], [[5238, 5844], [22, -73]], [[3016, 5810], [1, -5]], [[2928, 5808], [88, 2]], [[6270, 5828], [55, -46]], [[6162, 5774], [76, 68]], [[6238, 5842], [32, -14]], [[6578, 5803], [19, 34]], [[6597, 5837], [57, -6]], [[6298, 5850], [43, 3]], [[6341, 5853], [99, -50]], [[6440, 5803], [9, -40]], [[6270, 5828], [28, 22]], [[3302, 5831], [64, -114]], [[3207, 5728], [-30, 30]], [[3177, 5758], [10, 27]], [[3187, 5785], [70, 63]], [[3257, 5848], [45, -17]], [[2350, 5775], [-10, -48]], [[2266, 5729], [-13, 85]], [[2253, 5814], [42, 19]], [[2295, 5833], [55, -58]], [[2115, 5689], [45, 112]], [[2160, 5801], [37, 37]], [[2197, 5838], [56, -24]], [[6489, 5867], [67, -44]], [[6440, 5803], [33, 74]], [[6473, 5877], [16, -10]], [[4738, 5809], [26, 78]], [[4764, 5887], [74, -72], [-3, -172]], [[2670, 5775], [9, -89]], [[2609, 5648], [-18, 89]], [[2591, 5737], [32, 116]], [[2623, 5853], [47, -78]], [[2874, 5839], [17, -28]], [[2670, 5775], [99, 81]], [[2769, 5856], [105, -17]], [[4393, 5567], [-9, -10]], [[4309, 5827], [24, 32]], [[4333, 5859], [24, 38]], [[4357, 5897], [-4, -120], [66, -99]], [[2027, 5749], [0, 35]], [[2027, 5784], [69, 62]], [[2096, 5846], [64, -45]], [[5487, 5811], [16, -29]], [[5503, 5782], [-120, -38]], [[5260, 5771], [125, 133]], [[5385, 5904], [102, -93]], [[6146, 5887], [90, -43]], [[6236, 5844], [2, -2]], [[6127, 5763], [19, 124]], [[6567, 5889], [30, -52]], [[6489, 5867], [78, 22]], [[3145, 5832], [42, -47]], [[3177, 5758], [-19, 1]], [[3016, 5810], [9, 85]], [[3025, 5895], [120, -63]], [[3628, 5901], [21, -99]], [[3649, 5802], [-40, 2]], [[3609, 5804], [-37, 95]], [[3572, 5899], [56, 2]], [[6261, 5914], [37, -64]], [[6236, 5844], [-6, 72]], [[6230, 5916], [31, -2]], [[4016, 5807], [23, -46]], [[3728, 5740], [42, 32]], [[3770, 5772], [120, 146]], [[3890, 5918], [126, -111]], [[3481, 5909], [128, -105]], [[3649, 5802], [2, -45]], [[3438, 5743], [-39, 102]], [[3399, 5845], [82, 64]], [[6734, 5893], [9, -92]], [[6743, 5801], [-7, 0]], [[6567, 5889], [20, 0]], [[6587, 5889], [147, 4]], [[6831, 5914], [41, -36]], [[6872, 5878], [-14, -82]], [[6858, 5796], [-42, -27]], [[6816, 5769], [-73, 32]], [[6734, 5893], [47, 19]], [[6781, 5912], [50, 2]], [[6475, 5882], [-2, -5]], [[6341, 5853], [37, 52]], [[6378, 5905], [97, -23]], [[6341, 5923], [37, -18]], [[6261, 5914], [80, 9]], [[4767, 5910], [-3, -23]], [[4536, 5676], [128, 107], [47, 150]], [[4711, 5933], [56, -23]], [[3310, 5889], [-8, -58]], [[3257, 5848], [-11, 22]], [[3246, 5870], [-9, 34]], [[3237, 5904], [13, 20]], [[3250, 5924], [60, -35]], [[4928, 5929], [-36, -216], [34, -46]], [[4767, 5910], [59, 26]], [[4826, 5936], [102, -7]], [[3342, 5927], [57, -82]], [[3310, 5889], [33, 41]], [[3343, 5930], [-1, -3]], [[4385, 5947], [39, -20]], [[4424, 5927], [109, -72], [139, 67]], [[4672, 5922], [39, 11]], [[4357, 5897], [28, 50]], [[3507, 5939], [30, -4]], [[3537, 5935], [35, -36]], [[3481, 5909], [26, 30]], [[5789, 5918], [87, -90]], [[5694, 5750], [-7, 121]], [[5687, 5871], [18, 82]], [[5705, 5953], [1, 1]], [[5706, 5954], [83, -36]], [[6001, 5952], [28, -20]], [[6029, 5932], [47, -165]], [[5925, 5828], [76, 124]], [[6137, 5942], [9, -55]], [[6029, 5932], [87, 21]], [[6116, 5953], [21, -11]], [[2496, 5881], [-34, -57]], [[2462, 5824], [-112, -49]], [[2295, 5833], [58, 64]], [[2353, 5897], [19, 6]], [[2372, 5903], [124, -22]], [[6200, 5955], [21, -8]], [[6221, 5947], [9, -31]], [[6137, 5942], [63, 13]], [[3273, 5944], [70, -14]], [[3250, 5924], [23, 20]], [[3216, 5859], [-71, -27]], [[3025, 5895], [0, 15]], [[3025, 5910], [29, 38]], [[3054, 5948], [162, -89]], [[2696, 5936], [73, -80]], [[2623, 5853], [9, 13]], [[2632, 5866], [64, 70]], [[4928, 5929], [80, 47]], [[5008, 5976], [-3, -298]], [[3810, 5944], [-55, -84], [15, -88]], [[3628, 5901], [18, 15]], [[3646, 5916], [78, 49]], [[3724, 5965], [86, -21]], [[1982, 5915], [45, -131]], [[1914, 5679], [-4, 180], [72, 56]], [[7661, 5939], [0, -2]], [[7661, 5937], [57, -114]], [[7718, 5823], [-6, -29]], [[7712, 5794], [-124, -1]], [[7588, 5793], [-41, 55]], [[7547, 5848], [63, 84]], [[7610, 5932], [51, 7]], [[5094, 5974], [144, -130]], [[5008, 5976], [86, -2]], [[2197, 5838], [0, 52]], [[2197, 5890], [47, 34]], [[2244, 5924], [47, 17]], [[2291, 5941], [62, -44]], [[4218, 5982], [38, -44]], [[4256, 5938], [77, -79]], [[4098, 5792], [79, 179]], [[4177, 5971], [41, 11]], [[6337, 5980], [28, -40]], [[6365, 5940], [-24, -17]], [[6221, 5947], [116, 33]], [[4657, 5931], [15, -9]], [[4424, 5927], [47, 65]], [[4471, 5992], [186, -61]], [[7335, 5926], [30, -10]], [[7365, 5916], [27, -54]], [[7392, 5862], [0, -54]], [[7392, 5808], [-115, 37]], [[7277, 5845], [-182, 49]], [[7095, 5894], [5, 67]], [[7100, 5961], [87, 12], [148, -47]], [[3575, 5984], [20, -24]], [[3595, 5960], [51, -44]], [[3537, 5935], [38, 49]], [[6664, 5988], [57, -16]], [[6721, 5972], [60, -60]], [[6587, 5889], [9, 100]], [[6596, 5989], [68, -1]], [[5551, 5971], [72, -63]], [[5623, 5908], [-136, -97]], [[5385, 5904], [-19, 74]], [[5366, 5978], [185, -7]], [[4018, 5941], [-2, -134]], [[3890, 5918], [55, 81]], [[3945, 5999], [73, -58]], [[4018, 5941], [63, -21], [95, 83]], [[4176, 6003], [1, -32]], [[6581, 6001], [15, -12]], [[6475, 5882], [4, 87]], [[6479, 5969], [102, 32]], [[3509, 5957], [-2, -18]], [[3342, 5927], [57, 47]], [[3399, 5974], [27, 28]], [[3426, 6002], [83, -45]], [[3559, 5992], [16, -8]], [[3509, 5957], [50, 35]], [[5603, 6021], [102, -68]], [[5687, 5871], [-64, 37]], [[5551, 5971], [44, 57]], [[5595, 6028], [8, -7]], [[2069, 5967], [27, -121]], [[1982, 5915], [87, 52]], [[2069, 5967], [11, 12]], [[2080, 5979], [117, -89]], [[6487, 5996], [-8, -27]], [[6365, 5940], [56, 31]], [[6421, 5971], [35, 50]], [[6456, 6021], [31, -25]], [[6993, 5893], [-121, -15]], [[6831, 5914], [-16, 69]], [[6815, 5983], [114, 36]], [[6929, 6019], [64, -126]], [[3122, 6015], [115, -111]], [[3246, 5870], [-30, -11]], [[3054, 5948], [68, 67]], [[3180, 6014], [91, -16]], [[3271, 5998], [2, -54]], [[3122, 6015], [7, 6]], [[3129, 6021], [51, -7]], [[3637, 6025], [15, -11]], [[3652, 6014], [-57, -54]], [[3559, 5992], [-1, 21]], [[3558, 6013], [79, 12]], [[6200, 5955], [21, 50]], [[6221, 6005], [93, 38]], [[6314, 6043], [23, -63]], [[5789, 5918], [132, 129]], [[5921, 6047], [80, -95]], [[3704, 6049], [20, -84]], [[3652, 6014], [52, 35]], [[3271, 5998], [6, 18]], [[3277, 6016], [59, 29]], [[3336, 6045], [63, -71]], [[3810, 5944], [93, 83]], [[3903, 6027], [38, 32]], [[3941, 6059], [4, -60]], [[6487, 5996], [55, 60]], [[6542, 6056], [39, -55]], [[6721, 5972], [66, 79]], [[6787, 6051], [28, -68]], [[7140, 6045], [101, -64]], [[7241, 5981], [94, -55]], [[7100, 5961], [19, 52]], [[7119, 6013], [21, 32]], [[2341, 5979], [-50, -38]], [[2244, 5924], [0, 59]], [[2244, 5983], [56, 43]], [[2300, 6026], [41, -47]], [[6349, 6057], [72, -86]], [[6314, 6043], [9, 28]], [[6323, 6071], [26, -14]], [[2425, 6022], [-53, -119]], [[2341, 5979], [84, 43]], [[6207, 6026], [14, -21]], [[6116, 5953], [-17, 40]], [[6099, 5993], [58, 78]], [[6157, 6071], [29, 5]], [[6186, 6076], [21, -50]], [[7095, 5894], [-36, 7]], [[7059, 5901], [-19, 166]], [[7040, 6067], [79, -54]], [[5366, 5978], [146, 118]], [[5512, 6096], [83, -68]], [[6207, 6026], [47, 60]], [[6254, 6086], [69, -15]], [[3941, 6059], [12, 10]], [[3953, 6069], [129, 23]], [[4082, 6092], [94, -89]], [[4561, 6076], [96, -145]], [[4471, 5992], [29, 103]], [[4500, 6095], [61, -19]], [[7059, 5901], [-51, -14]], [[7008, 5887], [-15, 6]], [[6929, 6019], [20, 32]], [[6949, 6051], [35, 34]], [[6984, 6085], [56, -18]], [[3373, 6087], [42, -37]], [[3415, 6050], [11, -48]], [[3336, 6045], [37, 42]], [[2496, 6041], [70, -67]], [[2566, 5974], [-7, -63]], [[2559, 5911], [-63, -30]], [[2425, 6022], [71, 19]], [[4405, 6096], [-20, -149]], [[4256, 5938], [79, 143]], [[4335, 6081], [70, 15]], [[6221, 6106], [33, -20]], [[6186, 6076], [4, 35]], [[6190, 6111], [31, -5]], [[4715, 6100], [8, -113], [103, -51]], [[4561, 6076], [154, 24]], [[7610, 5932], [-81, 44]], [[7529, 5976], [-1, 65]], [[7528, 6041], [78, 1], [55, -103]], [[7369, 6053], [26, -95]], [[7395, 5958], [-30, -42]], [[7241, 5981], [69, 106]], [[7310, 6087], [59, -34]], [[4098, 6120], [119, -2]], [[4217, 6118], [29, -12]], [[4246, 6106], [-28, -124]], [[4082, 6092], [11, 27]], [[4093, 6119], [5, 1]], [[4475, 6119], [25, -24]], [[4405, 6096], [34, 17]], [[4439, 6113], [36, 6]], [[7500, 6077], [10, -12]], [[7510, 6065], [-115, -107]], [[7369, 6053], [131, 24]], [[3903, 6027], [1, 92]], [[3904, 6119], [49, -50]], [[6458, 6090], [-2, -69]], [[6349, 6057], [42, 61]], [[6391, 6118], [7, 2]], [[6398, 6120], [60, -30]], [[3889, 6123], [15, -4]], [[3704, 6049], [67, -8], [84, 76]], [[3855, 6117], [34, 6]], [[4246, 6106], [58, 28]], [[4304, 6134], [31, -53]], [[6787, 6051], [-16, 23]], [[6771, 6074], [90, 55]], [[6861, 6129], [88, -78]], [[7602, 6114], [128, -151]], [[7730, 5963], [-69, -26]], [[7528, 6041], [-18, 24]], [[7500, 6077], [14, 33]], [[7514, 6110], [88, 4]], [[3253, 6115], [24, -99]], [[3180, 6014], [73, 101]], [[6154, 6148], [36, -37]], [[6157, 6071], [-35, 17]], [[6122, 6088], [3, 45]], [[6125, 6133], [29, 15]], [[4181, 6155], [26, -15]], [[4207, 6140], [10, -22]], [[4098, 6120], [83, 35]], [[5948, 6134], [50, -34]], [[5998, 6100], [101, -107]], [[5921, 6047], [-39, 89]], [[5882, 6136], [37, 24]], [[5919, 6160], [29, -26]], [[5706, 5954], [96, 55], [42, 152]], [[5844, 6161], [38, -25]], [[6570, 6116], [-28, -60]], [[6458, 6090], [-1, 38]], [[6457, 6128], [71, 30]], [[6528, 6158], [42, -42]], [[3068, 6117], [61, -96]], [[3025, 5910], [-51, 47]], [[2974, 5957], [28, 192]], [[3002, 6149], [66, -32]], [[2313, 6045], [-4, 31]], [[2309, 6076], [6, 4]], [[2315, 6080], [-2, -35]], [[2302, 6034], [-2, -8]], [[2244, 5983], [-145, 50]], [[2099, 6033], [65, 93]], [[2164, 6126], [138, -92]], [[7123, 6140], [60, -64]], [[7183, 6076], [-43, -31]], [[6984, 6085], [-12, 52]], [[6972, 6137], [53, 20]], [[7025, 6157], [98, -17]], [[5010, 6166], [69, 7]], [[5079, 6173], [115, -132], [-100, -67]], [[4715, 6100], [-7, 47], [302, 19]], [[4305, 6139], [-1, -5]], [[4207, 6140], [98, -1]], [[4305, 6139], [50, 43]], [[4355, 6182], [84, -69]], [[6284, 6177], [107, -59]], [[6221, 6106], [50, 75]], [[6271, 6181], [13, -4]], [[5303, 6136], [-16, -56], [79, -102]], [[5079, 6173], [112, 16]], [[5191, 6189], [112, -53]], [[3315, 6145], [63, -47]], [[3378, 6098], [-5, -11]], [[3253, 6115], [-9, 55]], [[3244, 6170], [71, -25]], [[6102, 6141], [-70, -41]], [[6032, 6100], [-34, 0]], [[5948, 6134], [45, 52]], [[5993, 6186], [109, -45]], [[3732, 6176], [123, -59]], [[3637, 6025], [95, 151]], [[6261, 6197], [10, -16]], [[6154, 6148], [94, 46]], [[6248, 6194], [0, 5]], [[6248, 6199], [13, -2]], [[3225, 6180], [19, -10]], [[3068, 6117], [70, 62]], [[3138, 6179], [87, 1]], [[6861, 6129], [-13, 18]], [[6848, 6147], [47, 47]], [[6895, 6194], [77, -57]], [[5603, 6021], [76, 80], [79, 1], [51, 112]], [[5809, 6214], [35, -53]], [[7493, 6143], [21, -33]], [[7310, 6087], [-13, 43]], [[7297, 6130], [68, 56]], [[7365, 6186], [128, -43]], [[6792, 6208], [56, -61]], [[6771, 6074], [-22, 29]], [[6749, 6103], [-36, 68]], [[6713, 6171], [-7, 7]], [[6706, 6178], [86, 30]], [[4283, 6231], [72, -35]], [[4355, 6196], [0, -14]], [[4181, 6155], [102, 76]], [[7264, 6094], [-81, -18]], [[7123, 6140], [8, 16]], [[7131, 6156], [113, 62]], [[7244, 6218], [20, -124]], [[6075, 6250], [31, -12]], [[6106, 6238], [43, -14]], [[6149, 6224], [99, -30]], [[6125, 6133], [-23, 8]], [[5993, 6186], [82, 64]], [[7120, 6178], [11, -22]], [[7025, 6157], [-10, 47]], [[7015, 6204], [52, 35]], [[7067, 6239], [53, -61]], [[7493, 6143], [11, 11]], [[7504, 6154], [91, 66]], [[7595, 6220], [7, -106]], [[6177, 6253], [71, -54]], [[6149, 6224], [28, 29]], [[4466, 6268], [17, -3]], [[4483, 6265], [-8, -146]], [[4355, 6196], [53, 37]], [[4408, 6233], [58, 35]], [[2480, 6215], [-82, -60]], [[2398, 6155], [-35, 10]], [[2363, 6165], [-5, 31]], [[2358, 6196], [122, 19]], [[2350, 6191], [8, 5]], [[2363, 6165], [-24, -32]], [[2339, 6133], [-118, 60]], [[2221, 6193], [129, -2]], [[3041, 6246], [76, -51]], [[3117, 6195], [21, -16]], [[3002, 6149], [-9, 5]], [[2993, 6154], [-37, 97]], [[2956, 6251], [85, -5]], [[2494, 6238], [28, -16]], [[2522, 6222], [-34, -76]], [[2488, 6146], [-90, 9]], [[2480, 6215], [-1, 23]], [[2479, 6238], [15, 0]], [[6398, 6120], [8, 146]], [[6406, 6266], [2, 4]], [[6408, 6270], [49, -142]], [[6592, 6271], [63, -17]], [[6655, 6254], [-9, -65]], [[6646, 6189], [-60, -33]], [[6586, 6156], [-44, 87]], [[6542, 6243], [50, 28]], [[6284, 6177], [54, 98]], [[6338, 6275], [68, -9]], [[4323, 6288], [85, -55]], [[4283, 6231], [-3, 31]], [[4280, 6262], [43, 26]], [[2614, 6262], [94, -62]], [[2708, 6200], [33, -64]], [[2741, 6136], [-80, 2]], [[2661, 6138], [-139, 84]], [[2494, 6238], [120, 24]], [[6491, 6240], [37, -82]], [[6408, 6270], [31, 21]], [[6439, 6291], [52, -51]], [[6917, 6283], [98, -79]], [[6895, 6194], [21, 90]], [[6916, 6284], [1, -1]], [[6164, 6297], [13, -44]], [[6106, 6238], [58, 59]], [[6744, 6275], [48, -67]], [[6706, 6178], [-60, 11]], [[6655, 6254], [28, 41]], [[6683, 6295], [61, -20]], [[3732, 6176], [1, 117]], [[3733, 6293], [204, -26], [-48, -144]], [[4210, 6306], [70, -44]], [[4093, 6119], [-17, 21]], [[4076, 6140], [53, 88]], [[4129, 6228], [81, 78]], [[5791, 6245], [18, -31]], [[5512, 6096], [-51, 117]], [[5461, 6213], [47, 14]], [[5508, 6227], [165, 84]], [[5673, 6311], [118, -66]], [[7447, 6290], [57, -136]], [[7365, 6186], [-21, 106]], [[7344, 6292], [103, -2]], [[6190, 6316], [75, -38]], [[6265, 6278], [-4, -81]], [[6164, 6297], [-1, 11]], [[6163, 6308], [27, 8]], [[4046, 6307], [83, -79]], [[4076, 6140], [-73, 102]], [[4003, 6242], [-8, 34]], [[3995, 6276], [28, 41]], [[4023, 6317], [23, -10]], [[6075, 6250], [11, 67]], [[6086, 6317], [10, 5]], [[6096, 6322], [67, -14]], [[5907, 6320], [61, -38]], [[5968, 6282], [-49, -122]], [[5791, 6245], [75, 88]], [[5866, 6333], [41, -13]], [[4003, 6242], [-99, -123]], [[3733, 6293], [5, 18]], [[3738, 6311], [140, 10], [117, -45]], [[4469, 6281], [-3, -13]], [[4323, 6288], [0, 3]], [[4323, 6291], [69, 45]], [[4392, 6336], [77, -55]], [[6744, 6275], [81, 51]], [[6825, 6326], [91, -42]], [[7235, 6289], [9, -71]], [[7120, 6178], [-20, 134]], [[7100, 6312], [-5, 5]], [[7095, 6317], [30, -2], [30, 11], [7, -16], [31, 2], [42, -23]], [[2722, 6297], [-14, -97]], [[2614, 6262], [39, 60]], [[2653, 6322], [69, -25]], [[6382, 6355], [43, -49]], [[6425, 6306], [14, -15]], [[6338, 6275], [-13, 52]], [[6325, 6327], [57, 28]], [[6276, 6365], [49, -38]], [[6265, 6278], [0, 79]], [[6265, 6357], [4, 4]], [[6269, 6361], [7, 4]], [[6190, 6316], [13, 51]], [[6203, 6367], [62, -10]], [[4204, 6351], [6, -45]], [[4046, 6307], [39, 59]], [[4085, 6366], [119, -15]], [[6791, 6344], [34, -18]], [[6683, 6295], [-41, 20]], [[6642, 6315], [149, 29]], [[4483, 6265], [78, -36], [124, 42], [95, 107]], [[4780, 6378], [170, -68], [60, -144]], [[6917, 6283], [4, 30]], [[6921, 6313], [66, 48]], [[6987, 6361], [80, -122]], [[7488, 6360], [44, -6]], [[7532, 6354], [63, -134]], [[7447, 6290], [-2, 49]], [[7445, 6339], [43, 21]], [[6542, 6243], [-51, -3]], [[6425, 6306], [83, 76]], [[6508, 6382], [84, -111]], [[3993, 6378], [30, -61]], [[3738, 6311], [-25, 25]], [[3713, 6336], [49, 14]], [[3762, 6350], [194, 32]], [[3956, 6382], [37, -4]], [[4204, 6351], [5, 29]], [[4209, 6380], [114, -89]], [[6181, 6379], [22, -12]], [[6096, 6322], [3, 40]], [[6099, 6362], [6, 25]], [[6105, 6387], [76, -8]], [[3993, 6378], [77, 20]], [[4070, 6398], [15, -32]], [[7088, 6335], [3, -5]], [[7091, 6330], [-18, -10], [9, -11], [18, 3]], [[6987, 6361], [-5, 15]], [[6982, 6376], [106, -41]], [[6791, 6344], [31, 40]], [[6822, 6384], [43, 21]], [[6865, 6405], [56, -92]], [[6343, 6413], [15, -29]], [[6358, 6384], [24, -29]], [[6276, 6365], [67, 48]], [[6064, 6410], [41, -23]], [[6099, 6362], [-113, 24]], [[5986, 6386], [14, 19]], [[6000, 6405], [64, 5]], [[4023, 6418], [10, -2]], [[4033, 6416], [37, -18]], [[3956, 6382], [67, 36]], [[7343, 6393], [102, -54]], [[7344, 6292], [-40, 47]], [[7304, 6339], [-17, 68]], [[7287, 6407], [56, -14]], [[6484, 6416], [24, -34]], [[6358, 6384], [75, 33]], [[6433, 6417], [51, -1]], [[6642, 6315], [-28, 35]], [[6614, 6350], [158, 78]], [[6772, 6428], [50, -44]], [[5986, 6386], [-79, -66]], [[5866, 6333], [-5, 8]], [[5861, 6341], [130, 98]], [[5991, 6439], [9, -34]], [[2745, 6419], [25, -29]], [[2770, 6390], [-48, -93]], [[2653, 6322], [92, 97]], [[5819, 6435], [42, -94]], [[5673, 6311], [24, 63]], [[5697, 6374], [87, 84]], [[5784, 6458], [35, -23]], [[7304, 6339], [-69, -50]], [[7095, 6317], [-4, 13]], [[7088, 6335], [77, 51]], [[7165, 6386], [68, 50]], [[7233, 6436], [54, -29]], [[6577, 6405], [37, -55]], [[6484, 6416], [15, 22]], [[6499, 6438], [40, 19]], [[6539, 6457], [38, -52]], [[6865, 6405], [20, 37]], [[6885, 6442], [37, 10]], [[6922, 6452], [60, -76]], [[6024, 6465], [32, -1]], [[6056, 6464], [8, -54]], [[5991, 6439], [-7, 12]], [[5984, 6451], [40, 14]], [[4426, 6452], [-34, -116]], [[4209, 6380], [-29, 72]], [[4180, 6452], [120, -28], [126, 28]], [[5508, 6227], [-56, 90]], [[5452, 6317], [70, 85], [-48, 49]], [[5474, 6451], [156, 20]], [[5630, 6471], [67, -97]], [[6189, 6416], [-8, -37]], [[6056, 6464], [133, -48]], [[4160, 6475], [20, -23]], [[4033, 6416], [107, 55]], [[4140, 6471], [20, 4]], [[5630, 6471], [136, 15]], [[5766, 6486], [18, -28]], [[6577, 6405], [80, 52]], [[6657, 6457], [42, 5]], [[6699, 6462], [59, 15]], [[6758, 6477], [14, -49]], [[6768, 6480], [117, -38]], [[6758, 6477], [10, 3]], [[3022, 6400], [-35, -43]], [[2987, 6357], [-33, -18]], [[2954, 6339], [-13, 49]], [[2941, 6388], [-2, 3]], [[2939, 6391], [28, 41]], [[2967, 6432], [55, -32]], [[4023, 6418], [2, 63]], [[4025, 6481], [115, -10]], [[6357, 6490], [44, -25]], [[6401, 6465], [32, -48]], [[6343, 6413], [-25, 50]], [[6318, 6463], [39, 27]], [[5984, 6451], [-79, -3]], [[5905, 6448], [33, 44]], [[5938, 6492], [76, 14]], [[6014, 6506], [10, -41]], [[7388, 6499], [100, -139]], [[7343, 6393], [26, 98]], [[7369, 6491], [19, 8]], [[4469, 6281], [112, 233]], [[4581, 6514], [104, 13], [95, -149]], [[4426, 6452], [99, 84], [56, -22]], [[4025, 6481], [-32, 27]], [[3993, 6508], [69, 23], [98, -56]], [[6113, 6525], [79, -50]], [[6192, 6475], [-3, -59]], [[6014, 6506], [99, 19]], [[6499, 6438], [-16, 48]], [[6483, 6486], [42, 44]], [[6525, 6530], [14, -73]], [[6401, 6465], [30, 60]], [[6431, 6525], [52, -39]], [[2968, 6492], [12, -17]], [[2980, 6475], [-13, -43]], [[2939, 6391], [-55, 31]], [[2884, 6422], [6, 93]], [[2890, 6515], [78, -23]], [[2891, 6519], [-1, -4]], [[2884, 6422], [-114, -32]], [[2745, 6419], [146, 100]], [[7388, 6499], [84, 22]], [[7472, 6521], [60, -167]], [[3503, 6532], [75, -36]], [[3578, 6496], [76, -130]], [[3654, 6366], [-34, -9]], [[3620, 6357], [-193, 68]], [[3427, 6425], [55, 116]], [[3482, 6541], [21, -9]], [[7009, 6526], [92, -55]], [[7101, 6471], [30, -9]], [[7131, 6462], [34, -76]], [[6922, 6452], [52, 37]], [[6974, 6489], [35, 37]], [[6886, 6518], [88, -29]], [[6768, 6480], [32, 50]], [[6800, 6530], [34, 14]], [[6834, 6544], [52, -26]], [[6217, 6462], [-25, 13]], [[6113, 6525], [138, 29]], [[6251, 6554], [-34, -92]], [[6357, 6490], [-29, 58]], [[6328, 6548], [78, 18]], [[6406, 6566], [25, -41]], [[6603, 6563], [54, -106]], [[6525, 6530], [-12, 15]], [[6513, 6545], [90, 18]], [[3775, 6464], [5, -17]], [[3780, 6447], [-18, -97]], [[3713, 6336], [-59, 30]], [[3578, 6496], [107, 63]], [[3685, 6559], [64, 13]], [[3749, 6572], [26, -108]], [[7296, 6517], [-63, -81]], [[7131, 6462], [114, 93]], [[7245, 6555], [51, -38]], [[3854, 6553], [-79, -89]], [[3749, 6572], [105, -19]], [[7296, 6517], [19, 44]], [[7315, 6561], [54, -70]], [[6699, 6462], [65, 112]], [[6764, 6574], [36, -44]], [[3427, 6425], [-91, 2]], [[3336, 6427], [-21, -1]], [[3315, 6426], [7, 52]], [[3322, 6478], [51, 99]], [[3373, 6577], [5, 8]], [[3378, 6585], [104, -44]], [[7101, 6471], [-11, 95]], [[7090, 6566], [95, 26]], [[7185, 6592], [60, -37]], [[3503, 6532], [35, 55], [147, -28]], [[6603, 6563], [58, 34]], [[6661, 6597], [43, 16]], [[6704, 6613], [60, -39]], [[6406, 6566], [40, 57]], [[6446, 6623], [67, -78]], [[2964, 6574], [4, -82]], [[2891, 6519], [73, 55]], [[7000, 6578], [9, -52]], [[6886, 6518], [29, 82]], [[6915, 6600], [85, -22]], [[7000, 6578], [39, 53]], [[7039, 6631], [13, 14]], [[7052, 6645], [38, -79]], [[3373, 6577], [-121, -59]], [[3252, 6518], [-8, 23]], [[3244, 6541], [36, 109]], [[3280, 6650], [98, -65]], [[6829, 6652], [86, -52]], [[6834, 6544], [-5, 108]], [[6655, 6605], [6, -8]], [[6446, 6623], [12, 39]], [[6458, 6662], [197, -57]], [[3268, 6667], [12, -17]], [[3244, 6541], [-93, -47]], [[3151, 6494], [-47, 36]], [[3104, 6530], [-18, 38]], [[3086, 6568], [135, 93]], [[3221, 6661], [47, 6]], [[7304, 6683], [13, -14]], [[7317, 6669], [-2, -108]], [[7185, 6592], [-31, 57]], [[7154, 6649], [49, 23]], [[7203, 6672], [101, 11]], [[3099, 6694], [122, -33]], [[3086, 6568], [-11, 49]], [[3075, 6617], [24, 77]], [[6843, 6676], [-14, -24]], [[6704, 6613], [13, 17]], [[6717, 6630], [32, 34]], [[6749, 6664], [71, 37]], [[6820, 6701], [23, -25]], [[7052, 6645], [48, 55]], [[7100, 6700], [54, -51]], [[7317, 6669], [35, 32]], [[7352, 6701], [120, -180]], [[6655, 6605], [-88, 88]], [[6567, 6693], [49, 35], [101, -98]], [[7203, 6672], [-22, 32]], [[7181, 6704], [123, -21]], [[6458, 6662], [75, 96]], [[6533, 6758], [34, -65]], [[6936, 6735], [103, -104]], [[6843, 6676], [58, 74]], [[6901, 6750], [35, -15]], [[3099, 6694], [74, 33], [95, -60]], [[7028, 6769], [33, -5]], [[7061, 6764], [39, -64]], [[6936, 6735], [-2, 13]], [[6934, 6748], [94, 21]], [[6533, 6758], [22, 36]], [[6555, 6794], [194, -130]], [[7181, 6704], [85, 73]], [[7266, 6777], [86, -76]], [[6901, 6750], [-104, 92]], [[6797, 6842], [137, -94]], [[6682, 6881], [39, -94], [99, -86]], [[6555, 6794], [127, 87]], [[7032, 6876], [60, -80]], [[7092, 6796], [-31, -32]], [[7028, 6769], [-80, 82]], [[6948, 6851], [84, 25]], [[7092, 6796], [115, 54]], [[7207, 6850], [59, -73]], [[6771, 6903], [26, -61]], [[6682, 6881], [89, 22]], [[6883, 6941], [65, -90]], [[6771, 6903], [112, 38]], [[7032, 6876], [9, 76]], [[7041, 6952], [104, -20], [62, -82]], [[6883, 6941], [158, 11]], [[5819, 6435], [86, 13]], [[5766, 6486], [172, 6]], [[4561, 4819], [82, -48]], [[4549, 4807], [12, 12]], [[2018, 4270], [-56, -78]], [[1869, 4259], [18, 36]], [[8494, 4553], [-55, -6]], [[6439, 851], [-43, 73]], [[6427, 933], [40, -48]], [[6427, 793], [-49, -101]], [[7922, 5393], [-52, 23]], [[7870, 5416], [-55, 72]], [[7800, 5552], [108, 30]], [[7908, 5582], [24, -118]], [[3144, 3623], [-83, -104]], [[3061, 3519], [-1, 1]], [[3028, 3786], [69, -148], [47, -15]], [[3222, 3635], [-78, -12]], [[4871, 5405], [133, -60], [204, -12]], [[2019, 2765], [-44, 106]], [[1975, 2871], [144, 111]], [[8382, 1554], [44, -63]], [[8426, 1491], [-8, -20]], [[8418, 1471], [29, -136]], [[8129, 1301], [-16, 72]], [[8319, 1590], [63, -36]], [[5705, 3277], [73, -68]], [[5624, 3265], [81, 12]], [[5614, 3365], [91, -88]], [[6186, 1219], [9, -38]], [[6195, 1181], [-116, -62]], [[6079, 1119], [-14, 34]], [[6065, 1153], [73, 66]], [[6138, 1219], [48, 0]], [[6199, 1279], [0, -2]], [[6199, 1277], [-13, -58]], [[6138, 1219], [13, 11]], [[6151, 1230], [19, 37]], [[6170, 1267], [29, 12]], [[7851, 3785], [-11, 29]], [[2882, 2858], [-65, -235], [71, -24]], [[2888, 2599], [-98, -102]], [[2790, 2497], [-61, -30]], [[4705, 4344], [-44, -12]], [[4661, 4332], [-75, 14]], [[4586, 4346], [1, 99]], [[6056, 1021], [-10, -43]], [[6046, 978], [-63, -43]], [[5983, 935], [-9, 61]], [[6024, 1024], [18, 21]], [[6042, 1045], [14, -24]], [[5966, 681], [-56, 81]], [[5910, 762], [-12, 39]], [[5898, 801], [85, 134]], [[6046, 978], [-5, -94]], [[6056, 1021], [81, -45]], [[2886, 5057], [87, 155]], [[2858, 5041], [-24, 181]], [[2835, 5268], [41, 36]], [[2857, 5033], [-72, 35]], [[5452, 6317], [-96, 27]], [[5356, 6344], [118, 107]], [[3270, 5530], [-142, -19]], [[3308, 5477], [-20, -75]], [[3288, 5402], [-3, 0]], [[7264, 6094], [33, 36]], [[5133, 4525], [-108, -23]], [[6178, 1681], [11, -44]], [[6189, 1637], [-41, -23]], [[6303, 1696], [-38, -9]], [[6265, 1687], [-79, 9]], [[4586, 4346], [-22, -3]], [[4661, 4332], [-35, -19]], [[4626, 4313], [-30, -4]], [[4626, 4313], [12, -100]], [[4792, 4362], [63, -123]], [[4374, 3968], [37, 52]], [[4366, 4002], [-91, 112]], [[5691, 5095], [66, 17]], [[4276, 2285], [-40, -65]], [[4200, 2369], [76, -58]], [[4318, 2237], [-3, -52]], [[7412, 3496], [109, -37]], [[7521, 3459], [-24, -103]], [[7726, 3126], [67, -46]], [[7793, 3080], [0, -11]], [[7690, 3043], [-30, 19]], [[7660, 3062], [-5, 52]], [[7710, 3149], [16, -23]], [[7595, 3095], [65, -33]], [[5503, 5782], [33, -62]], [[8185, 4386], [23, 21]], [[3791, 996], [-95, -72]], [[3418, 1362], [7, 7]], [[3927, 1294], [6, -104]], [[3948, 1320], [103, -62]], [[5577, 2191], [-30, 73]], [[3975, 1363], [70, -97]], [[3739, 2299], [16, 77], [-44, 189]], [[3711, 2565], [97, 29]], [[3667, 2598], [44, -33]], [[3611, 2598], [56, 0]], [[4982, 3384], [9, 6]], [[4991, 3390], [115, 2]], [[5630, 2744], [61, 35]], [[5899, 3235], [55, -19]], [[4941, 3538], [50, -148]], [[4892, 3341], [-81, 132]], [[4978, 3590], [82, 52]], [[7488, 4496], [60, -129]], [[7548, 4367], [-33, -65]], [[7515, 4302], [-43, 30]], [[7459, 4469], [29, 27]], [[7526, 4283], [-11, 19]], [[7548, 4367], [60, 12]], [[7563, 3848], [-46, 161]], [[7319, 3850], [12, -14]], [[7182, 3696], [82, 140], [55, 14]], [[7228, 3933], [91, -83]], [[7001, 4117], [27, -109]], [[7028, 4008], [-15, -16]], [[6889, 4067], [-9, 51]], [[7161, 3935], [-86, 89]], [[7075, 4024], [67, 78]], [[7075, 4024], [-47, -16]], [[4693, 3792], [0, -135]], [[5079, 3694], [20, -26]], [[4891, 3727], [97, 15], [91, -48]], [[3991, 3052], [-18, -26]], [[3973, 3026], [-5, 39], [16, 11]], [[3981, 3087], [8, -8], [-4, -7], [-2, -21], [8, 1]], [[4297, 3262], [-82, -29]], [[4154, 3139], [-25, 26]], [[4129, 3165], [-8, 56]], [[3973, 3026], [-43, -11]], [[4006, 3100], [-15, -48]], [[3987, 3098], [19, 2]], [[4129, 3165], [-68, -21]], [[4056, 3150], [28, 48]], [[3837, 2942], [43, 35]], [[4006, 3100], [11, 4]], [[3792, 3022], [16, -73]], [[3724, 2822], [-94, 97], [37, 115], [-58, 55], [37, 198]], [[4304, 2734], [-123, 103]], [[6674, 2057], [91, 15]], [[6671, 2109], [0, -43]], [[6179, 1988], [108, 31]], [[6309, 2168], [-87, 21]], [[6222, 2189], [33, 35]], [[6240, 2066], [-15, 20]], [[6214, 2122], [81, 32]], [[6207, 2152], [15, 37]], [[5869, 2194], [46, 24]], [[5915, 2218], [38, -16]], [[5876, 2281], [39, -63]], [[5864, 2277], [12, 4]], [[1572, 3794], [87, -89]], [[6872, 4903], [-3, -33]], [[6869, 4870], [-87, -58]], [[3556, 4829], [-37, -98]], [[3479, 4906], [77, -77]], [[3735, 4877], [-93, -10]], [[3642, 4867], [-86, -38]], [[4299, 4909], [-17, -4]], [[4159, 4936], [79, 37]], [[6869, 4870], [25, -35]], [[6947, 4948], [45, -49]], [[6992, 4899], [-7, -20]], [[6985, 4879], [-35, -31]], [[6891, 4982], [56, -34]], [[6985, 4879], [43, -31]], [[3364, 5373], [-76, 29]], [[2745, 5297], [-29, -43]], [[2673, 5287], [72, 10]], [[2745, 5297], [-33, 53]], [[2712, 5350], [-1, 16]], [[2627, 5315], [85, 35]], [[8343, 2811], [17, 103]], [[8360, 2914], [76, -24]], [[8512, 3013], [-26, -30]], [[8360, 2914], [-9, 119]], [[8351, 3033], [161, -20]], [[8260, 2821], [71, -79]], [[8252, 2698], [-1, 99]], [[8251, 2797], [9, 24]], [[8152, 2970], [77, -44]], [[8229, 2926], [-22, -42]], [[8054, 2964], [3, 27]], [[8251, 2797], [-55, 16]], [[8229, 2926], [23, 9]], [[8252, 2935], [8, -114]], [[8022, 2798], [4, 10]], [[8026, 2808], [-78, 78]], [[7992, 2956], [58, 35]], [[8026, 2808], [-58, -35]], [[7968, 2773], [-57, 33]], [[7994, 3076], [-157, -43]], [[7793, 3080], [58, 60], [110, 15]], [[7961, 3155], [19, 4]], [[8283, 3106], [-27, -40]], [[8151, 3120], [2, 20]], [[8153, 3140], [108, 81]], [[8261, 3221], [22, -115]], [[7830, 3398], [8, -94]], [[7838, 3304], [-97, -52]], [[7741, 3252], [-45, 41]], [[7696, 3293], [-16, 80]], [[7680, 3373], [28, 34]], [[8431, 3402], [-3, 93]], [[8428, 3495], [76, 23]], [[8504, 3518], [24, -145]], [[8491, 3578], [13, -60]], [[8428, 3495], [-76, 58]], [[8352, 3553], [24, 41]], [[8190, 3350], [-49, -74]], [[8141, 3276], [-50, 48]], [[8079, 3361], [102, 82]], [[8064, 3477], [-1, 15]], [[8063, 3492], [91, 15]], [[7988, 3320], [-5, -30]], [[7983, 3290], [-145, 14]], [[7917, 3426], [76, -53]], [[7954, 3229], [-11, -23]], [[7943, 3206], [-187, -20]], [[7756, 3186], [-14, 49]], [[7742, 3235], [212, -6]], [[8414, 3111], [-96, 10]], [[8318, 3121], [3, 56]], [[8321, 3177], [29, 11]], [[8410, 3379], [-33, -1]], [[8377, 3378], [-85, 89]], [[8292, 3467], [10, 78]], [[8302, 3545], [50, 8]], [[8292, 3467], [-37, -7]], [[8195, 3591], [31, 57]], [[8226, 3648], [34, 6]], [[8260, 3654], [42, -109]], [[8351, 3033], [-56, 81]], [[8295, 3114], [23, 7]], [[8574, 3136], [-62, -123]], [[8220, 2674], [-80, 29]], [[8155, 3156], [-2, -16]], [[8066, 3161], [89, -5]], [[7726, 3126], [30, 60]], [[7943, 3206], [18, -51]], [[8295, 3114], [-12, -8]], [[8261, 3221], [-4, 10]], [[8257, 3231], [8, 35]], [[8265, 3266], [56, -89]], [[7696, 3293], [-44, -10]], [[7652, 3283], [-13, 42]], [[7639, 3325], [-27, 79]], [[7612, 3404], [68, -31]], [[7688, 3506], [-67, 32]], [[7621, 3538], [-24, 102]], [[7620, 3667], [71, -76]], [[7612, 3404], [-50, 123]], [[7562, 3527], [59, 11]], [[7903, 3591], [-2, -55]], [[7901, 3536], [-100, 9]], [[8028, 3659], [6, -50]], [[8034, 3609], [-123, -90]], [[7911, 3519], [-10, 17]], [[7986, 3667], [42, -8]], [[7911, 3519], [11, -44]], [[8063, 3492], [-29, 117]], [[8028, 3659], [36, 12]], [[8064, 3671], [101, -81]], [[8141, 3276], [37, -69]], [[8178, 3207], [-23, -51]], [[7954, 3229], [29, 61]], [[8159, 3719], [21, -126]], [[8064, 3671], [-35, 104]], [[8029, 3775], [64, -5]], [[8226, 3648], [-36, 84]], [[8223, 3769], [37, -115]], [[8351, 3788], [-116, 32]], [[7960, 3792], [69, -17]], [[4826, 313], [2, -6]], [[4871, 296], [-12, 7]], [[4859, 303], [72, 119]], [[4931, 422], [25, -64], [-85, -62]], [[4075, 5193], [6, 100]], [[3968, 5241], [-10, 53]], [[4782, 4807], [-34, -28]], [[4748, 4779], [-62, 171]], [[4686, 4950], [-6, 16]], [[4748, 4779], [7, -22]], [[4561, 4819], [125, 131]], [[4485, 4965], [97, 70]], [[4582, 5035], [76, 16]], [[1987, 2480], [1, -17]], [[1988, 2463], [-23, -53]], [[2197, 2574], [-144, -24], [-66, -70]], [[1988, 2463], [76, -15]], [[1483, 1887], [58, 107]], [[1392, 1968], [-23, 14]], [[3899, 4795], [-123, -71], [26, -89]], [[3802, 4635], [-14, 8]], [[3788, 4643], [-53, 41]], [[3735, 4684], [0, 125], [-93, 58]], [[3908, 4599], [-81, 14]], [[3827, 4613], [-25, 22]], [[3930, 4492], [-1, -14]], [[3929, 4478], [-113, 71]], [[3816, 4549], [11, 64]], [[3779, 5006], [20, 81]], [[3828, 5159], [33, 16]], [[3693, 5212], [7, -15]], [[1812, 3008], [-11, -84]], [[1801, 2924], [-100, -56], [-90, 22]], [[1975, 2871], [-9, 1]], [[1966, 2872], [-33, 30]], [[1917, 2820], [49, 52]], [[1801, 2924], [32, -89]], [[5749, 3629], [-64, 14]], [[5685, 3643], [-57, 59]], [[7228, 769], [-82, -25]], [[7009, 949], [28, 31], [155, -146], [36, -65]], [[7272, 774], [-44, -5]], [[6884, 1139], [113, 59]], [[7276, 1365], [-57, -141]], [[7189, 1345], [52, 13]], [[7241, 1358], [35, 7]], [[7276, 1365], [75, -31]], [[7291, 1455], [-50, -97]], [[7229, 1464], [31, -1]], [[8093, 1200], [-78, 2]], [[8015, 1202], [-5, 67]], [[6633, 634], [-201, -88]], [[6672, 868], [-109, 89]], [[6563, 957], [65, 17]], [[6552, 953], [-2, 1]], [[6550, 954], [13, 3]], [[6550, 954], [-47, 59]], [[6503, 1013], [-6, 5]], [[6497, 1018], [-2, 48]], [[6495, 1066], [37, 24]], [[6532, 1090], [48, 38]], [[6580, 1128], [33, -33]], [[7793, 1424], [-34, -107]], [[7759, 1317], [-52, 29]], [[7707, 1346], [-71, 27]], [[7690, 1589], [53, 60]], [[8409, 1081], [-17, -43]], [[8392, 1038], [-72, -91], [-79, -8]], [[8241, 939], [-114, -44]], [[8127, 895], [-18, -17]], [[7973, 1167], [42, 35]], [[7707, 1346], [-63, -45]], [[4513, 5326], [-42, -57]], [[4471, 5269], [-61, 11]], [[7931, 2318], [-6, -85]], [[7925, 2233], [-65, -133]], [[7860, 2100], [-17, -1]], [[7843, 2099], [-42, 40]], [[7801, 2139], [-47, 156], [8, 92]], [[7720, 2382], [-37, 28]], [[7717, 2568], [32, 16]], [[7968, 2773], [-86, -101]], [[7882, 2672], [9, -81]], [[7784, 2637], [-7, 29]], [[8114, 2696], [-1, -80]], [[8113, 2616], [-59, -7]], [[8054, 2609], [-172, 63]], [[8143, 2448], [-30, 168]], [[8164, 2138], [-69, 59]], [[8095, 2197], [83, 67]], [[8001, 2155], [45, 6]], [[8046, 2161], [49, 36]], [[8167, 2364], [31, -37]], [[8046, 2161], [-121, 72]], [[7916, 1984], [-53, -54], [-116, 29]], [[7747, 1959], [-10, 80], [106, 60]], [[7860, 2100], [48, -56]], [[7702, 1859], [45, 100]], [[8042, 2518], [12, 91]], [[7647, 2083], [69, 24]], [[7716, 2107], [85, 32]], [[7649, 2250], [67, -143]], [[7652, 2261], [68, 121]], [[7549, 2326], [48, 58]], [[6216, 4186], [-1, 39]], [[6237, 4273], [123, -43], [29, 72]], [[6276, 1422], [-23, -59]], [[6253, 1363], [-34, -43]], [[6219, 1320], [-32, 32]], [[6223, 1422], [53, 0]], [[6532, 1090], [-20, 89]], [[6512, 1179], [68, -51]], [[6601, 1187], [-49, 1]], [[6552, 1188], [45, 25]], [[6597, 1213], [4, -26]], [[6534, 1197], [-7, -5]], [[6527, 1192], [7, 5]], [[6512, 1186], [-9, -1]], [[6503, 1185], [-46, 5]], [[6457, 1190], [9, 30]], [[6466, 1220], [46, -34]], [[6556, 1595], [25, -9]], [[6611, 1536], [-55, -28]], [[6556, 1508], [-8, 8]], [[6548, 1516], [-30, 48]], [[6518, 1564], [38, 31]], [[6297, 1228], [-80, -47]], [[6217, 1181], [-22, 0]], [[6199, 1277], [98, -49]], [[6165, 1335], [5, -68]], [[6151, 1230], [-38, 20]], [[6079, 1119], [16, -12]], [[6095, 1107], [-53, -62]], [[6058, 1150], [7, 3]], [[6473, 990], [30, 23]], [[7264, 4233], [7, 15]], [[7271, 4248], [69, 8]], [[7061, 3934], [64, -10]], [[7398, 4630], [-30, -9]], [[7360, 4673], [5, 42]], [[7488, 4496], [-5, 27]], [[7507, 4558], [96, -135]], [[7515, 4574], [90, -60]], [[5685, 3643], [-26, -20]], [[5375, 1474], [6, 5]], [[5527, 1791], [42, 10]], [[5569, 1801], [63, -52]], [[5569, 1801], [76, 21]], [[4013, 586], [-90, 29]], [[3941, 667], [79, 16]], [[4001, 700], [22, -8]], [[3942, 677], [59, 23]], [[4031, 800], [-30, -100]], [[3668, 803], [-52, -35]], [[3616, 768], [-36, 18]], [[3577, 681], [39, 87]], [[3174, 440], [0, -132]], [[3174, 308], [-68, -32]], [[3350, 343], [-115, -15]], [[3235, 328], [5, 119]], [[7597, 1717], [130, -53]], [[7850, 1312], [-17, 0]], [[7833, 1312], [15, 124]], [[7833, 1312], [-74, 5]], [[6743, 1655], [33, -28]], [[6776, 1627], [-8, -52]], [[6698, 1521], [-16, 0]], [[6830, 1509], [50, 107]], [[6776, 1627], [37, 5]], [[3242, 6291], [10, -16]], [[3252, 6275], [-27, -95]], [[3117, 6195], [125, 96]], [[3272, 6275], [80, -34]], [[3352, 6241], [-37, -96]], [[3252, 6275], [20, 0]], [[3364, 6344], [28, -95]], [[3392, 6249], [-40, -8]], [[3272, 6275], [92, 69]], [[3392, 6249], [64, -27]], [[3456, 6222], [-15, -125], [-63, 1]], [[3230, 6340], [12, -49]], [[3041, 6246], [-39, 62]], [[3002, 6308], [228, 32]], [[3336, 6427], [23, -61]], [[3359, 6366], [5, -22]], [[3230, 6340], [-4, 41]], [[3226, 6381], [89, 45]], [[3962, 3953], [-27, -44]], [[7870, 5416], [9, -73]], [[7879, 5343], [-69, 69]], [[7810, 5412], [-26, 11]], [[7741, 5454], [8, 28]], [[7879, 5343], [-44, 1]], [[7835, 5344], [-25, 68]], [[6217, 6462], [25, -10]], [[6242, 6452], [27, -91]], [[5303, 6136], [158, 77]], [[3731, 2819], [-116, -35]], [[3615, 2784], [-80, 115]], [[3535, 2899], [39, 88], [-35, 94]], [[3202, 841], [-106, 14]], [[3955, 192], [-108, 41]], [[9727, 2402], [30, -117]], [[9757, 2285], [-71, -29]], [[9686, 2256], [-118, 26]], [[9568, 2282], [-85, 3]], [[9483, 2285], [-116, 45]], [[9367, 2330], [-11, 65]], [[9356, 2395], [170, 53], [201, -46]], [[9781, 2443], [-54, -41]], [[9356, 2395], [-8, 53]], [[9354, 2530], [142, 66]], [[9496, 2596], [141, 2], [43, -84], [101, -71]], [[4128, 2846], [42, -59], [45, -232]], [[4215, 2555], [-123, -22]], [[4092, 2533], [-69, 8]], [[3667, 2598], [232, 108], [163, -54], [57, 198]], [[6219, 1320], [-20, -41]], [[2808, 3695], [16, 150]], [[2843, 3327], [23, -27]], [[2866, 3300], [-140, -43]], [[2726, 3257], [-31, 34]], [[2938, 3277], [2, -8]], [[2806, 3162], [-69, 35]], [[2737, 3197], [-26, 23]], [[2711, 3220], [15, 37]], [[2866, 3300], [72, -23]], [[6032, 6100], [90, -12]], [[7357, 4257], [1, 76]], [[8265, 3266], [-11, 35]], [[8254, 3301], [123, 77]], [[8254, 3301], [-12, 46]], [[7742, 3235], [-1, 17]], [[8257, 3231], [-79, -24]], [[7337, 4735], [-98, -29]], [[7212, 4808], [160, 8]], [[7401, 4833], [2, 28]], [[7403, 4861], [86, 19]], [[7489, 4880], [22, 10]], [[7511, 4890], [43, -158]], [[7378, 4927], [25, -66]], [[7207, 4818], [10, 21]], [[7217, 4839], [60, 75]], [[7277, 4914], [101, 13]], [[7197, 4896], [20, -57]], [[6992, 4899], [64, 45]], [[7056, 4944], [141, -48]], [[7378, 4927], [35, 38]], [[7413, 4965], [3, 2]], [[7416, 4967], [73, -87]], [[7277, 4914], [0, 30]], [[7277, 4944], [18, 61]], [[7295, 5005], [118, -40]], [[7277, 4944], [-90, 46]], [[7187, 4990], [68, 23]], [[7255, 5013], [40, -8]], [[7033, 4988], [23, -44]], [[6947, 4948], [15, 89]], [[6962, 5037], [71, -49]], [[6999, 5092], [50, -93]], [[7049, 4999], [-16, -11]], [[6962, 5037], [-14, 71]], [[6948, 5108], [51, -16]], [[7394, 5078], [22, -62]], [[7416, 5016], [0, -49]], [[7255, 5013], [-3, 12]], [[7252, 5025], [34, 22]], [[7286, 5047], [56, 30]], [[7342, 5077], [52, 1]], [[7230, 5043], [22, -18]], [[7187, 4990], [-21, 12]], [[7166, 5002], [-75, 65]], [[7091, 5067], [43, 42]], [[7134, 5109], [96, -66]], [[7232, 5129], [54, -82]], [[7230, 5043], [-30, 77]], [[7200, 5120], [32, 9]], [[6616, 5163], [44, -57]], [[6630, 5087], [-110, 61]], [[6520, 5148], [96, 15]], [[6929, 5171], [19, -63]], [[6903, 5162], [26, 9]], [[6970, 5181], [77, -55]], [[7047, 5126], [-2, -26]], [[7045, 5100], [-46, -8]], [[6929, 5171], [41, 10]], [[7104, 5174], [69, -10]], [[7173, 5164], [-6, -17]], [[7167, 5147], [-33, -38]], [[7091, 5067], [-46, 33]], [[7047, 5126], [36, 65]], [[7083, 5191], [21, -17]], [[6664, 5218], [78, -37]], [[6742, 5181], [9, 4]], [[6616, 5163], [10, 25]], [[6626, 5188], [20, 25]], [[6646, 5213], [18, 5]], [[7566, 5095], [-10, -48]], [[7556, 5047], [-118, -44]], [[7438, 5003], [-22, 13]], [[7394, 5078], [5, 42]], [[7399, 5120], [76, 81]], [[7475, 5201], [91, -106]], [[7182, 5221], [0, -8]], [[7182, 5213], [-9, -49]], [[7104, 5174], [78, 47]], [[6970, 5181], [19, 35]], [[6989, 5216], [46, 6]], [[7035, 5222], [48, -31]], [[7670, 5159], [3, -19]], [[7673, 5140], [-105, -47]], [[7568, 5093], [-2, 113]], [[7566, 5206], [67, 12]], [[7633, 5218], [40, -13]], [[6876, 5222], [35, -6]], [[6911, 5216], [50, 30]], [[6961, 5246], [28, -30]], [[7289, 5250], [5, -68]], [[7294, 5182], [-51, -40]], [[7243, 5142], [-45, 63]], [[7198, 5205], [28, 38]], [[7226, 5243], [63, 7]], [[6626, 5188], [-62, 55]], [[6564, 5243], [40, 64]], [[6604, 5307], [42, -94]], [[6343, 5317], [65, -32]], [[6408, 5285], [29, -9]], [[6437, 5276], [127, -33]], [[6520, 5148], [-149, 10]], [[6885, 5293], [26, -77]], [[6742, 5181], [4, 60]], [[6746, 5241], [139, 52]], [[7013, 5312], [6, -21]], [[7019, 5291], [-48, -32]], [[6971, 5259], [42, 53]], [[6656, 5337], [8, -119]], [[6604, 5307], [-14, 12]], [[6590, 5319], [26, 24]], [[6616, 5343], [40, -6]], [[6541, 5353], [75, -10]], [[6590, 5319], [-153, -43]], [[6408, 5285], [39, 69], [94, -1]], [[6887, 5349], [-2, -56]], [[6746, 5241], [-12, 49]], [[7105, 5373], [67, -63]], [[7172, 5310], [54, -67]], [[7198, 5205], [-16, 8]], [[7182, 5221], [-73, 60]], [[7109, 5281], [-18, 47]], [[7091, 5328], [14, 45]], [[6656, 5337], [50, 44]], [[6706, 5381], [72, -8]], [[6940, 5385], [73, -73]], [[6971, 5259], [-10, -13]], [[6935, 5387], [5, -2]], [[7514, 5403], [23, -34]], [[7537, 5369], [29, -163]], [[7568, 5093], [-2, 2]], [[7475, 5201], [-1, 1]], [[7474, 5202], [38, 201]], [[7512, 5403], [2, 0]], [[6701, 5407], [5, -26]], [[6541, 5353], [29, 79]], [[6570, 5432], [131, -25]], [[6701, 5407], [71, 79]], [[6772, 5486], [72, -80]], [[7288, 5442], [-19, -35]], [[7269, 5407], [7, 46]], [[7276, 5453], [12, -11]], [[7344, 5468], [70, -75]], [[7414, 5393], [-3, -14]], [[7411, 5379], [-49, -111]], [[7362, 5268], [-40, 14]], [[7322, 5282], [-28, 87]], [[7294, 5369], [27, 103]], [[7321, 5472], [15, 10]], [[7336, 5482], [8, -14]], [[6534, 5461], [36, -29]], [[7097, 5555], [18, -28]], [[7115, 5527], [-32, -102]], [[7083, 5425], [-29, 86]], [[7054, 5511], [43, 44]], [[7202, 5559], [21, -14]], [[7223, 5545], [-32, -25]], [[7191, 5520], [-76, 7]], [[7097, 5555], [-21, 113]], [[7076, 5668], [126, -109]], [[7544, 5649], [37, -96]], [[7581, 5553], [-96, -7]], [[7485, 5546], [-40, 70]], [[7445, 5616], [45, 47]], [[7490, 5663], [54, -14]], [[7054, 5511], [-45, 23]], [[7009, 5534], [9, 105]], [[7018, 5639], [49, 38]], [[7067, 5677], [9, -9]], [[7366, 5643], [9, -14]], [[7375, 5629], [-66, -91]], [[7309, 5538], [-107, 21]], [[7067, 5677], [7, 9]], [[7074, 5686], [57, -18]], [[7553, 5701], [-9, -52]], [[7490, 5663], [-38, 52]], [[7452, 5715], [-8, 29]], [[7444, 5744], [109, -43]], [[7928, 5702], [-131, 9]], [[7797, 5711], [-22, 77]], [[7775, 5788], [42, 26]], [[7817, 5814], [75, -4], [36, -108]], [[7797, 5711], [-44, -2]], [[7753, 5709], [-41, 85]], [[7718, 5823], [57, -35]], [[7730, 5963], [87, -149]], [[6664, 5988], [5, 23]], [[6669, 6011], [80, 92]], [[6597, 6117], [72, -106]], [[6570, 6116], [27, 1]], [[6597, 6117], [18, -5]], [[6615, 6112], [98, 59]], [[6615, 6112], [-29, 44]], [[5968, 6282], [118, 35]], [[6242, 6452], [76, 11]], [[6251, 6554], [77, -6]], [[3824, 1560], [-78, 18]], [[3746, 1578], [-3, 71]], [[5191, 6189], [71, 23], [94, 132]], [[7690, 3213], [2, -23]], [[7526, 3211], [164, 2]], [[4864, 4761], [-24, -51]], [[1983, 4466], [-66, -142]], [[5318, 1996], [34, -127]], [[5264, 1958], [54, 38]], [[5327, 2055], [-9, -59]], [[4214, 955], [59, 37]], [[6981, 5786], [-5, -106]], [[6976, 5680], [-94, -69]], [[6882, 5611], [-89, 74]], [[6793, 5685], [23, 84]], [[6858, 5796], [123, -10]], [[6793, 5685], [-28, -15]], [[6765, 5670], [-27, 63]], [[5815, 672], [89, -86]], [[5811, 482], [-11, 17]], [[5781, 590], [34, 82]], [[8464, 4853], [-38, 84]], [[8410, 4969], [45, 51]], [[8455, 5020], [19, 35]], [[8474, 5055], [40, -221]], [[2208, 1529], [-117, -219]], [[2091, 1310], [-89, 156]], [[2002, 1466], [73, 42], [-30, 121]], [[2054, 1668], [154, -139]], [[7670, 4879], [67, 38]], [[2306, 1591], [-98, -62]], [[6438, 3672], [40, 146], [71, 30]], [[6591, 3877], [-18, 45]], [[6573, 3922], [197, 173], [67, 83]], [[6459, 3885], [48, 60]], [[6507, 3945], [66, -23]], [[4675, 1785], [16, -59]], [[3735, 1449], [11, 129]], [[5815, 672], [18, 52]], [[5833, 724], [77, 38]], [[2441, 5241], [-44, -20]], [[4550, 5157], [-13, -3]], [[4537, 5154], [-66, 115]], [[4915, 2071], [-50, -15]], [[4833, 2262], [108, -15]], [[4883, 1772], [109, 37]], [[4992, 1809], [13, 8]], [[4902, 1853], [90, -44]], [[4781, 2059], [-26, -70]], [[4859, 1941], [-15, -24]], [[7652, 3283], [38, -70]], [[7534, 3338], [105, -13]], [[7429, 2835], [-49, -23]], [[7380, 2812], [-91, 37]], [[7289, 2849], [1, 31]], [[7290, 2880], [10, 7]], [[7332, 2666], [71, 76]], [[7403, 2742], [15, 38]], [[7403, 2742], [-21, 4]], [[7382, 2746], [-2, 66]], [[7659, 2611], [11, 19]], [[7382, 2746], [-93, 103]], [[7249, 2857], [41, 23]], [[6469, 2555], [-39, -55]], [[6320, 2802], [62, -42], [5, -121], [82, -84]], [[6517, 2603], [-48, -48]], [[6322, 2848], [111, -41], [37, -73]], [[6322, 2848], [137, 159]], [[5074, 1807], [-53, 78]], [[5021, 1885], [2, 36]], [[5021, 1885], [-42, 23]], [[4979, 1908], [-9, 72]], [[4898, 1859], [77, 57]], [[4975, 1916], [4, -8]], [[6162, 458], [-70, -48]], [[6067, 571], [95, -113]], [[5201, 1544], [-46, -58]], [[5155, 1486], [-91, 56]], [[5155, 1486], [-43, -93]], [[5155, 1486], [88, -114]], [[2807, 3898], [-107, -79]], [[2782, 3038], [-2, -2]], [[2780, 3036], [-7, -3]], [[2660, 3106], [128, 13]], [[3361, 2905], [-58, -37]], [[3168, 2699], [-22, -40]], [[3146, 2659], [-74, -6]], [[3072, 2653], [23, 165], [212, 108]], [[3200, 2956], [-160, -31]], [[3261, 3268], [106, -102]], [[3367, 3166], [4, -126]], [[2589, 1715], [-96, 28]], [[2493, 1743], [29, 81]], [[2527, 1840], [47, 3]], [[2466, 1741], [4, -35]], [[2470, 1706], [-25, -69]], [[2445, 1637], [-53, 5]], [[2392, 1642], [-3, 1]], [[2367, 1809], [99, -68]], [[2493, 1743], [-27, -2]], [[2646, 1901], [-188, 168]], [[5040, 3874], [48, -135]], [[5088, 3739], [-9, -45]], [[5017, 3897], [23, -23]], [[5262, 3788], [-40, 14]], [[5222, 3802], [-89, 112], [-93, -40]], [[5088, 3739], [134, 63]], [[5230, 520], [57, -41]], [[5301, 461], [-57, -88]], [[5156, 501], [68, 31]], [[5224, 532], [6, -12]], [[5230, 520], [65, 117]], [[5367, 421], [17, -20]], [[5267, 302], [-26, 18]], [[4910, 457], [-96, -111]], [[4900, 486], [10, -29]], [[5147, 684], [77, -152]], [[5101, 526], [-20, 35]], [[5081, 561], [66, 123]], [[5282, 737], [30, -42]], [[5312, 695], [-112, 13]], [[5200, 708], [-66, 48]], [[5134, 756], [110, 20]], [[5642, 867], [-17, -47]], [[5516, 860], [126, 7]], [[5652, 697], [23, -1]], [[5685, 682], [-6, -35]], [[5551, 974], [-93, -34]], [[5460, 1061], [91, -87]], [[5568, 980], [79, -80]], [[5652, 899], [-10, -32]], [[5551, 974], [17, 6]], [[5553, 1105], [15, -125]], [[5546, 1121], [7, -16]], [[5253, 1114], [63, -74]], [[5220, 981], [-11, 27]], [[5057, 810], [45, -53]], [[5102, 757], [-70, -110]], [[5032, 647], [-52, 61]], [[5032, 647], [-2, -2]], [[5030, 645], [-101, -52], [-94, 69]], [[5302, 264], [14, -39]], [[5342, 112], [-57, -4]], [[5285, 108], [-72, 174]], [[5329, 672], [-17, 23]], [[5147, 684], [53, 24]], [[5863, 1009], [32, -53], [-48, -132]], [[5847, 824], [-9, -3]], [[5738, 864], [45, 99]], [[5717, 884], [-15, 13]], [[5659, 909], [0, 1]], [[5661, 233], [-17, 38]], [[5625, 457], [145, -27]], [[5619, 354], [-25, 13]], [[5594, 367], [-23, 43]], [[5571, 410], [-2, 61]], [[5555, 209], [74, 97]], [[5548, 466], [-136, -77]], [[5432, 297], [12, 8]], [[5444, 305], [20, 0]], [[5177, 839], [-108, 60]], [[5135, 959], [42, -120]], [[5190, 828], [-13, 11]], [[5192, 826], [-65, -56]], [[5127, 770], [-25, -13]], [[5285, 108], [-142, 49]], [[5143, 157], [-10, 148]], [[5134, 756], [-7, 14]], [[2651, 875], [-25, 72]], [[6553, 5025], [-5, -152]], [[6497, 4839], [-34, 110], [19, 99]], [[6482, 5048], [71, -23]], [[6381, 5106], [101, -58]], [[6553, 5025], [125, -43]], [[6731, 5528], [41, -42]], [[2885, 5961], [-11, -122]], [[2696, 5936], [22, 71]], [[2718, 6007], [167, -46]], [[3022, 1319], [3, 3]], [[3025, 1322], [208, -8]], [[3120, 1388], [125, -22]], [[3025, 1322], [-4, 61]], [[2350, 6191], [19, 93], [110, -46]], [[2956, 6251], [-77, 5]], [[2879, 6256], [8, 30]], [[2887, 6286], [67, 53]], [[2987, 6357], [15, -49]], [[2887, 6286], [54, 102]], [[2173, 6176], [136, -100]], [[2313, 6045], [-11, -11]], [[2164, 6126], [9, 50]], [[2661, 6138], [-35, -76]], [[2626, 6062], [-60, -88]], [[2496, 6041], [-8, 105]], [[2339, 6133], [-24, -53]], [[2173, 6176], [48, 17]], [[3252, 6518], [10, -17]], [[3262, 6501], [-98, -79]], [[3164, 6422], [-27, 41]], [[3137, 6463], [14, 31]], [[3104, 6530], [-124, -55]], [[2964, 6574], [111, 43]], [[3620, 6357], [-44, -71]], [[3576, 6286], [-96, -39]], [[3480, 6247], [-59, 108], [-62, 11]], [[3480, 6247], [-24, -25]], [[2691, 1586], [-62, -31]], [[2629, 1555], [-4, 6]], [[2625, 1561], [-62, 32], [-15, 106], [-78, 7]], [[2445, 1637], [120, -96], [60, 20]], [[2629, 1555], [-11, -57]], [[2618, 1498], [-118, 29], [-108, 115]], [[2733, 1526], [17, -44]], [[2679, 1445], [-61, 53]], [[3608, 2603], [7, 181]], [[2993, 6154], [-141, 4]], [[2852, 6158], [27, 98]], [[2080, 5979], [19, 54]], [[2852, 6158], [-23, -12]], [[2829, 6146], [-65, -11]], [[2764, 6135], [-23, 1]], [[3322, 6478], [-60, 23]], [[3226, 6381], [-62, 41]], [[2458, 5706], [8, 38]], [[2466, 5744], [125, -7]], [[2462, 5824], [4, -80]], [[2559, 5911], [73, -45]], [[2764, 6135], [-48, -77]], [[2716, 6058], [-90, 4]], [[3022, 6400], [115, 63]], [[2946, 5959], [28, -2]], [[2885, 5961], [61, -2]], [[2946, 5959], [-2, 56], [-115, 131]], [[2718, 6007], [-2, 51]], [[5049, 584], [-75, -145]], [[4974, 439], [-43, -17]], [[4931, 422], [-21, 35]], [[4904, 513], [142, 96]], [[5046, 609], [3, -25]], [[5833, 724], [-39, 44]], [[5847, 824], [51, -23]], [[5650, 1131], [-97, -26]], [[5571, 410], [-134, -86]], [[5594, 367], [-25, -24]], [[5569, 343], [-125, -38]], [[5501, 225], [68, 118]], [[6376, 1703], [-3, -16]], [[6373, 1687], [-93, -68]], [[6280, 1619], [-15, 68]], [[6656, 1488], [-68, -97]], [[6588, 1391], [-55, 48]], [[6533, 1439], [23, 69]], [[6281, 1069], [-5, -20]], [[6276, 1049], [-26, -40]], [[6197, 981], [18, 62]], [[6215, 1043], [66, 26]], [[6101, 1092], [69, -34]], [[6170, 1058], [45, -15]], [[6095, 1107], [6, -15]], [[6556, 1595], [-57, 90]], [[6156, 1113], [-55, -21]], [[6195, 1181], [-39, -68]], [[6463, 1310], [-30, -71]], [[6433, 1239], [-12, 51]], [[6421, 1290], [29, 20]], [[6450, 1310], [13, 0]], [[6276, 1049], [49, -14]], [[6317, 1125], [62, -48]], [[6379, 1077], [-4, -10]], [[6281, 1069], [33, 56]], [[6314, 1125], [3, 0]], [[6403, 1458], [7, -25]], [[6410, 1433], [-18, -68]], [[6392, 1365], [-58, 16]], [[6334, 1381], [11, 81]], [[6345, 1462], [31, 13]], [[6376, 1475], [27, -17]], [[6711, 1255], [-110, -68]], [[6597, 1213], [-48, 69]], [[6549, 1282], [94, 45]], [[6334, 1381], [-81, -18]], [[6276, 1422], [20, 26]], [[6296, 1448], [49, 14]], [[6457, 1583], [-90, -47]], [[6367, 1536], [-104, -5]], [[6263, 1531], [17, 88]], [[6373, 1687], [52, -38]], [[6425, 1649], [32, -66]], [[6367, 1536], [9, -61]], [[6296, 1448], [-70, 73]], [[6226, 1521], [37, 10]], [[6212, 1490], [-3, 16]], [[6209, 1506], [17, 15]], [[6124, 1545], [31, -5]], [[6155, 1540], [54, -34]], [[6102, 1408], [-15, 12]], [[6189, 1637], [-34, -97]], [[6533, 1439], [-63, -4]], [[6470, 1435], [-60, -2]], [[6403, 1458], [145, 58]], [[6672, 1354], [-64, 22]], [[6608, 1376], [-20, 15]], [[6549, 1282], [-69, 40]], [[6480, 1322], [128, 54]], [[6470, 1435], [-31, -101]], [[6439, 1334], [-47, 31]], [[6439, 1334], [11, -24]], [[6421, 1290], [-76, 12]], [[6345, 1302], [-11, 79]], [[6480, 1322], [-17, -12]], [[8430, 784], [-126, -167]], [[8304, 617], [-43, 57]], [[8261, 674], [2, 44]], [[8263, 718], [42, 138]], [[8305, 856], [117, -1]], [[8422, 855], [8, -71]], [[4255, 1689], [-24, 68]], [[4092, 2533], [61, -96]], [[4408, 2283], [-19, -49]], [[4389, 2234], [-42, 18]], [[4360, 2303], [13, 10]], [[4389, 2234], [-50, -55]], [[9394, 1468], [-23, -44]], [[9371, 1424], [-124, -96], [-165, 10], [-32, 39]], [[9050, 1377], [32, 82]], [[9082, 1459], [312, 9]], [[8731, 1616], [-116, -75]], [[8615, 1541], [-28, 1]], [[8587, 1542], [-64, 57]], [[8523, 1599], [-19, 39]], [[8504, 1638], [88, 71]], [[8592, 1709], [139, -93]], [[7839, 601], [-101, -12], [-117, 94], [-21, 77]], [[7821, 777], [52, -79], [-34, -97]], [[8010, 714], [-7, -72]], [[8003, 642], [-34, -54], [-130, 13]], [[9101, 529], [-23, -77]], [[9078, 452], [-63, 74]], [[9015, 526], [86, 3]], [[8454, 971], [-32, -116]], [[8305, 856], [-64, 83]], [[8392, 1038], [62, -67]], [[8387, 1712], [-14, -59], [92, -100]], [[8465, 1553], [20, -25]], [[8485, 1528], [-103, 26]], [[4711, 547], [133, 30]], [[4844, 577], [53, -42]], [[4833, 627], [11, -50]], [[5030, 645], [16, -36]], [[9020, 1559], [10, -6]], [[9030, 1553], [45, -85]], [[9075, 1468], [-112, -21], [-9, 76]], [[8954, 1523], [66, 36]], [[8792, 1090], [-50, -105]], [[8742, 985], [-51, 15]], [[8691, 1000], [-25, 39]], [[8666, 1039], [83, 49]], [[8749, 1088], [43, 2]], [[8143, 662], [-70, -146]], [[8073, 516], [-70, 126]], [[8098, 760], [45, -98]], [[8304, 617], [11, -53]], [[8315, 564], [-95, -45], [-147, -3]], [[8143, 662], [118, 12]], [[8370, 393], [-37, 130]], [[8333, 523], [17, 3]], [[8350, 526], [57, -61], [-37, -72]], [[8586, 747], [136, -70], [35, 35]], [[8757, 712], [-7, -59]], [[8750, 653], [-97, -67]], [[8653, 586], [-92, -47]], [[8561, 539], [-86, 9]], [[8475, 548], [53, 191]], [[8528, 739], [58, 8]], [[8250, 4866], [16, -53]], [[8266, 4813], [-45, -70]], [[8158, 4828], [12, 39]], [[8170, 4867], [80, -1]], [[7109, 5281], [-74, -59]], [[7019, 5291], [72, 37]], [[8455, 5020], [-102, 79]], [[8353, 5099], [22, 30]], [[8375, 5129], [99, -74]], [[7879, 4951], [-14, -61]], [[7821, 4932], [58, 19]], [[8379, 4835], [-37, 27]], [[8342, 4862], [1, 38]], [[7939, 5089], [37, -31]], [[7976, 5058], [-11, -25]], [[7965, 5033], [-73, -47]], [[7892, 4986], [-32, 75]], [[7860, 5061], [40, 31]], [[7900, 5092], [39, -3]], [[8297, 4976], [-43, 36]], [[8254, 5012], [94, 84]], [[8348, 5096], [5, 3]], [[7772, 5098], [55, -57]], [[7827, 5041], [-44, -36]], [[7737, 5038], [-39, 78]], [[7698, 5116], [74, -18]], [[8254, 5012], [-28, 22]], [[8226, 5034], [-34, 103]], [[8192, 5137], [29, 24]], [[8221, 5161], [127, -65]], [[7876, 5183], [24, -91]], [[7860, 5061], [-33, -20]], [[7772, 5098], [71, 103]], [[7843, 5201], [33, -18]], [[8193, 5241], [28, -80]], [[8192, 5137], [-80, 52]], [[8112, 5189], [19, 57]], [[8131, 5246], [62, -5]], [[8021, 5253], [22, -33]], [[8043, 5220], [-30, -79]], [[8013, 5141], [-37, -6]], [[7976, 5135], [-25, 132]], [[7951, 5267], [70, -14]], [[7976, 5135], [-37, -46]], [[7876, 5183], [36, 56]], [[7912, 5239], [39, 28]], [[8105, 5271], [26, -25]], [[8112, 5189], [-69, 31]], [[8021, 5253], [35, 36]], [[8056, 5289], [49, -18]], [[8172, 5350], [29, -90]], [[8201, 5260], [-8, -19]], [[8105, 5271], [8, 67]], [[7661, 5433], [-41, -88]], [[7620, 5345], [-83, 24]], [[7514, 5403], [13, 38]], [[7527, 5441], [115, 14]], [[7642, 5455], [19, -22]], [[7633, 5218], [-13, 127]], [[7661, 5433], [53, 21]], [[6923, 5559], [68, -26]], [[6991, 5533], [-80, -77]], [[6902, 5485], [-7, 53]], [[6895, 5538], [28, 21]], [[6772, 5486], [60, 65]], [[6832, 5551], [63, -13]], [[8041, 5416], [-10, 12]], [[7976, 5462], [53, 72]], [[8029, 5534], [85, -93]], [[7642, 5455], [-25, 104]], [[7527, 5441], [-32, 15]], [[7495, 5456], [-10, 90]], [[7581, 5553], [36, 6]], [[7394, 5775], [18, -59]], [[7412, 5716], [-41, -15]], [[7074, 5686], [6, 8]], [[7080, 5694], [271, 42]], [[7351, 5736], [43, 39]], [[7074, 5707], [6, -13]], [[7018, 5639], [-42, 41]], [[6981, 5786], [28, 2]], [[7009, 5788], [65, -81]], [[7753, 5709], [-30, -70]], [[7723, 5639], [-11, -17]], [[7692, 5633], [-80, 83]], [[7612, 5716], [-24, 77]], [[7547, 5848], [-85, 43]], [[7462, 5891], [67, 85]], [[7914, 5615], [-6, -33]], [[7723, 5639], [191, -24]], [[7835, 5344], [77, -105]], [[7843, 5201], [-44, 31]], [[7438, 5003], [87, -102]], [[7525, 4901], [-14, -11]], [[7260, 5389], [34, -20]], [[7322, 5282], [-33, -32]], [[7172, 5310], [50, 74]], [[7222, 5384], [38, 5]], [[7068, 5393], [13, -2]], [[7081, 5391], [24, -18]], [[6940, 5385], [128, 8]], [[7474, 5202], [-63, 14]], [[7411, 5216], [0, 163]], [[7414, 5393], [98, 10]], [[7344, 5468], [151, -12]], [[7083, 5425], [-15, -32]], [[6991, 5533], [18, 1]], [[7268, 5453], [-80, 26]], [[7188, 5479], [3, 41]], [[7223, 5545], [45, -92]], [[7309, 5538], [27, -56]], [[7321, 5472], [-33, -30]], [[7276, 5453], [-8, 0]], [[7375, 5629], [70, -13]], [[6923, 5559], [-41, 52]], [[7412, 5716], [40, -1]], [[7269, 5407], [-9, -18]], [[7222, 5384], [-34, 35]], [[7188, 5419], [0, 60]], [[7553, 5701], [59, 15]], [[8226, 5034], [-64, -43]], [[8162, 4991], [-21, 7]], [[8141, 4998], [-128, 143]], [[8056, 5289], [-89, 82]], [[6832, 5551], [-55, 33]], [[6777, 5584], [-12, 86]], [[7081, 5391], [107, 28]], [[6777, 5584], [-57, -44]], [[7277, 5845], [16, -28]], [[7293, 5817], [-293, 35]], [[7000, 5852], [8, 35]], [[8312, 4806], [14, -99]], [[8266, 4813], [46, -7]], [[8312, 4806], [30, 56]], [[7342, 5752], [9, -16]], [[7074, 5707], [268, 45]], [[8048, 4906], [42, -89]], [[7965, 4825], [38, 96]], [[8003, 4921], [1, 3]], [[8004, 4924], [44, -18]], [[7917, 4905], [86, 16]], [[7879, 4951], [38, -46]], [[8162, 4991], [8, -124]], [[8048, 4906], [77, 6]], [[8125, 4912], [16, 86]], [[7965, 5033], [39, -109]], [[7917, 4905], [-25, 81]], [[8297, 4976], [-47, -110]], [[8125, 4912], [-149, 146]], [[7914, 5615], [9, 29]], [[7923, 5644], [106, -110]], [[7392, 5808], [2, -33]], [[7342, 5752], [-49, 65]], [[7462, 5891], [-70, -29]], [[7542, 4893], [36, -14]], [[7525, 4901], [17, -8]], [[7556, 5047], [6, -5]], [[7562, 5042], [4, -43]], [[7566, 4999], [-24, -106]], [[7346, 5161], [53, -41]], [[7342, 5077], [-12, 51]], [[7330, 5128], [16, 33]], [[7294, 5182], [36, -54]], [[7232, 5129], [11, 13]], [[7346, 5161], [41, 49]], [[7387, 5210], [24, 6]], [[7362, 5268], [25, -58]], [[7462, 5891], [-18, -147]], [[7000, 5852], [9, -64]], [[7928, 5702], [-5, -58]], [[7566, 4999], [89, -121]], [[9075, 1468], [7, -9]], [[9050, 1377], [-54, -108]], [[8996, 1269], [-52, -21]], [[8944, 1248], [-26, 47]], [[8918, 1295], [27, 93], [-85, 44]], [[8860, 1432], [-26, 76]], [[8834, 1508], [27, 74]], [[8861, 1582], [93, -59]], [[9371, 1424], [-152, -212]], [[9219, 1212], [-60, 94], [-134, -84]], [[9025, 1222], [-29, 47]], [[9025, 1222], [21, -88]], [[9046, 1134], [-69, 17]], [[8977, 1151], [-47, -128]], [[8930, 1023], [-49, -47]], [[8881, 976], [-48, 114]], [[8833, 1090], [42, 92]], [[8875, 1182], [69, 66]], [[8956, 900], [11, -101]], [[8967, 799], [-97, -53]], [[8870, 746], [-6, 29]], [[8864, 775], [19, 95]], [[8883, 870], [11, 23]], [[8894, 893], [62, 7]], [[8430, 784], [98, -45]], [[8475, 548], [-106, 60], [-19, -82]], [[8333, 523], [-18, 41]], [[8731, 1278], [-76, -88]], [[8655, 1190], [-70, -73]], [[8585, 1117], [-7, 95]], [[8578, 1212], [44, 83], [101, 16]], [[8723, 1311], [8, -33]], [[9082, 686], [23, -87]], [[9105, 599], [-21, 5]], [[9084, 604], [-38, 64]], [[9046, 668], [36, 18]], [[8847, 439], [-46, -83]], [[8801, 356], [-102, 12]], [[8699, 368], [-3, 15]], [[8696, 383], [-10, 64]], [[8686, 447], [161, -8]], [[8864, 775], [-60, -5]], [[8804, 770], [-81, 59]], [[8723, 829], [29, 49]], [[8752, 878], [131, -8]], [[8516, 1446], [48, -37], [-72, -127]], [[8418, 1471], [98, -25]], [[8587, 1542], [-71, -96]], [[8426, 1491], [59, 37]], [[8465, 1553], [58, 46]], [[8561, 539], [-2, -162]], [[8559, 377], [-61, 14], [-104, -61]], [[8394, 330], [-24, 63]], [[8804, 770], [-47, -58]], [[8586, 747], [51, 141]], [[8637, 888], [86, -59]], [[8807, 1348], [111, -53]], [[8875, 1182], [-144, 96]], [[8723, 1311], [-13, 25]], [[8710, 1336], [97, 12]], [[8263, 718], [-136, 177]], [[8432, 1719], [72, -81]], [[8587, 1750], [5, -41]], [[8470, 1778], [117, -28]], [[8870, 746], [16, -18]], [[8886, 728], [-48, -72]], [[8838, 656], [-88, -3]], [[8752, 878], [-4, 70]], [[8748, 948], [103, 17]], [[8851, 965], [43, -72]], [[8742, 985], [6, -37]], [[8637, 888], [-21, 71]], [[8616, 959], [75, 41]], [[8800, 1593], [-60, -2], [-56, -144]], [[8684, 1447], [-69, 94]], [[8731, 1616], [69, -23]], [[8684, 1447], [26, -111]], [[8578, 1212], [-83, 52]], [[9035, 761], [-58, -43]], [[8977, 718], [-91, 10]], [[8967, 799], [68, -38]], [[8807, 1348], [53, 84]], [[8800, 1593], [34, -85]], [[9219, 1212], [-78, -124]], [[9141, 1088], [-95, 46]], [[9141, 1088], [-77, -108]], [[9064, 980], [-30, -7]], [[9034, 973], [-10, 4]], [[9024, 977], [-47, 174]], [[3235, 328], [-61, -20]], [[7271, 4248], [-4, 59]], [[7267, 4307], [26, 58]], [[7250, 4335], [17, -28]], [[7080, 4301], [29, 6]], [[7109, 4307], [116, 30]], [[7225, 4337], [25, -2]], [[7698, 5116], [-25, 24]], [[7716, 5005], [-154, 37]], [[8201, 5260], [174, -131]], [[10061, 2689], [-142, -296]], [[9919, 2393], [-138, 50]], [[9496, 2596], [250, 130], [194, 12], [121, -49]], [[9919, 2393], [80, 3]], [[9999, 2396], [-94, -155], [37, -79], [84, -19]], [[10026, 2143], [-130, -152], [-84, 37]], [[9812, 2028], [27, 74], [-82, 183]], [[10183, 2182], [-31, -282], [-33, -80], [-351, -49]], [[9768, 1771], [-61, 88], [105, 169]], [[10026, 2143], [157, 39]], [[9768, 1771], [-121, -29], [-141, -106]], [[9506, 1636], [-14, 192]], [[9492, 1828], [-37, 112]], [[9455, 1940], [-4, 227]], [[9451, 2167], [78, -11]], [[9529, 2156], [98, 27], [59, 73]], [[9428, 2211], [23, -44]], [[9455, 1940], [-92, 125], [-85, 50]], [[9278, 2115], [-10, 39]], [[9268, 2154], [89, 57]], [[9357, 2211], [71, 0]], [[9367, 2330], [-10, -119]], [[9268, 2154], [-34, 28]], [[9234, 2182], [-99, 85]], [[9135, 2267], [101, 128]], [[9483, 2285], [-55, -74]], [[9135, 2267], [-125, 90]], [[9010, 2357], [-23, 43]], [[8987, 2400], [20, 45]], [[9007, 2445], [182, -27]], [[9529, 2156], [39, 126]], [[8987, 2400], [-151, -20]], [[8836, 2380], [-53, 37]], [[8783, 2417], [30, 116]], [[8813, 2533], [194, -88]], [[9010, 2357], [-35, -52]], [[8975, 2305], [-121, -16]], [[8854, 2289], [-18, 91]], [[8975, 2305], [17, -9]], [[8992, 2296], [-101, -129]], [[8891, 2167], [-16, 71]], [[8875, 2238], [-21, 51]], [[9234, 2182], [-126, -1]], [[9108, 2181], [-99, 54]], [[9009, 2235], [-17, 61]], [[8875, 2238], [-39, -112]], [[8836, 2126], [-79, 174]], [[8757, 2300], [-70, 65]], [[8687, 2365], [96, 52]], [[8836, 2126], [-10, -36]], [[8826, 2090], [-13, -33]], [[8813, 2057], [-177, -20]], [[8636, 2037], [-56, 137]], [[8580, 2174], [85, 84]], [[8665, 2258], [92, 42]], [[8636, 2629], [-57, -65], [60, -110]], [[8639, 2454], [2, -22]], [[8641, 2432], [-26, 5]], [[8615, 2437], [-144, 65]], [[8471, 2502], [77, 45], [-17, 77]], [[8531, 2624], [-32, 111]], [[8531, 2624], [-115, -11]], [[8471, 2502], [-7, -51]], [[8384, 2503], [5, 33]], [[8580, 2174], [-37, -14]], [[8578, 2294], [87, -36]], [[8641, 2432], [46, -67]], [[8563, 2307], [18, 79]], [[8581, 2386], [34, 51]], [[8581, 2386], [-73, 2]], [[8813, 2057], [-1, -115]], [[8812, 1942], [-104, -26], [-95, 52]], [[8613, 1968], [29, 47]], [[8642, 2015], [-6, 22]], [[8643, 1811], [-56, -61]], [[8539, 1898], [70, 8]], [[8609, 1906], [34, -95]], [[8812, 1942], [77, -146]], [[8889, 1796], [-4, -38]], [[8885, 1758], [-242, 53]], [[8609, 1906], [4, 62]], [[8891, 2167], [39, -94]], [[8930, 2073], [-104, 17]], [[9009, 2235], [5, -126], [-84, -37]], [[8930, 2072], [0, 1]], [[8930, 2072], [-7, -114]], [[8923, 1958], [13, -100], [60, -40]], [[8996, 1818], [-32, -29]], [[8964, 1789], [-75, 7]], [[9197, 1792], [-57, 2]], [[9140, 1794], [-34, 55]], [[9106, 1849], [-30, 77]], [[9076, 1926], [100, 65]], [[9176, 1991], [75, -50], [-54, -149]], [[9492, 1828], [-185, 28], [-68, -69]], [[9239, 1787], [-42, 5]], [[9176, 1991], [-6, 56]], [[9170, 2047], [94, -22], [14, 90]], [[9140, 1794], [24, -146], [70, -94]], [[9234, 1554], [-204, -1]], [[9020, 1559], [-12, 141]], [[9008, 1700], [-44, 89]], [[8996, 1818], [110, 31]], [[9008, 1700], [-58, 22]], [[8950, 1722], [-65, 36]], [[8950, 1722], [-89, -140]], [[9053, 1954], [23, -28]], [[8923, 1958], [130, -4]], [[9053, 1954], [11, 115]], [[9064, 2069], [106, -22]], [[8703, 2623], [-64, -169]], [[8729, 2618], [84, -85]], [[9239, 1787], [83, -227]], [[9322, 1560], [-88, -6]], [[1371, 2299], [-52, 64]], [[1319, 2363], [69, 160]], [[1388, 2523], [114, -72]], [[1367, 2572], [21, -49]], [[1319, 2363], [-152, 64]], [[9064, 2069], [44, 112]], [[9469, 1590], [-75, -122]], [[9322, 1560], [76, 58], [71, -28]], [[9506, 1636], [-37, -46]], [[3788, 4643], [-95, -57]], [[3693, 4586], [-106, 39]], [[3587, 4625], [148, 59]], [[3816, 4549], [-21, -12]], [[3795, 4537], [-102, 49]], [[3587, 4625], [-4, -6]], [[3867, 4277], [-45, 78]], [[3822, 4355], [21, 4]], [[3843, 4359], [40, -4]], [[3610, 4525], [122, -48]], [[3732, 4477], [-28, -51]], [[3704, 4426], [-29, -46]], [[3675, 4380], [-15, -7]], [[3792, 4494], [-12, -72]], [[3780, 4422], [-76, 4]], [[3732, 4477], [60, 17]], [[3795, 4537], [-3, -43]], [[8642, 2015], [-89, 13]], [[10162, 2405], [57, -103], [-36, -120]], [[9999, 2396], [163, 9]], [[10061, 2689], [119, -106], [29, -106], [-47, -72]], [[3615, 3778], [-95, -62]], [[4859, 303], [-1, 0]], [[4128, 1070], [57, -13]], [[4495, 1265], [20, -93]], [[4515, 1172], [-18, -15]], [[4490, 1288], [5, -23]], [[4607, 1309], [-9, 29]], [[4598, 1338], [-16, 47]], [[4598, 1338], [-103, -73]], [[4605, 1233], [-90, -61]], [[3780, 6447], [102, 56]], [[3882, 6503], [111, 5]], [[3854, 6553], [28, -50]], [[4537, 5154], [-13, -13]], [[4524, 5141], [-26, -7]], [[4524, 5141], [58, -106]], [[8699, 368], [98, -178]], [[8797, 190], [-151, 17], [-107, 48]], [[8539, 255], [48, 100]], [[8587, 355], [109, 28]], [[8801, 356], [144, -15]], [[8945, 341], [-15, -47]], [[8930, 294], [-56, -124]], [[8874, 170], [-77, 20]], [[8528, 971], [88, -12]], [[8454, 971], [74, 0]], [[8560, 1048], [-41, -75]], [[8519, 973], [41, 75]], [[8536, 1078], [24, -30]], [[8519, 973], [9, -2]], [[8416, 1114], [120, -36]], [[8585, 1117], [-8, -13]], [[8577, 1104], [-41, -26]], [[8577, 1104], [89, -65]], [[9024, 977], [-94, 46]], [[8977, 718], [-4, -57]], [[8973, 661], [20, -81]], [[8993, 580], [-11, -60]], [[8982, 520], [-88, 7]], [[8894, 527], [-73, 17]], [[8821, 544], [17, 112]], [[9105, 599], [-4, -70]], [[9015, 526], [-33, -6]], [[8993, 580], [91, 24]], [[8973, 661], [73, 7]], [[8655, 1190], [94, -102]], [[8833, 1090], [-41, 0]], [[8559, 377], [28, -22]], [[8539, 255], [-145, 75]], [[8653, 586], [4, -7]], [[8657, 579], [29, -132]], [[8881, 976], [-30, -11]], [[9034, 973], [-78, -73]], [[8821, 544], [-164, 35]], [[8930, 294], [90, -40]], [[9020, 254], [-2, -77], [-144, -7]], [[9057, 420], [-37, -166]], [[8945, 341], [43, 42]], [[8988, 383], [69, 37]], [[2879, 3421], [35, -21]], [[2914, 3400], [27, -112]], [[2941, 3288], [-3, -11]], [[2829, 3436], [50, -15]], [[3019, 3467], [-1, -21]], [[3018, 3446], [-104, -46]], [[2879, 3421], [24, 82]], [[4974, 439], [48, -27]], [[5010, 390], [-26, -85], [-97, -56]], [[4862, 257], [9, 39]], [[5081, 561], [-32, 23]], [[3262, 1461], [37, -51]], [[3299, 1410], [11, -29]], [[3299, 1410], [39, 69]], [[3338, 1479], [67, -21]], [[3250, 1538], [88, -59]], [[2979, 1507], [-98, -116]], [[7197, 4896], [-51, 105]], [[7146, 5001], [20, 1]], [[7049, 4999], [97, 2]], [[6433, 1239], [2, -4]], [[6435, 1235], [-102, -10]], [[6333, 1225], [12, 77]], [[6457, 1190], [-6, -26]], [[6451, 1164], [-54, 4]], [[6397, 1168], [-71, 47]], [[6326, 1215], [1, 8]], [[6327, 1223], [6, 2]], [[6435, 1235], [31, -15]], [[6327, 1223], [-30, 5]], [[6397, 1168], [-18, -91]], [[6317, 1125], [9, 90]], [[6314, 1125], [-57, 21]], [[6257, 1146], [-40, 35]], [[2091, 1310], [-125, 19], [-65, 141]], [[1901, 1470], [101, -4]], [[1901, 1470], [-29, 52], [-132, 25]], [[6451, 1164], [44, -98]], [[6497, 1018], [-108, 52]], [[6170, 1058], [18, 43]], [[6188, 1101], [69, 45]], [[6156, 1113], [32, -12]], [[6278, 4000], [-44, -75]], [[6390, 4049], [148, 28], [-31, -132]], [[7204, 4341], [-95, -34]], [[7174, 4407], [30, -66]], [[7204, 4341], [21, -4]], [[7194, 4486], [-17, -64]], [[6518, 1564], [-61, 19]], [[2720, 1270], [50, -39]], [[5992, 1367], [23, 27]], [[6015, 1394], [37, -37]], [[5964, 1463], [51, -69]], [[7240, 4473], [10, -138]], [[6735, 4347], [-60, -26]], [[7445, 3947], [-48, -29], [-169, 17]], [[7470, 3913], [23, -66]], [[4924, 1965], [51, -49]], [[5193, 2519], [-25, -21]], [[8253, 2982], [-1, -47]], [[3108, 1987], [-3, -43]], [[3105, 1944], [-54, -42]], [[3096, 1851], [115, -75]], [[3105, 1944], [57, -25]], [[3164, 2501], [29, -12]], [[3038, 2471], [126, 30]], [[3164, 2501], [-18, 158]], [[2883, 2435], [-93, 62]], [[2888, 2599], [176, 51]], [[3064, 2650], [8, 3]], [[2780, 3036], [92, -60]], [[3061, 3519], [89, -123]], [[3037, 3351], [-19, 95]], [[2664, 3135], [73, 62]], [[5909, 2280], [-16, 7]], [[5893, 2287], [-5, 82]], [[5876, 2281], [17, 6]], [[3026, 3305], [-85, -17]], [[2976, 2906], [16, -226], [72, -30]], [[3552, 2583], [-123, 83], [-30, 229], [47, 61]], [[3446, 2956], [89, -57]], [[3432, 2951], [14, 5]], [[3330, 3438], [-33, -23]], [[3297, 3415], [-70, -24]], [[3297, 3415], [84, -202], [-14, -47]], [[4631, 1145], [3, -95]], [[3491, 6064], [-76, -14]], [[3576, 6286], [11, -69], [-96, -153]], [[3558, 6013], [-67, 51]], [[7329, 2971], [-24, 49]], [[7324, 3041], [116, -27]], [[7118, 3061], [167, -143]], [[7521, 3459], [-12, 59]], [[3768, 5296], [19, -93]], [[3780, 4422], [63, -63]], [[3822, 4355], [-147, 25]], [[3929, 4478], [-7, -51]], [[3393, 4515], [-87, -31], [-46, -161]], [[3995, 4462], [94, -72]], [[6503, 1185], [9, -6]], [[1009, 3714], [-19, 66]], [[6512, 1186], [15, 6]], [[6534, 1197], [18, -9]], [[2711, 3220], [-137, -5], [-84, -76]], [[9078, 452], [-21, -32]], [[8988, 383], [-84, 112]], [[8904, 495], [-10, 32]], [[8307, 2461], [45, -28]], [[989, 2561], [-85, -44], [-83, 44]], [[821, 2561], [70, 142]], [[821, 2561], [-11, 24]], [[7167, 5147], [33, -27]], [[4266, 2512], [-51, 43]], [[5052, 347], [-143, -134]], [[4901, 207], [-6, -3]], [[5143, 157], [-37, 4]], [[5080, 229], [-8, 30]], [[5072, 310], [24, 19]], [[5083, 163], [-153, -27]], [[3206, 5230], [145, 41]], [[4004, 1607], [45, 62]], [[6217, 459], [-55, -1]], [[6257, 415], [-88, -56]], [[9088, 696], [-53, 65]], [[9064, 980], [42, -148], [-18, -136]], [[9088, 696], [-6, -10]], [[8847, 439], [57, 56]]],\n  \"transform\": {\n    \"scale\": [0.0009221913753356358, 0.0006655487391585116],\n    \"translate\": [20.26309461243492, 43.620684776227264]\n  },\n  \"objects\": {\n    \"romania.atus\": {\n      \"type\": \"GeometryCollection\",\n      \"geometries\": [{\n        \"arcs\": [[0, 1, 2, 3, 4, 5, 6]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153400\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Năsturelu\"\n        }\n      }, {\n        \"arcs\": [],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"152314\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Bujoru\"\n        }\n      }, {\n        \"arcs\": [[10, -6, 11, 12, 13, 14]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151978\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Zimnicea\"\n        }\n      }, {\n        \"arcs\": [[15, 16, 17]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151709\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Ciuperceni\"\n        }\n      }, {\n        \"arcs\": [[20, -13, 21, 22, 23]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155118\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Fântânele\"\n        }\n      }, {\n        \"arcs\": [[26, 27, 28, 29, 30, 31]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151736\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Islaz\"\n        }\n      }, {\n        \"arcs\": [[-30, 32, 33, 34, 35]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125588\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Gîrcov\"\n        }\n      }, {\n        \"arcs\": [[37, -10, 38, -8, -7, -11, 39, 40]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152234\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Bragadiru\"\n        }\n      }, {\n        \"arcs\": [[41, 42, 43, 44]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127938\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Orlea\"\n        }\n      }, {\n        \"arcs\": [[45, 46, 47, 48]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70879\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bechet\"\n        }\n      }, {\n        \"arcs\": [[49, 50, 51, 52]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103194\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Găujani\"\n        }\n      }, {\n        \"arcs\": [[53, 54, 55, 56]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127251\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Ianca\"\n        }\n      }, {\n        \"arcs\": [[-44, 57, 58, 59]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130339\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Gura Padinii\"\n        }\n      }, {\n        \"arcs\": [[-51, 60, -4, -37, -2, -39, -9, -38, 61, 62]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153589\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Pietroșani\"\n        }\n      }, {\n        \"arcs\": [[-23, 63, 64, 65, 66]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154460\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Suhaia\"\n        }\n      }, {\n        \"arcs\": [[-59, 67, -54, 68, 69]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127224\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Grojdibodu\"\n        }\n      }, {\n        \"arcs\": [[70, -53, 71, 72]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105909\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Vedea\"\n        }\n      }, {\n        \"arcs\": [[73, 74, 75, -69, -57, 76, 77]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129282\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Ștefan cel Mare\"\n        }\n      }, {\n        \"arcs\": [[78, 79, 80, 81, -35, 82, 83]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127368\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Izbiceni\"\n        }\n      }, {\n        \"arcs\": [[84, -83, -34, 85, -42, 86, 87, 88, 89]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125542\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Corabia\"\n        }\n      }, {\n        \"arcs\": [[90, -46, 91, 92]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71607\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Călărași\"\n        }\n      }, {\n        \"arcs\": [[93, 94, 95, 96, 97]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152500\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Cervenia\"\n        }\n      }, {\n        \"arcs\": [[98, -73, 99, 100, 101]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179739\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Malu\"\n        }\n      }, {\n        \"arcs\": [[103, -87, -45, -60, -70, -76, 104, 105]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129745\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vădăstrița\"\n        }\n      }, {\n        \"arcs\": [[-105, -75, -103, -78, 106, 107, 108]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129629\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Urzica\"\n        }\n      }, {\n        \"arcs\": [[109, -88, -104, 110, 111]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129718\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vădastra\"\n        }\n      }, {\n        \"arcs\": [[112, 113, 114, 115, 116, 117]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153561\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Piatra\"\n        }\n      }, {\n        \"arcs\": [[118, -102, 119, 120, 121]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100549\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Slobozia\"\n        }\n      }, {\n        \"arcs\": [[122, -84, -85, 123]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129460\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Tia Mare\"\n        }\n      }, {\n        \"arcs\": [[124, 125, -89, -110, 126, 127]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129898\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vișina\"\n        }\n      }, {\n        \"arcs\": [[128, -107, -77, -56, 129, -93, 130, 131]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72007\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Dăbuleni\"\n        }\n      }, {\n        \"arcs\": [[-127, -112, 132, 133]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130375\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vișina Nouă\"\n        }\n      }, {\n        \"arcs\": [[134, 135, 136, 137, 138]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152662\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Crângu\"\n        }\n      }, {\n        \"arcs\": [[139, 140, 141, 142]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74867\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Cârna\"\n        }\n      }, {\n        \"arcs\": [[143, 144, 145, 146]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72463\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Gighera\"\n        }\n      }, {\n        \"arcs\": [[147, -146, 148, -140, 149, 150]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72980\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Măceșu de Jos\"\n        }\n      }, {\n        \"arcs\": [[151, 152, 153]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72034\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Desa\"\n        }\n      }, {\n        \"arcs\": [[-138, 154, 155, 156, 157, 158]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155109\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Dracea\"\n        }\n      }, {\n        \"arcs\": [[159, -124, -90, -126, 160, 161]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126148\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Cilieni\"\n        }\n      }, {\n        \"arcs\": [[162, -133, -111, -106, -109, 163, 164]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127750\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Obîrșia\"\n        }\n      }, {\n        \"arcs\": [[165, 166, -131, -92, -49, 167, 168, 169]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73996\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Sadova\"\n        }\n      }, {\n        \"arcs\": [[-169, 170, -147, -148, 171, 172]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72579\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Gîngiova\"\n        }\n      }, {\n        \"arcs\": [[-100, -72, -52, -63, 173, -98, 174, 175, 176, 177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103309\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Gogoșari\"\n        }\n      }, {\n        \"arcs\": [[178, 179, -128, -134, -163, 180, 181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125962\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Brastavățu\"\n        }\n      }, {\n        \"arcs\": [[-142, 182, 183, 184, 185, 186]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70897\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bistreț\"\n        }\n      }, {\n        \"arcs\": [[187, 188, 189, 190]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73460\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Negoi\"\n        }\n      }, {\n        \"arcs\": [[191, -161, -125, -180, 192, 193, 194]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128588\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Rusănești\"\n        }\n      }, {\n        \"arcs\": [[195, -181, -165, 196, 197]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126077\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Bucinișu\"\n        }\n      }, {\n        \"arcs\": [[198, -150, -143, -187, 199, 200]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72640\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Goicea\"\n        }\n      }, {\n        \"arcs\": [[-184, 201, -191, 202, 203]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74842\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Catane\"\n        }\n      }, {\n        \"arcs\": [[204, -158, 205, 206, 207, 208, 209]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153829\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Putineiu\"\n        }\n      }, {\n        \"arcs\": [[210, 211, -162, -192, 212, 213]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154344\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Slobozia Mândra\"\n        }\n      }, {\n        \"arcs\": [[214, -120, -101, -178, 215, 216]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104715\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Putineiu\"\n        }\n      }, {\n        \"arcs\": [[217, -153, 218, 219]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71858\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Ciupercenii Noi\"\n        }\n      }, {\n        \"arcs\": [[220, -197, -164, -108, -129, 221, 222, 223]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70637\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Amărăștii de Jos\"\n        }\n      }, {\n        \"arcs\": [[224, 225, 226, 227, 228]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74108\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Seaca de Cîmp\"\n        }\n      }, {\n        \"arcs\": [[229, -182, -196, 230, 231]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130320\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Grădinile\"\n        }\n      }, {\n        \"arcs\": [[232, -193, -179, -230, 233, 234]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129184\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Studina\"\n        }\n      }, {\n        \"arcs\": [[235, 236, 237, 238, 239, 240]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104519\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Oinacu\"\n        }\n      }, {\n        \"arcs\": [[241, 242, -222, -132, -167, 243, 244]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71956\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Daneți\"\n        }\n      }, {\n        \"arcs\": [[245, -223, -243, 246]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74883\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Dobrotești\"\n        }\n      }, {\n        \"arcs\": [[247, -231, -198, -221, 248, 249]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128560\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Rotunda\"\n        }\n      }, {\n        \"arcs\": [[250, 251, -201, 252, 253]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70940\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bîrca\"\n        }\n      }, {\n        \"arcs\": [[254, 255, 256, -154, -218, 257, 258]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73736\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Poiana Mare\"\n        }\n      }, {\n        \"arcs\": [[259, -194, -233, 260, 261, 262, 263]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128613\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Scărișoara\"\n        }\n      }, {\n        \"arcs\": [[264, -249, -224, -246, 265]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70673\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Amărăștii de Sus\"\n        }\n      }, {\n        \"arcs\": [[266, 267, 268, 269, 270]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151816\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Nanov\"\n        }\n      }, {\n        \"arcs\": [[271, 272, 273, 274]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153909\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Răsmirești\"\n        }\n      }, {\n        \"arcs\": [[275, -244, -166, 276, 277, 278]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72098\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Dobrești\"\n        }\n      }, {\n        \"arcs\": [[279, -234, -232, -248, 280, 281]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130026\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vlădila\"\n        }\n      }, {\n        \"arcs\": [[282, -270, 283, 284, 285, 286]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152332\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Buzescu\"\n        }\n      }, {\n        \"arcs\": [[287, -277, -170, -173, 288, -251, 289, 290]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74581\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Valea Stanciului\"\n        }\n      }, {\n        \"arcs\": [[291, -261, -235, -280, 292, 293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129567\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Traian\"\n        }\n      }, {\n        \"arcs\": [[294, 295, -236, 296]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103354\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Gostinu\"\n        }\n      }, {\n        \"arcs\": [[297, 298, 299, 300, 301, 302, -267, 303, 304]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151790\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Alexandria\"\n        }\n      }, {\n        \"arcs\": [[305, -262, -292, 306]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125659\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Băbiciu\"\n        }\n      }, {\n        \"arcs\": [[-274, 307, -299, 308, 309]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153776\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Vitănești\"\n        }\n      }, {\n        \"arcs\": [[-258, -220, 310, 311]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70352\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Calafat\"\n        }\n      }, {\n        \"arcs\": [[312, -253, -200, -186, 313, 314]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74554\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Urzicuța\"\n        }\n      }, {\n        \"arcs\": [[315, -314, -185, -204, 316, 317]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70520\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Afumați\"\n        }\n      }, {\n        \"arcs\": [[318, -287, 319, 320, 321]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154996\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Nenciulești\"\n        }\n      }, {\n        \"arcs\": [[322, 323, -240, 324, 325]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102446\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Daia\"\n        }\n      }, {\n        \"arcs\": [[326, 327, 328, -290, -254, -313, 329, 330]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72533\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Giurgița\"\n        }\n      }, {\n        \"arcs\": [[331, -330, -315, -316, 332]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74224\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Siliștea Crucii\"\n        }\n      }, {\n        \"arcs\": [[333, -317, -203, -190, 334, -225, 335, 336]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70316\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Băilești\"\n        }\n      }, {\n        \"arcs\": [[337, 338, -293, -282, 339, 340]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126647\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Deveselu\"\n        }\n      }, {\n        \"arcs\": [[341, 342, -263, -306, 343, 344, 345]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129040\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Sprîncenata\"\n        }\n      }, {\n        \"arcs\": [[-304, -271, -283, -319, 346, 347]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153204\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Mavrodin\"\n        }\n      }, {\n        \"arcs\": [[-344, -307, -294, -339, 348, 349]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127144\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Gostavățu\"\n        }\n      }, {\n        \"arcs\": [[350, -340, -281, -250, -265, 351, 352, 353]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128524\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Redea\"\n        }\n      }, {\n        \"arcs\": [[354, -259, -312, 355, 356]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73031\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Maglavit\"\n        }\n      }, {\n        \"arcs\": [[357, 358, -297, -241, -324, 359, 360]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101001\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Băneasa\"\n        }\n      }, {\n        \"arcs\": [[361, -328, 362]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71698\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Cerăt\"\n        }\n      }, {\n        \"arcs\": [[-352, -266, -247, -242, 363, 364, 365]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71634\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Celaru\"\n        }\n      }, {\n        \"arcs\": [[366, -333, -318, -334, 367, 368, 369, 370]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71812\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Cioroiași\"\n        }\n      }, {\n        \"arcs\": [[371, 372, -217, 373, 374, 375, 376]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103899\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Izvoarele\"\n        }\n      }, {\n        \"arcs\": [[-369, 377, 378]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74891\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Galiciuica\"\n        }\n      }, {\n        \"arcs\": [[379, 380, 381, -278, -288, 382, 383, 384, 385]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72221\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Drănic\"\n        }\n      }, {\n        \"arcs\": [[386, -349, -338, 387, 388, 389]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129095\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Stoenești\"\n        }\n      }, {\n        \"arcs\": [[390, -365, 391, 392, 393, 394]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70726\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Apele Vii\"\n        }\n      }, {\n        \"arcs\": [[-378, -368, -337, 395, 396, 397]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72383\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Galicea Mare\"\n        }\n      }, {\n        \"arcs\": [[398, 399, -396, -336, -229, 400, -255, -355, 401, 402]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73335\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Moțăței\"\n        }\n      }, {\n        \"arcs\": [[403, 404, 405, 406, 407]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127536\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Mihăești\"\n        }\n      }, {\n        \"arcs\": [[408, 409, 410, 411, 412]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103470\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Greaca\"\n        }\n      }, {\n        \"arcs\": [[413, 414, -388, -341, -351, 415, 416]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125472\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Caracal\"\n        }\n      }, {\n        \"arcs\": [[-383, -291, -329, -362, 417, 418]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70502\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Segarcea\"\n        }\n      }, {\n        \"arcs\": [[419, -345, -350, -387, 420, 421]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126585\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Dăneasa\"\n        }\n      }, {\n        \"arcs\": [[422, 423, 424, 425]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101724\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Căscioarele\"\n        }\n      }, {\n        \"arcs\": [[-416, -354, 426, 427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125490\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Drăghiceni\"\n        }\n      }, {\n        \"arcs\": [[-406, 428, 429, -346, -420, 430, 431]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128472\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Radomirești\"\n        }\n      }, {\n        \"arcs\": [[432, -361, 433]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104118\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Mihai Bravu\"\n        }\n      }, {\n        \"arcs\": [[434, 435, 436, 437, 438]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152038\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Băbăița\"\n        }\n      }, {\n        \"arcs\": [[439, 440, 441, -409, 442, -424, 443, 444]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101804\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Chirnogi\"\n        }\n      }, {\n        \"arcs\": [[445, 446, -402, -357, 447, 448, 449]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71787\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Cetate\"\n        }\n      }, {\n        \"arcs\": [[450, -427, -353, -366, -391, 451, 452]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72052\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Dioști\"\n        }\n      }, {\n        \"arcs\": [[453, 454, 455, 456, 457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153865\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Rădoiești\"\n        }\n      }, {\n        \"arcs\": [[458, 459, -440, 460, 461]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100610\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Oltenița\"\n        }\n      }, {\n        \"arcs\": [[-438, 462, -305, -348, 463, 464, 465, 466]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153507\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Orbeasca\"\n        }\n      }, {\n        \"arcs\": [[467, -326, 468, 469, 470]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105348\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Stoenești\"\n        }\n      }, {\n        \"arcs\": [[471, -407, -432, 472, 473]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128864\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Seaca\"\n        }\n      }, {\n        \"arcs\": [[474, 475, -449, 476, 477]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113493\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Salcia\"\n        }\n      }, {\n        \"arcs\": [[478, -412, 479, 480]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179766\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Isvoarele\"\n        }\n      }, {\n        \"arcs\": [[-425, -443, -413, -479, 481, 482]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103639\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Hotarele\"\n        }\n      }, {\n        \"arcs\": [[485, 486, 487, -435, 488, 489, 490]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152172\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Botoroaga\"\n        }\n      }, {\n        \"arcs\": [[491, -397, -400, 492, 493]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72882\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Izvoare\"\n        }\n      }, {\n        \"arcs\": [[494, -414, 495, 496]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126718\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Dobrosloveni\"\n        }\n      }, {\n        \"arcs\": [[497, 498, -470, -377, 499]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104975\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Schitu\"\n        }\n      }, {\n        \"arcs\": [[500, 501, -408, -472, 502, 503]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154415\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Stejaru\"\n        }\n      }, {\n        \"arcs\": [[504, -370, -379, -398, -492, 505, 506]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72506\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Giubega\"\n        }\n      }, {\n        \"arcs\": [[507, -480, -411, 508, 509, 510, 511]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103372\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Gostinari\"\n        }\n      }, {\n        \"arcs\": [[512, 513, 514, -371, -505, 515]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73594\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Perișor\"\n        }\n      }, {\n        \"arcs\": [[516, 517, -384, -419, 518, 519, 520]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71457\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Calopăr\"\n        }\n      }, {\n        \"arcs\": [[521, -457, 522, 523, 524, 525]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154166\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Sfințești\"\n        }\n      }, {\n        \"arcs\": [[526, -385, -518, 527, 528]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74322\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Teasc\"\n        }\n      }, {\n        \"arcs\": [[529, -496, -417, -428, -451, 530, 531]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126102\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Cezieni\"\n        }\n      }, {\n        \"arcs\": [[532, -450, -476, 533]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112744\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Obîrșia de Cîmp\"\n        }\n      }, {\n        \"arcs\": [[534, -493, -399, 535, 536, 537]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71518\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Caraula\"\n        }\n      }, {\n        \"arcs\": [[-421, -390, 538, 539, 540]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125622\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Drăgănești-Olt\"\n        }\n      }, {\n        \"arcs\": [[541, -466, 542, 543, 544]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153473\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Olteni\"\n        }\n      }, {\n        \"arcs\": [[545, -434, -360, -323, -468, 546, 547]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101662\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Călugăreni\"\n        }\n      }, {\n        \"arcs\": [[548, -459, 549, 550]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105259\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Spanțov\"\n        }\n      }, {\n        \"arcs\": [[551, 552, -529, 553, 554, 555]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74915\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Ghindeni\"\n        }\n      }, {\n        \"arcs\": [[-426, -483, 556, 557, 558, 559]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180055\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Crivăț\"\n        }\n      }, {\n        \"arcs\": [[560, 561, 562, 563, 564, 565]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62486\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Oltina\"\n        }\n      }, {\n        \"arcs\": [[566, 567, -444, -423, -560, 568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104751\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Radovanu\"\n        }\n      }, {\n        \"arcs\": [[-543, -465, 569, -458, -522, 570, 571]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154932\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Vîrtoape\"\n        }\n      }, {\n        \"arcs\": [[-554, -528, -517, 572, 573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74509\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Țuglui\"\n        }\n      }, {\n        \"arcs\": [[574, 575, 576, -504, 577, 578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152724\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Didești\"\n        }\n      }, {\n        \"arcs\": [[-550, -462, 579, 580]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105605\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Ulmeni\"\n        }\n      }, {\n        \"arcs\": [[581, -534, -475, 582, 583, 584]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111444\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Cujmir\"\n        }\n      }, {\n        \"arcs\": [[585, -531, -453, 586, 587, 588]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74411\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Teslui\"\n        }\n      }, {\n        \"arcs\": [[[589, -567, 590, 591]], [[592, 593, 594, 595, 596, 597, 598, 599]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"102419\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Curcani\"\n        }\n      }, {\n        \"arcs\": [[600, -506, -494, -535, 601, 602]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74732\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Vîrtop\"\n        }\n      }, {\n        \"arcs\": [[603, -580, -461, -445, -568, -590, -600]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100638\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Mitreni\"\n        }\n      }, {\n        \"arcs\": [[604, -532, -586, 605, 606]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130357\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Osica de Jos\"\n        }\n      }, {\n        \"arcs\": [[607, -497, -530, -605, 608, 609, 610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126978\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Fălcoiu\"\n        }\n      }, {\n        \"arcs\": [[-481, -508, 611, 612]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105776\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Valea Dragului\"\n        }\n      }, {\n        \"arcs\": [[-583, -478, 613, 614, 615]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114079\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Vrata\"\n        }\n      }, {\n        \"arcs\": [[616, -587, -452, -395, 617, 618, -552, 619, 620]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72926\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Leu\"\n        }\n      }, {\n        \"arcs\": [[621, 622, -446, -533, -582, 623, 624]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111550\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Dîrvari\"\n        }\n      }, {\n        \"arcs\": [[-578, -503, -474, 625, 626, 627, 628]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129763\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Văleni\"\n        }\n      }, {\n        \"arcs\": [[629, 630, 631]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127386\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Izvoarele\"\n        }\n      }, {\n        \"arcs\": [[632, 633, -547, -471, -499, 634, 635]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105106\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Singureni\"\n        }\n      }, {\n        \"arcs\": [[636, 637, -591, -569, -559, 638]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105384\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Șoldanu\"\n        }\n      }, {\n        \"arcs\": [[639, 640, -575, 641, 642]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155092\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Beuca\"\n        }\n      }, {\n        \"arcs\": [[643, -624, -585, 644, 645]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114060\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Braniștea\"\n        }\n      }, {\n        \"arcs\": [[646, -630, 647, -540, 648, -611, 649]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127493\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Mărunței\"\n        }\n      }, {\n        \"arcs\": [[650, 651, -626, -473, -431, -422, -541, -648, -632, 652, 653]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129111\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Stoicănești\"\n        }\n      }, {\n        \"arcs\": [[-627, -652, 654, 655]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127714\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Nicolae Titulescu\"\n        }\n      }, {\n        \"arcs\": [[656, -520, 657, -513, 658, 659, 660]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74750\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Vîrvoru de Jos\"\n        }\n      }, {\n        \"arcs\": [[-620, -556, 661, 662, 663]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71885\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Coșoveni\"\n        }\n      }, {\n        \"arcs\": [[664, 665, 666]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179588\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Copăceni\"\n        }\n      }, {\n        \"arcs\": [[667, 668, -615, 669, 670, 671]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111783\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Gârla Mare\"\n        }\n      }, {\n        \"arcs\": [[-571, -526, 672, 673, 674]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153437\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Necșești\"\n        }\n      }, {\n        \"arcs\": [[675, -662, -555, -574, 676, 677]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73068\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Malu Mare\"\n        }\n      }, {\n        \"arcs\": [[-659, -516, -507, -601, 678, 679]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74028\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Sălcuța\"\n        }\n      }, {\n        \"arcs\": [[680, 681, -609, -607, 682, 683, 684]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127983\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Osica de Sus\"\n        }\n      }, {\n        \"arcs\": [[685, -665, 686, 687, -548, -634, 688]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100781\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Adunații-Copăceni\"\n        }\n      }, {\n        \"arcs\": [[-645, -584, -616, -669, 689, 690, 691]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113849\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Vânători\"\n        }\n      }, {\n        \"arcs\": [[-593, -592, -638, 692]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104083\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Luica\"\n        }\n      }, {\n        \"arcs\": [[693, -588, -617, 694, 695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72150\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Drăgotești\"\n        }\n      }, {\n        \"arcs\": [[696, 697, -663, -676, 698]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74859\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Cârcea\"\n        }\n      }, {\n        \"arcs\": [[[699, 700, 701]], [[702, 703, 704, 705, 706, 707, 708]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"151905\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Videle\"\n        }\n      }, {\n        \"arcs\": [[709, -628, -656, 710, 711, 712]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130311\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Ghimpețeni\"\n        }\n      }, {\n        \"arcs\": [[713, 714, -544, -572, -675, 715, 716, 717]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154754\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Trivalea-Moșteni\"\n        }\n      }, {\n        \"arcs\": [[-684, 718, 719, 720]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130384\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Șopârlița\"\n        }\n      }, {\n        \"arcs\": [[721, 722, 723, 724, 725, 726]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105829\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Vasilați\"\n        }\n      }, {\n        \"arcs\": [[-711, -655, -651, 727, 728]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126406\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Crîmpoia\"\n        }\n      }, {\n        \"arcs\": [[729, -650, -610, -682, 730, 731]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126380\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Coteana\"\n        }\n      }, {\n        \"arcs\": [[732, -602, -538, 733, 734, 735]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73503\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Orodel\"\n        }\n      }, {\n        \"arcs\": [[736, -643, 737, 738, 739]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154978\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Zîmbreasca\"\n        }\n      }, {\n        \"arcs\": [[740, 741, 742, -660, -680, 743, 744]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74359\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Terpezița\"\n        }\n      }, {\n        \"arcs\": [[745, 746, 747, -687, -667, 748, 749, 750, 751]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105936\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Vidra\"\n        }\n      }, {\n        \"arcs\": [[-735, 752, 753, 754, 755]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74705\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Verbița\"\n        }\n      }, {\n        \"arcs\": [[756, -653, -631, -647, -730, 757, 758, 759]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129987\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vîlcele\"\n        }\n      }, {\n        \"arcs\": [[760, 761, 762, 763]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92569\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Călărași\"\n        }\n      }, {\n        \"arcs\": [[764, -744, -679, -603, -733, 765]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74616\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Vela\"\n        }\n      }, {\n        \"arcs\": [[766, 767, 768, 769]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93325\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Dichiseni\"\n        }\n      }, {\n        \"arcs\": [[770, 771, 772, 773, 774]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93441\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Dorobanțu\"\n        }\n      }, {\n        \"arcs\": [[775, -720, 776, 777, 778, 779]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128178\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Pârșcoveni\"\n        }\n      }, {\n        \"arcs\": [[780, -769, 781, 782, 783, 784]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94312\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Roseți\"\n        }\n      }, {\n        \"arcs\": [[785, 786, -695, -621, -664, -698, 787]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73923\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Robănești\"\n        }\n      }, {\n        \"arcs\": [[788, -685, -721, -776, 789, 790]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126022\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Brîncoveni\"\n        }\n      }, {\n        \"arcs\": [[791, 792, 793, -703, 794, 795]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101984\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Clejani\"\n        }\n      }, {\n        \"arcs\": [[796, -754, 797, -625, -644, 798, 799]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112771\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Oprișor\"\n        }\n      }, {\n        \"arcs\": [[800, -731, -681, -789, 801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130348\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Ipotesti\"\n        }\n      }, {\n        \"arcs\": [[802, 803, -771, 804, 805, 806]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93085\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Ciocănești\"\n        }\n      }, {\n        \"arcs\": [[-784, 807, -761, 808]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92587\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Modelu\"\n        }\n      }, {\n        \"arcs\": [[809, -779, 810, 811, 812]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125846\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Bîrza\"\n        }\n      }, {\n        \"arcs\": [[813, -594, -693, -637, 814, -722, 815]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104323\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Nana\"\n        }\n      }, {\n        \"arcs\": [[-726, 816, 817]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179962\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Gălbinași\"\n        }\n      }, {\n        \"arcs\": [[[-690, -668, 818]], [[819, 820, 821, 822, 823]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"112030\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Gruia\"\n        }\n      }, {\n        \"arcs\": [[824, -799, -646, -692, 825, 826]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113395\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Punghina\"\n        }\n      }, {\n        \"arcs\": [[827, -728, -654, -757, 828, 829]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129246\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Șerbănești\"\n        }\n      }, {\n        \"arcs\": [[-774, 830, 831, 832]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94606\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Ulmu\"\n        }\n      }, {\n        \"arcs\": [[833, 834, -713, 835, 836]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151996\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Balaci\"\n        }\n      }, {\n        \"arcs\": [[837, -741, 838, 839]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74931\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Pleșoi\"\n        }\n      }, {\n        \"arcs\": [[840, 841, 842, -699, -678, 843, 844, 845, 846]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69900\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Craiova\"\n        }\n      }, {\n        \"arcs\": [[847, -846, 848, 849, 850]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71260\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Breasta\"\n        }\n      }, {\n        \"arcs\": [[851, -766, -736, -756, 852, 853]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71536\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Carpen\"\n        }\n      }, {\n        \"arcs\": [[854, -788, -697, -843, 855, 856, 857]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73629\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Pielești\"\n        }\n      }, {\n        \"arcs\": [[858, 859, -803, 860, 861]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93664\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Grădiștea\"\n        }\n      }, {\n        \"arcs\": [[862, -861, -807, 863, 864]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94125\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Alexandru Odobescu\"\n        }\n      }, {\n        \"arcs\": [[-563, -767, 865, 866]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94651\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Unirea\"\n        }\n      }, {\n        \"arcs\": [[-832, 867, -597, 868, 869]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102838\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Frăsinet\"\n        }\n      }, {\n        \"arcs\": [[870, -836, -712, -729, -828, 871, 872]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129585\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Tufeni\"\n        }\n      }, {\n        \"arcs\": [[873, 874, -826, -691, -819, -672, 875, -821, 876]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112879\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Pătulele\"\n        }\n      }, {\n        \"arcs\": [[877, -785, -809, -764, 878, 879]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94580\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Ștefan Vodă\"\n        }\n      }, {\n        \"arcs\": [[880, -802, -791, 881, 882, 883]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127563\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Milcov\"\n        }\n      }, {\n        \"arcs\": [[884, 885, 886, 887, 888, 889]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154228\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Siliștea\"\n        }\n      }, {\n        \"arcs\": [[890, 891, -739, 892, -834, 893, 894]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154282\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Siliștea-Gumești\"\n        }\n      }, {\n        \"arcs\": [[895, 896, -854, 897, 898]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74135\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Seaca de Pădure\"\n        }\n      }, {\n        \"arcs\": [[-839, -745, -765, -852, -897, 899, 900]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70986\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Brabova\"\n        }\n      }, {\n        \"arcs\": [[901, 902, 903, -795, -709, 904, 905]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101378\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Bucșani\"\n        }\n      }, {\n        \"arcs\": [[906, -888, 907, 908, -718, 909, 910]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154068\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Scurtu Mare\"\n        }\n      }, {\n        \"arcs\": [[911, -882, -790, -780, -810, 912, 913]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128105\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Piatra-Olt\"\n        }\n      }, {\n        \"arcs\": [[-905, -708, 914, 915, 916]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104225\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Mîrșa\"\n        }\n      }, {\n        \"arcs\": [[917, -862, -863, 918]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93771\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Independența\"\n        }\n      }, {\n        \"arcs\": [[-564, -867, 919, 920]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93815\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Jegălia\"\n        }\n      }, {\n        \"arcs\": [[921, 922, 923, -816, -727, -818, 924]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105222\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Sohatu\"\n        }\n      }, {\n        \"arcs\": [[925, -858, 926, 927]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125677\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Baldovinești\"\n        }\n      }, {\n        \"arcs\": [[928, -800, -825, 929, 930]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113929\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Vlădaia\"\n        }\n      }, {\n        \"arcs\": [[931, -856, -842, 932, 933, 934]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72409\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Ghercești\"\n        }\n      }, {\n        \"arcs\": [[935, -869, -596, 936, 937, 938]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105712\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Valea Argovei\"\n        }\n      }, {\n        \"arcs\": [[-925, -817, -725, 939, 940, 941]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104635\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Plătărești\"\n        }\n      }, {\n        \"arcs\": [[942, -829, -760, 943, 944, 945]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127689\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Movileni\"\n        }\n      }, {\n        \"arcs\": [[946, -847, -848, 947, 948]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70094\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Ișalnița\"\n        }\n      }, {\n        \"arcs\": [[-894, -837, -871, 949, 950, 951]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17398\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Miroși\"\n        }\n      }, {\n        \"arcs\": [[952, -913, -813, 953, 954, 955]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125873\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Bobicești\"\n        }\n      }, {\n        \"arcs\": [[956, 957, -902, 958, 959]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104485\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Ogrezeni\"\n        }\n      }, {\n        \"arcs\": [[960, -850, 961, -742, -838, 962, 963]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73772\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Predești\"\n        }\n      }, {\n        \"arcs\": [[964, -903, -958, 965, 966]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103407\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Grădinari\"\n        }\n      }, {\n        \"arcs\": [[-883, -912, 967, 968]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125374\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Slătioara\"\n        }\n      }, {\n        \"arcs\": [[969, -879, -763, 970, 971, -859, -918, 972, 973]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93281\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Cuza Voda\"\n        }\n      }, {\n        \"arcs\": [[-930, -827, -875, 974, 975]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111417\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Corlățel\"\n        }\n      }, {\n        \"arcs\": [[-963, -840, -901, 976, 977]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74242\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Sopot\"\n        }\n      }, {\n        \"arcs\": [[978, -891, 979, 980, 981]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154665\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Tătărăștii de Sus\"\n        }\n      }, {\n        \"arcs\": [[982, -955, 983, -928, 984, 985]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127812\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Oboga\"\n        }\n      }, {\n        \"arcs\": [[986, 987, -899, 988, 989]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70968\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Botoșești-Paia\"\n        }\n      }, {\n        \"arcs\": [[-977, -900, -896, -988, 990, 991]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72604\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Gogoșu\"\n        }\n      }, {\n        \"arcs\": [[992, -805, -775, -833, -870, -936, 993, 994]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93931\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Lupșanu\"\n        }\n      }, {\n        \"arcs\": [[-973, -919, -865, 995, 996]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94731\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Vîlcelele\"\n        }\n      }, {\n        \"arcs\": [[997, -996, -864, -806, -993, 998]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94768\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Vlad Țepeș\"\n        }\n      }, {\n        \"arcs\": [[-989, -898, -853, -755, -797, -929, 999, 1000]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110535\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Bălăcița\"\n        }\n      }, {\n        \"arcs\": [[-985, -927, -857, -932, 1001, 1002]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130302\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Găvănești\"\n        }\n      }, {\n        \"arcs\": [[-945, 1003, 1004, 1005, 1006]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128052\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Perieți\"\n        }\n      }, {\n        \"arcs\": [[1007, 1008, -824, 1009, 1010]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111863\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Gogoșu\"\n        }\n      }, {\n        \"arcs\": [[1011, 1012, -968, -914, -953, 1013, 1014]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127064\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Găneasa\"\n        }\n      }, {\n        \"arcs\": [[1015, -872, -830, -943, 1016, 1017]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127322\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Icoana\"\n        }\n      }, {\n        \"arcs\": [[1018, 1019, -877, -820, -1009, 1020]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112548\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Jiana\"\n        }\n      }, {\n        \"arcs\": [[1021, -980, -895, -952, 1022, 1023]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20048\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Râca\"\n        }\n      }, {\n        \"arcs\": [[1024, -890, 1025, 1026, 1027]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153062\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Gratia\"\n        }\n      }, {\n        \"arcs\": [[1028, 1029, -948, -851, -961, 1030, 1031, 1032]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71910\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Coțofenii din Dos\"\n        }\n      }, {\n        \"arcs\": [[1033, -933, -841, -947, 1034, 1035]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70174\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Șimnicu de Sus\"\n        }\n      }, {\n        \"arcs\": [[1036, 1037, -916, 1038, 1039, -885, -1025, 1040]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104831\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Roata de Jos\"\n        }\n      }, {\n        \"arcs\": [[1041, -959, -906, -917, -1038, 1042, 1043]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102348\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Crevedia Mare\"\n        }\n      }, {\n        \"arcs\": [[1044, 1045, -960, -1042, 1046, 1047]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101190\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Bolintin-Vale\"\n        }\n      }, {\n        \"arcs\": [[1048, -1023, -951, 1049, 1050]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15064\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Căldăraru\"\n        }\n      }, {\n        \"arcs\": [[-986, -1003, 1051, 1052, 1053, 1054]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130295\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Călui\"\n        }\n      }, {\n        \"arcs\": [[1055, -966, -957, -1046, 1056, 1057]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101163\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Bolintin-Deal\"\n        }\n      }, {\n        \"arcs\": [[-1026, -889, -907, 1058, 1059]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153696\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Poeni\"\n        }\n      }, {\n        \"arcs\": [[1060, -1031, -964, -978, -992, 1061, 1062]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71723\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Cernătești\"\n        }\n      }, {\n        \"arcs\": [[1063, 1064, -981, -1022, 1065]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18162\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Popești\"\n        }\n      }, {\n        \"arcs\": [[-1029, 1066, 1067]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74875\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Coțofenii din Față\"\n        }\n      }, {\n        \"arcs\": [[1068, 1069, -938, 1070, 1071, 1072]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104341\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Nicolae Bălcescu\"\n        }\n      }, {\n        \"arcs\": [[-1035, -949, -1030, -1068, 1073, 1074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70566\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Almăj\"\n        }\n      }, {\n        \"arcs\": [[1075, -1062, -991, -987, 1076, 1077]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72819\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Grecești\"\n        }\n      }, {\n        \"arcs\": [[1078, -1006, 1079, 1080, 1081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130286\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Bălteni\"\n        }\n      }, {\n        \"arcs\": [[1082, -1050, -950, -873, -1016, 1083, 1084]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14450\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bîrla\"\n        }\n      }, {\n        \"arcs\": [[1085, -1032, -1061, 1086, 1087]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74073\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Scăești\"\n        }\n      }, {\n        \"arcs\": [[1088, 1089, 1090, 1091, 1092]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94492\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Stelnica\"\n        }\n      }, {\n        \"arcs\": [[1093, -975, -874, -1020, 1094, 1095, 1096]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110232\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Vînju Mare\"\n        }\n      }, {\n        \"arcs\": [[1097, -1000, -931, -976, -1094, 1098]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112806\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Pădina\"\n        }\n      }, {\n        \"arcs\": [[1099, -1092, 1100, 1101]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92701\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Fetești\"\n        }\n      }, {\n        \"arcs\": [[-1017, -946, -1007, -1079, 1102, 1103]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128374\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Potcoava\"\n        }\n      }, {\n        \"arcs\": [[1104, 1105, 1106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19114\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Ștefan cel Mare\"\n        }\n      }, {\n        \"arcs\": [[1107, -1015, 1108, 1109, 1110]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128221\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Pleșoiu\"\n        }\n      }, {\n        \"arcs\": [[-1078, 1111, 1112, 1113]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74171\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Secu\"\n        }\n      }, {\n        \"arcs\": [[1114, -1027, -1060, 1115, 1116]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154308\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Sîrbeni\"\n        }\n      }, {\n        \"arcs\": [[1117, -1084, -1018, -1104, 1118, 1119]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126326\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Corbu\"\n        }\n      }, {\n        \"arcs\": [[1120, 1121, -1058, 1122, 1123, 1124]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103997\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Joița\"\n        }\n      }, {\n        \"arcs\": [[1125, 1126, -1012, -1108, 1127, 1128, 1129]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126433\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Curtișoara\"\n        }\n      }, {\n        \"arcs\": [[1130, -1109, -1014, -956, -983, -1055, 1131, 1132]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127625\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Morunglav\"\n        }\n      }, {\n        \"arcs\": [[1133, -974, -997, -998, 1134, 1135, 1136, 1137]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93539\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Dragoș Vodă\"\n        }\n      }, {\n        \"arcs\": [[1138, 1139, 1140, 1141]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105455\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Tămădău Mare\"\n        }\n      }, {\n        \"arcs\": [[-1116, -1059, -911, 1142, -1105, 1143, 1144]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68887\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Șelaru\"\n        }\n      }, {\n        \"arcs\": [[-1036, -1075, 1145, 1146, 1147]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72677\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Goiești\"\n        }\n      }, {\n        \"arcs\": [[1148, -1141, 1149, -922, -942, 1150, 1151]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103032\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Fundulea\"\n        }\n      }, {\n        \"arcs\": [[1152, 1153, -1043, -1037, 1154]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105972\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Vînătorii Mici\"\n        }\n      }, {\n        \"arcs\": [[1155, -1069, 1156, 1157, 1158]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93851\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Lehliu\"\n        }\n      }, {\n        \"arcs\": [[1159, 1160, -1125, 1161, 1162]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179775\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Săbăreni\"\n        }\n      }, {\n        \"arcs\": [[1163, -1066, -1024, -1049, 1164, 1165, 1166, 1167]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16739\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Izvoru\"\n        }\n      }, {\n        \"arcs\": [[1168, 1169, -1099, -1097, 1170, 1171]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113153\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Poroina Mare\"\n        }\n      }, {\n        \"arcs\": [[1172, -1048, 1173, 1174, 1175]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102794\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Florești-Stoenești\"\n        }\n      }, {\n        \"arcs\": [[1176, -1123, -1057, -1045, -1173, 1177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105623\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Ulmi\"\n        }\n      }, {\n        \"arcs\": [[1178, 1179, -1085, -1118, 1180, 1181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16613\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Hârsești\"\n        }\n      }, {\n        \"arcs\": [[-1174, -1047, -1044, -1154, 1182, 1183]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103087\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Găiseni\"\n        }\n      }, {\n        \"arcs\": [[1184, -1087, -1063, -1076, -1114, 1185, 1186, 1187]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70744\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Argetoaia\"\n        }\n      }, {\n        \"arcs\": [[1188, 1189, -1128, -1111, 1190, 1191]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129139\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Strejești\"\n        }\n      }, {\n        \"arcs\": [[-1191, -1110, -1131, 1192, 1193, 1194]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126166\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Cîrlogani\"\n        }\n      }, {\n        \"arcs\": [[1195, 1196, 1197, -1021, -1008, 1198, 1199]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111480\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Devesel\"\n        }\n      }, {\n        \"arcs\": [[1200, -1165, -1051, -1083, -1180, 1201]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19560\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Ungheni\"\n        }\n      }, {\n        \"arcs\": [[1202, -1146, -1074, -1067, -1033, -1086, 1203, 1204]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71055\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Brădești\"\n        }\n      }, {\n        \"arcs\": [[1205, -1144, -1107, 1206, -1064, -1164, 1207, 1208]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18741\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Slobozia\"\n        }\n      }, {\n        \"arcs\": [[-1193, -1133, 1209, 1210, 1211, 1212]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170612\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Laloșu\"\n        }\n      }, {\n        \"arcs\": [[1213, 1214, 1215, -1093, -1100, 1216, 1217]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92989\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Bordușani\"\n        }\n      }, {\n        \"arcs\": [[-1199, -1011, 1218]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110946\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Burila Mare\"\n        }\n      }, {\n        \"arcs\": [[1219, 1220, -1137, 1221, 1222]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179793\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Buești\"\n        }\n      }, {\n        \"arcs\": [[-1181, -1120, 1223, 1224, 1225, 1226]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130366\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Sârbii - Măgura\"\n        }\n      }, {\n        \"arcs\": [[-1152, 1227, 1228, 1229, 1230, 1231]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101083\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Belciugatele\"\n        }\n      }, {\n        \"arcs\": [[1232, 1233, 1234, -920, -866, -770, -781, -878, 1235, 1236]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94223\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Perișoru\"\n        }\n      }, {\n        \"arcs\": [[-1222, -1136, 1237, 1238, 1239]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92783\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Albești\"\n        }\n      }, {\n        \"arcs\": [[1240, 1241, -1175, -1184, 1242, 1243]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68431\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Poiana\"\n        }\n      }, {\n        \"arcs\": [[-1129, -1190, 1244, 1245, 1246, 1247]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129380\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Teslui\"\n        }\n      }, {\n        \"arcs\": [[1248, -1208, -1168, 1249]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17575\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mozăceni\"\n        }\n      }, {\n        \"arcs\": [[1250, -1245, -1189, 1251, 1252]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127171\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Grădinari\"\n        }\n      }, {\n        \"arcs\": [[1253, -1157, -1073, 1254, -1139, 1255, 1256]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103764\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Ileana\"\n        }\n      }, {\n        \"arcs\": [[1257, 1258, -1147, -1203, 1259, 1260]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73102\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Melinești\"\n        }\n      }, {\n        \"arcs\": [[-1212, 1261, 1262, 1263]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169583\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Făurești\"\n        }\n      }, {\n        \"arcs\": [[1264, 1265, 1266, 1267, 1268]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111916\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Greci\"\n        }\n      }, {\n        \"arcs\": [[-1225, 1269, 1270, 1271]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127901\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Optași-Măgura\"\n        }\n      }, {\n        \"arcs\": [[1272, 1273, -1155, -1041, -1028, -1115, 1274, 1275]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66857\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Corbii Mari\"\n        }\n      }, {\n        \"arcs\": [[1276, -1256, -1142, -1149, -1232, 1277, 1278, 1279]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102641\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Drăgoești\"\n        }\n      }, {\n        \"arcs\": [[1280, -1172, 1281, 1282, 1283]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112600\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Livezile\"\n        }\n      }, {\n        \"arcs\": [[1284, 1285, 1286, -1160, 1287, 1288, 1289]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100576\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Buftea\"\n        }\n      }, {\n        \"arcs\": [[1290, -1241, 1291, 1292, 1293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105142\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Slobozia Moară\"\n        }\n      }, {\n        \"arcs\": [[1294, -1243, -1183, -1153, -1274, 1295, 1296]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68468\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Potlogi\"\n        }\n      }, {\n        \"arcs\": [[1297, -1260, -1205, 1298, 1299, 1300]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70414\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Filiași\"\n        }\n      }, {\n        \"arcs\": [[1301, 1302, -1182, -1227, 1303, 1304]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18938\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Stolnici\"\n        }\n      }, {\n        \"arcs\": [[-1283, 1305, -1196, 1306, 1307, 1308]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112076\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Hinova\"\n        }\n      }, {\n        \"arcs\": [[-1246, -1251, 1309, 1310, 1311]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174218\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Voicești\"\n        }\n      }, {\n        \"arcs\": [[1312, -1275, -1117, -1145, -1206, 1313, 1314]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69330\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Vișina\"\n        }\n      }, {\n        \"arcs\": [[1315, 1316, -1130, -1248, 1317, 1318]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127858\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Oporelu\"\n        }\n      }, {\n        \"arcs\": [[-1296, -1273, 1319, 1320, 1321]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68342\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Odobești\"\n        }\n      }, {\n        \"arcs\": [[1322, -1233, 1323, 1324, 1325]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94535\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Sudiți\"\n        }\n      }, {\n        \"arcs\": [[1326, 1327, -1280, 1328, 1329]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179828\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Roșiori\"\n        }\n      }, {\n        \"arcs\": [[1330, 1331, 1332, -1148, -1259, 1333, 1334, 1335]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73371\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Murgași\"\n        }\n      }, {\n        \"arcs\": [[1336, -1263, 1337, 1338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174502\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Diculești\"\n        }\n      }, {\n        \"arcs\": [[1339, -1310, -1253, 1340, 1341]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173748\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Ștefănești\"\n        }\n      }, {\n        \"arcs\": [[1342, 1343, -1223, -1240, 1344, 1345]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92872\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Andrășești\"\n        }\n      }, {\n        \"arcs\": [[1346, 1347, -1336, 1348]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71340\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bulzești\"\n        }\n      }, {\n        \"arcs\": [[1349, -1194, -1213, -1264, -1337, 1350, 1351]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173793\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Șușani\"\n        }\n      }, {\n        \"arcs\": [[1352, -1292, -1244, -1295, 1353, 1354]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67906\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Lungulețu\"\n        }\n      }, {\n        \"arcs\": [[1355, -1341, -1252, -1192, -1195, -1350, 1356, 1357]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170952\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Lungești\"\n        }\n      }, {\n        \"arcs\": [[1358, 1359, 1360, 1361]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101840\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Ciocănești\"\n        }\n      }, {\n        \"arcs\": [[1362, 1363, 1364, -1326, 1365, 1366]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94376\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Săveni\"\n        }\n      }, {\n        \"arcs\": [[1367, 1368, 1369, -1158, -1254, 1370, 1371]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100923\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Axintele\"\n        }\n      }, {\n        \"arcs\": [[1372, 1373, 1374, -1363, 1375]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180000\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Platonești\"\n        }\n      }, {\n        \"arcs\": [[1376, -1321, 1377, 1378, 1379]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67121\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Costeștii din Vale\"\n        }\n      }, {\n        \"arcs\": [[1380, 1381, -1220, -1344, 1382, 1383]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94161\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Perieți\"\n        }\n      }, {\n        \"arcs\": [[-1329, -1279, 1384, 1385, 1386]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104270\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Movilița\"\n        }\n      }, {\n        \"arcs\": [[1387, 1388, 1389, 1390, 1391, 1392]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80560\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Ionești\"\n        }\n      }, {\n        \"arcs\": [[1393, -1304, -1226, -1272, 1394, 1395]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126228\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Colonești\"\n        }\n      }, {\n        \"arcs\": [[1396, 1397, 1398, 1399]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19212\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Teiu\"\n        }\n      }, {\n        \"arcs\": [[1400, -1301, -1389, 1401, 1402, 1403]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82680\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Țînțăreni\"\n        }\n      }, {\n        \"arcs\": [[1404, -1268, 1405, 1406, 1407, 1408]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113974\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Voloiac\"\n        }\n      }, {\n        \"arcs\": [[1409, -1354, -1297, -1322, -1377, 1410, 1411]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66081\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Titu\"\n        }\n      }, {\n        \"arcs\": [[-1395, -1271, 1412, 1413, 1414]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129317\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Tătulești\"\n        }\n      }, {\n        \"arcs\": [[1415, 1416, -1397, 1417, 1418]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68253\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Morteni\"\n        }\n      }, {\n        \"arcs\": [[-1311, -1340, 1419, 1420, 1421]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167981\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Drăgășani\"\n        }\n      }, {\n        \"arcs\": [[1422, 1423, -1371, -1257, -1277, -1328, 1424, 1425]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101056\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Bărcănești\"\n        }\n      }, {\n        \"arcs\": [[1426, -1412, 1427, 1428]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66152\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Braniștea\"\n        }\n      }, {\n        \"arcs\": [[1429, -1318, -1247, -1312, -1422, 1430]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129816\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Verguleasa\"\n        }\n      }, {\n        \"arcs\": [[1431, 1432, 1433, 1434, 1435]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68128\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Mogoșani\"\n        }\n      }, {\n        \"arcs\": [[1436, 1437, 1438]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93628\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Gheorghe Lazăr\"\n        }\n      }, {\n        \"arcs\": [[1439, -1420, -1342, -1356, 1440, 1441]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173597\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Sutești\"\n        }\n      }, {\n        \"arcs\": [[1442, 1443, 1444, -1269, -1405, 1445, 1446, 1447]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110116\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Strehaia\"\n        }\n      }, {\n        \"arcs\": [[1448, -1434, 1449, -1315, 1450, -1419, 1451, 1452]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65752\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Petrești\"\n        }\n      }, {\n        \"arcs\": [[1453, -1338, -1262, -1211, 1454, 1455, -1347, 1456, 1457, 1458, 1459]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168452\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Bălcești\"\n        }\n      }, {\n        \"arcs\": [[1460, -1355, -1410, -1427, 1461, 1462]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66768\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Conțești\"\n        }\n      }, {\n        \"arcs\": [[1463, -1384, 1464, 1465]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92836\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Amara\"\n        }\n      }, {\n        \"arcs\": [[1466, -1357, -1352, 1467, 1468]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171209\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Mădulari\"\n        }\n      }, {\n        \"arcs\": [[1469, -1402, -1388, 1470, 1471]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79237\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Brănești\"\n        }\n      }, {\n        \"arcs\": [[1472, 1473, 1474, -1437, 1475, 1476]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93021\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Bucu\"\n        }\n      }, {\n        \"arcs\": [[1477, 1478, 1479, -1361, 1480, -1293, -1353, -1461, 1481]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68627\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Răcari\"\n        }\n      }, {\n        \"arcs\": [[1482, 1483, -1362, -1480, 1484, 1485, 1486]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101564\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Butimanu\"\n        }\n      }, {\n        \"arcs\": [[1487, 1488, 1489, 1490, 1491]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93067\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Căzănești\"\n        }\n      }, {\n        \"arcs\": [[1492, 1493, -1465, -1383, -1343, 1494]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93600\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Gheorghe Doja\"\n        }\n      }, {\n        \"arcs\": [[1495, -1404, 1496, 1497, 1498]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82314\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Stoina\"\n        }\n      }, {\n        \"arcs\": [[1499, 1500, 1501, 1502, 1503, 1504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102749\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Fierbinți-Târg\"\n        }\n      }, {\n        \"arcs\": [[-1366, -1325, 1505, -1477, 1506, 1507, 1508]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179819\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Ograda\"\n        }\n      }, {\n        \"arcs\": [[1509, 1510, -1374, 1511, 1512]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94795\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Vlădeni\"\n        }\n      }, {\n        \"arcs\": [[-1428, -1411, -1380, 1513, 1514]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68529\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Produlești\"\n        }\n      }, {\n        \"arcs\": [[1515, 1516, 1517, 1518]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112129\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Husnicioara\"\n        }\n      }, {\n        \"arcs\": [[1519, -1372, -1424, 1520, 1521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103862\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Ion Roată\"\n        }\n      }, {\n        \"arcs\": [[1522, -1368, -1520, 1523, 1524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94456\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Sfântu Gheorghe\"\n        }\n      }, {\n        \"arcs\": [[1525, 1526, 1527, 1528]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128301\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Poboru\"\n        }\n      }, {\n        \"arcs\": [[-1446, -1409, 1529, 1530, 1531]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111275\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Corcova\"\n        }\n      }, {\n        \"arcs\": [[1532, -1441, -1358, -1467, 1533, 1534]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169306\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Crețeni\"\n        }\n      }, {\n        \"arcs\": [[-1485, -1479, 1535, 1536]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66697\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Cojasca\"\n        }\n      }, {\n        \"arcs\": [[1537, -1305, -1394, 1538, 1539, 1540]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16944\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Lunca Corbului\"\n        }\n      }, {\n        \"arcs\": [[1541, -1491, 1542, 1543, 1544, 1545]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94107\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Munteni-Buzău\"\n        }\n      }, {\n        \"arcs\": [[1546, -1512, -1373, 1547, 1548]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93995\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Mihail Kogălniceanu\"\n        }\n      }, {\n        \"arcs\": [[1549, 1550, -1435, -1449, 1551, 1552]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65681\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Găești\"\n        }\n      }, {\n        \"arcs\": [[-1458, 1553, 1554, 1555]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174511\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Lăcusteni\"\n        }\n      }, {\n        \"arcs\": [[1556, 1557, 1558, 1559, 1560, 1561]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19007\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Suseni\"\n        }\n      }, {\n        \"arcs\": [[1562, -1539, -1396, -1415, 1563, 1564]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125757\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Bărăști\"\n        }\n      }, {\n        \"arcs\": [[-1554, -1457, -1349, -1335, 1565, 1566, 1567, 1568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170097\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Ghioroiu\"\n        }\n      }, {\n        \"arcs\": [[1569, 1570, 1571]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53489\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Coronini\"\n        }\n      }, {\n        \"arcs\": [[1572, -1514, -1379, 1573, -1432, 1574, 1575]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68048\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Mătăsaru\"\n        }\n      }, {\n        \"arcs\": [[-1528, 1576, -1319, -1430, 1577, 1578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126503\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Cungrea\"\n        }\n      }, {\n        \"arcs\": [[1579, -1448, 1580, 1581, 1582, 1583]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79157\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Borăscu\"\n        }\n      }, {\n        \"arcs\": [[1584, -1452, -1418, -1400, 1585, 1586, 1587]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18331\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Rătești\"\n        }\n      }, {\n        \"arcs\": [[1588, -1497, -1403, -1470, 1589]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82555\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Turburea\"\n        }\n      }, {\n        \"arcs\": [[1590, -1521, -1423, 1591, 1592]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100852\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Alexeni\"\n        }\n      }, {\n        \"arcs\": [[1593, -1561, 1594, -1302, -1538, 1595]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13668\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Costești\"\n        }\n      }, {\n        \"arcs\": [[1596, 1597, -1495, -1346, 1598, -1488, 1599]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94269\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Reviga\"\n        }\n      }, {\n        \"arcs\": [[1600, -1530, -1408, 1601, -1519, 1602, 1603]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111097\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Căzănești\"\n        }\n      }, {\n        \"arcs\": [[1604, -1482, -1463, 1605, 1606, 1607]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66955\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Cornățelu\"\n        }\n      }, {\n        \"arcs\": [[1608, 1609, -1421, -1440, 1610, 1611]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172457\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Prundeni\"\n        }\n      }, {\n        \"arcs\": [[1612, -1536, -1478, -1605, 1613, 1614]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66401\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Bilciurești\"\n        }\n      }, {\n        \"arcs\": [[1615, -1564, -1414, 1616, -1526, 1617, 1618]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128962\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Spineni\"\n        }\n      }, {\n        \"arcs\": [[1619, -1505, 1620, 1621, 1622]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179800\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Maia\"\n        }\n      }, {\n        \"arcs\": [[-1592, -1426, 1623, 1624]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100736\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Manasia\"\n        }\n      }, {\n        \"arcs\": [[1625, -1578, -1431, -1610, 1626]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130231\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vulturești\"\n        }\n      }, {\n        \"arcs\": [[1627, -1534, -1469, 1628, 1629, 1630]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170444\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Gușoeni\"\n        }\n      }, {\n        \"arcs\": [[1631, -1581, -1447, -1532, 1632, 1633, 1634]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82779\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Văgiulești\"\n        }\n      }, {\n        \"arcs\": [[1635, 1636, 1637, 1638]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180064\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Bărbulești\"\n        }\n      }, {\n        \"arcs\": [[1639, 1640, -1576, 1641, 1642, 1643]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67648\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Gura Șuții\"\n        }\n      }, {\n        \"arcs\": [[1644, -1540, -1563, 1645, 1646]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18581\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Săpata\"\n        }\n      }, {\n        \"arcs\": [[-1606, -1462, -1429, -1515, -1573, -1641, 1647, 1648]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68789\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Sălcioara\"\n        }\n      }, {\n        \"arcs\": [[1649, -1392, 1650, -1584, 1651, 1652]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82617\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Turceni\"\n        }\n      }, {\n        \"arcs\": [[-1630, 1653, 1654, 1655, 1656]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171101\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Măciuca\"\n        }\n      }, {\n        \"arcs\": [[-1582, -1632, 1657, 1658, 1659]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79077\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bolboși\"\n        }\n      }, {\n        \"arcs\": [[1660, -1624, 1661, 1662, -1639, 1663, 1664]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100683\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Urziceni\"\n        }\n      }, {\n        \"arcs\": [[1665, -1498, -1589, 1666, 1667, 1668]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79497\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Căpreni\"\n        }\n      }, {\n        \"arcs\": [[-1545, 1669, 1670, -1369, -1523, 1671, 1672]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92907\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Balaciu\"\n        }\n      }, {\n        \"arcs\": [[1673, 1674, -1622, 1675, 1676, 1677]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101243\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Radulești\"\n        }\n      }, {\n        \"arcs\": [[1678, 1679, -1603, -1518, 1680, 1681, 1682]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112664\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Malovăț\"\n        }\n      }, {\n        \"arcs\": [[-1553, 1683, 1684]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65707\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Gura Foii\"\n        }\n      }, {\n        \"arcs\": [[1685, 1686, -1627, -1609, 1687, 1688, 1689]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126772\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Dobroteasa\"\n        }\n      }, {\n        \"arcs\": [[-1557, 1690, 1691]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17824\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Oarja\"\n        }\n      }, {\n        \"arcs\": [[1692, 1693, -1493, -1598, 1694]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94045\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Miloșești\"\n        }\n      }, {\n        \"arcs\": [[1695, 1696, 1697, 1698, 1699]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133508\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Gorgota\"\n        }\n      }, {\n        \"arcs\": [[1700, 1701, 1702, 1703]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110063\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Orșova\"\n        }\n      }, {\n        \"arcs\": [[1704, 1705, 1706, 1707, 1708, 1709, -1696, 1710]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132226\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Balta Doamnei\"\n        }\n      }, {\n        \"arcs\": [[1711, -1633, -1531, -1601, 1712, 1713, 1714]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110875\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Broșteni\"\n        }\n      }, {\n        \"arcs\": [[1715, -1548, -1376, -1367, -1509, 1716, 1717, 1718]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92765\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Țăndărei\"\n        }\n      }, {\n        \"arcs\": [[1719, -1706, 1720]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136250\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Olari\"\n        }\n      }, {\n        \"arcs\": [[1721, 1722, -1570, 1723, 1724, 1725]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53853\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Sichevița\"\n        }\n      }, {\n        \"arcs\": [[-1717, -1508, 1726, 1727]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94688\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Valea Ciorii\"\n        }\n      }, {\n        \"arcs\": [[1728, 1729, -1618, -1529, -1579, -1626, -1687, 1730, 1731]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127411\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Leleasca\"\n        }\n      }, {\n        \"arcs\": [[1732, 1733, 1734, -1623, -1675, 1735, 1736]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100754\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Adâncata\"\n        }\n      }, {\n        \"arcs\": [[-1600, -1492, -1542, 1737, 1738]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93209\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Cocora\"\n        }\n      }, {\n        \"arcs\": [[1739, -1672, -1525, 1740, 1741]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93717\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Grindu\"\n        }\n      }, {\n        \"arcs\": [[-1727, -1507, -1476, -1439, 1742, 1743, 1744, 1745, 1746]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94429\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Scânteia\"\n        }\n      }, {\n        \"arcs\": [[-1741, -1524, -1522, -1591, 1747, 1748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105794\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Valea Măcrișului\"\n        }\n      }, {\n        \"arcs\": [[1749, 1750, 1751, -1587, 1752, -1558, -1692, 1753, 1754]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15233\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Căteasca\"\n        }\n      }, {\n        \"arcs\": [[-1634, -1712, 1755, 1756]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81656\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Samarinești\"\n        }\n      }, {\n        \"arcs\": [[1757, -1644, 1758, 1759]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179935\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Perșinari\"\n        }\n      }, {\n        \"arcs\": [[-1677, 1760, -1707, -1720, 1761, 1762]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133429\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Gherghița\"\n        }\n      }, {\n        \"arcs\": [[1763, -1555, -1569, 1764, 1765]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174290\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Zătreni\"\n        }\n      }, {\n        \"arcs\": [[1766, 1767, 1768]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69170\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Valea Mare\"\n        }\n      }, {\n        \"arcs\": [[1769, -1688, -1612, 1770, 1771, 1772, 1773]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171879\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Orlești\"\n        }\n      }, {\n        \"arcs\": [[-1684, -1552, -1453, -1585, 1774, -1767, 1775, 1776]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67167\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Crîngurile\"\n        }\n      }, {\n        \"arcs\": [[1777, 1778, -1665, 1779, 1780]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100709\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Ciocârlia\"\n        }\n      }, {\n        \"arcs\": [[1781, 1782, -1486, -1537, -1613, 1783, 1784, 1785]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67014\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Cornești\"\n        }\n      }, {\n        \"arcs\": [[-1748, -1593, -1625, -1661, -1779, 1786, 1787]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103283\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Gârbovi\"\n        }\n      }, {\n        \"arcs\": [[1788, -1754, -1691, -1562, -1594, 1789, 1790]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13276\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bradu\"\n        }\n      }, {\n        \"arcs\": [[1791, 1792, 1793, 1794, -1782, 1795, 1796]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135431\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Șirna\"\n        }\n      }, {\n        \"arcs\": [[1797, 1798, -1648, -1640, -1758, 1799, 1800]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68280\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Nucet\"\n        }\n      }, {\n        \"arcs\": [[1801, -1768, -1775, -1588, -1752, 1802, 1803]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16757\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Leordeni\"\n        }\n      }, {\n        \"arcs\": [[1804, -1725, 1805, 1806]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52909\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Gîrnic\"\n        }\n      }, {\n        \"arcs\": [[1807, -1549, -1716, 1808, 1809]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180046\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Gura Ialomiței\"\n        }\n      }, {\n        \"arcs\": [[-1738, -1546, -1673, -1740, 1810, 1811]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179971\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Colelia\"\n        }\n      }, {\n        \"arcs\": [[1812, -1653, 1813, 1814, 1815]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82733\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Urdari\"\n        }\n      }, {\n        \"arcs\": [[-1780, -1664, -1638, 1816, 1817, 1818]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100870\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Armășești\"\n        }\n      }, {\n        \"arcs\": [[1819, -1784, -1615, 1820, 1821]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67470\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Finta\"\n        }\n      }, {\n        \"arcs\": [[-1713, -1604, -1680, 1822, 1823, 1824]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113625\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Șișești\"\n        }\n      }, {\n        \"arcs\": [[1825, 1826, -1669, 1827, 1828, 1829]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80506\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Hurezani\"\n        }\n      }, {\n        \"arcs\": [[1830, -1459, -1556, -1764, 1831, 1832]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173855\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Tetoiu\"\n        }\n      }, {\n        \"arcs\": [[1833, -1656, 1834, 1835]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173132\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Stănești\"\n        }\n      }, {\n        \"arcs\": [[1836, -1699, 1837, -1792, 1838]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135850\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Tinosu\"\n        }\n      }, {\n        \"arcs\": [[1839, -1689, -1770, 1840, 1841]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169547\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Drăgoești\"\n        }\n      }, {\n        \"arcs\": [[1842, 1843, -1471, -1393, -1650, -1813, 1844]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81264\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Plopșoru\"\n        }\n      }, {\n        \"arcs\": [[1845, 1846, -1513, -1547, -1808, 1847]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93646\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Giurgeni\"\n        }\n      }, {\n        \"arcs\": [[1848, -1731, -1686, 1849, 1850]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128882\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Sîmburești\"\n        }\n      }, {\n        \"arcs\": [[1851, 1852, -1647, 1853, 1854, 1855]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18028\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Poiana Lacului\"\n        }\n      }, {\n        \"arcs\": [[-1821, -1614, -1608, 1856, 1857]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67292\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Dobra\"\n        }\n      }, {\n        \"arcs\": [[1858, -1772, 1859, 1860, -1631, -1657, -1834, 1861, 1862]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170168\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Glăvile\"\n        }\n      }, {\n        \"arcs\": [[1863, -1667, -1590, -1472, -1844, 1864, 1865]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78604\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Aninoasa\"\n        }\n      }, {\n        \"arcs\": [[1866, -1658, -1635, -1757, 1867, 1868]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82047\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Slivilești\"\n        }\n      }, {\n        \"arcs\": [[-1711, -1700, -1837, 1869, 1870, 1871]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134942\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Puchenii Mari\"\n        }\n      }, {\n        \"arcs\": [[-1803, -1751, 1872, 1873, 1874]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13757\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Topoloveni\"\n        }\n      }, {\n        \"arcs\": [[1875, -1714, -1825, 1876, 1877]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111685\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Florești\"\n        }\n      }, {\n        \"arcs\": [[1878, -1659, -1867, 1879]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80249\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Drăgotești\"\n        }\n      }, {\n        \"arcs\": [[1880, -1818, 1881, -1733, 1882, 1883]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103960\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Jilavele\"\n        }\n      }, {\n        \"arcs\": [[-1857, -1607, -1649, -1799, 1884, 1885]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66198\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Băleni\"\n        }\n      }, {\n        \"arcs\": [[-1806, -1724, -1572, 1886, 1887, 1888, 1889]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51056\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Moldova Nouă\"\n        }\n      }, {\n        \"arcs\": [[1890, 1891, -1704, 1892, 1893, 1894, 1895]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54387\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Topleț\"\n        }\n      }, {\n        \"arcs\": [[1896, -1683, 1897, 1898, 1899]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110688\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Bîlvănești\"\n        }\n      }, {\n        \"arcs\": [[1900, -1765, -1568, 1901, 1902, 1903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80043\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Dănciulești\"\n        }\n      }, {\n        \"arcs\": [[1904, -1800, -1760, 1905, 1906, 1907]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69250\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Văcărești\"\n        }\n      }, {\n        \"arcs\": [[1908, 1909, -1866, 1910]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81816\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Săulești\"\n        }\n      }, {\n        \"arcs\": [[-1883, -1737, 1911, 1912]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135146\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Sălciile\"\n        }\n      }, {\n        \"arcs\": [[1913, -1828, -1668, -1864, -1910, 1914, 1915]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82831\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Vladimir\"\n        }\n      }, {\n        \"arcs\": [[1916, -1796, -1786, 1917, 1918]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136241\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Cocorastii Colt\"\n        }\n      }, {\n        \"arcs\": [[1919, 1920, -1550, -1685, -1777, 1921, 1922]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66580\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Cobia\"\n        }\n      }, {\n        \"arcs\": [[1923, -1809, -1719, 1924, 1925]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44435\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Victoria\"\n        }\n      }, {\n        \"arcs\": [[-1912, -1736, -1674, 1926, 1927, 1928]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132681\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ciorani\"\n        }\n      }, {\n        \"arcs\": [[-1832, -1766, -1901, 1929, 1930]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170872\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Livezi\"\n        }\n      }, {\n        \"arcs\": [[-1925, -1718, -1728, -1747, 1931, 1932, 1933]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42824\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Bărăganul\"\n        }\n      }, {\n        \"arcs\": [[1934, 1935, 1936, 1937, -1693, 1938, 1939]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42968\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Ciocile\"\n        }\n      }, {\n        \"arcs\": [[1940, 1941, -1729, 1942]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129503\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Topana\"\n        }\n      }, {\n        \"arcs\": [[1943, -1878, 1944, 1945, 1946]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79585\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Cătunele\"\n        }\n      }, {\n        \"arcs\": [[1947, 1948, -1787, -1778, 1949, 1950]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46910\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Glodeanu-Siliștea\"\n        }\n      }, {\n        \"arcs\": [[1951, 1952, -1726, -1805, 1953, 1954]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54163\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Șopotu Nou\"\n        }\n      }, {\n        \"arcs\": [[1955, -1811, -1742, -1749, -1788, -1949, 1956, 1957]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49439\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Scutelnici\"\n        }\n      }, {\n        \"arcs\": [[1958, -1874, 1959, 1960]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18242\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Priboieni\"\n        }\n      }, {\n        \"arcs\": [[-1850, -1690, -1840, 1961, 1962, 1963]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129914\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vitomirești\"\n        }\n      }, {\n        \"arcs\": [[1964, 1965, -1823, -1679, -1897, 1966]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112263\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Ilovăț\"\n        }\n      }, {\n        \"arcs\": [[1967, -1943, -1732, -1849, 1968, 1969]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15554\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Ciomăgești\"\n        }\n      }, {\n        \"arcs\": [[-1945, -1877, -1824, -1966, 1970]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113698\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Șovarna\"\n        }\n      }, {\n        \"arcs\": [[1971, -1888, 1972, 1973, 1974]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53513\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Pojejena\"\n        }\n      }, {\n        \"arcs\": [[1975, 1976, 1977, -1762, -1721, -1705, -1872, 1978, 1979]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135020\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Rîfov\"\n        }\n      }, {\n        \"arcs\": [[1980, -1903, 1981, 1982, -1499, -1666, -1827, 1983]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82243\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Stejari\"\n        }\n      }, {\n        \"arcs\": [[1984, 1985, -1868, -1756, -1715, -1876, -1944, 1986]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78141\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Motru\"\n        }\n      }, {\n        \"arcs\": [[1987, -1927, -1678, -1763, -1978, 1988, 1989, 1990]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133018\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Drăgănești\"\n        }\n      }, {\n        \"arcs\": [[1991, 1992, 1993, -1880, -1869, -1986, 1994]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80846\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Mătăsari\"\n        }\n      }, {\n        \"arcs\": [[-1962, -1842, 1995, 1996, 1997]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171806\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Olanu\"\n        }\n      }, {\n        \"arcs\": [[1998, -1870, -1839, -1797, -1917, 1999, 2000]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130712\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Brazi\"\n        }\n      }, {\n        \"arcs\": [[2001, -1801, -1905, 2002, 2003]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66731\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Comișani\"\n        }\n      }, {\n        \"arcs\": [[2004, 2005, -1932, -1746, 2006, -1936, 2007]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43812\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Roșiori\"\n        }\n      }, {\n        \"arcs\": [[2008, -1773, -1859, 2009, 2010]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172947\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Scundu\"\n        }\n      }, {\n        \"arcs\": [[2011, -1989, -1977, 2012, 2013]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133090\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Dumbrava\"\n        }\n      }, {\n        \"arcs\": [[-1885, -1798, -2002, 2014, 2015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66474\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Bucșani\"\n        }\n      }, {\n        \"arcs\": [[2016, 2017, -1862, -1836, 2018, 2019, 2020]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170685\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Lădești\"\n        }\n      }, {\n        \"arcs\": [[-1822, -1858, 2021, 2022, 2023]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179711\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Vlădeni\"\n        }\n      }, {\n        \"arcs\": [[2024, -1979, -1871, -1999, 2025]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130552\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bărcănești\"\n        }\n      }, {\n        \"arcs\": [[2026, -1918, -1785, -1820, -2024, 2027, 2028, 2029]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134194\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Mănești\"\n        }\n      }, {\n        \"arcs\": [[2030, -1954, -1807, -1890, 2031]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51840\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Cărbunari\"\n        }\n      }, {\n        \"arcs\": [[2032, -2003, -1908, 2033, 2034, 2035, 2036]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65501\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Ulmi\"\n        }\n      }, {\n        \"arcs\": [[2037, -1950, -1781, -1819, -1881, 2038, 2039, 2040]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46867\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Glodeanu Sărat\"\n        }\n      }, {\n        \"arcs\": [[-1915, -1909, 2041, 2042]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78828\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bărbătești\"\n        }\n      }, {\n        \"arcs\": [[-2039, -1884, -1913, -1929, 2043, 2044]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132379\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Boldești-Gradiștea\"\n        }\n      }, {\n        \"arcs\": [[2045, -1996, -1841, -1774, -2009, 2046, 2047]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170514\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Ionești\"\n        }\n      }, {\n        \"arcs\": [[2048, -1974, 2049]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54109\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Socol\"\n        }\n      }, {\n        \"arcs\": [[2050, 2051, -1848, -1810, -1924, 2052, 2053]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42842\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Berteștii de Jos\"\n        }\n      }, {\n        \"arcs\": [[2054, 2055, -1952, 2056]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52570\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Dalboșeț\"\n        }\n      }, {\n        \"arcs\": [[2057, -1922, -1776, -1769, -1802, 2058, 2059, 2060]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67675\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Hulubești\"\n        }\n      }, {\n        \"arcs\": [[-2000, -1919, -2027, 2061, 2062]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130892\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Tîrgșoru Vechi\"\n        }\n      }, {\n        \"arcs\": [[2063, 2064, 2065, -1856, 2066, 2067]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14085\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Băbana\"\n        }\n      }, {\n        \"arcs\": [[2068, -2010, -1863, -2018, 2069, 2070]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172279\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Pesceana\"\n        }\n      }, {\n        \"arcs\": [[2071, -2042, -1911, -1865, -1843, 2072, 2073, 2074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78454\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Țicleni\"\n        }\n      }, {\n        \"arcs\": [[2075, 2076, -1939, -1695, -1597, -1739, -1812, -1956, 2077, 2078]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48138\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Padina\"\n        }\n      }, {\n        \"arcs\": [[2079, -2035, 2080, -1923, -2058, 2081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67407\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Dragomirești\"\n        }\n      }, {\n        \"arcs\": [[-2067, -1855, 2082, 2083, 2084, 2085]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15652\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Cocu\"\n        }\n      }, {\n        \"arcs\": [[2086, -1916, -2043, -2072, 2087]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80613\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Jupînești\"\n        }\n      }, {\n        \"arcs\": [[2088, -2073, -1845, -1816, 2089, 2090, 2091]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79004\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bîlteni\"\n        }\n      }, {\n        \"arcs\": [[-2028, -2023, 2092, 2093]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67256\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Dărmănești\"\n        }\n      }, {\n        \"arcs\": [[2094, 2095, 2096, 2097]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53700\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Eftimie Murgu\"\n        }\n      }, {\n        \"arcs\": [[2098, -2036, -2080, 2099, 2100, 2101]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65342\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Tîrgoviște\"\n        }\n      }, {\n        \"arcs\": [[-2084, 2102, 2103, -1941, -1968, 2104, 2105, 2106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19392\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Uda\"\n        }\n      }, {\n        \"arcs\": [[2107, -2021, 2108, 2109]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170792\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Lăpușata\"\n        }\n      }, {\n        \"arcs\": [[2110, -1930, -1904, -1981, 2111, 2112]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170346\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Grădiștea\"\n        }\n      }, {\n        \"arcs\": [[-2097, 2113, 2114, 2115, -2055, 2116]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51305\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Bănia\"\n        }\n      }, {\n        \"arcs\": [[-2109, -2020, 2117, -1833, -1931, -2111, 2118, 2119, 2120]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172698\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Roșiile\"\n        }\n      }, {\n        \"arcs\": [[-2070, -2017, -2108, 2121, 2122]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172581\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Roești\"\n        }\n      }, {\n        \"arcs\": [[2123, -1980, -2025, 2124, 2125]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130614\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Berceni\"\n        }\n      }, {\n        \"arcs\": [[2126, -2041, 2127, 2128]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47578\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Mihăilești\"\n        }\n      }, {\n        \"arcs\": [[2129, 2130, 2131, -1951, -2038, -2127, 2132]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50564\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Florica\"\n        }\n      }, {\n        \"arcs\": [[2133, -2044, -1928, -1988, 2134, 2135]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133394\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Fulga\"\n        }\n      }, {\n        \"arcs\": [[2136, -1963, -1998, 2137, 2138]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173374\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Stoilești\"\n        }\n      }, {\n        \"arcs\": [[2139, 2140, -2093, -2022, -1886, -2016, 2141, 2142]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67737\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"I. L. Caragiale\"\n        }\n      }, {\n        \"arcs\": [[2143, -1957, -1948, -2132, 2144]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45496\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Brădeanu\"\n        }\n      }, {\n        \"arcs\": [[-2119, -2113, 2145, 2146, 2147]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172992\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Sinești\"\n        }\n      }, {\n        \"arcs\": [[2148, -2146, -2112, -1984, -1826, 2149, 2150]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80766\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Logrești\"\n        }\n      }, {\n        \"arcs\": [[-2047, -2011, -2069, 2151, 2152]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173686\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Șirineasa\"\n        }\n      }, {\n        \"arcs\": [[2153, -2100, -2082, -2061, 2154, 2155]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68002\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Mănești\"\n        }\n      }, {\n        \"arcs\": [[2156, -1969, -1851, -1964, -2137, 2157]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169404\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Dănicei\"\n        }\n      }, {\n        \"arcs\": [[2158, -2014, 2159, 2160]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131933\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Albești-Paleologu\"\n        }\n      }, {\n        \"arcs\": [[2161, -1995, -1985, 2162, 2163]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79656\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Ciuperceni\"\n        }\n      }, {\n        \"arcs\": [[2164, -1829, -1914, -2087, 2165]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80711\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Licurici\"\n        }\n      }, {\n        \"arcs\": [[2166, -2078, -1958, -2144, 2167]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48744\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pogoanele\"\n        }\n      }, {\n        \"arcs\": [[-2142, -2015, -2004, -2033, 2168, 2169, 2170]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67595\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Gura Ocniței\"\n        }\n      }, {\n        \"arcs\": [[2171, 2172, 2173, 2174]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112959\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Podeni\"\n        }\n      }, {\n        \"arcs\": [[2175, -1975, -2049, 2176, 2177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53345\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Naidăș\"\n        }\n      }, {\n        \"arcs\": [[2178, 2179, -2163, -1987, -1947, 2180, 2181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80365\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Glogova\"\n        }\n      }, {\n        \"arcs\": [[2182, 2183, 2184, 2185, 2186, 2187, 2188]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13301\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mioveni\"\n        }\n      }, {\n        \"arcs\": [[-2181, -1946, -1971, -1965, 2189, 2190, 2191, 2192]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110296\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Bala\"\n        }\n      }, {\n        \"arcs\": [[2193, -1960, -1873, -1750, 2194, -2183, 2195]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15108\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Călinești\"\n        }\n      }, {\n        \"arcs\": [[2196, 2197, -2048, -2153, 2198, 2199]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168372\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Băbeni\"\n        }\n      }, {\n        \"arcs\": [[2200, -2135, -1991, 2201, 2202, 2203]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132752\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Colceag\"\n        }\n      }, {\n        \"arcs\": [[-2128, -2040, -2045, -2134, 2204, 2205, 2206]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44863\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Amaru\"\n        }\n      }, {\n        \"arcs\": [[-2202, -1990, -2012, -2159, 2207, 2208]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135896\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Tomșani\"\n        }\n      }, {\n        \"arcs\": [[2209, -2169, -2037, -2099, 2210, 2211]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65431\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Răzvad\"\n        }\n      }, {\n        \"arcs\": [[2212, -2175, 2213, -1896, 2214, 2215]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50923\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Băile Herculane\"\n        }\n      }, {\n        \"arcs\": [[2216, -2029, -2094, -2141, 2217, 2218]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133214\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Filipeștii de Tîrg\"\n        }\n      }, {\n        \"arcs\": [[2219, -2150, -1830, -2165, 2220, 2221]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78926\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Berlești\"\n        }\n      }, {\n        \"arcs\": [[2222, -2138, -1997, -2046, -2198, 2223, 2224]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169994\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Galicea\"\n        }\n      }, {\n        \"arcs\": [[-2211, -2102, 2225, 2226, 2227]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65379\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Aninoasa\"\n        }\n      }, {\n        \"arcs\": [[-2105, -1970, -2157, 2228, 2229]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16132\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Cuca\"\n        }\n      }, {\n        \"arcs\": [[-2160, -2013, -1976, -2124, 2230, 2231, 2232]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135949\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Valea Călugărească\"\n        }\n      }, {\n        \"arcs\": [[2233, 2234, 2235, -2062, -2030, -2217, 2236]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132075\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ariceștii Rahtivani\"\n        }\n      }, {\n        \"arcs\": [[2237, 2238, 2239, -1961, -2194, 2240]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14352\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Beleți-Negrești\"\n        }\n      }, {\n        \"arcs\": [[2241, -2186, 2242, 2243, 2244, 2245]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17209\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Micești\"\n        }\n      }, {\n        \"arcs\": [[2246, -2226, -2101, -2154, 2247, 2248, 2249]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65477\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Șotînga\"\n        }\n      }, {\n        \"arcs\": [[-2227, -2247, 2250, 2251]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65413\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Doicești\"\n        }\n      }, {\n        \"arcs\": [[2252, -2092, 2253, 2254, 2255]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78016\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Drăguțești\"\n        }\n      }, {\n        \"arcs\": [[2256, 2257, -2074, -2089, -2253, 2258]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80123\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Dănești\"\n        }\n      }, {\n        \"arcs\": [[2259, -2143, -2171, 2260, 2261]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65841\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Moreni\"\n        }\n      }, {\n        \"arcs\": [[2262, -2057, -1955, -2031, 2263, 2264]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53103\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Lăpușnicu Mare\"\n        }\n      }, {\n        \"arcs\": [[2265, -2076, 2266, 2267]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47159\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Largu\"\n        }\n      }, {\n        \"arcs\": [[-2008, -1935, 2268, 2269, 2270]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44328\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Ulmu\"\n        }\n      }, {\n        \"arcs\": [[-2221, -2166, -2088, -2075, -2258, 2271, 2272]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78329\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Tîrgu Cărbunești\"\n        }\n      }, {\n        \"arcs\": [[2273, -2229, -2158, -2139, -2223, 2274, 2275]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171628\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Nicolae Bălcescu\"\n        }\n      }, {\n        \"arcs\": [[2276, 2277, -2151, -2220, 2278, 2279]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79406\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bustuchin\"\n        }\n      }, {\n        \"arcs\": [[2280, 2281, 2282, 2283, 2284, 2285]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17101\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Merișani\"\n        }\n      }, {\n        \"arcs\": [[-2199, -2152, -2071, -2123, 2286, 2287, 2288]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172377\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Popești\"\n        }\n      }, {\n        \"arcs\": [[2289, -2231, -2126, 2290, 2291, 2292]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130785\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bucov\"\n        }\n      }, {\n        \"arcs\": [[2293, -2261, -2170, -2210, 2294]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68324\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Ocnița\"\n        }\n      }, {\n        \"arcs\": [[2295, -2218, -2140, -2260, 2296, 2297]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133161\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Filipeștii de Pădure\"\n        }\n      }, {\n        \"arcs\": [[2298, -2248, -2156, 2299, 2300, 2301]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68921\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Tătărani\"\n        }\n      }, {\n        \"arcs\": [[2302, -2120, -2148, 2303, 2304, 2305]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168602\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Berbești\"\n        }\n      }, {\n        \"arcs\": [[2306, -2267, -2079, -2167, 2307, 2308, 2309]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47300\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Luciu\"\n        }\n      }, {\n        \"arcs\": [[-2208, -2161, -2233, 2310, 2311, 2312]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131620\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Urlați\"\n        }\n      }, {\n        \"arcs\": [[2313, 2314, 2315, -2133, -2129, -2207, 2316, 2317, 2318]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47774\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Movila Banului\"\n        }\n      }, {\n        \"arcs\": [[-2269, -1940, -2077, -2266, 2319, 2320]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49046\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Rușețu\"\n        }\n      }, {\n        \"arcs\": [[-2110, -2121, -2303, 2321, 2322]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169182\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Copăceni\"\n        }\n      }, {\n        \"arcs\": [[-2192, 2323, 2324, 2325]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112995\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Ponoarele\"\n        }\n      }, {\n        \"arcs\": [[2326, 2327, -2187, -2242, 2328]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16365\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Dîrmănești\"\n        }\n      }, {\n        \"arcs\": [[2329, -2308, -2168, -2145, -2131, 2330, 2331]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49545\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Smeeni\"\n        }\n      }, {\n        \"arcs\": [[2332, -2188, -2328, 2333, 2334]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19338\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Țițești\"\n        }\n      }, {\n        \"arcs\": [[-2295, -2212, -2228, -2252, 2335, 2336, 2337, 2338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67522\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Glodeni\"\n        }\n      }, {\n        \"arcs\": [[2339, 2340, 2341, 2342]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82396\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Telești\"\n        }\n      }, {\n        \"arcs\": [[2343, -2241, -2196, -2189, -2333, 2344, 2345]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16285\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Davidești\"\n        }\n      }, {\n        \"arcs\": [[2346, -2106, -2230, -2274, 2347, 2348]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17423\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Morărești\"\n        }\n      }, {\n        \"arcs\": [[2349, -2301, 2350, 2351, -2238, -2344, 2352]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14726\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Boțești\"\n        }\n      }, {\n        \"arcs\": [[2353, 2354, 2355, 2356, 2357]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53023\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Iablanița\"\n        }\n      }, {\n        \"arcs\": [[2358, 2359, 2360, -2235, 2361, 2362, 2363]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130847\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Păulești\"\n        }\n      }, {\n        \"arcs\": [[2364, 2365, -2164, -2180, 2366]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80427\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Godinești\"\n        }\n      }, {\n        \"arcs\": [[2367, -2215, -1895, 2368, -2355, 2369]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53274\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Mehadia\"\n        }\n      }, {\n        \"arcs\": [[-2279, -2222, -2273, 2370, 2371, 2372]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78472\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Albeni\"\n        }\n      }, {\n        \"arcs\": [[2373, -2237, -2219, -2296, 2374]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133330\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Florești\"\n        }\n      }, {\n        \"arcs\": [[2375, 2376, -2363, 2377, 2378]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131443\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Plopeni\"\n        }\n      }, {\n        \"arcs\": [[-2348, -2276, 2379, 2380, 2381]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171469\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Milcoiu\"\n        }\n      }, {\n        \"arcs\": [[2382, -2200, -2289, 2383, 2384, 2385, 2386]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169896\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Frîncești\"\n        }\n      }, {\n        \"arcs\": [[2387, -2336, -2251, -2250, 2388, 2389]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179640\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Vulcana-Pandele\"\n        }\n      }, {\n        \"arcs\": [[2390, 2391, -2204, 2392, 2393]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133278\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Fântânele\"\n        }\n      }, {\n        \"arcs\": [[2394, -2337, -2388, 2395]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66009\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Brănești\"\n        }\n      }, {\n        \"arcs\": [[-2331, -2130, -2316, 2396, 2397]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46803\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Gherăseni\"\n        }\n      }, {\n        \"arcs\": [[2398, -2317, -2206, 2399, 2400, 2401, 2402, 2403, 2404]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49153\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Săhăteni\"\n        }\n      }, {\n        \"arcs\": [[2405, 2406, 2407, 2408, 2409]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51948\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ciclova Română\"\n        }\n      }, {\n        \"arcs\": [[-2311, -2232, -2290, 2410, 2411, 2412, 2413]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134390\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Plopu\"\n        }\n      }, {\n        \"arcs\": [[2414, 2415, -2371, -2272, -2257, 2416, 2417]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81861\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Scoarța\"\n        }\n      }, {\n        \"arcs\": [[2418, 2419, -2393, -2203, -2209, -2313, 2420, 2421, 2422]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132510\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ceptura\"\n        }\n      }, {\n        \"arcs\": [[2423, -2255, 2424, -2343, 2425, 2426, 2427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77910\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bălești\"\n        }\n      }, {\n        \"arcs\": [[2428, -2409, 2429, 2430, 2431, 2432]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53675\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Răcășdia\"\n        }\n      }, {\n        \"arcs\": [[2433, 2434, -2053, -1926, -1934, 2435, 2436, 2437, 2438]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43411\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Însurăței\"\n        }\n      }, {\n        \"arcs\": [[2439, -2378, -2362, -2234, -2374, 2440, 2441]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130981\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Băicoi\"\n        }\n      }, {\n        \"arcs\": [[2442, -2431, 2443, 2444]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51387\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Berliște\"\n        }\n      }, {\n        \"arcs\": [[2445, -2277, 2446, 2447]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81497\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Roșia de Amaradia\"\n        }\n      }, {\n        \"arcs\": [[2448, -2370, -2354, 2449, 2450]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52115\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Cornea\"\n        }\n      }, {\n        \"arcs\": [[2451, 2452, -2349, -2382, 2453, 2454]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17913\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Poienarii de Argeș\"\n        }\n      }, {\n        \"arcs\": [[2455, -2380, -2275, -2225, 2456, 2457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168791\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Budești\"\n        }\n      }, {\n        \"arcs\": [[2458, -2297, -2262, 2459, 2460]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65869\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Iedera\"\n        }\n      }, {\n        \"arcs\": [[2461, 2462, -2457, -2224, -2197, -2383, 2463, 2464]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171325\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Mihăești\"\n        }\n      }, {\n        \"arcs\": [[2465, -2402, 2466, 2467, 2468, 2469]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133688\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Gura Vadului\"\n        }\n      }, {\n        \"arcs\": [[-2345, -2335, 2470, 2471, 2472]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18778\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Stîlpeni\"\n        }\n      }, {\n        \"arcs\": [[2473, -2287, -2122, -2323, 2474, 2475]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169039\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Cernișoara\"\n        }\n      }, {\n        \"arcs\": [[2476, -2386, 2477, 2478]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171995\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Păușești\"\n        }\n      }, {\n        \"arcs\": [[-2302, -2350, 2479, 2480, 2481]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66526\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Cîndești\"\n        }\n      }, {\n        \"arcs\": [[2482, -2182, -2193, -2326, 2483, 2484]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109924\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Baia de Aramă\"\n        }\n      }, {\n        \"arcs\": [[-2357, 2485, 2486]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53069\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Lăpușnicel\"\n        }\n      }, {\n        \"arcs\": [[2487, -2434, 2488, 2489, 2490]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44300\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Tufești\"\n        }\n      }, {\n        \"arcs\": [[-2310, 2491, 2492, 2493]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46251\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cilibia\"\n        }\n      }, {\n        \"arcs\": [[-2421, -2312, -2414, 2494, 2495]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133722\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Iordăcheanu\"\n        }\n      }, {\n        \"arcs\": [[2496, -2480, -2353, -2346, -2473, 2497]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20055\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Vulturești\"\n        }\n      }, {\n        \"arcs\": [[-2464, -2387, -2477, 2498, 2499, 2500]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167641\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Băile Govora\"\n        }\n      }, {\n        \"arcs\": [[-2460, -2294, -2339, 2501, 2502, 2503, 2504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69063\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Valea Lungă\"\n        }\n      }, {\n        \"arcs\": [[-2432, -2443, 2505, 2506]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54573\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Vrani\"\n        }\n      }, {\n        \"arcs\": [[-2286, 2507, -2452, 2508, 2509, 2510]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14165\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Băiculești\"\n        }\n      }, {\n        \"arcs\": [[2511, -2305, 2512, 2513, 2514]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171067\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Mateești\"\n        }\n      }, {\n        \"arcs\": [[2515, -2475, -2322, -2306, -2512, 2516]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173533\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Stroești\"\n        }\n      }, {\n        \"arcs\": [[2517, -2417, -2259, -2256, -2424, 2518, 2519, 2520, 2521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77812\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Tîrgu Jiu\"\n        }\n      }, {\n        \"arcs\": [[2522, -2422, -2496, 2523, 2524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133615\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Gornet-Cricov\"\n        }\n      }, {\n        \"arcs\": [[2525, -2447, -2280, -2373, 2526, 2527]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81415\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Prigoria\"\n        }\n      }, {\n        \"arcs\": [[2528, -2427, 2529, 2530]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78668\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Arcani\"\n        }\n      }, {\n        \"arcs\": [[2531, -2397, -2315, 2532, 2533]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46484\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Costești\"\n        }\n      }, {\n        \"arcs\": [[2534, -2469, 2535, -2419, 2536, 2537]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132459\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Călugăreni\"\n        }\n      }, {\n        \"arcs\": [[2538, 2539, 2540, 2541]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179908\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Pietrari\"\n        }\n      }, {\n        \"arcs\": [[2542, -2332, -2398, -2532, 2543]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49849\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Țintești\"\n        }\n      }, {\n        \"arcs\": [[2544, -2441, 2545, 2546, 2547, 2548]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132315\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bănești\"\n        }\n      }, {\n        \"arcs\": [[2549, 2550, -2379, -2440, 2551]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132716\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Cocorăștii Mislii\"\n        }\n      }, {\n        \"arcs\": [[2552, -2502, -2338, -2395, 2553, 2554, 2555, 2556, 2557]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65921\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Pucioasa\"\n        }\n      }, {\n        \"arcs\": [[-2503, -2553, 2558, 2559]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69447\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Vîrfuri\"\n        }\n      }, {\n        \"arcs\": [[2560, -2499, -2479, 2561, 2562]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172340\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Pietrari\"\n        }\n      }, {\n        \"arcs\": [[2563, -2329, -2246, 2564, 2565]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15901\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Coșești\"\n        }\n      }, {\n        \"arcs\": [[2566, -2320, -2268, -2307, -2494, 2567, 2568, 2569]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45815\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"C.A. Rosetti\"\n        }\n      }, {\n        \"arcs\": [[2570, -2418, -2518, 2571, 2572, 2573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78748\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bălănești\"\n        }\n      }, {\n        \"arcs\": [[-2492, -2309, -2330, -2543, 2574, 2575, 2576]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46769\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Gălbinași\"\n        }\n      }, {\n        \"arcs\": [[-2484, -2325, 2577, 2578, 2579]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110027\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Obîrșia-Cloșani\"\n        }\n      }, {\n        \"arcs\": [[2580, -2509, -2455, 2581, 2582]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15493\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Ciofringeni\"\n        }\n      }, {\n        \"arcs\": [[-2533, -2314, 2583, 2584, 2585, 2586]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49625\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Stîlpu\"\n        }\n      }, {\n        \"arcs\": [[-2537, -2423, -2523, 2587, 2588]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135681\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Tătaru\"\n        }\n      }, {\n        \"arcs\": [[2589, -2412, 2590, 2591, 2592, 2593, 2594]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132271\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bălțești\"\n        }\n      }, {\n        \"arcs\": [[2595, -2541, 2596, -2389, -2249, -2299, -2482, 2597, 2598, 2599]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69526\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Voinești\"\n        }\n      }, {\n        \"arcs\": [[2600, -2470, -2535, 2601, 2602]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133866\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Jugureni\"\n        }\n      }, {\n        \"arcs\": [[2603, 2604, -2476, -2516, 2605, 2606, 2607]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171272\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Măldărești\"\n        }\n      }, {\n        \"arcs\": [[2608, 2609, -2270, -2321, -2567, 2610, 2611]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42771\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Surdila-Greci\"\n        }\n      }, {\n        \"arcs\": [[2612, -2519, -2428, -2529, 2613]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80677\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Lelești\"\n        }\n      }, {\n        \"arcs\": [[2614, 2615, -2527, -2372, -2416, 2616, 2617]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78873\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bengești-Ciocadia\"\n        }\n      }, {\n        \"arcs\": [[2618, -2552, -2442, -2545, 2619, 2620]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135164\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Scorțeni\"\n        }\n      }, {\n        \"arcs\": [[-2617, -2415, -2571, 2621]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81754\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Săcelu\"\n        }\n      }, {\n        \"arcs\": [[2622, 2623, -2612, 2624, 2625]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42753\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Făurei\"\n        }\n      }, {\n        \"arcs\": [[2626, -2524, -2495, -2413, -2590, 2627, 2628]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134443\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Podenii Noi\"\n        }\n      }, {\n        \"arcs\": [[2629, -2451, 2630, 2631, 2632]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52721\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Domașnea\"\n        }\n      }, {\n        \"arcs\": [[2633, -2556, 2634, 2635, 2636, 2637]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65609\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Fieni\"\n        }\n      }, {\n        \"arcs\": [[2638, 2639, -2528, -2616, 2640]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79362\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bumbești-Pițic\"\n        }\n      }, {\n        \"arcs\": [[2641, 2642, -2514, 2643, -2448, -2526, -2640, 2644]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78542\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Alimpești\"\n        }\n      }, {\n        \"arcs\": [[2645, -2588, -2525, -2627, 2646, 2647]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132011\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Apostolache\"\n        }\n      }, {\n        \"arcs\": [[2648, -2098, -2117, -2263, 2649, 2650, 2651]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51573\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Bozovici\"\n        }\n      }, {\n        \"arcs\": [[2652, 2653, -2562, -2478, -2385, 2654, -2604, 2655]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173935\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Tomșani\"\n        }\n      }, {\n        \"arcs\": [[2656, 2657, -2504, -2560, 2658, 2659]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69394\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Vișinești\"\n        }\n      }, {\n        \"arcs\": [[2660, 2661, -2598, -2481, -2497, 2662, 2663]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16659\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Hârtiești\"\n        }\n      }, {\n        \"arcs\": [[2664, -2550, -2619, 2665, 2666]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136198\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Vîlcănești\"\n        }\n      }, {\n        \"arcs\": [[2667, -2403, -2466, -2601, 2668, 2669]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47854\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Năeni\"\n        }\n      }, {\n        \"arcs\": [[2670, 2671, -2657, 2672]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134899\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Provița de Sus\"\n        }\n      }, {\n        \"arcs\": [[2673, -2594, 2674, 2675, 2676]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133562\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Gornet\"\n        }\n      }, {\n        \"arcs\": [[-2606, -2517, -2515, -2643, 2677, 2678]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173061\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Slătioara\"\n        }\n      }, {\n        \"arcs\": [[2679, -2582, -2454, -2381, -2456, 2680, 2681, 2682]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"170220\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Golești\"\n        }\n      }, {\n        \"arcs\": [[2683, 2684, 2685, 2686, -2491, 2687, 2688, 2689]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43313\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Gropeni\"\n        }\n      }, {\n        \"arcs\": [[2690, -2542, -2596, 2691, 2692]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66223\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Bărbulețu\"\n        }\n      }, {\n        \"arcs\": [[2693, -2628, -2595, -2674, 2694, 2695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134336\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Păcureți\"\n        }\n      }, {\n        \"arcs\": [[-2663, -2498, -2472, 2696, 2697, 2698, 2699]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17254\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mihăești\"\n        }\n      }, {\n        \"arcs\": [[2700, -2521, 2701, 2702]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78089\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Turcinești\"\n        }\n      }, {\n        \"arcs\": [[2703, 2704, 2705, 2706, 2707]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172082\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Păusești-Măglași\"\n        }\n      }, {\n        \"arcs\": [[2708, 2709, -2510, -2581, 2710, 2711, 2712]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13622\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Curtea de Argeș\"\n        }\n      }, {\n        \"arcs\": [[2713, -2410, -2429, 2714, 2715, 2716, 2717]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51118\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Oravița\"\n        }\n      }, {\n        \"arcs\": [[-2692, -2600, 2718, 2719, 2720]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67942\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Malu cu Flori\"\n        }\n      }, {\n        \"arcs\": [[2721, -2620, -2549, 2722, 2723]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135789\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Telega\"\n        }\n      }, {\n        \"arcs\": [[2724, -2723, -2548, 2725, 2726, 2727]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131256\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Câmpina\"\n        }\n      }, {\n        \"arcs\": [[-2579, 2728, 2729, -2216, -2368, -2449, -2630, 2730, 2731]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52160\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Cornereva\"\n        }\n      }, {\n        \"arcs\": [[-2650, -2265, 2732, -2406, -2714, 2733, 2734, 2735]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50889\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Anina\"\n        }\n      }, {\n        \"arcs\": [[-2637, 2736, -2539, -2691, 2737, 2738]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179917\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Râu Alb\"\n        }\n      }, {\n        \"arcs\": [[2739, -2404, -2668, 2740]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45619\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Breaza\"\n        }\n      }, {\n        \"arcs\": [[2741, -2698, 2742, 2743, 2744, 2745]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19999\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Vlădești\"\n        }\n      }, {\n        \"arcs\": [[2746, -2631, -2450, -2358, -2487, 2747, 2748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53327\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Mehadica\"\n        }\n      }, {\n        \"arcs\": [[2749, -2602, -2538, -2589, -2646, 2750, 2751, 2752]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135244\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Sîngeru\"\n        }\n      }, {\n        \"arcs\": [[-2632, -2747, 2753]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53130\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Luncavița\"\n        }\n      }, {\n        \"arcs\": [[-2569, 2754, 2755, 2756]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49019\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Robeasca\"\n        }\n      }, {\n        \"arcs\": [[2757, -2666, -2621, -2722, 2758, 2759]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132841\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Cosminele\"\n        }\n      }, {\n        \"arcs\": [[2760, 2761, -2584, -2319, 2762, -2405, -2740, 2763]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48487\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pietroasele\"\n        }\n      }, {\n        \"arcs\": [[2764, -2586, 2765, -2761, 2766, 2767]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47453\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Merei\"\n        }\n      }, {\n        \"arcs\": [[-2711, -2583, -2680, 2768, 2769, 2770]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19249\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Tigveni\"\n        }\n      }, {\n        \"arcs\": [[2771, 2772, -2575, -2544, -2534, -2587, -2765, 2773]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44818\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Buzău\"\n        }\n      }, {\n        \"arcs\": [[2774, -2755, -2568, -2493, -2577, 2775, 2776]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49073\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Săgeata\"\n        }\n      }, {\n        \"arcs\": [[-2557, -2634, 2777, 2778, 2779]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66438\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Buciumeni\"\n        }\n      }, {\n        \"arcs\": [[2780, -2744, 2781, -2566, 2782, 2783, 2784]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17851\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Pietroșani\"\n        }\n      }, {\n        \"arcs\": [[-2715, -2433, -2507, 2785, 2786, 2787]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54500\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Vărădia\"\n        }\n      }, {\n        \"arcs\": [[2788, -2676, 2789, 2790, 2791, 2792, 2793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131835\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Gura Vitioarei\"\n        }\n      }, {\n        \"arcs\": [[-2669, -2603, -2750, 2794, 2795, 2796]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133919\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Lapoș\"\n        }\n      }, {\n        \"arcs\": [[2797, 2798, -2792, 2799, -2667, -2758, 2800, 2801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136134\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Vărbilău\"\n        }\n      }, {\n        \"arcs\": [[2802, -2661, 2803, 2804]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14673\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Boteni\"\n        }\n      }, {\n        \"arcs\": [[2805, 2806, 2807, 2808, 2809]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168880\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Bujoreni\"\n        }\n      }, {\n        \"arcs\": [[2810, -2673, -2660, 2811, 2812]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131899\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Adunați\"\n        }\n      }, {\n        \"arcs\": [[2813, 2814, -2696, 2815, 2816]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135404\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Surani\"\n        }\n      }, {\n        \"arcs\": [[-2719, -2599, -2662, -2803, 2817, 2818]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69303\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Văleni-Dîmbovița\"\n        }\n      }, {\n        \"arcs\": [[-2734, -2718, 2819, 2820]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52035\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ciudanovița\"\n        }\n      }, {\n        \"arcs\": [[2821, -2690, 2822, 2823]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44177\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Tichilești\"\n        }\n      }, {\n        \"arcs\": [[2824, -2751, -2648, 2825, 2826, 2827]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132645\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Chiojdeanca\"\n        }\n      }, {\n        \"arcs\": [[-2699, -2742, 2828, 2829, 2830]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18670\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Schitu Golești\"\n        }\n      }, {\n        \"arcs\": [[-2826, -2647, -2629, -2694, -2815, 2831]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135501\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Șoimari\"\n        }\n      }, {\n        \"arcs\": [[2832, -2794, 2833, 2834]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131817\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Vălenii de Munte\"\n        }\n      }, {\n        \"arcs\": [[-2748, -2486, -2356, -2369, -1894, 2835, -2095, -2649, 2836, 2837]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53577\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Prigor\"\n        }\n      }, {\n        \"arcs\": [[2838, -2720, -2819, 2839, 2840]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15402\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Cetățeni\"\n        }\n      }, {\n        \"arcs\": [[-2812, -2659, -2559, -2558, -2780, 2841, 2842, 2843]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"66330\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Bezdead\"\n        }\n      }, {\n        \"arcs\": [[2844, -2713, 2845, 2846]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19695\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Valea Iașului\"\n        }\n      }, {\n        \"arcs\": [[-2716, -2788, 2847, 2848]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52990\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Grădinari\"\n        }\n      }, {\n        \"arcs\": [[-2752, -2825, 2849, 2850]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135128\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Salcia\"\n        }\n      }, {\n        \"arcs\": [[2851, -2776, -2576, -2773, 2852, 2853]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49956\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Vadu Pașii\"\n        }\n      }, {\n        \"arcs\": [[2854, -2846, -2712, -2771, 2855, 2856, 2857]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19631\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Valea Danului\"\n        }\n      }, {\n        \"arcs\": [[2858, 2859, -2682, 2860, -2810, 2861, 2862]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169351\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Dăești\"\n        }\n      }, {\n        \"arcs\": [[2863, -2816, -2695, -2677, -2789, -2833, 2864]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134755\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Predeal-Sărari\"\n        }\n      }, {\n        \"arcs\": [[2865, -2801, -2760, 2866, 2867]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131988\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Aluniș\"\n        }\n      }, {\n        \"arcs\": [[2868, -2625, -2611, -2570, -2757, 2869]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43466\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Jirlău\"\n        }\n      }, {\n        \"arcs\": [[-2785, 2870, 2871, 2872]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16454\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Domnești\"\n        }\n      }, {\n        \"arcs\": [[2873, -2804, -2664, -2700, -2831, 2874]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17968\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Poienarii de Muscel\"\n        }\n      }, {\n        \"arcs\": [[-2738, -2693, -2721, -2839, 2875, 2876]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68565\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Pucheni\"\n        }\n      }, {\n        \"arcs\": [[2877, -2769, -2683, -2860, 2878]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172812\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Runcu\"\n        }\n      }, {\n        \"arcs\": [[-2856, -2770, -2878, 2879, 2880]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15313\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Cepari\"\n        }\n      }, {\n        \"arcs\": [[2881, -2563, -2654, 2882, 2883]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168559\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Bărbătești\"\n        }\n      }, {\n        \"arcs\": [[2884, -2853, -2772, 2885, 2886]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47373\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Mărăcineni\"\n        }\n      }, {\n        \"arcs\": [[2887, 2888, -2728, 2889, 2890, 2891, 2892]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135547\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Șotrile\"\n        }\n      }, {\n        \"arcs\": [[2893, -2817, -2864, 2894, 2895]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132137\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ariceștii Zeletin\"\n        }\n      }, {\n        \"arcs\": [[-2842, -2779, 2896, 2897]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68404\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Pietroșița\"\n        }\n      }, {\n        \"arcs\": [[2898, -2840, -2818, -2805, -2874, 2899, 2900]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17334\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mioarele\"\n        }\n      }, {\n        \"arcs\": [[2901, -2813, -2844, 2902, 2903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135654\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Talea\"\n        }\n      }, {\n        \"arcs\": [[2904, 2905, -2777, -2852, 2906, 2907]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46377\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cochirleanca\"\n        }\n      }, {\n        \"arcs\": [[2908, -2827, -2832, -2814, -2894, 2909]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132486\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Cărbunești\"\n        }\n      }, {\n        \"arcs\": [[2910, -2867, -2759, -2724, -2725, -2889, 2911]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132404\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Brebu\"\n        }\n      }, {\n        \"arcs\": [[2912, -2834, -2793, -2799, 2913, 2914]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135725\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Teișani\"\n        }\n      }, {\n        \"arcs\": [[2915, -2767, -2764, -2741, -2670, -2797, 2916, 2917, 2918]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49643\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Tisău\"\n        }\n      }, {\n        \"arcs\": [[2919, -2829, -2746, 2920, 2921, 2922]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16551\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Godeni\"\n        }\n      }, {\n        \"arcs\": [[2923, -2735, -2821, 2924, 2925, 2926]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52954\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Goruia\"\n        }\n      }, {\n        \"arcs\": [[2927, 2928, -2795, -2753, -2851, 2929, 2930]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46313\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cislău\"\n        }\n      }, {\n        \"arcs\": [[2931, -2887, 2932, 2933, 2934]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49206\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Săpoca\"\n        }\n      }, {\n        \"arcs\": [[2935, -2857, -2881, 2936, 2937]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19141\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Șuici\"\n        }\n      }, {\n        \"arcs\": [[-2808, 2938, 2939, 2940]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171539\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Muereasca\"\n        }\n      }, {\n        \"arcs\": [[-2914, -2798, 2941, 2942]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131577\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Slănic\"\n        }\n      }, {\n        \"arcs\": [[2943, -2530, -2426, -2342, 2944, -2365, 2945, 2946]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81184\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Peștișani\"\n        }\n      }, {\n        \"arcs\": [[2947, -2847, -2855, 2948, 2949]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13819\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Albeștii de Argeș\"\n        }\n      }, {\n        \"arcs\": [[2950, 2951, 2952, 2953, 2954, 2955]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43652\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Movila Miresii\"\n        }\n      }, {\n        \"arcs\": [[2956, -2485, -2580, -2732, 2957, 2958, 2959]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81095\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Padeș\"\n        }\n      }, {\n        \"arcs\": [[-2933, -2886, -2774, -2768, -2916, 2960, 2961]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50102\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Vernești\"\n        }\n      }, {\n        \"arcs\": [[2962, 2963, -2651, -2736, -2924, 2964]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51804\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Carașova\"\n        }\n      }, {\n        \"arcs\": [[-2897, -2778, -2638, -2739, -2877, 2965, 2966]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68716\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Runcu\"\n        }\n      }, {\n        \"arcs\": [[2967, 2968, -2923, 2969, 2970]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14922\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bughea de Jos\"\n        }\n      }, {\n        \"arcs\": [[-2954, 2971, 2972, 2973, 2974, 2975]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44140\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Șuțești\"\n        }\n      }, {\n        \"arcs\": [[2976, -2925, -2820, -2717, -2849, 2977, 2978]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54305\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ticvaniu Mare\"\n        }\n      }, {\n        \"arcs\": [[-2930, -2850, -2828, -2909, 2979, 2980, 2981]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45753\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Calvini\"\n        }\n      }, {\n        \"arcs\": [[2982, 2983, 2984, -2951, 2985, 2986, 2987]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44257\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Tudor Vladimirescu\"\n        }\n      }, {\n        \"arcs\": [[-2918, 2988, 2989, 2990]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47337\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Măgura\"\n        }\n      }, {\n        \"arcs\": [[2991, -2905, 2992, 2993]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44989\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Bălăceanu\"\n        }\n      }, {\n        \"arcs\": [[2994, -2949, -2858, -2936, 2995, 2996]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15448\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Cicănești\"\n        }\n      }, {\n        \"arcs\": [[-2961, -2919, -2991, 2997]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50549\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Unguriu\"\n        }\n      }, {\n        \"arcs\": [[2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, -2685, 3008, 3009]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43117\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Frecăței\"\n        }\n      }, {\n        \"arcs\": [[3010, -2989, -2917, -2796, -2929, 3011, 3012]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50326\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Viperești\"\n        }\n      }, {\n        \"arcs\": [[3013, 3014, 3015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51243\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Armeniș\"\n        }\n      }, {\n        \"arcs\": [[3016, -2907, -2854, -2885, -2932, 3017, 3018, 3019]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48771\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Poșta Cîlnău\"\n        }\n      }, {\n        \"arcs\": [[3020, -2703, 3021, 3022]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81987\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Schela\"\n        }\n      }, {\n        \"arcs\": [[3023, -2895, -2865, -2835, -2913, 3024, 3025]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132896\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Drajna\"\n        }\n      }, {\n        \"arcs\": [[-2921, -2745, -2781, -2873, 3026, 3027, 3028]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13999\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Aninoasa\"\n        }\n      }, {\n        \"arcs\": [[-3022, -2702, -2520, -2613, 3029, 3030, 3031]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82136\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Stănești\"\n        }\n      }, {\n        \"arcs\": [[3032, -2656, -2608, 3033, 3034]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168041\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Horezu\"\n        }\n      }, {\n        \"arcs\": [[-2892, 3035, -2904, 3036, 3037, 3038]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131336\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Comarnic\"\n        }\n      }, {\n        \"arcs\": [[3039, -2862, -2809, -2941, 3040, 3041]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167909\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Călimănești\"\n        }\n      }, {\n        \"arcs\": [[[3042, -2051, 3043, -2686, -3008]], [[-2684, -2822, 3044, 3045, 3046, -3009]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"43493\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Mărașu\"\n        }\n      }, {\n        \"arcs\": [[-3027, -2872, 3047, 3048, 3049]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15830\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Corbi\"\n        }\n      }, {\n        \"arcs\": [[3050, -2937, -2880, -2879, -2859, 3051, 3052]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168675\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Berislăvești\"\n        }\n      }, {\n        \"arcs\": [[-2958, -2731, -2633, -2754, -2749, -2838, 3053, 3054, 3055, -3014, 3056, 3057]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54270\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Teregova\"\n        }\n      }, {\n        \"arcs\": [[-3034, -2607, -2679, 3058, 3059]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174021\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Vaideeni\"\n        }\n      }, {\n        \"arcs\": [[3060, -3015, -3056, 3061, 3062]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54056\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Slatina-Timiș\"\n        }\n      }, {\n        \"arcs\": [[-3052, -2863, -3040, 3063, 3064]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172894\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Sălătrucel\"\n        }\n      }, {\n        \"arcs\": [[3065, 3066, 3067, -2980, -2910, -2896, -3024, 3068]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134648\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Posești\"\n        }\n      }, {\n        \"arcs\": [[3069, 3070, -2983, 3071, 3072]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44560\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Cazasu\"\n        }\n      }, {\n        \"arcs\": [[-2868, -2911, 3073, 3074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132342\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bertea\"\n        }\n      }, {\n        \"arcs\": [[-2573, 3075, 3076]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80908\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Mușetești\"\n        }\n      }, {\n        \"arcs\": [[-2942, -2802, -2866, -3075, 3077, 3078]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135618\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ștefești\"\n        }\n      }, {\n        \"arcs\": [[3079, -2966, -2876, -2841, -2899, 3080, 3081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18858\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Stoenești\"\n        }\n      }, {\n        \"arcs\": [[3082, -2950, -2995, 3083, 3084]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15741\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Corbeni\"\n        }\n      }, {\n        \"arcs\": [[3085, -3049, 3086, -3085, 3087]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14753\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Brăduleț\"\n        }\n      }, {\n        \"arcs\": [[3088, -2993, -2908, -3017, 3089, 3090, 3091, 3092]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50479\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Ziduri\"\n        }\n      }, {\n        \"arcs\": [[-3076, -2572, -2522, -2701, -3021, 3093, 3094, 3095]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79308\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bumbești-Jiu\"\n        }\n      }, {\n        \"arcs\": [[3096, -2986, -2956, 3097, 3098]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43242\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Gemenele\"\n        }\n      }, {\n        \"arcs\": [[-3019, 3099, 3100, 3101]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45334\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Blăjani\"\n        }\n      }, {\n        \"arcs\": [[3102, 3103, 3104, -2994, -3089, 3105]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46830\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Ghergheasa\"\n        }\n      }, {\n        \"arcs\": [[-3100, -3018, -2935, 3106, 3107, 3108]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46019\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cernătești\"\n        }\n      }, {\n        \"arcs\": [[-3059, -2678, -2642, 3109, 3110]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81380\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Polovragi\"\n        }\n      }, {\n        \"arcs\": [[3111, 3112, -2618, -2622, -2574, -3077, 3113, 3114]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79834\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Crasna\"\n        }\n      }, {\n        \"arcs\": [[-2990, -3011, 3115, 3116, 3117]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48557\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pîrscov\"\n        }\n      }, {\n        \"arcs\": [[3118, -2965, -2927, 3119, 3120]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53167\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Lupac\"\n        }\n      }, {\n        \"arcs\": [[-3107, -2934, -2962, -2998, -3118, 3121, 3122]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45101\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Berca\"\n        }\n      }, {\n        \"arcs\": [[-3098, -2955, -2976, 3123, 3124, 3125]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43732\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Rîmnicelu\"\n        }\n      }, {\n        \"arcs\": [[-3120, -2926, -2977, 3126, 3127]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52696\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Dognecea\"\n        }\n      }, {\n        \"arcs\": [[3128, -3025, -2915, -2943, -3079, 3129, 3130]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133795\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Izvoarele\"\n        }\n      }, {\n        \"arcs\": [[-2893, -3039, 3131, 3132]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135226\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Secăria\"\n        }\n      }, {\n        \"arcs\": [[-3116, -3013, 3133, 3134, 3135]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46554\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cozieni\"\n        }\n      }, {\n        \"arcs\": [[3136, 3137, 3138, 3139, 3140, 3141]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44934\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Balta Albă\"\n        }\n      }, {\n        \"arcs\": [[-3141, 3142, -3104, 3143]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45361\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Boldu\"\n        }\n      }, {\n        \"arcs\": [[3144, 3145, 3146, 3147]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157781\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Moravița\"\n        }\n      }, {\n        \"arcs\": [[3148, 3149, -2931, -2982, 3150, 3151, 3152, 3153]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48325\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pătârlagele\"\n        }\n      }, {\n        \"arcs\": [[3154, -3132, -3038, 3155, 3156]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131540\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Sinaia\"\n        }\n      }, {\n        \"arcs\": [[3157, 3158, 3159, -3090, -3020, -3102, 3160]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50415\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Zărnești\"\n        }\n      }, {\n        \"arcs\": [[3161, -3159, 3162]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48922\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Racovițeni\"\n        }\n      }, {\n        \"arcs\": [[3163, -3092, 3164, 3165, 3166]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50022\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Valea Rîmnicului\"\n        }\n      }, {\n        \"arcs\": [[3167, 3168, 3169, 3170]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160047\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Ceatalchioi\"\n        }\n      }, {\n        \"arcs\": [[-3124, -2975, 3171, 3172, 3173]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43698\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Racoviță\"\n        }\n      }, {\n        \"arcs\": [[3174, -3057, -3016, -3061, 3175, 3176, 3177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51546\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Bolvașnița\"\n        }\n      }, {\n        \"arcs\": [[3178, 3179, 3180, 3181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54350\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Tîrnova\"\n        }\n      }, {\n        \"arcs\": [[3182, -3121, -3128, 3183, 3184]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50987\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ocna de Fier\"\n        }\n      }, {\n        \"arcs\": [[3185, 3186, -3082, 3187, 3188, 3189, 3190]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16472\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Dragoslavele\"\n        }\n      }, {\n        \"arcs\": [[-2970, -2922, -3029, 3191, 3192]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14405\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Berevoești\"\n        }\n      }, {\n        \"arcs\": [[-3180, 3193, 3194, 3195, -2963, -3119, -3183, 3196, 3197]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50790\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Reșița\"\n        }\n      }, {\n        \"arcs\": [[-3095, 3198, 3199]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87219\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Aninoasa\"\n        }\n      }, {\n        \"arcs\": [[3200, 3201, 3202]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45888\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cănești\"\n        }\n      }, {\n        \"arcs\": [[3203, -3156, -3037, -2903, -2843, -2898, -2967, -3080, -3187, 3204, 3205]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68182\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Moroeni\"\n        }\n      }, {\n        \"arcs\": [[-3202, 3206, -3122, -3117, -3136, 3207, 3208, 3209]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48021\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Odăile\"\n        }\n      }, {\n        \"arcs\": [[-3066, 3210, 3211]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136278\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bătrâni\"\n        }\n      }, {\n        \"arcs\": [[3212, -3154, 3213, 3214]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46439\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Colți\"\n        }\n      }, {\n        \"arcs\": [[3215, -3199, -3094, -3023, -3032, 3216, 3217]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87175\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Vulcan\"\n        }\n      }, {\n        \"arcs\": [[-3106, -3093, -3164, 3218, 3219, 3220]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48968\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Rîmnicelu\"\n        }\n      }, {\n        \"arcs\": [[3221, -3161, -3101, -3109, 3222, 3223, 3224]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45003\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Beceni\"\n        }\n      }, {\n        \"arcs\": [[3225, -3163, -3158, -3222, 3226, 3227, 3228]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47818\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Murgești\"\n        }\n      }, {\n        \"arcs\": [[3229, 3230, 3231]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174496\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Titești\"\n        }\n      }, {\n        \"arcs\": [[3232, -3231, 3233, 3234, 3235]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172509\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Racovița\"\n        }\n      }, {\n        \"arcs\": [[-3165, -3091, -3160, -3162, -3226, 3236]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47006\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Grebănu\"\n        }\n      }, {\n        \"arcs\": [[3237, 3238, -2971, -3193, 3239]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13891\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Albeștii de Muscel\"\n        }\n      }, {\n        \"arcs\": [[3240, 3241, 3242, 3243, -3073, 3244, 3245, 3246]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44391\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Vădeni\"\n        }\n      }, {\n        \"arcs\": [[3247, -3208, -3135, 3248, -3149, -3213, 3249]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45389\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Bozioru\"\n        }\n      }, {\n        \"arcs\": [[3250, 3251, -3147, 3252, 3253, 3254]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156669\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Denta\"\n        }\n      }, {\n        \"arcs\": [[3255, -3223, -3108, -3123, -3207, -3201, 3256, 3257]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49313\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Scorțoasa\"\n        }\n      }, {\n        \"arcs\": [[3258, -3178, 3259, 3260, 3261]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54412\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Turnu Ruieni\"\n        }\n      }, {\n        \"arcs\": [[3262, -3227, -3225, 3263, 3264, 3265]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47417\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Mărgăritești\"\n        }\n      }, {\n        \"arcs\": [[3266, -3130, -3078, -3074, -2912, -2888, -3133, -3155, 3267, 3268, 3269]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136107\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Valea Doftanei\"\n        }\n      }, {\n        \"arcs\": [[3270, 3271, -3194, -3179, 3272, 3273]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53425\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Păltiniș\"\n        }\n      }, {\n        \"arcs\": [[-3273, -3182, 3274, 3275, 3276]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51626\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Brebu\"\n        }\n      }, {\n        \"arcs\": [[3277, -3257, -3203, -3210, 3278, 3279]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46108\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Chiliile\"\n        }\n      }, {\n        \"arcs\": [[3280, 3281, -3255, 3282, 3283]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155458\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Deta\"\n        }\n      }, {\n        \"arcs\": [[-3188, -3081, -2901, 3284, 3285, 3286]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13524\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Valea Mare Pravăț\"\n        }\n      }, {\n        \"arcs\": [[3287, 3288, -3228, -3263, 3289]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48165\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pardoși\"\n        }\n      }, {\n        \"arcs\": [[-3279, -3209, -3248, 3290, 3291]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45539\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Brăești\"\n        }\n      }, {\n        \"arcs\": [[-3214, -3153, 3292, 3293, 3294]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47916\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Nehoiu\"\n        }\n      }, {\n        \"arcs\": [[3295, -3269, 3296, 3297]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130954\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Azuga\"\n        }\n      }, {\n        \"arcs\": [[3298, 3299, -3197, -3185, 3300, 3301, 3302]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50969\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Bocșa\"\n        }\n      }, {\n        \"arcs\": [[3303, -3275, -3181, -3198, -3300, 3304]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52758\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ezeriș\"\n        }\n      }, {\n        \"arcs\": [[3305, 3306, 3307, 3308, 3309, 3310]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175590\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Ciorăști\"\n        }\n      }, {\n        \"arcs\": [[-3286, 3311, 3312, -3238, 3313, 3314]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16908\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Lerești\"\n        }\n      }, {\n        \"arcs\": [[3315, -3211, -3069, -3026, -3129, 3316, 3317, 3318]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132574\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Cerașu\"\n        }\n      }, {\n        \"arcs\": [[-3261, 3319, -3271, 3320, 3321, 3322]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51010\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Caransebeș\"\n        }\n      }, {\n        \"arcs\": [[-3191, 3323, 3324]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40991\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Fundata\"\n        }\n      }, {\n        \"arcs\": [[3325, 3326, 3327, 3328, 3329]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160458\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Grindu\"\n        }\n      }, {\n        \"arcs\": [[3330, 3331, -3166, -3237, -3229, -3289, 3332]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49769\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Topliceni\"\n        }\n      }, {\n        \"arcs\": [[3333, -3302, 3334, 3335, 3336, 3337, 3338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51500\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Berzovia\"\n        }\n      }, {\n        \"arcs\": [[3339, -3317, -3131, -3267, 3340]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134096\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Măneciu\"\n        }\n      }, {\n        \"arcs\": [[-3324, -3190, 3341, 3342, 3343]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16329\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Dîmbovicioara\"\n        }\n      }, {\n        \"arcs\": [[3344, -3264, -3224, -3256, 3345, 3346]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50228\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Vintilă Vodă\"\n        }\n      }, {\n        \"arcs\": [[3347, -3298, 3348, 3349, 3350]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40303\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Predeal\"\n        }\n      }, {\n        \"arcs\": [[-3310, 3351, 3352, 3353]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175206\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Bălești\"\n        }\n      }, {\n        \"arcs\": [[3354, -3265, -3345, 3355]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49233\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Sărulești\"\n        }\n      }, {\n        \"arcs\": [[3356, 3357, 3358, 3359]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157273\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Giera\"\n        }\n      }, {\n        \"arcs\": [[-3218, 3360, 3361, 3362]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87246\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Bănița\"\n        }\n      }, {\n        \"arcs\": [[3363, -3338, 3364, 3365]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53247\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Măureni\"\n        }\n      }, {\n        \"arcs\": [[3366, -3251, -3282, 3367, 3368]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159366\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Birda\"\n        }\n      }, {\n        \"arcs\": [[-3365, -3337, 3369, -3148, -3252, -3367, 3370]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157086\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Gătaia\"\n        }\n      }, {\n        \"arcs\": [[3371, -3276, -3304, 3372, 3373]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54699\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Zorlențu Mare\"\n        }\n      }, {\n        \"arcs\": [[3374, -3333, -3288, 3375, 3376, 3377]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45673\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Buda\"\n        }\n      }, {\n        \"arcs\": [[3378, -3205, -3186, -3325, -3344, 3379]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41471\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Moieciu\"\n        }\n      }, {\n        \"arcs\": [[3380, 3381, 3382]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91054\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Sarmizegetusa\"\n        }\n      }, {\n        \"arcs\": [[3383, -3206, -3379, 3384, 3385]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40633\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Bran\"\n        }\n      }, {\n        \"arcs\": [[3386, -3284, 3387, 3388, -3360, 3389, 3390, 3391]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159400\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Ghilad\"\n        }\n      }, {\n        \"arcs\": [[3392, -3376, -3290, -3266, -3355, 3393, 3394]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50068\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Valea Salciei\"\n        }\n      }, {\n        \"arcs\": [[3395, 3396, 3397, -3306, 3398, 3399]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176613\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Măicănești\"\n        }\n      }, {\n        \"arcs\": [[-3232, -3233, 3400, 3401]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168755\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Boișoara\"\n        }\n      }, {\n        \"arcs\": [[3402, -3353, 3403, -3220, 3404, 3405, 3406, 3407, 3408, 3409]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177600\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Sihlea\"\n        }\n      }, {\n        \"arcs\": [[3410, -3303, -3334, 3411]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53639\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ramna\"\n        }\n      }, {\n        \"arcs\": [[3412, 3413, 3414, 3415, 3416, 3417]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76585\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Independența\"\n        }\n      }, {\n        \"arcs\": [[3418, 3419, 3420, 3421]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175439\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Bordești\"\n        }\n      }, {\n        \"arcs\": [[-3368, -3281, -3387, 3422, 3423, 3424, 3425]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159339\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Voiteg\"\n        }\n      }, {\n        \"arcs\": [[3426, -3053, -3065, 3427, -3234, -3230, -3402, 3428, 3429, 3430]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"172153\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Perișani\"\n        }\n      }, {\n        \"arcs\": [[3431, -2996, -2938, -3051, -3427, 3432]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18554\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Sălătrucu\"\n        }\n      }, {\n        \"arcs\": [[3433, 3434, -3342, -3189, -3287, -3315, 3435, 3436]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18527\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Rucăr\"\n        }\n      }, {\n        \"arcs\": [[3437, 3438, 3439, -2959, -3058, -3175, -3259, 3440, 3441, 3442]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54617\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Zăvoi\"\n        }\n      }, {\n        \"arcs\": [[-3438, 3443, 3444]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53210\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Marga\"\n        }\n      }, {\n        \"arcs\": [[3445, -3408, 3446, -3419, 3447, 3448]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175938\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Dumbrăveni\"\n        }\n      }, {\n        \"arcs\": [[3449, -3399, -3311, -3354, -3403, 3450, 3451]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177986\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Tătăranu\"\n        }\n      }, {\n        \"arcs\": [[3452, -3088, -3084, -2997, -3432, 3453, 3454, 3455, 3456, 3457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14049\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Arefu\"\n        }\n      }, {\n        \"arcs\": [[3458, 3459, 3460, -3436, -3314, -3240, -3192, -3028, -3050, -3086, -3453, 3461, 3462]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17771\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Nucșoara\"\n        }\n      }, {\n        \"arcs\": [[3463, -3382, 3464, -3439, -3445, 3465, 3466]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51332\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Băuțar\"\n        }\n      }, {\n        \"arcs\": [[-3442, 3467, 3468, 3469]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51207\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Oțelu Roșu\"\n        }\n      }, {\n        \"arcs\": [[3470, -3449, 3471, 3472]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178901\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Popești\"\n        }\n      }, {\n        \"arcs\": [[3473, 3474, 3475, 3476, 3477]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91624\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Totești\"\n        }\n      }, {\n        \"arcs\": [[3478, -3390, -3359, 3479, 3480]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157004\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Foeni\"\n        }\n      }, {\n        \"arcs\": [[-3417, 3481, 3482, 3483]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76996\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Piscu\"\n        }\n      }, {\n        \"arcs\": [[-3469, 3484, 3485]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52936\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Glimboca\"\n        }\n      }, {\n        \"arcs\": [[3486, -3394, -3356, -3347, 3487, 3488]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45245\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Bisoca\"\n        }\n      }, {\n        \"arcs\": [[-3409, -3446, -3471, 3489, 3490]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176301\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Gugești\"\n        }\n      }, {\n        \"arcs\": [[3491, -3366, -3371, -3369, -3426, 3492, 3493, 3494]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159035\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Tormac\"\n        }\n      }, {\n        \"arcs\": [[-3485, -3468, -3441, -3262, -3323, 3495, 3496, 3497]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53372\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Obreja\"\n        }\n      }, {\n        \"arcs\": [[3498, 3499, -3412, -3339, -3364, -3492, 3500, 3501, 3502]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54537\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Vermeș\"\n        }\n      }, {\n        \"arcs\": [[3503, 3504, 3505, 3506, -3475, 3507, 3508]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91232\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Sântămăria-Orlea\"\n        }\n      }, {\n        \"arcs\": [[3509, -3477, 3510, -3383, -3464, 3511, 3512]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89348\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Densuș\"\n        }\n      }, {\n        \"arcs\": [[-3488, -3346, -3258, -3278, 3513, 3514, 3515]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47630\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Mînzălești\"\n        }\n      }, {\n        \"arcs\": [[3516, 3517, 3518, 3519]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76353\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Fundeni\"\n        }\n      }, {\n        \"arcs\": [[-3514, -3280, -3292, 3520, 3521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47186\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Lopătari\"\n        }\n      }, {\n        \"arcs\": [[-3395, -3487, 3522, 3523]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176551\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Jitia\"\n        }\n      }, {\n        \"arcs\": [[-3424, 3524, 3525, 3526, 3527]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157424\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Jebel\"\n        }\n      }, {\n        \"arcs\": [[3528, -3330, 3529, 3530, -3241, 3531, 3532, 3533, 3534]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75098\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Galați\"\n        }\n      }, {\n        \"arcs\": [[-3519, 3535, -3396, 3536, 3537]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176855\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Nănești\"\n        }\n      }, {\n        \"arcs\": [[3538, 3539, 3540, -3385, -3380, -3343, -3435, 3541, 3542, 3543]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40492\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Zărnești\"\n        }\n      }, {\n        \"arcs\": [[3544, 3545, 3546, -3318, -3340, 3547, 3548, 3549, 3550]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42183\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Vama Buzăului\"\n        }\n      }, {\n        \"arcs\": [[3551, 3552, 3553, 3554]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146021\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Boița\"\n        }\n      }, {\n        \"arcs\": [[3555, -3452, 3556, 3557, 3558]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178938\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Gologanu\"\n        }\n      }, {\n        \"arcs\": [[3559, 3560, 3561]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40900\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Cristian\"\n        }\n      }, {\n        \"arcs\": [[3562, 3563, 3564]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145382\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Rîu Sadului\"\n        }\n      }, {\n        \"arcs\": [[-3525, -3423, -3392, 3565, 3566, 3567]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156357\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Ciacova\"\n        }\n      }, {\n        \"arcs\": [[3568, 3569, -3501, -3495, 3570]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157923\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Nițchidorf\"\n        }\n      }, {\n        \"arcs\": [[3571, -3552, 3572, 3573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145934\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Turnu Roșu\"\n        }\n      }, {\n        \"arcs\": [[3574, 3575, -3539, 3576]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41621\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Poiana Mărului\"\n        }\n      }, {\n        \"arcs\": [[3577, -3513, 3578, 3579]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90725\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Răchitova\"\n        }\n      }, {\n        \"arcs\": [[3580, 3581, -3548, -3341, -3270, -3296, -3348, 3582]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40438\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Săcele\"\n        }\n      }, {\n        \"arcs\": [[-3566, -3391, -3479, 3583, 3584, 3585]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157317\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Giulvăz\"\n        }\n      }, {\n        \"arcs\": [[3586, -3540, -3576, 3587, 3588]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42398\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Vulcan\"\n        }\n      }, {\n        \"arcs\": [[-3523, -3489, -3516, 3589, 3590, 3591]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178475\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vintileasca\"\n        }\n      }, {\n        \"arcs\": [[3592, 3593, -3557, -3451, -3410, -3491, 3594, 3595, 3596]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177726\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Slobozia Ciorăști\"\n        }\n      }, {\n        \"arcs\": [[3597, -3549, -3582, 3598, 3599]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42003\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Tărlungeni\"\n        }\n      }, {\n        \"arcs\": [[3600, -3537, -3400, -3450, -3556, 3601, 3602, 3603]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178821\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vulturu\"\n        }\n      }, {\n        \"arcs\": [[3604, 3605, -3377, -3393, -3524, -3592, 3606]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175509\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Chiojdeni\"\n        }\n      }, {\n        \"arcs\": [[3607, -3550, -3598, 3608]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40688\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Budila\"\n        }\n      }, {\n        \"arcs\": [[3609, -3558, -3594, 3610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176748\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Milcovul\"\n        }\n      }, {\n        \"arcs\": [[3611, -3466, -3444, -3443, -3470, -3486, -3498, 3612, 3613]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53728\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Rusca Montană\"\n        }\n      }, {\n        \"arcs\": [[[3614, 3615, 3616, 3617, -3563]], [[3618, 3619, -3573, -3555, 3620, 3621, 3622, 3623, 3624, 3625]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"145827\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Tălmaciu\"\n        }\n      }, {\n        \"arcs\": [[-3597, 3626, 3627, 3628]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174824\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Golești\"\n        }\n      }, {\n        \"arcs\": [[-3493, -3425, -3528, 3629, 3630]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157497\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Liebling\"\n        }\n      }, {\n        \"arcs\": [[3631, -3574, -3620, 3632]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145355\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Racovița\"\n        }\n      }, {\n        \"arcs\": [[-3584, -3481, 3633, 3634]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159525\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Otelec\"\n        }\n      }, {\n        \"arcs\": [[3635, -3625, 3636]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145471\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Sadu\"\n        }\n      }, {\n        \"arcs\": [[-3588, -3575, 3637, 3638]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42472\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Holbav\"\n        }\n      }, {\n        \"arcs\": [[3639, 3640, 3641, 3642, 3643]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157031\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Gavojdia\"\n        }\n      }, {\n        \"arcs\": [[-3630, -3527, 3644, 3645, 3646, 3647]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159446\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Pădureni\"\n        }\n      }, {\n        \"arcs\": [[3648, 3649, -3579, -3512, -3467, -3612, 3650, 3651, 3652]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90119\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Lunca Cernii de Jos\"\n        }\n      }, {\n        \"arcs\": [[-3503, 3653, 3654, 3655]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156623\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Darova\"\n        }\n      }, {\n        \"arcs\": [[3656, -3509, 3657, 3658, 3659]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88644\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Bretea Română\"\n        }\n      }, {\n        \"arcs\": [[3660, -3562, 3661, 3662, 3663]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40214\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Ghimbav\"\n        }\n      }, {\n        \"arcs\": [[3664, 3665, -3640, 3666, 3667]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156534\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Criciova\"\n        }\n      }, {\n        \"arcs\": [[3668, 3669, 3670, 3671, 3672, 3673, 3674, 3675]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76969\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Pechea\"\n        }\n      }, {\n        \"arcs\": [[3676, -3551, -3608, 3677, 3678]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42058\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Teliu\"\n        }\n      }, {\n        \"arcs\": [[3679, 3680, 3681, 3682, 3683]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175732\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Cîrligele\"\n        }\n      }, {\n        \"arcs\": [[3684, -3613, -3497, 3685, 3686, -3665, 3687, 3688]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157898\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Nădrag\"\n        }\n      }, {\n        \"arcs\": [[3689, 3690, -3638, -3577, -3544, 3691]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42449\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Șinca Nouă\"\n        }\n      }, {\n        \"type\": null,\n        \"properties\": {\n          \"id\": \"40465\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Victoria\"\n        }\n      }, {\n        \"arcs\": [[-3682, 3692, 3693, 3694, 3695, 3696]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177263\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Poiana Cristei\"\n        }\n      }, {\n        \"arcs\": [[3697, -3654, -3502, -3570, 3698, 3699]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155403\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Buziaș\"\n        }\n      }, {\n        \"arcs\": [[3700, 3701, 3702, 3703]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41925\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Sînpetru\"\n        }\n      }, {\n        \"arcs\": [[3704, -3659, 3705, 3706, 3707, 3708]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86936\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Teliucu Inferior\"\n        }\n      }, {\n        \"arcs\": [[3709, 3710, -3649, 3711, 3712]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89026\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Bunila\"\n        }\n      }, {\n        \"arcs\": [[-3571, -3494, -3631, -3648, 3713, 3714, 3715]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158449\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Sacoșu Turcesc\"\n        }\n      }, {\n        \"arcs\": [[3716, 3717, -3545, -3677, 3718, 3719, 3720]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63580\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Întorsura Buzăului\"\n        }\n      }, {\n        \"arcs\": [[3721, -3590, -3515, -3522, 3722, 3723, 3724]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176944\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Nereju\"\n        }\n      }, {\n        \"arcs\": [[-3702, 3725, -3583, -3351, 3726, -3560, -3661, 3727, 3728]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40198\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Brașov\"\n        }\n      }, {\n        \"arcs\": [[3729, -3567, -3586, 3730, 3731]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158065\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Peciu Nou\"\n        }\n      }, {\n        \"arcs\": [[3732, -3717, 3733, 3734]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63633\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Barcani\"\n        }\n      }, {\n        \"arcs\": [[3735, -3646, 3736, 3737, 3738]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158779\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Șag\"\n        }\n      }, {\n        \"arcs\": [[3739, -3719, -3679, 3740, 3741, 3742]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64265\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Dobîrlău\"\n        }\n      }, {\n        \"arcs\": [[3743, -3628, 3744, -3680, 3745, 3746]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174780\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Cîmpineanca\"\n        }\n      }, {\n        \"arcs\": [[3747, -3455, 3748, 3749]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144535\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Cîrțișoara\"\n        }\n      }, {\n        \"arcs\": [[3750, -3460, 3751, 3752]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41346\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Lisa\"\n        }\n      }, {\n        \"arcs\": [[-3741, -3678, -3609, -3600, 3753, 3754, 3755]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41667\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Prejmer\"\n        }\n      }, {\n        \"arcs\": [[3756, -3675, 3757, 3758, 3759]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76558\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Grivița\"\n        }\n      }, {\n        \"arcs\": [[3760, -3611, -3593, -3629, -3744, 3761, 3762]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174744\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Focșani\"\n        }\n      }, {\n        \"arcs\": [[3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90342\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Orăștioara de Sus\"\n        }\n      }, {\n        \"arcs\": [[3771, 3772, 3773]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178929\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Biliești\"\n        }\n      }, {\n        \"arcs\": [[-3746, -3684, 3774, 3775, 3776]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178689\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vîrteșcoiu\"\n        }\n      }, {\n        \"arcs\": [[3777, -3663, 3778, -3589, -3639, -3691, 3779]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40241\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Codlea\"\n        }\n      }, {\n        \"arcs\": [[-3637, -3624, 3780, -3615, -3565, 3781, 3782, 3783]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143735\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Cisnădie\"\n        }\n      }, {\n        \"arcs\": [[3784, -3542, -3434, 3785, 3786]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41113\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Hârseni\"\n        }\n      }, {\n        \"arcs\": [[3787, -3699, -3569, -3716, 3788, 3789, 3790]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156311\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Chevereșu Mare\"\n        }\n      }, {\n        \"arcs\": [[3791, 3792, 3793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63553\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Comandău\"\n        }\n      }, {\n        \"arcs\": [[3794, 3795, 3796, -3655, -3698, 3797, 3798]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156106\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Boldur\"\n        }\n      }, {\n        \"arcs\": [[3799, -3725, 3800, 3801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178965\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Spulber\"\n        }\n      }, {\n        \"arcs\": [[3802, 3803, 3804, 3805]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145202\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Orlat\"\n        }\n      }, {\n        \"arcs\": [[3806, 3807, 3808, 3809, 3810, 3811, 3812]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63937\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Boroșneu Mare\"\n        }\n      }, {\n        \"arcs\": [[3813, -3714, -3647, -3736, 3814]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155314\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Giroc\"\n        }\n      }, {\n        \"arcs\": [[3815, -3696, 3816, -3607, -3591, -3722, -3800, 3817, 3818]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175126\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Andreiașu de Jos\"\n        }\n      }, {\n        \"arcs\": [[-3752, -3459, 3819, 3820]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42464\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Sambata de Sus\"\n        }\n      }, {\n        \"arcs\": [[3821, -3731, -3585, -3635, 3822, 3823, 3824, 3825]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159142\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Uivar\"\n        }\n      }, {\n        \"arcs\": [[3826, -3786, -3437, -3461, -3751, 3827, 3828]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41738\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Recea\"\n        }\n      }, {\n        \"arcs\": [[3829, -3667, -3644, 3830, -3796, 3831, 3832]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155350\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Lugoj\"\n        }\n      }, {\n        \"arcs\": [[3833, -3820, -3463, 3834]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42480\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Drăguș\"\n        }\n      }, {\n        \"arcs\": [[3835, 3836, 3837, 3838]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76282\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Foltești\"\n        }\n      }, {\n        \"arcs\": [[3839, -3742, -3756, 3840, 3841]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64238\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Chichiș\"\n        }\n      }, {\n        \"arcs\": [[3842, 3843, -3798, -3700, -3788, 3844]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158243\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Racovița\"\n        }\n      }, {\n        \"arcs\": [[3845, -3430, 3846, -3633, -3619, 3847, 3848, 3849]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144054\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Avrig\"\n        }\n      }, {\n        \"arcs\": [[-3738, 3850, -3732, -3822, 3851, 3852]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158699\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Sînmihaiu Român\"\n        }\n      }, {\n        \"arcs\": [[3853, -3688, -3668, -3830, 3854]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155957\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Bîrna\"\n        }\n      }, {\n        \"arcs\": [[3855, 3856, 3857, -3762, -3747, -3777, 3858, 3859]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175019\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Odobești\"\n        }\n      }, {\n        \"arcs\": [[-3723, -3521, -3291, -3250, -3215, -3295, 3860, 3861, -3792, 3862, 3863]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"47079\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Gura Teghii\"\n        }\n      }, {\n        \"arcs\": [[-3703, -3729, 3864, 3865, 3866]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40606\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Bod\"\n        }\n      }, {\n        \"arcs\": [[-3749, -3454, -3433, -3431, -3846, 3867, 3868]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145293\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Porumbacu de Jos\"\n        }\n      }, {\n        \"arcs\": [[3869, -3769, 3870, -3660, -3705, 3871, 3872]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87424\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Călan\"\n        }\n      }, {\n        \"arcs\": [[3873, -3692, -3543, -3785, 3874, 3875, 3876]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41854\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Șinca\"\n        }\n      }, {\n        \"arcs\": [[[3877, 3878, 3879, 3880, 3881]], [[3882, 3883, 3884]], [[3885, 3886, 3887, -3806, 3888, 3889]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"143487\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Cristian\"\n        }\n      }, {\n        \"arcs\": [[3890, 3891, -3818, -3802, 3892]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177101\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Paltin\"\n        }\n      }, {\n        \"arcs\": [[3893, 3894, -3793, -3862, 3895, 3896, -3735, -3809]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65011\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Zagon\"\n        }\n      }, {\n        \"arcs\": [[[3897, 3898, 3899]], [[3900, 3901, 3902]], [[3903, 3904, 3905]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"145907\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Tilișca\"\n        }\n      }, {\n        \"arcs\": [[3906, -3689, -3854, 3907, 3908, 3909]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156927\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Fîrdea\"\n        }\n      }, {\n        \"arcs\": [[3910, -3789, -3715, -3814, 3911, 3912]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157834\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Moșnița Nouă\"\n        }\n      }, {\n        \"arcs\": [[-3859, -3776, 3913, 3914, 3915]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175466\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Broșteni\"\n        }\n      }, {\n        \"arcs\": [[3916, -3457, 3917, 3918]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42101\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Ucea\"\n        }\n      }, {\n        \"arcs\": [[3919, 3920, -3832, -3795, 3921, 3922]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156473\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Coșteiu\"\n        }\n      }, {\n        \"arcs\": [[3923, -3918, -3456, -3748, 3924, 3925]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143959\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Arpașu de Jos\"\n        }\n      }, {\n        \"arcs\": [[-3790, -3911, 3926, 3927, 3928]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159516\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Bucovăț\"\n        }\n      }, {\n        \"arcs\": [[-3925, -3750, -3869, 3929, 3930]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144508\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Cîrța\"\n        }\n      }, {\n        \"arcs\": [[3931, -3905, 3932, -3903, 3933, 3934]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145275\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Poiana Sibiului\"\n        }\n      }, {\n        \"arcs\": [[3935, -3835, -3462, -3458, -3917, 3936, 3937]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42236\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Viștea\"\n        }\n      }, {\n        \"arcs\": [[3938, 3939, -3780, -3690, -3874, 3940]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40928\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Dumbrăvița\"\n        }\n      }, {\n        \"arcs\": [[-3860, -3916, 3941]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176506\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Jariștea\"\n        }\n      }, {\n        \"arcs\": [[3942, 3943, -3770, -3870, 3944, 3945]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90262\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Mărtinești\"\n        }\n      }, {\n        \"arcs\": [[3946, -3825, 3947, 3948]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156277\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Cenei\"\n        }\n      }, {\n        \"arcs\": [[3949, -3651, -3614, -3685, -3907, 3950, 3951]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158895\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Tomești\"\n        }\n      }, {\n        \"arcs\": [[3952, 3953, -3893, -3801, -3724, -3864, 3954, 3955, 3956]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177003\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Nistorești\"\n        }\n      }, {\n        \"arcs\": [[-3743, -3840, 3957, 3958]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64639\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Ozun\"\n        }\n      }, {\n        \"arcs\": [[3959, -3948, -3824, 3960, 3961]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159375\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Checea\"\n        }\n      }, {\n        \"arcs\": [[3962, -3890, 3963, 3964]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145792\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Șura Mică\"\n        }\n      }, {\n        \"arcs\": [[3965, -3811, 3966, -3720, -3740, -3959, 3967, 3968]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64773\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Reci\"\n        }\n      }, {\n        \"arcs\": [[3969, 3970, -3908, -3855, -3833, -3921, 3971]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159071\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Traian Vuia\"\n        }\n      }, {\n        \"arcs\": [[3972, -3891, -3954, 3973, 3974]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176891\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Năruja\"\n        }\n      }, {\n        \"arcs\": [[-3828, -3753, -3821, -3834, -3936, 3975, 3976]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42307\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Voila\"\n        }\n      }, {\n        \"arcs\": [[3977, 3978, -3894, -3808]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64005\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Brateș\"\n        }\n      }, {\n        \"arcs\": [[-3955, -3863, -3794, -3895, -3979, 3979]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63526\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Covasna\"\n        }\n      }, {\n        \"arcs\": [[3980, -3839, 3981, 3982, 3983]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76718\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Măstăcani\"\n        }\n      }, {\n        \"arcs\": [[3984, 3985, 3986, 3987, 3988]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88216\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Bătrîna\"\n        }\n      }, {\n        \"arcs\": [[-3914, -3775, -3683, -3697, -3816, 3989, 3990, 3991]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176686\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Mera\"\n        }\n      }, {\n        \"arcs\": [[3992, -3922, -3799, -3844, 3993, 3994]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155797\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Belinț\"\n        }\n      }, {\n        \"arcs\": [[3995, -3927, -3913, 3996, 3997, 3998]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155289\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Ghiroda\"\n        }\n      }, {\n        \"arcs\": [[3999, -3875, -3787, -3827, 4000, 4001, 4002]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41417\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Mândra\"\n        }\n      }, {\n        \"arcs\": [[4003, -3998, 4004, 4005]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155261\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Dumbrăvița\"\n        }\n      }, {\n        \"arcs\": [[4006, -3987, 4007, -3652, -3950, 4008, 4009]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158136\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Pietroasa\"\n        }\n      }, {\n        \"arcs\": [[-4002, 4010, 4011]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40278\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Făgăraș\"\n        }\n      }, {\n        \"arcs\": [[4012, 4013, -3852, -3826, -3947, 4014, 4015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158564\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Săcălaz\"\n        }\n      }, {\n        \"arcs\": [[-3734, -3721, -3967, -3810]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65099\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Valea Mare\"\n        }\n      }, {\n        \"arcs\": [[4016, 4017, -3704, -3867, 4018, 4019, 4020, 4021]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64942\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Vîlcele\"\n        }\n      }, {\n        \"arcs\": [[4022, -3946, 4023, 4024, 4025, 4026]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91688\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Turdaș\"\n        }\n      }, {\n        \"arcs\": [[4027, 4028, -3876, -4000, 4029, 4030]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41818\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Șercaia\"\n        }\n      }, {\n        \"arcs\": [[[-3617, 4031, 4032, 4033, -3898, 4034, 4035]], [[-3964, -3889, -3805, 4036, -3901, -3933, -3904, 4037, 4038, 4039]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"145499\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Săliște\"\n        }\n      }, {\n        \"arcs\": [[4040, -4005, -3997, -3912, -3815, -3739, -3853, -4014, 4041]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155243\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Timișoara\"\n        }\n      }, {\n        \"arcs\": [[4042, 4043, -3994, -3843, 4044]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158966\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Topolovățu Mare\"\n        }\n      }, {\n        \"arcs\": [[4045, -3941, -3877, -4029, 4046]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41578\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Părău\"\n        }\n      }, {\n        \"arcs\": [[-4020, 4047, 4048, 4049]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64390\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Hăghig\"\n        }\n      }, {\n        \"arcs\": [[4050, 4051, -3943, -4023, 4052]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87638\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Orăștie\"\n        }\n      }, {\n        \"arcs\": [[4053, -3968, -3958, -3842, 4054, -4022, 4055]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63394\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Sfîntu Gheorghe\"\n        }\n      }, {\n        \"arcs\": [[-3909, -3971, 4056, 4057]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156767\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Dumbrava\"\n        }\n      }, {\n        \"arcs\": [[4058, 4059, 4060]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86749\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Cârjiți\"\n        }\n      }, {\n        \"arcs\": [[4061, -3849, 4062, 4063, 4064, 4065]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145408\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Roșia\"\n        }\n      }, {\n        \"arcs\": [[4066, -3935, 4067, 4068, 4069, 4070]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4482\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Gîrbova\"\n        }\n      }, {\n        \"arcs\": [[4071, -4009, -3952, 4072, 4073, 4074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156589\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Curtea\"\n        }\n      }, {\n        \"arcs\": [[4075, -3931, 4076, 4077]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144893\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Marpod\"\n        }\n      }, {\n        \"arcs\": [[4078, -3923, -3993, 4079, 4080]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155546\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Balinț\"\n        }\n      }, {\n        \"arcs\": [[4081, 4082, -3856, -3942, -3915, -3992, 4083]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175368\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Bolotești\"\n        }\n      }, {\n        \"arcs\": [[4084, -4069, 4085, 4086, 4087, 4088]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7099\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Săsciori\"\n        }\n      }, {\n        \"arcs\": [[4089, 4090, -3974, -3953, 4091, 4092]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178750\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vrîncioaia\"\n        }\n      }, {\n        \"arcs\": [[4093, -4015, -3949, -3960, 4094, 4095, 4096]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156213\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Cărpiniș\"\n        }\n      }, {\n        \"arcs\": [[4097, -4095, -3962, 4098, 4099, 4100]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155494\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Jimbolia\"\n        }\n      }, {\n        \"arcs\": [[4101, -3984, 4102, 4103, 4104]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77536\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Vlădești\"\n        }\n      }, {\n        \"arcs\": [[-3812, -3966, 4105, 4106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64568\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Moacșa\"\n        }\n      }, {\n        \"arcs\": [[4107, 4108, 4109, -3965, -4040, 4110, 4111, 4112]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143851\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Ocna Sibiului\"\n        }\n      }, {\n        \"arcs\": [[-4049, 4113, 4114, 4115, 4116, 4117, 4118]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41382\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Măieruș\"\n        }\n      }, {\n        \"arcs\": [[4119, -4038, -3906, -3932, -4067, 4120, 4121]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144928\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Miercurea Sibiului\"\n        }\n      }, {\n        \"arcs\": [[4122, -3975, -4091, 4123, 4124]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178313\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Valea Sării\"\n        }\n      }, {\n        \"arcs\": [[4125, -3972, -3920, -4079, 4126, 4127]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155840\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Bethausen\"\n        }\n      }, {\n        \"arcs\": [[-4070, -4085, 4128, 4129, 4130]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4106\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Câlnic\"\n        }\n      }, {\n        \"arcs\": [[4131, 4132, 4133, -3956, -3980, -3978, -3807, 4134, 4135]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65048\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Zăbala\"\n        }\n      }, {\n        \"arcs\": [[4136, -4065, 4137, -4109, 4138]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145765\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Șura Mare\"\n        }\n      }, {\n        \"arcs\": [[4139, 4140, -4080, -3995, -4044, 4141]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157193\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Ghizela\"\n        }\n      }, {\n        \"arcs\": [[4142, -3928, -3996, 4143, 4144]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158396\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Remetea Mare\"\n        }\n      }, {\n        \"arcs\": [[4145, -4056, 4146, 4147, 4148]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65113\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Arcuș\"\n        }\n      }, {\n        \"arcs\": [[4149, 4150, 4151, -4082, 4152, 4153]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178180\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Țifești\"\n        }\n      }, {\n        \"arcs\": [[-4077, -3930, -3868, -3850, -4062, 4154, 4155, 4156]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145140\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Nocrich\"\n        }\n      }, {\n        \"arcs\": [[-4144, -3999, -4004, 4157, 4158]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157246\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Giarmata\"\n        }\n      }, {\n        \"arcs\": [[4159, 4160, 4161, -4061, 4162, 4163, -3985, 4164, 4165]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91982\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Vețel\"\n        }\n      }, {\n        \"arcs\": [[4166, -4057, -3970, -4126, 4167]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157736\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Mănăștiur\"\n        }\n      }, {\n        \"arcs\": [[-4016, -4094, 4168, 4169, 4170]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155760\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Becicherecu Mic\"\n        }\n      }, {\n        \"arcs\": [[4171, -4042, -4013, -4171, 4172]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159384\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Dudeștii Noi\"\n        }\n      }, {\n        \"arcs\": [[4173, -4155, -4066, -4137, 4174, 4175]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145998\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Vurpăr\"\n        }\n      }, {\n        \"arcs\": [[-4147, -4021, -4050, -4119, 4176, 4177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63866\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Belin\"\n        }\n      }, {\n        \"arcs\": [[4178, -4116, 4179, -4047, -4028, 4180, 4181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40857\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Comana\"\n        }\n      }, {\n        \"arcs\": [[4182, -4092, -3957, -4134, 4183]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178910\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Păulești\"\n        }\n      }, {\n        \"arcs\": [[4184, -4124, -4090, 4185, 4186]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175224\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Bârsești\"\n        }\n      }, {\n        \"arcs\": [[-4096, -4098, 4187, 4188, 4189]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159428\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Iecea Mare\"\n        }\n      }, {\n        \"arcs\": [[4190, -3988, -4007, 4191, -4075, 4192, 4193]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89954\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Lăpugiu de Jos\"\n        }\n      }, {\n        \"arcs\": [[4194, -4111, -4039, -4120, 4195]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143922\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Apoldu de Jos\"\n        }\n      }, {\n        \"arcs\": [[4196, 4197, 4198, 4199, 4200]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77475\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Valea Mărului\"\n        }\n      }, {\n        \"arcs\": [[4201, 4202, 4203, 4204, -3926, -4076, 4205, 4206]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144456\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Chirpăr\"\n        }\n      }, {\n        \"arcs\": [[4207, -4112, -4195, 4208, 4209]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144866\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Ludoș\"\n        }\n      }, {\n        \"arcs\": [[4210, 4211, 4212, 4213, 4214]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7044\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Săliștea\"\n        }\n      }, {\n        \"arcs\": [[4215, -4073, -3951, -3910, -4058, -4167, 4216, 4217]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156801\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Făget\"\n        }\n      }, {\n        \"arcs\": [[4218, -4088, 4219, 4220, -4211, 4221]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6217\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Pianu\"\n        }\n      }, {\n        \"arcs\": [[4222, -4181, -4031, 4223, 4224]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42076\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Ticușu\"\n        }\n      }, {\n        \"arcs\": [[4225, -4045, -3845, -3791, -3929, -4143, 4226, 4227]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158314\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Recaș\"\n        }\n      }, {\n        \"arcs\": [[4228, -4130, 4229, 4230]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9019\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cut\"\n        }\n      }, {\n        \"arcs\": [[4231, -4213, 4232, 4233, 4234]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7810\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Șibot\"\n        }\n      }, {\n        \"arcs\": [[4235, -4132, 4236, 4237, 4238]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64318\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Ghelința\"\n        }\n      }, {\n        \"arcs\": [[-4169, -4097, -4190, 4239, 4240]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155911\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Biled\"\n        }\n      }, {\n        \"arcs\": [[4241, -4106, -3969, -4054, -4146, 4242, 4243, 4244]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64345\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Ghidfalău\"\n        }\n      }, {\n        \"arcs\": [[4245, -4177, -4118, 4246, 4247, 4248]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40526\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Apața\"\n        }\n      }, {\n        \"arcs\": [[-4237, -4136, 4249, 4250, 4251]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64130\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Catalina\"\n        }\n      }, {\n        \"arcs\": [[-4250, -4135, -3813, -4107, -4242, 4252]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65147\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Dalnic\"\n        }\n      }, {\n        \"arcs\": [[4253, -4153, -4084, -3991, 4254, -4125, -4185, 4255, 4256]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178377\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vidra\"\n        }\n      }, {\n        \"arcs\": [[4257, 4258, 4259, 4260, 4261, 4262, 4263]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75258\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Munteni\"\n        }\n      }, {\n        \"arcs\": [[-4186, -4093, -4183, 4264, 4265, 4266]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178885\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Negrilești\"\n        }\n      }, {\n        \"arcs\": [[-4175, -4139, -4108, 4267, 4268]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145603\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Slimnic\"\n        }\n      }, {\n        \"arcs\": [[4269, -4206, -4078, -4157, 4270]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143888\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Alțina\"\n        }\n      }, {\n        \"arcs\": [[-4127, -4081, -4141, 4271, 4272, 4273]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155662\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Bara\"\n        }\n      }, {\n        \"arcs\": [[[-4010, -4072, -4192]], [[4274, 4275, -4193, -4074, -4216, 4276, 4277]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"157585\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Margina\"\n        }\n      }, {\n        \"arcs\": [[4278, -4158, -4006, -4041, -4172, 4279, 4280]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158653\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Sînandrei\"\n        }\n      }, {\n        \"arcs\": [[4281, -4243, -4149, 4282, 4283, 4284]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64906\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Valea Crișului\"\n        }\n      }, {\n        \"arcs\": [[-4268, -4113, -4208, 4285, 4286, 4287]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144795\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Loamneș\"\n        }\n      }, {\n        \"arcs\": [[4288, 4289, -4227, -4145, -4159, -4279, 4290]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158181\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Pișchia\"\n        }\n      }, {\n        \"arcs\": [[-4272, -4140, 4291, 4292, 4293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158608\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Secaș\"\n        }\n      }, {\n        \"arcs\": [[-4209, -4196, -4122, 4294, 4295, 4296]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4268\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Doștat\"\n        }\n      }, {\n        \"arcs\": [[4297, -4283, -4148, -4178, -4246, 4298, 4299]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63777\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Aita Mare\"\n        }\n      }, {\n        \"arcs\": [[4300, -4256, -4187, -4267, 4301, 4302]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178545\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vizantea-Livezi\"\n        }\n      }, {\n        \"arcs\": [[4303, -4239, 4304, 4305]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64602\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Ojdula\"\n        }\n      }, {\n        \"arcs\": [[4306, -4247, -4117, -4179, 4307, 4308]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41177\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Hoghiz\"\n        }\n      }, {\n        \"arcs\": [[4309, -4188, -4101, 4310, 4311, 4312, 4313]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157451\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Lenauheim\"\n        }\n      }, {\n        \"arcs\": [[4314, -4203, 4315, 4316]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144964\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Merghindeal\"\n        }\n      }, {\n        \"arcs\": [[-4311, -4100, 4317, 4318, 4319]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156437\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Comloșu Mare\"\n        }\n      }, {\n        \"arcs\": [[4320, -4166, 4321, 4322, 4323]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89856\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Ilia\"\n        }\n      }, {\n        \"arcs\": [[4324, -4230, -4129, -4089, -4219, 4325, 4326]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1874\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Sebeș\"\n        }\n      }, {\n        \"arcs\": [[4327, -4217, -4168, -4128, -4274, 4328, 4329]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157969\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Ohaba Lungă\"\n        }\n      }, {\n        \"arcs\": [[4330, 4331, -4308, -4182, -4223, 4332, 4333, 4334]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42156\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Ungra\"\n        }\n      }, {\n        \"arcs\": [[4335, -4244, -4282, 4336]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63893\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Bodoc\"\n        }\n      }, {\n        \"arcs\": [[-4292, -4142, -4043, -4226, 4337, 4338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156151\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Brestovăț\"\n        }\n      }, {\n        \"arcs\": [[-4262, 4339, 4340, 4341, 4342]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77377\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Țepu\"\n        }\n      }, {\n        \"arcs\": [[-4299, -4249, 4343, 4344, 4345]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41541\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Ormeniș\"\n        }\n      }, {\n        \"arcs\": [[4346, 4347, 4348, 4349, 4350]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89240\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Certeju de Sus\"\n        }\n      }, {\n        \"arcs\": [[4351, -4240, -4189, -4310, 4352, 4353]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159464\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Șandra\"\n        }\n      }, {\n        \"arcs\": [[4354, -4271, -4156, -4174, 4355, 4356, 4357, 4358]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145042\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Mihăileni\"\n        }\n      }, {\n        \"arcs\": [[4359, -4251, -4253, -4245, -4336, 4360, 4361, 4362]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64194\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Cernat\"\n        }\n      }, {\n        \"arcs\": [[4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77509\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Vîrlezi\"\n        }\n      }, {\n        \"arcs\": [[4371, -4231, -4325, 4372, 4373, 4374]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4240\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Daia Română\"\n        }\n      }, {\n        \"arcs\": [[4375, 4376, -4194, -4276, 4377]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89080\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Burjuc\"\n        }\n      }, {\n        \"arcs\": [[4378, -4277, -4218, -4328, 4379, 4380]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10006\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Birchiș\"\n        }\n      }, {\n        \"arcs\": [[4381, -4154, -4254, 4382, 4383]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177799\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Străoane\"\n        }\n      }, {\n        \"arcs\": [[4384, -4305, -4238, -4252, -4360, 4385, 4386, 4387, 4388, 4389]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63740\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Târgu Secuiesc\"\n        }\n      }, {\n        \"arcs\": [[4390, 4391, -4338, -4228, -4290, 4392, 4393, 4394]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156035\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Bogda\"\n        }\n      }, {\n        \"arcs\": [[4395, -4265, -4184, -4133, -4236, -4304, 4396, 4397]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178117\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Tulnici\"\n        }\n      }, {\n        \"arcs\": [[-4312, -4320, 4398, 4399, 4400]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159419\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Gottlob\"\n        }\n      }, {\n        \"arcs\": [[4401, -4356, -4176, -4269, -4288, 4402]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145667\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Șeica Mare\"\n        }\n      }, {\n        \"arcs\": [[4403, -4361, -4337, -4285, 4404]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64504\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Malnaș\"\n        }\n      }, {\n        \"arcs\": [[4405, -4333, -4225, 4406, 4407, 4408]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41284\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Jibert\"\n        }\n      }, {\n        \"arcs\": [[4409, -4280, -4173, -4170, -4241, -4352, 4410, 4411]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158528\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Satchinez\"\n        }\n      }, {\n        \"arcs\": [[4412, -4235, 4413, 4414]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3841\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ceru-Băcăinți\"\n        }\n      }, {\n        \"arcs\": [[4415, -4295, -4121, -4071, -4131, -4229, -4372, 4416, 4417]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7945\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Șpring\"\n        }\n      }, {\n        \"arcs\": [[-4393, -4289, 4418, 4419, 4420]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159393\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Fibiș\"\n        }\n      }, {\n        \"arcs\": [[4421, -4316, -4202, 4422, 4423, 4424]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143682\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Agnita\"\n        }\n      }, {\n        \"arcs\": [[4425, -4214, -4232, -4413, 4426, 4427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3397\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Blandiana\"\n        }\n      }, {\n        \"arcs\": [[4428, 4429, -4160, -4321, 4430, 4431]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88546\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Brănișca\"\n        }\n      }, {\n        \"arcs\": [[-4423, -4207, -4270, -4355, 4432, 4433]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144232\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Bîrghiș\"\n        }\n      }, {\n        \"arcs\": [[-4326, -4222, -4215, -4426, 4434, 4435]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8826\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Vințu de Jos\"\n        }\n      }, {\n        \"arcs\": [[4436, -4419, -4291, -4281, -4410, 4437]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158010\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Orțișoara\"\n        }\n      }, {\n        \"arcs\": [[4438, 4439, -4399, -4319, 4440, 4441, 4442]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158859\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Teremia Mare\"\n        }\n      }, {\n        \"arcs\": [[4443, -4313, -4401, 4444, 4445, 4446]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157530\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Lovrin\"\n        }\n      }, {\n        \"arcs\": [[4447, -4362, -4404, 4448, 4449]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65139\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Micfalău\"\n        }\n      }, {\n        \"arcs\": [[4450, -4383, -4257, -4301, 4451, 4452]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177405\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Răcoasa\"\n        }\n      }, {\n        \"arcs\": [[-4302, -4266, -4396, 4453, 4454]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177762\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Soveja\"\n        }\n      }, {\n        \"arcs\": [[4455, -4380, -4330, 4456, 4457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9887\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Bata\"\n        }\n      }, {\n        \"arcs\": [[4458, 4459, 4460, -4317, -4422, 4461, 4462]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144651\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Iacobeni\"\n        }\n      }, {\n        \"arcs\": [[4463, 4464, -4353, -4314, -4444, 4465]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159507\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Pesac\"\n        }\n      }, {\n        \"arcs\": [[4466, 4467, 4468, 4469, 4470, 4471]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177352\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Pufești\"\n        }\n      }, {\n        \"arcs\": [[-4445, -4400, -4440, 4472, 4473]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159473\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Tomnatic\"\n        }\n      }, {\n        \"arcs\": [[-4470, 4474, 4475, 4476, 4477]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177236\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Păunești\"\n        }\n      }, {\n        \"arcs\": [[4478, -4476, 4479, 4480, -4384, -4451, 4481]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176150\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Fitionești\"\n        }\n      }, {\n        \"arcs\": [[4482, -4293, -4339, -4392, 4483]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12402\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șiștarovăț\"\n        }\n      }, {\n        \"arcs\": [[4484, 4485, -4429, 4486, 4487]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91937\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Vălișoara\"\n        }\n      }, {\n        \"arcs\": [[4488, 4489, -4296, -4416, 4490, 4491]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6930\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Roșia de Secaș\"\n        }\n      }, {\n        \"arcs\": [[-4323, 4492, -4376, 4493, 4494]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89687\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Gurasada\"\n        }\n      }, {\n        \"arcs\": [[4495, 4496, 4497, 4498, 4499, 4500]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3761\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cenade\"\n        }\n      }, {\n        \"arcs\": [[-4403, -4287, 4501, -4497, 4502, 4503]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145738\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Șeica Mică\"\n        }\n      }, {\n        \"arcs\": [[4504, -4452, -4303, -4455, 4505]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175670\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Cîmpuri\"\n        }\n      }, {\n        \"arcs\": [[4506, 4507, -4358, 4508, 4509]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145961\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Valea Viilor\"\n        }\n      }, {\n        \"arcs\": [[4511, -4334, -4406, 4512, 4513]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40394\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Rupea\"\n        }\n      }, {\n        \"arcs\": [[4514, -4411, -4354, -4465, 4515, 4516]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159213\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Variaș\"\n        }\n      }, {\n        \"arcs\": [[4517, -4350, 4518, -4485, 4519, 4520, 4521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88092\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Băița\"\n        }\n      }, {\n        \"arcs\": [[4522, -4374, 4523, 4524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1071\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ciugud\"\n        }\n      }, {\n        \"arcs\": [[4525, -4397, -4306, -4385, 4526, 4527]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64096\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Brețcu\"\n        }\n      }, {\n        \"arcs\": [[4528, 4529, 4530, 4531]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167311\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Pochidia\"\n        }\n      }, {\n        \"arcs\": [[4532, 4533, 4534, -4263, -4343, 4535, 4536]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76497\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Gohor\"\n        }\n      }, {\n        \"arcs\": [[-4394, -4421, 4537, 4538, 4539]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157683\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Mașloc\"\n        }\n      }, {\n        \"arcs\": [[4540, -4509, -4357, -4402, -4504, 4541]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144116\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Axente Sever\"\n        }\n      }, {\n        \"arcs\": [[-4499, 4542, -4489, 4543]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3805\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cergău\"\n        }\n      }, {\n        \"arcs\": [[4544, 4545, 4546, -4433, -4359, -4508, 4547]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145104\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Moșna\"\n        }\n      }, {\n        \"arcs\": [[4548, -4417, -4375, -4523, 4549, 4550]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"2988\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Berghin\"\n        }\n      }, {\n        \"arcs\": [[4551, 4552, 4553, -4309, -4332, -4511, -4335, -4512, 4554, 4555, 4556]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41248\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Homorod\"\n        }\n      }, {\n        \"arcs\": [[4557, 4558, 4559, 4560, 4561, 4562, 4563]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178894\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Ploscuțeni\"\n        }\n      }, {\n        \"arcs\": [[4564, -4491, -4418, -4549, 4565, 4566]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6164\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ohaba\"\n        }\n      }, {\n        \"arcs\": [[-4442, 4567, 4568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159482\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Vălcani\"\n        }\n      }, {\n        \"arcs\": [[4569, 4570, -4457, -4329, -4273, -4294, -4483, 4571]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10765\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Ususău\"\n        }\n      }, {\n        \"arcs\": [[4572, 4573, -4431, -4324, -4495, 4574, 4575]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92097\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Vorța\"\n        }\n      }, {\n        \"arcs\": [[-4487, -4432, -4574, 4576, 4577]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90208\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Luncoiu de Jos\"\n        }\n      }, {\n        \"arcs\": [[4578, -4386, -4363, -4448, 4579, 4580, 4581]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64871\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Turia\"\n        }\n      }, {\n        \"arcs\": [[4582, 4583, -4510, -4541, 4584, 4585]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143771\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Copșa Mică\"\n        }\n      }, {\n        \"arcs\": [[4586, 4587, 4588, -4580, -4450, 4589, 4590]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65121\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Bixad\"\n        }\n      }, {\n        \"arcs\": [[4591, -4585, -4542, -4503, -4496, 4592, 4593]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144991\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Micăsasa\"\n        }\n      }, {\n        \"arcs\": [[-4471, -4478, 4594, 4595, 4596]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177557\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Ruginești\"\n        }\n      }, {\n        \"arcs\": [[4597, 4598, 4599, 4600, 4601]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75864\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Cavadinești\"\n        }\n      }, {\n        \"arcs\": [[4602, -4537, 4603, -4558, 4604, 4605]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177879\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Tănăsoaia\"\n        }\n      }, {\n        \"arcs\": [[4606, 4607, -4516, -4464, 4608, 4609]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158109\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Periam\"\n        }\n      }, {\n        \"arcs\": [[4610, 4611, -4438, -4412, -4515, 4612, 4613, 4614]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12643\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Vinga\"\n        }\n      }, {\n        \"arcs\": [[-4587, 4615]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83428\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Băile Tușnad\"\n        }\n      }, {\n        \"arcs\": [[4616, 4617, -4538, -4420, -4437, -4612, 4618]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12144\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șagu\"\n        }\n      }, {\n        \"arcs\": [[4619, -4387, -4579, 4620]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64826\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Sînzieni\"\n        }\n      }, {\n        \"arcs\": [[4621, 4622, -4533, -4603, 4623, 4624]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77028\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Priponești\"\n        }\n      }, {\n        \"arcs\": [[-4575, -4494, -4378, -4275, 4625, 4626, 4627]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92177\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Zam\"\n        }\n      }, {\n        \"arcs\": [[4628, -4395, -4540, 4629, 4630]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12778\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Zăbrani\"\n        }\n      }, {\n        \"arcs\": [[-4593, -4501, 4631, 4632, 4633, 4634, 4635]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8354\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Valea Lungă\"\n        }\n      }, {\n        \"arcs\": [[4636, -4583, 4637]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143646\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Tîrnava\"\n        }\n      }, {\n        \"arcs\": [[4638, -4381, -4456, 4639]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12572\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Vărădia de Mureș\"\n        }\n      }, {\n        \"arcs\": [[-4630, -4539, -4618, 4640, 4641]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12920\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Frumușeni\"\n        }\n      }, {\n        \"arcs\": [[4642, -4550, -4525, 4643, 4644, 4645]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7384\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Sîntimbru\"\n        }\n      }, {\n        \"arcs\": [[4646, -4522, 4647, 4648]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88868\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Bucureșci\"\n        }\n      }, {\n        \"arcs\": [[4649, -4555, -4514, 4650, 4651, 4652, 4653]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40768\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Cața\"\n        }\n      }, {\n        \"arcs\": [[4654, 4655, 4656, -4506, -4454, -4398, -4526, 4657, 4658, 4659]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23449\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Mănăstirea Cașin\"\n        }\n      }, {\n        \"arcs\": [[4660, 4661, -4596, 4662]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26029\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Urechești\"\n        }\n      }, {\n        \"arcs\": [[4663, -4527, -4390, 4664, 4665, 4666]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64461\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Lemnia\"\n        }\n      }, {\n        \"arcs\": [[4667, -4567, 4668, 4669]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4188\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Crăciunelu de Jos\"\n        }\n      }, {\n        \"arcs\": [[-4545, 4670, 4671, 4672, 4673]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144349\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Brateiu\"\n        }\n      }, {\n        \"arcs\": [[4674, -4626, -4278, -4379, -4639, 4675, 4676]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11842\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Săvîrșin\"\n        }\n      }, {\n        \"arcs\": [[4677, -4562, 4678, -4472, -4597, -4662, 4679, 4680]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174860\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Adjud\"\n        }\n      }, {\n        \"arcs\": [[-4641, -4617, 4681, 4682]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9280\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Fântânele\"\n        }\n      }, {\n        \"arcs\": [[4683, 4684, -4557, 4685]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85243\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Ocland\"\n        }\n      }, {\n        \"arcs\": [[4686, -4671, -4548, -4507, -4584, -4637, 4687, 4688]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143619\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Mediaș\"\n        }\n      }, {\n        \"arcs\": [[4689, 4690, -4435, -4428, 4691, 4692]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5577\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Meteș\"\n        }\n      }, {\n        \"arcs\": [[4693, 4694, -4546, -4674, 4695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143995\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Ațel\"\n        }\n      }, {\n        \"arcs\": [[4696, 4697, 4698, -4532, 4699, -4622, 4700, 4701]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166529\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Tutova\"\n        }\n      }, {\n        \"arcs\": [[4702, -4388, -4620, 4703, 4704]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64719\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Poian\"\n        }\n      }, {\n        \"arcs\": [[4705, 4706, -4563, -4678, 4707]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176445\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Homocea\"\n        }\n      }, {\n        \"arcs\": [[4708, -4669, -4566, -4551, -4643, 4709]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5700\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Mihalț\"\n        }\n      }, {\n        \"arcs\": [[4710, 4711, -4552, -4685, 4712]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64997\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Vîrghiș\"\n        }\n      }, {\n        \"arcs\": [[4713, -4590, -4449, -4405, -4284, -4298, 4714, 4715, 4716]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63802\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Bățani\"\n        }\n      }, {\n        \"arcs\": [[-4601, 4717, 4718, 4719]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162559\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Blăgești\"\n        }\n      }, {\n        \"arcs\": [[4720, -4613, -4517, -4608, 4721, 4722]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11940\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Secusigiu\"\n        }\n      }, {\n        \"arcs\": [[4723, -4473, -4439, 4724, 4725, 4726]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155528\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Sânnicolau Mare\"\n        }\n      }, {\n        \"arcs\": [[-4632, -4500, -4544, -4492, -4565, -4668, 4727, 4728]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1348\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Blaj\"\n        }\n      }, {\n        \"arcs\": [[4729, 4730, -4605, -4564, -4707, 4731, 4732]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175787\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Corbița\"\n        }\n      }, {\n        \"arcs\": [[4733, -4653, 4734, 4735, 4736]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84380\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Dîrjiu\"\n        }\n      }, {\n        \"arcs\": [[4737, 4738, 4739, -4676, -4640, -4458, -4571, 4740, 4741, 4742]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10104\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Bîrzava\"\n        }\n      }, {\n        \"arcs\": [[4743, -4446, -4474, -4724, 4744]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159455\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Saravale\"\n        }\n      }, {\n        \"arcs\": [[-4725, -4443, -4569, 4745, 4746, 4747, 4748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156712\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Dudeștii Vechi\"\n        }\n      }, {\n        \"arcs\": [[4749, 4750, 4751]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4142\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cricău\"\n        }\n      }, {\n        \"arcs\": [[4752, -4609, -4466, -4447, -4744, 4753, 4754]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158733\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Sânpetru Mare\"\n        }\n      }, {\n        \"arcs\": [[4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166770\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Vinderei\"\n        }\n      }, {\n        \"arcs\": [[4763, -4692, -4427, -4415, 4764, 4765, 4766, 4767, 4768, 4769]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1936\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Zlatna\"\n        }\n      }, {\n        \"arcs\": [[4770, -4581, -4589, 4771, 4772, 4773]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86446\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Cozmeni\"\n        }\n      }, {\n        \"arcs\": [[4774, -4658, -4528, -4664, 4775, 4776, 4777]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23797\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Oituz\"\n        }\n      }, {\n        \"arcs\": [[4778, -4654, -4734, 4779, 4780]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86222\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Ulieș\"\n        }\n      }, {\n        \"arcs\": [[4781, -4710, -4646, 4782, 4783, 4784, 4785]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8096\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Teiuș\"\n        }\n      }, {\n        \"arcs\": [[-4767, 4786, 4787, -4649, 4788, 4789, 4790, 4791, 4792]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88788\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Buceș\"\n        }\n      }, {\n        \"arcs\": [[4793, -4660, 4794, 4795]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21720\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Cașin\"\n        }\n      }, {\n        \"arcs\": [[4796, 4797, 4798]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10872\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Ghioroc\"\n        }\n      }, {\n        \"arcs\": [[4799, -4689, 4800, 4801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144303\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Blăjel\"\n        }\n      }, {\n        \"arcs\": [[4802, -4795, -4659, -4775, 4803, 4804]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21560\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Bogdănești\"\n        }\n      }, {\n        \"arcs\": [[4805, -4696, -4673, 4806, 4807]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146012\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Alma\"\n        }\n      }, {\n        \"arcs\": [[-4747, 4808]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155724\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Beba Veche\"\n        }\n      }, {\n        \"arcs\": [[4809, -4702, 4810, 4811, 4812, 4813]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164543\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Ivești\"\n        }\n      }, {\n        \"arcs\": [[-4807, -4672, -4687, -4800, 4814, 4815]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144553\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Dîrlos\"\n        }\n      }, {\n        \"arcs\": [[4816, -4812, 4817, 4818, -4730, 4819, 4820]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24524\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Podu Turcului\"\n        }\n      }, {\n        \"arcs\": [[4821, 4822, -4576, -4628, 4823, 4824, 4825, 4826]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91795\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Vața de Jos\"\n        }\n      }, {\n        \"arcs\": [[4827, 4828, -4694, -4806, 4829, 4830]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143806\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Dumbrăveni\"\n        }\n      }, {\n        \"arcs\": [[-4761, 4831, 4832]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167231\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Fruntișeni\"\n        }\n      }, {\n        \"arcs\": [[4833, 4834, -4656, 4835, 4836, 4837, 4838]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20670\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Ștefan cel Mare\"\n        }\n      }, {\n        \"arcs\": [[-4726, -4749, 4839]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"156259\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Cenad\"\n        }\n      }, {\n        \"arcs\": [[[4840, 4841, -4631, 4842, -4798, 4843, 4844, 4845]], [[4846, 4847, 4848, 4849, 4850]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"11539\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Păuliș\"\n        }\n      }, {\n        \"arcs\": [[4851, -4716, 4852, -4711, 4853, 4854, 4855]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64041\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Brăduț\"\n        }\n      }, {\n        \"arcs\": [[-4804, -4778, 4856, 4857]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24276\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Pîrgărești\"\n        }\n      }, {\n        \"arcs\": [[-4776, -4667, 4858, 4859, 4860]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20910\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Slănic-Moldova\"\n        }\n      }, {\n        \"arcs\": [[4861, 4862, 4863, -4828, 4864, 4865]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144615\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Hoghilag\"\n        }\n      }, {\n        \"arcs\": [[4866, -4677, -4740, 4867]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10239\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Brazii\"\n        }\n      }, {\n        \"arcs\": [[-4844, -4797, 4868, 4869, 4870]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10514\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Covăsinț\"\n        }\n      }, {\n        \"arcs\": [[4871, -4783, -4645, 4872, 4873, -4750, 4874]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4366\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Galda de Jos\"\n        }\n      }, {\n        \"arcs\": [[4875, 4876, -4801, -4688, -4638, -4586, -4592, 4877, 4878]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144152\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Bazna\"\n        }\n      }, {\n        \"arcs\": [[-4878, -4594, -4636, 4879, 4880]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3958\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cetatea de Baltă\"\n        }\n      }, {\n        \"arcs\": [[4881, 4882, 4883, -4463, 4884, -4862, 4885, 4886]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116493\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Daneș\"\n        }\n      }, {\n        \"arcs\": [[4887, -4722, -4607, 4888, 4889]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12037\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Semlac\"\n        }\n      }, {\n        \"arcs\": [[4890, 4891, -4786, 4892]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6547\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Rădești\"\n        }\n      }, {\n        \"arcs\": [[4893, -4773, 4894, -4717, 4895, 4896]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85840\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Sînsimion\"\n        }\n      }, {\n        \"arcs\": [[4897, 4898, -4882, 4899]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114514\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sighișoara\"\n        }\n      }, {\n        \"arcs\": [[4900, 4901, 4902]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9333\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Livada\"\n        }\n      }, {\n        \"arcs\": [[4903, 4904, 4905]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161794\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Bîrlad\"\n        }\n      }, {\n        \"arcs\": [[4906, 4907, -4768, -4793, 4908, 4909]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4008\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ciuruleasa\"\n        }\n      }, {\n        \"arcs\": [[4910, -4880, -4635, 4911, 4912]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5103\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Jidvei\"\n        }\n      }, {\n        \"arcs\": [[4913, -4889, -4610, -4753, 4914]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12206\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șeitin\"\n        }\n      }, {\n        \"arcs\": [[-4896, -4852, 4915, 4916]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86519\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Sântimbru\"\n        }\n      }, {\n        \"arcs\": [[4917, 4918, -4875, -4752, 4919, -4693, -4764, 4920]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4981\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Întregalde\"\n        }\n      }, {\n        \"arcs\": [[-4784, -4872, -4919, 4921, 4922]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7767\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Stremț\"\n        }\n      }, {\n        \"arcs\": [[-4736, 4923, 4924, 4925, 4926]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86487\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Porumbeni\"\n        }\n      }, {\n        \"arcs\": [[4927, 4928, 4929, 4930]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85582\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Secuieni\"\n        }\n      }, {\n        \"arcs\": [[4931, -4814, 4932, 4933]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167268\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Ciocani\"\n        }\n      }, {\n        \"arcs\": [[4934, -4869, -4799, -4843, -4642, -4683, 4935, -4901, 4936, -4848]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9397\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Vladimirescu\"\n        }\n      }, {\n        \"arcs\": [[-4854, -4713, -4684, 4937, 4938, 4939]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85056\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Merești\"\n        }\n      }, {\n        \"arcs\": [[-4780, -4737, -4927, 4940, 4941]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85127\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Mugeni\"\n        }\n      }, {\n        \"arcs\": [[4942, 4943, 4944, -4577, -4573, -4823, 4945]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87745\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Baia de Criș\"\n        }\n      }, {\n        \"arcs\": [[4946, -4907, 4947, 4948]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1151\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Abrud\"\n        }\n      }, {\n        \"arcs\": [[4949, -4925, 4950, -4928, 4951, 4952]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83525\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Cristuru Secuiesc\"\n        }\n      }, {\n        \"arcs\": [[4953, -4805, -4858, 4954, 4955]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25825\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Tîrgu Trotuș\"\n        }\n      }, {\n        \"arcs\": [[-4912, -4634, 4956, 4957, 4958, 4959]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7865\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Șona\"\n        }\n      }, {\n        \"arcs\": [[4960, -4902, -4936, -4682, -4619, -4611, 4961, 4962, 4963, 4964]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9262\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Arad\"\n        }\n      }, {\n        \"arcs\": [[4965, -4769, -4908, -4947, 4966, 4967]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3459\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Bucium\"\n        }\n      }, {\n        \"arcs\": [[4968, 4969, 4970, 4971, 4972]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163789\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Epureni\"\n        }\n      }, {\n        \"arcs\": [[4973, -4930, 4974, 4975, -4898, 4976, 4977]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114603\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Albești\"\n        }\n      }, {\n        \"arcs\": [[4978, -4602, -4720, 4979, -4970, 4980, 4981]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164981\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Murgeni\"\n        }\n      }, {\n        \"arcs\": [[4982, 4983, 4984, 4985, 4986]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23948\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Orbeni\"\n        }\n      }, {\n        \"arcs\": [[4987, -4938, -4686, -4556, -4650, -4779, 4988, 4989, 4990, 4991]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84923\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Mărtiniș\"\n        }\n      }, {\n        \"arcs\": [[4992, -4916, -4856, 4993, 4994]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85680\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Sâncrăieni\"\n        }\n      }, {\n        \"arcs\": [[4995, -4955, -4857, -4777, -4861, 4996]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20965\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Tîrgu Ocna\"\n        }\n      }, {\n        \"arcs\": [[4997, -4958, 4998, 4999, -4891, 5000, 5001]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5210\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Lopadea Nouă\"\n        }\n      }, {\n        \"arcs\": [[5002, -4738, 5003, 5004, 5005]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9743\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Almaș\"\n        }\n      }, {\n        \"arcs\": [[-4939, -4988, 5006, 5007, 5008]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84629\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Lueta\"\n        }\n      }, {\n        \"arcs\": [[5009, 5010, -4921, -4770, -4966, 5011, 5012]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5826\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Mogoș\"\n        }\n      }, {\n        \"arcs\": [[5013, -4821, 5014, 5015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22834\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Glăvănești\"\n        }\n      }, {\n        \"arcs\": [[5016, 5017, -4989, -4781, -4942, 5018, 5019]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83197\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Feliceni\"\n        }\n      }, {\n        \"arcs\": [[5020, -4890, -4914, 5021, 5022]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11637\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Peregu Mare\"\n        }\n      }, {\n        \"arcs\": [[5023, -4909, -4792, 5024, 5025, 5026]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88350\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Blăjeni\"\n        }\n      }, {\n        \"arcs\": [[-4986, 5027, 5028, 5029]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24034\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Parava\"\n        }\n      }, {\n        \"arcs\": [[-5004, -4743, 5030, 5031]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10417\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Chisindia\"\n        }\n      }, {\n        \"arcs\": [[5032, -4990, -5018, 5033, 5034]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83133\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Odorheiu Secuiesc\"\n        }\n      }, {\n        \"arcs\": [[5035, 5036, -4865, -4831, 5037, 5038]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120218\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Viișoara\"\n        }\n      }, {\n        \"arcs\": [[5039, -4826, 5040, 5041]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11762\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Pleșcuța\"\n        }\n      }, {\n        \"arcs\": [[-4946, -4822, 5042, 5043, 5044]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91447\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Tomești\"\n        }\n      }, {\n        \"arcs\": [[5045, -4965, 5046, 5047]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9360\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șofronea\"\n        }\n      }, {\n        \"arcs\": [[-5022, -4915, -4755, 5048]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9627\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Nădlac\"\n        }\n      }, {\n        \"arcs\": [[5049, 5050, -4967, -4949, 5051, 5052]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6761\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Roșia Montană\"\n        }\n      }, {\n        \"arcs\": [[5053, -5031, -4742, 5054, 5055, 5056]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12457\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Tauț\"\n        }\n      }, {\n        \"arcs\": [[5057, -4963, 5058, 5059, -4723, -4888, -5021, 5060]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11584\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Pecica\"\n        }\n      }, {\n        \"arcs\": [[5061, 5062, -4972, 5063, -4762, -4833, 5064, -4906, 5065, 5066]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167179\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Zorleni\"\n        }\n      }, {\n        \"arcs\": [[5067, -4977, -4900, -4887, 5068]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118469\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Nadeș\"\n        }\n      }, {\n        \"arcs\": [[5069, 5070, -4995, 5071]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86479\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Leliceni\"\n        }\n      }, {\n        \"arcs\": [[5072, -4959, -4998, 5073, 5074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4703\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Hopîrta\"\n        }\n      }, {\n        \"arcs\": [[-5066, -4905, 5075, -4697, -4810, -4932, 5076, 5077]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165274\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Perieni\"\n        }\n      }, {\n        \"arcs\": [[5078, -5026, 5079, -4943, -5045, 5080, 5081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88920\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Bulzeștii de Sus\"\n        }\n      }, {\n        \"arcs\": [[5082, -5001, -4893, -4785, -4923, 5083, 5084, 5085]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1213\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Aiud\"\n        }\n      }, {\n        \"arcs\": [[5086, -4973, -5063, 5087, 5088]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166137\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Șuletea\"\n        }\n      }, {\n        \"arcs\": [[5089, -4849, -4937, -4903, -4961, -5046, 5090, 5091]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12876\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Zimandu Nou\"\n        }\n      }, {\n        \"arcs\": [[5092, 5093, 5094, 5095, -4983, 5096, 5097]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21971\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Corbasca\"\n        }\n      }, {\n        \"arcs\": [[[-5035, 5098, 5099, 5100]], [[5101, 5102, 5103]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"83151\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Brădești\"\n        }\n      }, {\n        \"arcs\": [[5104, -5010, 5105, 5106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6397\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ponor\"\n        }\n      }, {\n        \"arcs\": [[5107, 5108, -5015, -4820, -4733, 5109, 5110, 5111]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22237\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Dealu Morii\"\n        }\n      }, {\n        \"arcs\": [[5112, -4978, -5068, 5113, 5114]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120174\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Vețca\"\n        }\n      }, {\n        \"arcs\": [[5115, -4991, -5033, -5101, 5116, -5102]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86501\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Satu Mare\"\n        }\n      }, {\n        \"arcs\": [[-5052, -4948, -4910, -5024, 5117, 5118]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7446\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Sohodol\"\n        }\n      }, {\n        \"arcs\": [[-5038, -4830, -4808, -4816, 5119, 5120, 5121]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115307\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Bahnea\"\n        }\n      }, {\n        \"arcs\": [[5122, 5123, 5124, -4913, -4960, -5073, 5125]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4302\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Fărău\"\n        }\n      }, {\n        \"arcs\": [[5126, 5127, -4952, -4931, -4974, -5113, 5128, 5129]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85467\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Săcel\"\n        }\n      }, {\n        \"arcs\": [[-5084, -4922, -4918, -5011, -5105, 5130, 5131]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6627\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Rîmeț\"\n        }\n      }, {\n        \"arcs\": [[5132, 5133, 5134, 5135, 5136]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116938\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Gănești\"\n        }\n      }, {\n        \"arcs\": [[5137, -4845, -4871, 5138, -4851, 5139, 5140]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12368\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șiria\"\n        }\n      }, {\n        \"arcs\": [[5141, 5142, -5005, -5032, -5054, 5143, 5144]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10293\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Buteni\"\n        }\n      }, {\n        \"arcs\": [[-5036, 5145, 5146, 5147]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120343\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Zagăr\"\n        }\n      }, {\n        \"arcs\": [[5148, -4933, -4813, -4817, -5014, 5149, 5150]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163057\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Coroiești\"\n        }\n      }, {\n        \"arcs\": [[5151, 5152, -5067, -5078, 5153, 5154, 5155, 5156]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162327\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Băcani\"\n        }\n      }, {\n        \"arcs\": [[5157, -5047, -4964, -5058, 5158, 5159]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11352\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Iratoșu\"\n        }\n      }, {\n        \"arcs\": [[-5072, -4994, -4855, -4940, -5009, 5160, 5161, 5162]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83320\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Miercurea Ciuc\"\n        }\n      }, {\n        \"arcs\": [[5163, 5164, 5165, -5124, 5166]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115771\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Bichiș\"\n        }\n      }, {\n        \"arcs\": [[5167, 5168, -5056, 5169, -4846, -5138, 5170, 5171]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12509\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Tîrnova\"\n        }\n      }, {\n        \"arcs\": [[5172, -5043, -4827, -5040, 5173]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11058\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Hălmagiu\"\n        }\n      }, {\n        \"arcs\": [[5174, 5175, -5121, 5176, -5133, 5177, 5178]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118209\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Mica\"\n        }\n      }, {\n        \"arcs\": [[-5081, -5044, -5173, 5179, 5180]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11174\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Hălmăgel\"\n        }\n      }, {\n        \"arcs\": [[-5171, -5141, 5181, 5182, 5183]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9654\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Pîncota\"\n        }\n      }, {\n        \"arcs\": [[-5019, -4941, -4926, -4950, 5184, 5185]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85984\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Șimonești\"\n        }\n      }, {\n        \"arcs\": [[5186, 5187, -5029, 5188, 5189, 5190, 5191]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24766\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Răcăciuni\"\n        }\n      }, {\n        \"arcs\": [[5192, -4982, 5193, 5194, 5195]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163832\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Fălciu\"\n        }\n      }, {\n        \"arcs\": [[5196, 5197, -5147, 5198, 5199]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116171\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Coroisînmărtin\"\n        }\n      }, {\n        \"arcs\": [[5200, 5201, -5118, -5027, -5079, 5202, 5203]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8425\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Vidra\"\n        }\n      }, {\n        \"arcs\": [[5204, -5185, -4953, -5128, 5205]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83847\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Avrămești\"\n        }\n      }, {\n        \"arcs\": [[5206, 5207, 5208, 5209, -4897, -4917, -4993, -5071, 5210, 5211]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83981\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Ciucsîngeorgiu\"\n        }\n      }, {\n        \"arcs\": [[5212, -5089, 5213, 5214]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167286\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Dodești\"\n        }\n      }, {\n        \"arcs\": [[-5154, -5077, -4934, -5149, 5215, 5216, 5217]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165416\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Pogana\"\n        }\n      }, {\n        \"arcs\": [[5218, 5219, -5086, 5220, 5221, 5222]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5755\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Mirăslău\"\n        }\n      }, {\n        \"arcs\": [[5223, -5144, -5057, -5169, 5224, 5225]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12288\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șilindia\"\n        }\n      }, {\n        \"arcs\": [[-5180, -5174, -5042, 5226, 5227, 5228, 5229]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12689\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Vîrfurile\"\n        }\n      }, {\n        \"arcs\": [[5230, -5136, 5231, 5232, 5233]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116395\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Cucerdea\"\n        }\n      }, {\n        \"arcs\": [[5234, -5162, 5235, 5236, 5237]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86461\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Ciceu\"\n        }\n      }, {\n        \"arcs\": [[5238, -5199, -5146, -5039, -5122, -5176, 5239, 5240]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119661\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Suplac\"\n        }\n      }, {\n        \"arcs\": [[5241, -5221, -5085, -5132, 5242, 5243]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5167\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Livezile\"\n        }\n      }, {\n        \"arcs\": [[5244, -5236, -5161, -5008, 5245, 5246]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83749\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Vlăhița\"\n        }\n      }, {\n        \"arcs\": [[5247, -5191, 5248, 5249, 5250]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21855\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Cleja\"\n        }\n      }, {\n        \"arcs\": [[5251, -5106, -5013, 5252, 5253]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"2915\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Baia de Arieș\"\n        }\n      }, {\n        \"arcs\": [[-5160, 5254, 5255]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12912\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Dorobanți\"\n        }\n      }, {\n        \"arcs\": [[5256, -5194, -4981, -4969, -5087, -5213, 5257, 5258]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163903\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Găgești\"\n        }\n      }, {\n        \"arcs\": [[5259, -5237, -5245, 5260]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85626\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Siculeni\"\n        }\n      }, {\n        \"arcs\": [[5261, -5167, -5123, 5262, 5263, 5264]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115236\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ațintiș\"\n        }\n      }, {\n        \"arcs\": [[5265, 5266, -5204, 5267, 5268]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6271\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Poiana Vadului\"\n        }\n      }, {\n        \"arcs\": [[5269, -5246, -5007, -4992, -5116, -5104, 5270]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83963\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Căpîlnița\"\n        }\n      }, {\n        \"arcs\": [[5271, 5272, 5273, 5274, 5275, 5276, 5277]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21418\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Berzunți\"\n        }\n      }, {\n        \"arcs\": [[-5111, 5278, -5098, 5279, 5280]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22665\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Găiceana\"\n        }\n      }, {\n        \"arcs\": [[5281, -5129, -5115, 5282, 5283, 5284, 5285, 5286]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116796\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Fîntînele\"\n        }\n      }, {\n        \"arcs\": [[-5258, -5215, 5287, 5288]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166707\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Viișoara\"\n        }\n      }, {\n        \"arcs\": [[5289, -5280, -5097, -4987, -5030, -5188, 5290, 5291]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24187\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Pîncești\"\n        }\n      }, {\n        \"arcs\": [[-5268, -5203, -5082, -5181, -5230, 5292, 5293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"2577\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Avram Iancu\"\n        }\n      }, {\n        \"arcs\": [[5294, 5295, -5145, -5224, 5296]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10051\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Bîrsa\"\n        }\n      }, {\n        \"arcs\": [[5297, -5006, -5143, 5298, 5299]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10701\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Dieci\"\n        }\n      }, {\n        \"arcs\": [[-5243, -5131, -5107, -5252, 5300]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6976\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Sălciua\"\n        }\n      }, {\n        \"arcs\": [[5301, -5288, -5214, -5088, -5062, -5153, 5302, 5303]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162194\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Banca\"\n        }\n      }, {\n        \"arcs\": [[-5227, -5041, -4825, 5304, -4868, -4739, -5003, -5298, 5305, 5306]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10943\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Gurahonț\"\n        }\n      }, {\n        \"arcs\": [[5307, -5182, -5140, -4850, -5090, 5308, 5309]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12091\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Sântana\"\n        }\n      }, {\n        \"arcs\": [[5310, -5201, -5267, 5311, 5312]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8229\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Vadu Moților\"\n        }\n      }, {\n        \"arcs\": [[5313, 5314, 5315, 5316]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20821\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Comănești\"\n        }\n      }, {\n        \"arcs\": [[5317, 5318, -5074, -5002, -5083, -5220, 5319, 5320]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1794\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ocna Mureș\"\n        }\n      }, {\n        \"arcs\": [[5321, -5263, -5126, -5075, -5319, 5322, 5323, 5324]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6048\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Noșlac\"\n        }\n      }, {\n        \"arcs\": [[-5253, -5012, -4968, -5051, 5325, 5326]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5336\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Lupșa\"\n        }\n      }, {\n        \"arcs\": [[5327, 5328, -5250, 5329, 5330, -5273, 5331]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23289\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Livezi\"\n        }\n      }, {\n        \"arcs\": [[5332, -5251, -5329, 5333]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22460\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Faraoani\"\n        }\n      }, {\n        \"arcs\": [[5334, -5323, -5318, 5335]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"5309\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Lunca Mureșului\"\n        }\n      }, {\n        \"arcs\": [[5336, -5172, -5184, 5337, 5338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11995\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Seleuș\"\n        }\n      }, {\n        \"arcs\": [[5339, -5150, -5016, -5109, 5340, 5341]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23494\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Motoșeni\"\n        }\n      }, {\n        \"arcs\": [[5342, -5130, -5282, 5343, 5344]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119331\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sângeorgiu de Pădure\"\n        }\n      }, {\n        \"arcs\": [[-5291, -5187, 5345, 5346, 5347]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22941\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Horgești\"\n        }\n      }, {\n        \"arcs\": [[-5320, -5219, 5348, 5349]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8158\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Unirea\"\n        }\n      }, {\n        \"arcs\": [[5350, 5351, -5091, -5048, -5158, -5256, 5352]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9495\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Curtici\"\n        }\n      }, {\n        \"arcs\": [[5353, -5217, 5354, 5355]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164339\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Iana\"\n        }\n      }, {\n        \"arcs\": [[5356, 5357, -5261, -5247, 5358]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86495\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Racu\"\n        }\n      }, {\n        \"arcs\": [[5359, -5112, -5281, -5290, 5360, 5361]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26118\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Vultureni\"\n        }\n      }, {\n        \"arcs\": [[5362, 5363, -5238, -5260, -5358, 5364, 5365]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84415\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Frumoasa\"\n        }\n      }, {\n        \"arcs\": [[5366, -5310, 5367, 5368, 5369, 5370]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11502\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Olari\"\n        }\n      }, {\n        \"arcs\": [[5371, -5099, -5034, -5017, 5372, 5373]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84264\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Dealu\"\n        }\n      }, {\n        \"arcs\": [[5374, -5228, -5307, 5375, 5376]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28193\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Cărpinet\"\n        }\n      }, {\n        \"arcs\": [[[-5338, -5183, -5308, -5367, 5377, 5378]], [[5379, -5370, 5380]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"12812\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Zărand\"\n        }\n      }, {\n        \"arcs\": [[-5179, 5381, 5382, 5383]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119466\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sînpaul\"\n        }\n      }, {\n        \"arcs\": [[-5293, -5229, -5375, 5384, 5385, 5386]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28889\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Criștioru de Jos\"\n        }\n      }, {\n        \"arcs\": [[5387, -5222, -5242, 5388, 5389, 5390]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6592\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Rîmetea\"\n        }\n      }, {\n        \"arcs\": [[5391, -5284, 5392, -5197, 5393, 5394]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114970\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Acățari\"\n        }\n      }, {\n        \"arcs\": [[5395, -5297, -5226, 5396, 5397]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10195\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Bocsig\"\n        }\n      }, {\n        \"arcs\": [[5398, 5399, -5332, -5272, 5400, 5401]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25148\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Sănduleni\"\n        }\n      }, {\n        \"arcs\": [[-5373, -5020, -5186, -5205, 5402, 5403, 5404]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84825\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Lupeni\"\n        }\n      }, {\n        \"arcs\": [[-5382, -5178, -5137, -5231, 5405, 5406, 5407]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118575\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ogra\"\n        }\n      }, {\n        \"arcs\": [[5408, -5351, 5409, 5410, 5411]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11398\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Macea\"\n        }\n      }, {\n        \"arcs\": [[5412, -5359, -5270, 5413, 5414]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86438\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Mădăraș\"\n        }\n      }, {\n        \"arcs\": [[5415, -5368, -5309, -5092, -5352, -5409, 5416]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12340\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șimand\"\n        }\n      }, {\n        \"arcs\": [[5417, -5277, 5418, -5317, 5419, 5420, 5421]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24631\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Poduri\"\n        }\n      }, {\n        \"arcs\": [[5422, -5164, -5262, 5423, 5424]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116439\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Cuci\"\n        }\n      }, {\n        \"arcs\": [[5425, -5406, -5234, 5426, -5165, -5423, 5427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117827\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Iernut\"\n        }\n      }, {\n        \"arcs\": [[5428, -5053, -5119, -5202, -5311, 5429, 5430]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1455\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cîmpeni\"\n        }\n      }, {\n        \"arcs\": [[5431, 5432, -5196, 5433, 5434]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162498\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Berezeni\"\n        }\n      }, {\n        \"arcs\": [[5435, -5326, -5050, -5429, 5436, 5437]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"3039\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Bistra\"\n        }\n      }, {\n        \"arcs\": [[5438, 5439, -5385, -5377, 5440, 5441, 5442]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27007\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Vașcău\"\n        }\n      }, {\n        \"arcs\": [[-5389, -5244, -5301, -5254, -5327, -5436, 5443, 5444, 5445]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6468\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Poșaga\"\n        }\n      }, {\n        \"arcs\": [[5446, -5430, -5313, 5447, 5448]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"2130\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Albac\"\n        }\n      }, {\n        \"arcs\": [[-5155, -5218, -5354, 5449, 5450]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167222\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Ibănești\"\n        }\n      }, {\n        \"arcs\": [[5451, 5452, -5240, -5175, -5384, 5453, 5454]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119894\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ungheni\"\n        }\n      }, {\n        \"arcs\": [[-5424, -5265, 5455, 5456]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115824\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Bogata\"\n        }\n      }, {\n        \"arcs\": [[5457, 5458, -5344, -5287, 5459, 5460]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118511\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Neaua\"\n        }\n      }, {\n        \"arcs\": [[5461, -5259, -5289, -5302, 5462, 5463]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165817\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Roșiești\"\n        }\n      }, {\n        \"arcs\": [[-5441, -5376, -5306, -5300, 5464, 5465, 5466]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10649\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Dezna\"\n        }\n      }, {\n        \"arcs\": [[5467, 5468, -5395, 5469, 5470, 5471]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120487\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Corunca\"\n        }\n      }, {\n        \"arcs\": [[5472, -5324, -5335, 5473, 5474, 5475]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58311\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Luna\"\n        }\n      }, {\n        \"arcs\": [[5476, -5466, 5477, 5478]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11307\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Ignești\"\n        }\n      }, {\n        \"arcs\": [[5479, -5303, -5152, 5480, 5481, 5482]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162693\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Bogdănești\"\n        }\n      }, {\n        \"arcs\": [[5483, -5345, -5459, 5484, 5485, 5486]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117042\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ghindari\"\n        }\n      }, {\n        \"arcs\": [[5487, -5442, -5467, -5477, 5488, 5489, 5490, 5491]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11478\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Moneasa\"\n        }\n      }, {\n        \"arcs\": [[5492, -5325, -5473, 5493]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116046\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Chețani\"\n        }\n      }, {\n        \"arcs\": [[-5432, 5494, 5495, 5496, 5497]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166672\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Vetrișoaia\"\n        }\n      }, {\n        \"arcs\": [[5498, -5415, 5499, 5500, 5501]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84237\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Dănești\"\n        }\n      }, {\n        \"arcs\": [[5502, -5386, -5440, 5503, 5504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26920\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Nucet\"\n        }\n      }, {\n        \"arcs\": [[-5481, -5157, 5505, 5506, 5507]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162791\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Bogdănița\"\n        }\n      }, {\n        \"arcs\": [[-5401, -5278, -5418, 5508, 5509, 5510]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21338\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Berești-Tazlău\"\n        }\n      }, {\n        \"arcs\": [[-5456, -5264, -5322, -5493, 5511, 5512, 5513, 5514]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114710\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Luduș\"\n        }\n      }, {\n        \"arcs\": [[-5355, -5216, -5151, -5340, 5515, 5516, 5517]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165470\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Puiești\"\n        }\n      }, {\n        \"arcs\": [[-5390, -5446, 5518, 5519]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"6119\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ocoliș\"\n        }\n      }, {\n        \"arcs\": [[5520, -5397, -5225, -5168, -5337, 5521, 5522]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9538\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Ineu\"\n        }\n      }, {\n        \"arcs\": [[5523, -5506, -5156, -5451, 5524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162069\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Alexandru Vlahuță\"\n        }\n      }, {\n        \"arcs\": [[5525, -5403, -5206, -5127, -5343, -5484, 5526, 5527, 5528]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83785\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Atid\"\n        }\n      }, {\n        \"arcs\": [[5529, -5434, -5195, -5257, -5462, 5530, 5531]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167035\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Vutcani\"\n        }\n      }, {\n        \"arcs\": [[5532, -5404, -5526, 5533]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84175\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Corund\"\n        }\n      }, {\n        \"arcs\": [[-5509, -5422, 5534, 5535, 5536, 5537]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21098\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Ardeoani\"\n        }\n      }, {\n        \"arcs\": [[-5500, -5414, -5271, -5103, -5117, -5100, -5372, 5538, 5539]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86366\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Zetea\"\n        }\n      }, {\n        \"arcs\": [[-5535, -5421, 5540, 5541, 5542]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23387\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Măgirești\"\n        }\n      }, {\n        \"arcs\": [[-5463, -5304, -5480, 5543, 5544]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163137\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Costești\"\n        }\n      }, {\n        \"arcs\": [[5545, -5448, -5312, -5266, 5546, 5547]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7197\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Scărișoara\"\n        }\n      }, {\n        \"arcs\": [[5548, 5549, -5472, 5550, 5551]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117925\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Livezeni\"\n        }\n      }, {\n        \"arcs\": [[5552, -5449, -5546, 5553]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4767\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Horea\"\n        }\n      }, {\n        \"arcs\": [[5554, 5555, -5366, 5556, 5557]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84754\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Lunca de Sus\"\n        }\n      }, {\n        \"arcs\": [[5558, -5475, 5559, 5560]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55357\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Câmpia Turzii\"\n        }\n      }, {\n        \"arcs\": [[-5527, -5487, 5561, 5562]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120478\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Chibed\"\n        }\n      }, {\n        \"arcs\": [[-5504, -5439, 5563, 5564, 5565]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28709\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Cîmpani\"\n        }\n      }, {\n        \"arcs\": [[-5564, -5443, -5488, 5566, 5567, 5568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29948\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Lunca\"\n        }\n      }, {\n        \"arcs\": [[-5568, 5569]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26840\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Ștei\"\n        }\n      }, {\n        \"arcs\": [[5570, -5341, -5108, -5360, 5571, 5572, 5573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25521\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Stănișești\"\n        }\n      }, {\n        \"arcs\": [[5574, 5575, -5461, 5576, -5549, 5577, 5578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118281\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Miercurea Nirajului\"\n        }\n      }, {\n        \"arcs\": [[5579, -5489, -5479, 5580, 5581, 5582, 5583, 5584]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9832\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Archiș\"\n        }\n      }, {\n        \"arcs\": [[5585, 5586, 5587, -5402, -5511, 5588]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25629\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Strugari\"\n        }\n      }, {\n        \"arcs\": [[5589, -5547, -5269, -5294, 5590, 5591]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4525\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Gîrda de Sus\"\n        }\n      }, {\n        \"arcs\": [[5592, -5522, -5339, -5379, 5593, 5594]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12242\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șicula\"\n        }\n      }, {\n        \"arcs\": [[5595, 5596, -5428, -5425, -5457, -5515, 5597, 5598]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119386\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sânger\"\n        }\n      }, {\n        \"arcs\": [[5599, -5407, -5426, -5597, 5600, 5601]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117667\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Iclănzel\"\n        }\n      }, {\n        \"arcs\": [[5602, 5603, -5587, 5604]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20411\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Măgura\"\n        }\n      }, {\n        \"arcs\": [[-5591, -5387, -5503, 5605, 5606]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"2381\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Arieșeni\"\n        }\n      }, {\n        \"arcs\": [[5607, 5608, -5539, -5374, -5405, -5533, 5609, 5610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86311\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Vărșag\"\n        }\n      }, {\n        \"arcs\": [[-5601, -5596, 5611, 5612]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118637\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Papiu Ilarian\"\n        }\n      }, {\n        \"arcs\": [[5613, -5516, -5342, -5571, 5614]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24837\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Răchitoasa\"\n        }\n      }, {\n        \"arcs\": [[5615, 5616, -5544, -5483, 5617]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163324\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Deleni\"\n        }\n      }, {\n        \"arcs\": [[5618, -5598, -5514, 5619, 5620]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119858\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Tăureni\"\n        }\n      }, {\n        \"arcs\": [[5621, 5622, -5528, -5563, 5623]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120496\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sărățeni\"\n        }\n      }, {\n        \"arcs\": [[-5557, -5365, -5357, -5413, -5499, 5624, 5625, 5626, 5627]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85074\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Mihăileni\"\n        }\n      }, {\n        \"arcs\": [[5628, 5629, -5391, -5520, 5630, 5631]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58008\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Iara\"\n        }\n      }, {\n        \"arcs\": [[5632, -5485, -5458, -5576, 5633, 5634]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120511\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Bereni\"\n        }\n      }, {\n        \"arcs\": [[5635, -5625, -5502, 5636, 5637]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84102\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Cârța\"\n        }\n      }, {\n        \"arcs\": [[-5578, -5552, 5638, 5639, 5640]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114417\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sîngeorgiu de Mureș\"\n        }\n      }, {\n        \"arcs\": [[5641, -5536, -5543, 5642, 5643]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25488\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Solonț\"\n        }\n      }, {\n        \"arcs\": [[5644, -5411, 5645, 5646]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10916\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Grăniceri\"\n        }\n      }, {\n        \"arcs\": [[5647, -5634, -5575, 5648, 5649]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120076\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Vărgata\"\n        }\n      }, {\n        \"arcs\": [[5650, 5651, 5652, 5653, -5455, 5654, 5655, 5656]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118691\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Pănet\"\n        }\n      }, {\n        \"arcs\": [[5657, -5507, -5524, 5658, 5659]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162595\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Bogdana\"\n        }\n      }, {\n        \"arcs\": [[-5450, -5356, -5518, 5660, 5661, 5662]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163967\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Gherghești\"\n        }\n      }, {\n        \"arcs\": [[5663, 5664, 5665, 5666, 5667]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25932\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Ungureni\"\n        }\n      }, {\n        \"arcs\": [[5668, 5669, -5565, -5569, -5570, -5567, -5492, 5670, 5671]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30773\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Rieni\"\n        }\n      }, {\n        \"arcs\": [[5672, -5602, -5613, 5673, 5674, 5675]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117275\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Grebenișu de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[[5676, -5651, 5677]], [[5678, -5640, 5679, 5680, 5681]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"114453\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sîntana de Mureș\"\n        }\n      }, {\n        \"arcs\": [[5682, -5381, -5369, -5416, 5683, 5684, 5685]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9459\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Chișineu-Criș\"\n        }\n      }, {\n        \"arcs\": [[-5661, -5517, -5614, 5686, 5687, 5688]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166869\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Voinești\"\n        }\n      }, {\n        \"arcs\": [[-5656, 5689, 5690, 5691]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120502\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Mădăraș\"\n        }\n      }, {\n        \"arcs\": [[5692, -5523, -5593, 5693, 5694, 5695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10373\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Cermei\"\n        }\n      }, {\n        \"arcs\": [[-5618, -5482, -5508, -5658, 5696, 5697, 5698]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164687\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Lipovăț\"\n        }\n      }, {\n        \"arcs\": [[-5626, -5636, 5699, 5700]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86453\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Tomești\"\n        }\n      }, {\n        \"arcs\": [[-5667, 5701, 5702, 5703, 5704]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21668\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Buhoci\"\n        }\n      }, {\n        \"arcs\": [[-5671, -5491, 5705, 5706]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29760\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Lazuri de Beiuș\"\n        }\n      }, {\n        \"arcs\": [[5707, -5589, -5510, -5538, 5708, 5709]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25291\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Scorțeni\"\n        }\n      }, {\n        \"arcs\": [[-5709, -5537, -5642, 5710, 5711]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24338\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Pârjol\"\n        }\n      }, {\n        \"arcs\": [[5712, -5532, 5713, 5714, 5715]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164197\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Hoceni\"\n        }\n      }, {\n        \"arcs\": [[5716, -5694, -5595, 5717, 5718]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12224\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Șepreuș\"\n        }\n      }, {\n        \"arcs\": [[5719, -5497, 5720, 5721]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164749\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Lunca Banului\"\n        }\n      }, {\n        \"arcs\": [[5722, -5675, 5723, 5724]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119750\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Șăulia\"\n        }\n      }, {\n        \"arcs\": [[5725, 5726, 5727, 5728, 5729]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21597\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Brusturoasa\"\n        }\n      }, {\n        \"arcs\": [[5730, -5495, -5435, -5530, -5713, 5731]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164277\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Dimitrie Cantemir\"\n        }\n      }, {\n        \"arcs\": [[5732, -5724, -5674, -5612, -5599, -5619, 5733]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120370\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Zau de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[5734, -5649, -5579, -5641, -5679, 5735, 5736]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116652\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ernei\"\n        }\n      }, {\n        \"arcs\": [[-5684, -5417, -5412, -5645, 5737, 5738]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12126\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Socodor\"\n        }\n      }, {\n        \"arcs\": [[-5734, -5621, 5739, 5740, 5741, 5742]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119974\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Valea Largă\"\n        }\n      }, {\n        \"arcs\": [[5743, -5700, -5638, 5744]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86339\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Voșlăbeni\"\n        }\n      }, {\n        \"arcs\": [[5745, -5690, -5655, -5454, -5383, -5408, -5600, -5673, 5746]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115389\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Band\"\n        }\n      }, {\n        \"arcs\": [[5747, 5748, 5749, 5750]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20313\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Hemeiuș\"\n        }\n      }, {\n        \"arcs\": [[5751, -5610, -5534, -5529, -5623, 5752, 5753]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85341\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Praid\"\n        }\n      }, {\n        \"type\": null,\n        \"properties\": {\n          \"id\": \"83464\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Bălan\"\n        }\n      }, {\n        \"arcs\": [[5754, 5755, -5650, -5735, 5756, 5757]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117505\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Hodoșa\"\n        }\n      }, {\n        \"arcs\": [[5758, 5759, -5659, -5525, -5663, 5760, 5761]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165336\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Poienești\"\n        }\n      }, {\n        \"arcs\": [[5762, 5763, -5437, -5431, -5447, -5553, 5764, 5765, 5766]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58357\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Măguri-Răcătău\"\n        }\n      }, {\n        \"arcs\": [[5767, 5768, -5706, -5490, -5580, 5769]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31609\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tărcaia\"\n        }\n      }, {\n        \"arcs\": [[5770, 5771, -5691, -5746, 5772]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119803\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Șincai\"\n        }\n      }, {\n        \"arcs\": [[-5606, -5505, -5566, -5670, 5773, 5774]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30336\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Pietroasa\"\n        }\n      }, {\n        \"arcs\": [[-5774, -5669, 5775, 5776]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27971\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Buntești\"\n        }\n      }, {\n        \"arcs\": [[5777, -5697, -5660, -5760, 5778, 5779]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167320\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Pușcași\"\n        }\n      }, {\n        \"arcs\": [[5780, 5781, 5782, -5696, 5783, 5784]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10532\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Craiva\"\n        }\n      }, {\n        \"arcs\": [[5785, -5738, -5647, 5786]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11735\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Pilu\"\n        }\n      }, {\n        \"arcs\": [[-5753, -5622, 5787, 5788, 5789, 5790]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114854\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sovata\"\n        }\n      }, {\n        \"arcs\": [[5791, -5741, 5792, 5793, 5794, 5795]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56844\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Ceanu Mare\"\n        }\n      }, {\n        \"arcs\": [[5796, -5608, 5797, 5798]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84086\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Ciumani\"\n        }\n      }, {\n        \"arcs\": [[5799, -5751, 5800, 5801, 5802]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22781\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Gîrleni\"\n        }\n      }, {\n        \"arcs\": [[5803, 5804, -5715, 5805, 5806, 5807]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165069\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Oltenești\"\n        }\n      }, {\n        \"arcs\": [[5808, -5705, 5809, 5810, 5811]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25861\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Traian\"\n        }\n      }, {\n        \"arcs\": [[5812, 5813, -5711, -5644, 5814, 5815]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21196\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Balcani\"\n        }\n      }, {\n        \"arcs\": [[5816, -5765, -5554, -5548, -5590, 5817, 5818, 5819, 5820]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56014\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Beliș\"\n        }\n      }, {\n        \"arcs\": [[-5811, 5821, 5822]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26361\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Prăjești\"\n        }\n      }, {\n        \"arcs\": [[5823, -5681, 5824, -5678, -5657, -5692, -5772, 5825, 5826]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115959\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ceuașu de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[5827, 5828, -5558, -5628, 5829, 5830]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84656\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Lunca de Jos\"\n        }\n      }, {\n        \"arcs\": [[5831, -5776, -5672, -5707, -5769, 5832, 5833]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29243\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Drăgănești\"\n        }\n      }, {\n        \"arcs\": [[-5773, -5747, -5676, -5723, 5834, 5835, 5836]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118824\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Pogăceaua\"\n        }\n      }, {\n        \"arcs\": [[5837, 5838, -5315, 5839, -5207, 5840, -5726, 5841, 5842]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21123\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Asău\"\n        }\n      }, {\n        \"arcs\": [[-5779, -5759, 5843, 5844]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164598\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Laza\"\n        }\n      }, {\n        \"arcs\": [[5845, 5846, -5748, -5800, 5847, 5848]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26379\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Itești\"\n        }\n      }, {\n        \"arcs\": [[5849, 5850, -5736, -5682, -5824, 5851]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117113\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Glodeni\"\n        }\n      }, {\n        \"arcs\": [[5852, 5853, -5719, 5854, -5686, 5855, 5856, 5857]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11423\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Mișca\"\n        }\n      }, {\n        \"arcs\": [[5858, -5835, -5725, -5733, -5743, 5859, 5860]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118370\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Miheșu de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[-5856, -5685, -5739, -5786, 5861, 5862]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12849\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Zerind\"\n        }\n      }, {\n        \"arcs\": [[5863, -5770, -5585, 5864, 5865, 5866, 5867]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29403\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Finiș\"\n        }\n      }, {\n        \"arcs\": [[5868, 5869, -5757, -5737, -5851, 5870, 5871]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117177\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Gornești\"\n        }\n      }, {\n        \"arcs\": [[5872, -5688, 5873, 5874, 5875]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163486\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Dragomirești\"\n        }\n      }, {\n        \"arcs\": [[5876, 5877, -5632, 5878, 5879, 5880, 5881]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57225\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Ciurila\"\n        }\n      }, {\n        \"arcs\": [[-5729, 5882, -5828, 5883, 5884]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22718\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Ghimeș-Făget\"\n        }\n      }, {\n        \"arcs\": [[5885, -5784, -5695, -5717, -5854, 5886]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9798\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Apateu\"\n        }\n      }, {\n        \"arcs\": [[5887, 5888, -5732, -5716, -5805, 5889]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163208\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Crețești\"\n        }\n      }, {\n        \"arcs\": [[5890, -5745, -5637, -5501, -5540, -5609, -5797, 5891]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85920\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Suseni\"\n        }\n      }, {\n        \"arcs\": [[5892, -5766, -5817, 5893]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58534\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mărișel\"\n        }\n      }, {\n        \"arcs\": [[-5830, -5627, -5701, -5744, -5891, 5894, 5895]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85760\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Sîndominic\"\n        }\n      }, {\n        \"arcs\": [[-5880, 5896, 5897, -5763, 5898, 5899]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59327\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Săvădisla\"\n        }\n      }, {\n        \"arcs\": [[5900, 5901, -5780, -5845, 5902, 5903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162452\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Bălteni\"\n        }\n      }, {\n        \"arcs\": [[5904, 5905, 5906, 5907, 5908, 5909]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26353\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Odobești\"\n        }\n      }, {\n        \"arcs\": [[5910, 5911, -5698, -5778, -5902, 5912, 5913]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161945\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Vaslui\"\n        }\n      }, {\n        \"arcs\": [[5914, -5790, 5915, -5755, 5916, 5917]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116126\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Chiheru de Jos\"\n        }\n      }, {\n        \"arcs\": [[5918, -5761, -5662, -5689, -5873, 5919, 5920]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164393\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Ivănești\"\n        }\n      }, {\n        \"arcs\": [[5921, 5922, -5802, 5923, -5710, -5712, -5814, 5924, 5925]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21506\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Blăgești\"\n        }\n      }, {\n        \"arcs\": [[-5822, -5810, -5704, 5926, 5927, -5846, 5928, 5929]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25228\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Săucești\"\n        }\n      }, {\n        \"arcs\": [[-5833, -5768, -5864, 5930, 5931, 5932]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26804\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Beiuș\"\n        }\n      }, {\n        \"arcs\": [[5933, -5871, -5850, 5934, 5935, 5936]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120316\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Voivodeni\"\n        }\n      }, {\n        \"arcs\": [[5937, -5929, -5849, 5938, 5939]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21249\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Berești-Bistrița\"\n        }\n      }, {\n        \"arcs\": [[5940, -5935, -5852, -5827, 5941, 5942]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115600\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Băla\"\n        }\n      }, {\n        \"arcs\": [[5943, 5944, -5812, -5823, -5930, -5938, 5945, 5946]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23644\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Negri\"\n        }\n      }, {\n        \"arcs\": [[5947, -5866, 5948, -5781, 5949, 5950, 5951]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31422\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Șoimi\"\n        }\n      }, {\n        \"arcs\": [[5952, -5860, -5742, -5792, 5953, 5954, 5955]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57742\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Frata\"\n        }\n      }, {\n        \"arcs\": [[5956, -5939, -5848, -5803, -5923, 5957, 5958]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24711\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Racova\"\n        }\n      }, {\n        \"arcs\": [[5959, -5914, 5960, 5961]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167302\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Muntenii de Sus\"\n        }\n      }, {\n        \"arcs\": [[-5925, -5813, 5962, 5963, 5964]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122061\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Cîndești\"\n        }\n      }, {\n        \"arcs\": [[-5917, -5758, -5870, 5965, 5966, 5967]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115708\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Beica de Jos\"\n        }\n      }, {\n        \"arcs\": [[5968, -5966, -5869, 5969]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118799\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Petelea\"\n        }\n      }, {\n        \"arcs\": [[-5950, -5785, -5886, 5970, 5971, 5972]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30229\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Olcea\"\n        }\n      }, {\n        \"arcs\": [[-5931, -5868, 5973, 5974, 5975]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30416\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Pocola\"\n        }\n      }, {\n        \"arcs\": [[5976, 5977, -5942, -5826, -5771, -5837, 5978, 5979]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118995\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Rîciu\"\n        }\n      }, {\n        \"arcs\": [[5980, -5808, 5981, -5911, -5960, 5982, 5983]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166182\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Tanacu\"\n        }\n      }, {\n        \"arcs\": [[5984, -5963, -5816, 5985, -5843, 5986, 5987]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124616\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Tazlău\"\n        }\n      }, {\n        \"arcs\": [[-5903, -5844, -5762, -5919, 5988, 5989]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163379\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Delești\"\n        }\n      }, {\n        \"arcs\": [[5990, -5722, 5991, 5992, 5993]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165979\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Stănilești\"\n        }\n      }, {\n        \"arcs\": [[5994, 5995, -5894, -5821, 5996, 5997]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59238\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Rîșca\"\n        }\n      }, {\n        \"arcs\": [[5998, -5943, -5978, 5999, 6000]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116340\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Crăiești\"\n        }\n      }, {\n        \"arcs\": [[-5974, -5867, -5948, 6001, 6002]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31921\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Uileacu de Beiuș\"\n        }\n      }, {\n        \"arcs\": [[6003, 6004, -5798, -5611, -5752, 6005, 6006]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84558\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Joseni\"\n        }\n      }, {\n        \"arcs\": [[-5989, -5921, 6007, 6008, 6009]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167277\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Cozmești\"\n        }\n      }, {\n        \"arcs\": [[6010, -5979, -5836, -5859, 6011, 6012]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119527\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sînpetru de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[6013, -5881, -5900, 6014, 6015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57706\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Florești\"\n        }\n      }, {\n        \"arcs\": [[6016, -5958, -5922, 6017, 6018]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20778\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Buhuși\"\n        }\n      }, {\n        \"arcs\": [[-5857, -5863, 6019, 6020]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27285\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Avram Iancu\"\n        }\n      }, {\n        \"arcs\": [[6021, -6008, -5920, -5876, 6022, 6023, 6024, 6025]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165611\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Pungești\"\n        }\n      }, {\n        \"arcs\": [[6026, -5964, -5985, 6027, 6028]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124028\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Rediu\"\n        }\n      }, {\n        \"arcs\": [[-6024, 6029, -5910, 6030, 6031, 6032]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23207\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Lipova\"\n        }\n      }, {\n        \"arcs\": [[6033, 6034, -5890, -5804, -5981, 6035, 6036, 6037]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166315\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Tătărăni\"\n        }\n      }, {\n        \"arcs\": [[6038, -5937, 6039, 6040]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115851\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Breaza\"\n        }\n      }, {\n        \"arcs\": [[-6040, -5936, -5941, -5999, 6041, 6042, 6043]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116723\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Fărăgău\"\n        }\n      }, {\n        \"arcs\": [[6044, -6018, -5926, -5965, -6027, 6045]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122132\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Costișa\"\n        }\n      }, {\n        \"arcs\": [[-5955, 6046, 6047, 6048]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59657\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Suatu\"\n        }\n      }, {\n        \"arcs\": [[-6012, -5861, -5953, 6049, 6050, 6051]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119242\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sarmașu\"\n        }\n      }, {\n        \"arcs\": [[6052, -5932, -5976, 6053, 6054, 6055]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30719\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Remetea\"\n        }\n      }, {\n        \"arcs\": [[6056, -5858, -6021, 6057, 6058]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28665\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Ciumeghiu\"\n        }\n      }, {\n        \"arcs\": [[6059, -6025, -6033, 6060, 6061, 6062, 6063]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164062\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Gîrceni\"\n        }\n      }, {\n        \"arcs\": [[6064, 6065, -5834, -5933, -6053, 6066]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28941\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Curățele\"\n        }\n      }, {\n        \"arcs\": [[6067, 6068, -5994, 6069, -6034, 6070, 6071]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163681\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Duda-Epureni\"\n        }\n      }, {\n        \"arcs\": [[-5904, -5990, -6010, 6072, 6073, 6074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166057\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Ștefan cel Mare\"\n        }\n      }, {\n        \"arcs\": [[6075, -6015, -5899, -5767, -5893, -5996, 6076, 6077, 6078]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57902\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Gilău\"\n        }\n      }, {\n        \"arcs\": [[6079, 6080, -5951, -5973, 6081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28763\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Cociuba Mare\"\n        }\n      }, {\n        \"arcs\": [[6082, -6002, -5952, -6081, 6083]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28139\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Căpîlna\"\n        }\n      }, {\n        \"arcs\": [[6084, -5971, -5887, -5853, -6057, 6085, 6086]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27383\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Batăr\"\n        }\n      }, {\n        \"arcs\": [[6087, -6054, -5975, -6003, -6083, 6088, 6089]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30648\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Răbăgani\"\n        }\n      }, {\n        \"arcs\": [[6090, -5819, 6091, 6092, 6093]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58464\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mărgău\"\n        }\n      }, {\n        \"arcs\": [[6094, -5980, -6011, 6095, 6096]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34422\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Silivașu de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[6097, -5959, -6017, 6098, 6099]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121153\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bahna\"\n        }\n      }, {\n        \"arcs\": [[6100, -6004, 6101, 6102]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84594\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Lăzarea\"\n        }\n      }, {\n        \"arcs\": [[6103, 6104, -6092, -5818, -5592, -5607, -5775, -5777, -5832, -6066, 6105]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27846\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Budureasa\"\n        }\n      }, {\n        \"arcs\": [[6106, -5884, -5831, -5896, 6107, 6108]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122249\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Dămuc\"\n        }\n      }, {\n        \"arcs\": [[6109, -6073, -6009, -6022, 6110, 6111]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165130\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Oșești\"\n        }\n      }, {\n        \"arcs\": [[6112, -6028, -5988, 6113, 6114, 6115, 6116]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121732\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Borlești\"\n        }\n      }, {\n        \"arcs\": [[6117, -5997, -5820, -6091, 6118]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56461\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Călățele\"\n        }\n      }, {\n        \"arcs\": [[6119, -6051, 6120, 6121, 6122]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56522\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cămărașu\"\n        }\n      }, {\n        \"arcs\": [[-6000, -5977, -6095, 6123, 6124]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35312\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Urmeniș\"\n        }\n      }, {\n        \"arcs\": [[-5983, -5962, 6125, 6126, 6127]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166636\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Văleni\"\n        }\n      }, {\n        \"arcs\": [[6128, 6129, 6130, -5946, -5940, -5957, -6098, 6131, 6132]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22576\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Filipești\"\n        }\n      }, {\n        \"arcs\": [[-6111, -6026, -6060, 6133, 6134]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167240\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Rafaila\"\n        }\n      }, {\n        \"arcs\": [[6135, -5998, -6118, 6136, 6137]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58393\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mănăstireni\"\n        }\n      }, {\n        \"arcs\": [[-6061, -6032, 6138, 6139, 6140]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123255\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Oniceni\"\n        }\n      }, {\n        \"arcs\": [[6141, 6142, -6067, -6056, 6143, 6144]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28077\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Căbești\"\n        }\n      }, {\n        \"arcs\": [[6145, -6102, -6007, 6146, 6147]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85412\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Remetea\"\n        }\n      }, {\n        \"arcs\": [[6148, 6149, 6150, -6147, -6006, -5754, -5791, -5915, 6151, 6152, 6153]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117550\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ibănești\"\n        }\n      }, {\n        \"arcs\": [[-6121, -6050, -5956, -6049, 6154, 6155, 6156]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58623\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mociu\"\n        }\n      }, {\n        \"arcs\": [[-6140, 6157, 6158, 6159, 6160, 6161]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124885\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Valea Ursului\"\n        }\n      }, {\n        \"arcs\": [[6162, -6108, -5895, -5892, -5799, -6005, -6101, 6163, 6164]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83561\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Gheorgheni\"\n        }\n      }, {\n        \"arcs\": [[6165, -6127, 6166, 6167, 6168]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167295\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Ferești\"\n        }\n      }, {\n        \"arcs\": [[6169, -6046, -6029, -6113, 6170, 6171]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123674\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Podoleni\"\n        }\n      }, {\n        \"arcs\": [[6172, -6074, -6110, 6173, 6174]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166985\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Vulturești\"\n        }\n      }, {\n        \"arcs\": [[-6132, -6100, 6175, 6176]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123228\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Moldoveni\"\n        }\n      }, {\n        \"arcs\": [[6177, -6087, 6178, 6179]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31841\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tulca\"\n        }\n      }, {\n        \"arcs\": [[-6077, -5995, -6136, 6180, 6181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56568\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Căpușu Mare\"\n        }\n      }, {\n        \"arcs\": [[6182, -6167, -6126, -5961, -5913, -5901, -6075, -6173, 6183]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167071\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Zăpodeni\"\n        }\n      }, {\n        \"arcs\": [[6184, 6185, 6186, 6187, 6188, 6189, 6190]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117783\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ideciu de Jos\"\n        }\n      }, {\n        \"arcs\": [[6191, -6155, -6048, 6192, 6193, 6194, 6195]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56354\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Căianu\"\n        }\n      }, {\n        \"arcs\": [[6196, -6036, -5984, -6128, -6166, 6197, 6198]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165899\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Solești\"\n        }\n      }, {\n        \"arcs\": [[6199, -6144, -6055, -6088, 6200, 6201]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30470\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Pomezeu\"\n        }\n      }, {\n        \"arcs\": [[6202, -6189, 6203, 6204]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119723\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Suseni\"\n        }\n      }, {\n        \"arcs\": [[6205, -6093, -6105, 6206]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59283\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Săcuieu\"\n        }\n      }, {\n        \"arcs\": [[-6201, -6090, 6207, 6208, 6209]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31057\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sîmbăta\"\n        }\n      }, {\n        \"arcs\": [[6210, -6042, -6001, -6125, 6211, 6212, 6213]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33881\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Milaș\"\n        }\n      }, {\n        \"arcs\": [[6214, 6215, -6082, -5972, -6085, -6178, 6216, 6217]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31789\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tinca\"\n        }\n      }, {\n        \"arcs\": [[-6153, 6218, 6219]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117426\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Hodac\"\n        }\n      }, {\n        \"arcs\": [[6220, 6221, -6109, -6163, 6222, 6223]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121297\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bicaz-Chei\"\n        }\n      }, {\n        \"arcs\": [[6224, -6208, -6089, -6084, -6080, -6216, 6225]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29573\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Holod\"\n        }\n      }, {\n        \"arcs\": [[6226, -6072, 6227, 6228]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162149\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Arsura\"\n        }\n      }, {\n        \"arcs\": [[-6212, -6124, -6097, 6229, 6230]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33845\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Miceștii de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[6231, 6232, -6115, 6233, 6234, 6235, 6236, 6237]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123479\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Piatra Șoimului\"\n        }\n      }, {\n        \"arcs\": [[6238, 6239, -6219, -6152, -5918, -5968, 6240, -6186, 6241, 6242, 6243]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117319\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Gurghiu\"\n        }\n      }, {\n        \"arcs\": [[6244, 6245, -6137, -6119, -6094, -6206, 6246]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59434\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Sâncraiu\"\n        }\n      }, {\n        \"arcs\": [[6247, -6068, -6227, 6248, 6249]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163618\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Drînceni\"\n        }\n      }, {\n        \"arcs\": [[-6195, 6250, 6251, 6252, 6253]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58259\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Jucu\"\n        }\n      }, {\n        \"arcs\": [[6254, -6181, -6138, -6246, 6255, 6256, 6257]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58204\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Izvoru Crișului\"\n        }\n      }, {\n        \"arcs\": [[6258, 6259, -6134, -6064, 6260, 6261]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163734\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Dumești\"\n        }\n      }, {\n        \"arcs\": [[6262, -6145, -6200, 6263, 6264]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30844\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Roșia\"\n        }\n      }, {\n        \"arcs\": [[6265, -6123, 6266, 6267]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56773\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cătina\"\n        }\n      }, {\n        \"arcs\": [[6268, -6148, -6151, 6269, 6270, 6271]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85877\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Subcetate\"\n        }\n      }, {\n        \"arcs\": [[6272, -6174, -6112, 6273, 6274, 6275]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161856\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Negrești\"\n        }\n      }, {\n        \"arcs\": [[6276, -6191, 6277, 6278]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115147\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Aluniș\"\n        }\n      }, {\n        \"arcs\": [[6279, -6156, -6192, 6280, 6281, 6282]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58794\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Pălatca\"\n        }\n      }, {\n        \"arcs\": [[6283, 6284, -6232, 6285, 6286]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120824\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Săvinești\"\n        }\n      }, {\n        \"arcs\": [[6287, 6288, -6164, -6103, -6146, -6269, 6289, 6290]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84344\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Ditrău\"\n        }\n      }, {\n        \"arcs\": [[-6234, -6114, -5987, -5842, -5730, -5885, -6107, -6222, 6291, 6292, 6293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124493\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Tarcău\"\n        }\n      }, {\n        \"arcs\": [[[-6242, -6185, -6277, 6294]], [[6295, -6278, -6190, -6203, 6296, 6297, 6298]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"115897\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Brîncovenești\"\n        }\n      }, {\n        \"arcs\": [[-6179, -6086, -6059, 6299, 6300]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26975\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Salonta\"\n        }\n      }, {\n        \"arcs\": [[6301, -6267, -6122, -6157, -6280, 6302]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57831\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Geaca\"\n        }\n      }, {\n        \"arcs\": [[6303, 6304, -6079, 6305, 6306]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57948\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Gîrbău\"\n        }\n      }, {\n        \"arcs\": [[6307, 6308, -6213, -6231, 6309, 6310, 6311, 6312]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34477\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Sînmihaiu de Cîmpie\"\n        }\n      }, {\n        \"arcs\": [[6313, -6256, -6245, 6314, 6315]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55446\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Huedin\"\n        }\n      }, {\n        \"arcs\": [[-6286, -6238, 6316, 6317]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120771\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Dumbrava Roșie\"\n        }\n      }, {\n        \"arcs\": [[6318, -6292, -6221, 6319, 6320]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124563\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Tașca\"\n        }\n      }, {\n        \"arcs\": [[6321, 6322, -6217, -6180, -6301, 6323, 6324]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30014\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Mădăras\"\n        }\n      }, {\n        \"arcs\": [[-6243, -6295, -6279, -6296, 6325, 6326]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119153\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Rușii-Munți\"\n        }\n      }, {\n        \"arcs\": [[6327, -6271, 6328]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84460\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Gălăuțaș\"\n        }\n      }, {\n        \"arcs\": [[-6281, -6196, -6254, 6329, 6330, 6331, 6332]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56210\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Bonțida\"\n        }\n      }, {\n        \"arcs\": [[6333, 6334, -6226, -6215, 6335, 6336]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29813\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Lăzăreni\"\n        }\n      }, {\n        \"arcs\": [[-6320, -6224, 6337, 6338, 6339]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121340\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bicazu Ardelean\"\n        }\n      }, {\n        \"arcs\": [[6340, -6336, -6218, -6323, 6341, 6342]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29662\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Husasău de Tinca\"\n        }\n      }, {\n        \"arcs\": [[6343, -6330, -6253, 6344, 6345]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56265\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Borșa\"\n        }\n      }, {\n        \"arcs\": [[6346, 6347, 6348, -6264, -6202, -6210, 6349, 6350]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29154\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Dobrești\"\n        }\n      }, {\n        \"arcs\": [[6351, -6315, -6247, -6207, -6104, 6352, 6353]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59041\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Poieni\"\n        }\n      }, {\n        \"arcs\": [[6354, 6355, 6356, -6304, 6357, 6358, 6359]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59586\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Sînpaul\"\n        }\n      }, {\n        \"arcs\": [[-6350, -6209, -6225, -6335, 6360, 6361, 6362]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28335\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Ceica\"\n        }\n      }, {\n        \"arcs\": [[6363, -6290, -6272, -6328, 6364]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85528\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Sărmaș\"\n        }\n      }, {\n        \"arcs\": [[6365, 6366, 6367, -6284, 6368, 6369]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125098\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Dochia\"\n        }\n      }, {\n        \"arcs\": [[6370, -6353, -6106, -6065, -6143, 6371, 6372]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27935\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Bulz\"\n        }\n      }, {\n        \"arcs\": [[6373, 6374, -6282, -6333, 6375, 6376]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59416\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Sic\"\n        }\n      }, {\n        \"arcs\": [[-6306, -6078, -6182, -6255, 6377]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55473\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Aghireșu\"\n        }\n      }, {\n        \"arcs\": [[6378, 6379, 6380, 6381]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98202\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Moșna\"\n        }\n      }, {\n        \"arcs\": [[6382, -6325, 6383, 6384]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28246\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Cefa\"\n        }\n      }, {\n        \"arcs\": [[6385, -6298, 6386, 6387]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33952\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Monor\"\n        }\n      }, {\n        \"arcs\": [[6388, -6265, -6349, 6389, 6390]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31510\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Șuncuiuș\"\n        }\n      }, {\n        \"arcs\": [[6391, 6392, -6275, 6393, 6394, 6395, 6396]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97553\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ipatele\"\n        }\n      }, {\n        \"arcs\": [[-6316, -6352, 6397, 6398, 6399, 6400]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141081\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Fildu de Jos\"\n        }\n      }, {\n        \"arcs\": [[6401, -6342, -6322, -6383, 6402]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32195\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Gepiu\"\n        }\n      }, {\n        \"arcs\": [[-6369, -6287, -6318, 6403, 6404, 6405, 6406, 6407]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122702\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Girov\"\n        }\n      }, {\n        \"arcs\": [[-6244, -6327, 6408, 6409]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116545\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Deda\"\n        }\n      }, {\n        \"arcs\": [[6410, -6372, -6142, -6263, -6389, 6411]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27686\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Bratca\"\n        }\n      }, {\n        \"arcs\": [[-6361, -6334, 6412, 6413]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29341\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Drăgești\"\n        }\n      }, {\n        \"arcs\": [[6414, -6413, -6337, -6341, 6415, 6416, 6417]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29519\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Hidișelu de Sus\"\n        }\n      }, {\n        \"arcs\": [[6418, -6346, 6419, -6355, 6420, 6421]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60099\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Vultureni\"\n        }\n      }, {\n        \"arcs\": [[6422, -6338, -6223, -6165, -6289, 6423]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86133\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Tulgheș\"\n        }\n      }, {\n        \"arcs\": [[-6406, 6424, 6425, 6426]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122285\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Dobreni\"\n        }\n      }, {\n        \"arcs\": [[6427, -6257, -6314, -6401, 6428, 6429]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139982\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Almașu\"\n        }\n      }, {\n        \"arcs\": [[6430, -6293, -6319, 6431, 6432]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120968\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bicaz\"\n        }\n      }, {\n        \"arcs\": [[6433, -6373, -6411, 6434, 6435]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60169\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Negreni\"\n        }\n      }, {\n        \"arcs\": [[6436, -6358, -6307, -6378, -6258, -6428, 6437, 6438, 6439]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140869\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Cuzăplac\"\n        }\n      }, {\n        \"arcs\": [[6440, 6441, 6442, -6359, -6437, 6443]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143147\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Zimbor\"\n        }\n      }, {\n        \"arcs\": [[6444, 6445, -6351, -6363, 6446, 6447]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32090\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Vârciorog\"\n        }\n      }, {\n        \"arcs\": [[6448, -6331, -6344, -6419, 6449, 6450]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57546\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Dăbîca\"\n        }\n      }, {\n        \"arcs\": [[6451, -6421, -6360, -6443, 6452]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55776\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Așchileu\"\n        }\n      }, {\n        \"arcs\": [[-6149, 6453, 6454]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119625\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Stînceni\"\n        }\n      }, {\n        \"arcs\": [[6455, -6388, 6456, 6457, 6458, 6459]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34850\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Șieuț\"\n        }\n      }, {\n        \"arcs\": [[6460, -6390, -6348, 6461, 6462, 6463]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31976\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Vadu Crișului\"\n        }\n      }, {\n        \"arcs\": [[6464, -6311, 6465, 6466, 6467, 6468, 6469]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33015\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Chiochiș\"\n        }\n      }, {\n        \"arcs\": [[6470, -6403, -6385, 6471, 6472]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32179\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sănnicolau Romăn\"\n        }\n      }, {\n        \"arcs\": [[6473, -6377, 6474, 6475]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55384\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Gherla\"\n        }\n      }, {\n        \"arcs\": [[-6459, 6476, 6477, 6478]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34645\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Șieu\"\n        }\n      }, {\n        \"arcs\": [[6479, 6480, 6481, -6374, -6474, 6482]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57644\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Fizeșu Gherlii\"\n        }\n      }, {\n        \"arcs\": [[-6417, 6483, 6484, 6485]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26582\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sînmartin\"\n        }\n      }, {\n        \"arcs\": [[6486, -6447, -6362, -6414, -6415, 6487, 6488]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28816\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Copăcel\"\n        }\n      }, {\n        \"arcs\": [[6489, 6490, 6491, 6492]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122392\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Dragomirești\"\n        }\n      }, {\n        \"arcs\": [[6493, -6463, 6494, 6495]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30069\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Măgești\"\n        }\n      }, {\n        \"arcs\": [[6496, -6312, -6465, 6497]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33658\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Matei\"\n        }\n      }, {\n        \"arcs\": [[-6491, 6498, -6370, -6408, 6499, 6500]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124411\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Ștefan cel Mare\"\n        }\n      }, {\n        \"arcs\": [[6501, -6469, 6502, -6481, 6503]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59498\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Sânmărtin\"\n        }\n      }, {\n        \"arcs\": [[6504, -6495, -6462, -6347, -6446, 6505, 6506]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26742\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Aștileu\"\n        }\n      }, {\n        \"arcs\": [[6507, -6484, -6416, -6343, -6402, -6471, 6508, 6509, 6510]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30149\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Nojorid\"\n        }\n      }, {\n        \"arcs\": [[6511, -6432, -6321, -6340, 6512, 6513]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122025\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Ceahlău\"\n        }\n      }, {\n        \"arcs\": [[-6444, -6440, 6514, 6515, 6516]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142676\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Sînmihaiu Almașului\"\n        }\n      }, {\n        \"arcs\": [[6517, -6424, -6288, 6518, 6519, 6520, 6521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"84148\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Corbu\"\n        }\n      }, {\n        \"arcs\": [[6522, -6506, -6445, 6523]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31878\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Țețchea\"\n        }\n      }, {\n        \"arcs\": [[-6453, -6442, 6524, 6525]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141027\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Dragu\"\n        }\n      }, {\n        \"arcs\": [[6526, 6527, -6435, -6412, -6391, -6461, 6528, 6529]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27560\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Borod\"\n        }\n      }, {\n        \"arcs\": [[-6513, -6339, -6423, -6518, 6530, 6531]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122864\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Grințieș\"\n        }\n      }, {\n        \"arcs\": [[6532, -6313, -6497, 6533, 6534, 6535]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33435\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Lechința\"\n        }\n      }, {\n        \"arcs\": [[6536, 6537, 6538, 6539]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55623\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Aluniș\"\n        }\n      }, {\n        \"arcs\": [[6540, 6541, 6542, -6450, -6422, -6452, -6526, 6543, 6544]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58856\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Panticeu\"\n        }\n      }, {\n        \"arcs\": [[6545, -6409, -6326, -6299, -6386, -6456, 6546, 6547]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120138\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Vătava\"\n        }\n      }, {\n        \"arcs\": [[6548, -6483, -6476, 6549, 6550, 6551]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58552\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mintiu Gherlii\"\n        }\n      }, {\n        \"arcs\": [[6552, -6488, -6418, -6486, 6553, 6554, 6555]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30274\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Oșorhei\"\n        }\n      }, {\n        \"arcs\": [[6556, -6492, -6501, 6557, 6558]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123969\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Războieni\"\n        }\n      }, {\n        \"arcs\": [[6559, -6515, -6439, 6560, 6561, 6562]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139937\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Agrij\"\n        }\n      }, {\n        \"arcs\": [[6563, -6365, -6329, -6270, -6150, -6455, 6564, 6565, 6566]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83632\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Toplița\"\n        }\n      }, {\n        \"arcs\": [[-6547, -6460, -6479, 6567, 6568, 6569, 6570]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179686\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Dumitrița\"\n        }\n      }, {\n        \"arcs\": [[6571, -6489, -6553, 6572]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30871\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Săcădat\"\n        }\n      }, {\n        \"arcs\": [[6573, -6511, 6574, 6575]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26653\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sîntandrei\"\n        }\n      }, {\n        \"arcs\": [[6576, -6565, -6454, -6154, -6220, -6240, 6577, 6578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118058\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Lunca Bradului\"\n        }\n      }, {\n        \"arcs\": [[6579, -6569, 6580, 6581]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32704\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Budacu de Jos\"\n        }\n      }, {\n        \"arcs\": [[6582, -6570, -6580, 6583, 6584]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32884\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Cetate\"\n        }\n      }, {\n        \"arcs\": [[-6578, -6239, -6410, -6546, 6585, 6586]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118931\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Răstolița\"\n        }\n      }, {\n        \"arcs\": [[6587, 6588, 6589, -6436, -6528, 6590, 6591]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142612\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Sîg\"\n        }\n      }, {\n        \"arcs\": [[-6509, -6473, 6592, 6593]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32201\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Toboliu\"\n        }\n      }, {\n        \"arcs\": [[6594, -6534, -6498, -6470, -6502, 6595, 6596, 6597]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34075\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Nușeni\"\n        }\n      }, {\n        \"arcs\": [[-6563, 6598, 6599, 6600]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179631\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Treznea\"\n        }\n      }, {\n        \"arcs\": [[6601, -6575, -6510, -6594, 6602]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29467\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Girișu de Criș\"\n        }\n      }, {\n        \"arcs\": [[6603, 6604, -6433, -6512, 6605, 6606, 6607]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122953\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Hangu\"\n        }\n      }, {\n        \"arcs\": [[6608, 6609, -6588, 6610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140208\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Bănișor\"\n        }\n      }, {\n        \"arcs\": [[-6507, -6523, 6611, 6612, 6613]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29902\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Lugașu de Jos\"\n        }\n      }, {\n        \"arcs\": [[6614, -6573, -6556, 6615, 6616, 6617]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29724\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Ineu\"\n        }\n      }, {\n        \"arcs\": [[6618, -6612, -6524, -6448, -6487, -6572, -6615, 6619]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31716\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tileagd\"\n        }\n      }, {\n        \"arcs\": [[-6616, -6555, 6620, 6621, 6622]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32161\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Paleu\"\n        }\n      }, {\n        \"arcs\": [[6623, 6624, 6625, 6626, 6627]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97517\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Horlești\"\n        }\n      }, {\n        \"arcs\": [[6628, 6629, -6516, -6560, -6601, 6630, 6631]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142426\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Românași\"\n        }\n      }, {\n        \"arcs\": [[6632, -6535, -6595, 6633, 6634]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34770\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Șieu-Odorhei\"\n        }\n      }, {\n        \"arcs\": [[6635, 6636, -6530, 6637, 6638, 6639, 6640]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142337\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Plopiș\"\n        }\n      }, {\n        \"arcs\": [[-6621, -6554, -6485, -6508, -6574, 6641, 6642]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26564\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Oradea\"\n        }\n      }, {\n        \"arcs\": [[6643, 6644, -6542, 6645, 6646, 6647, 6648]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56096\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Bobîlna\"\n        }\n      }, {\n        \"arcs\": [[6649, -6597, 6650, 6651, 6652, 6653]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32660\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Braniștea\"\n        }\n      }, {\n        \"arcs\": [[-6646, -6541, 6654, 6655, 6656]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59130\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Recea-Cristur\"\n        }\n      }, {\n        \"arcs\": [[6657, 6658, -6496, -6505, -6614, 6659, 6660]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26699\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Aleșd\"\n        }\n      }, {\n        \"arcs\": [[-6606, -6514, -6532, 6661, 6662, 6663]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123790\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Poiana Teiului\"\n        }\n      }, {\n        \"arcs\": [[6664, 6665, -6599, -6562, 6666, 6667, 6668, 6669]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142079\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Meseșenii de Jos\"\n        }\n      }, {\n        \"arcs\": [[6670, 6671, -6634, -6598, -6650, 6672, 6673]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32483\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Beclean\"\n        }\n      }, {\n        \"arcs\": [[6674, -6655, -6545, 6675, 6676, 6677, 6678]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141232\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Gîrbou\"\n        }\n      }, {\n        \"arcs\": [[6679, 6680, -6660, -6613, -6619, 6681, 6682]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27757\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Brusturi\"\n        }\n      }, {\n        \"arcs\": [[6683, 6684, 6685, 6686]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124849\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Urecheni\"\n        }\n      }, {\n        \"arcs\": [[6687, -6640, 6688, 6689, 6690, 6691]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141312\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Halmășd\"\n        }\n      }, {\n        \"arcs\": [[6692, 6693, 6694, 6695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55062\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cuzdrioara\"\n        }\n      }, {\n        \"arcs\": [[6696, 6697, -6642, -6576, -6602, 6698]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27631\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Borș\"\n        }\n      }, {\n        \"arcs\": [[6699, -6617, -6623, 6700, 6701]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28415\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Cetariu\"\n        }\n      }, {\n        \"arcs\": [[6702, -6701, -6622, -6643, -6698, 6703]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27436\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Biharia\"\n        }\n      }, {\n        \"arcs\": [[6704, 6705, -6585, 6706, 6707]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33541\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Livezile\"\n        }\n      }, {\n        \"arcs\": [[6708, -6656, -6675, 6709, 6710, 6711]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143067\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Zalha\"\n        }\n      }, {\n        \"arcs\": [[6712, 6713, -6631, -6600, -6666, 6714, 6715]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139704\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Zalău\"\n        }\n      }, {\n        \"arcs\": [[6716, -6653, 6717, 6718, 6719]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34173\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Petru Rareș\"\n        }\n      }, {\n        \"arcs\": [[-6663, 6720, 6721]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122551\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Farcașa\"\n        }\n      }, {\n        \"arcs\": [[-6670, 6722, 6723, 6724]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143021\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Vîrșolț\"\n        }\n      }, {\n        \"arcs\": [[6725, -6632, -6714, 6726, 6727]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140672\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Creaca\"\n        }\n      }, {\n        \"arcs\": [[6728, 6729, -6705, 6730, 6731]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33382\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Josenii Bîrgăului\"\n        }\n      }, {\n        \"arcs\": [[6732, 6733, 6734, -6648, 6735, 6736]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59942\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Vad\"\n        }\n      }, {\n        \"arcs\": [[6737, -6682, -6620, -6618, -6700, 6738, 6739]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31128\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sîrbi\"\n        }\n      }, {\n        \"arcs\": [[6740, 6741, 6742, 6743, 6744, 6745]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33202\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Dumitra\"\n        }\n      }, {\n        \"arcs\": [[6746, -6683, -6738, 6747, 6748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31208\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Spinuș\"\n        }\n      }, {\n        \"arcs\": [[-6710, -6679, 6749, 6750]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140770\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Cristolț\"\n        }\n      }, {\n        \"arcs\": [[-6673, -6654, -6717, 6751, 6752, 6753]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35269\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Uriu\"\n        }\n      }, {\n        \"arcs\": [[6754, -6736, -6647, -6657, -6709, 6755]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179695\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Șimișna\"\n        }\n      }, {\n        \"arcs\": [[6756, 6757, 6758, 6759]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96003\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ungheni\"\n        }\n      }, {\n        \"arcs\": [[6760, -6680, -6747, 6761]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29038\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Derna\"\n        }\n      }, {\n        \"arcs\": [[6762, 6763, 6764]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149682\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Panaci\"\n        }\n      }, {\n        \"arcs\": [[6765, 6766, -6729, 6767, 6768]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34235\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Prundu Bîrgăului\"\n        }\n      }, {\n        \"arcs\": [[6769, 6770, -6628, 6771, 6772]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97679\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Lețcani\"\n        }\n      }, {\n        \"arcs\": [[6773, 6774, 6775, 6776, -6687, 6777, 6778]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98220\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Moțca\"\n        }\n      }, {\n        \"arcs\": [[-6727, -6713, 6779, 6780, 6781]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142122\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Mirșid\"\n        }\n      }, {\n        \"arcs\": [[-6719, 6782, -6693, 6783, 6784, 6785]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179953\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Ciceu - Mihăiești\"\n        }\n      }, {\n        \"arcs\": [[6786, -6733, 6787, 6788]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57314\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cîțcău\"\n        }\n      }, {\n        \"arcs\": [[6789, 6790, 6791, -6692, 6792, 6793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141722\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Ip\"\n        }\n      }, {\n        \"arcs\": [[6794, 6795, -6607, -6664, -6722, 6796, 6797, 6798]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123521\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Pipirig\"\n        }\n      }, {\n        \"arcs\": [[6799, -6671, 6800, 6801, 6802, 6803]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33122\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Chiuza\"\n        }\n      }, {\n        \"arcs\": [[6804, 6805, 6806, 6807, 6808]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95747\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Aroneanu\"\n        }\n      }, {\n        \"arcs\": [[6809, 6810, 6811, 6812, 6813]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139884\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Șimleu Silvaniei\"\n        }\n      }, {\n        \"arcs\": [[6814, -6780, -6716, 6815]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140823\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Crișeni\"\n        }\n      }, {\n        \"arcs\": [[6816, 6817, -6690, 6818, -6661, -6681, -6761, 6819, 6820, 6821]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30568\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Popești\"\n        }\n      }, {\n        \"arcs\": [[6822, -6704, -6697, 6823, 6824]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32153\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tămășeu\"\n        }\n      }, {\n        \"arcs\": [[6825, -6817, 6826, 6827]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31262\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Suplacu de Barcău\"\n        }\n      }, {\n        \"arcs\": [[6828, 6829, -6724, 6830, -6810, 6831]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142284\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Pericei\"\n        }\n      }, {\n        \"arcs\": [[6832, -6784, -6696, 6833, -6734, -6787, 6834]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56666\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cășeiu\"\n        }\n      }, {\n        \"arcs\": [[6835, -6764, 6836, -6566, -6577, 6837, 6838, 6839, 6840]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150445\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Șaru Dornei\"\n        }\n      }, {\n        \"arcs\": [[6841, -6745, 6842, -6804, 6843, 6844]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33989\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Nimigea\"\n        }\n      }, {\n        \"arcs\": [[6845, 6846, -6797, -6721, -6662, -6531, -6522, 6847, 6848]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121652\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Borca\"\n        }\n      }, {\n        \"arcs\": [[6849, -6739, -6702, -6703, -6823, 6850, 6851]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31011\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sălard\"\n        }\n      }, {\n        \"arcs\": [[6852, -6752, -6720, -6786, 6853]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32955\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Ciceu-Giurgești\"\n        }\n      }, {\n        \"arcs\": [[-6848, -6521, 6854, -6765, -6836, 6855, 6856, 6857]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147358\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Broșteni\"\n        }\n      }, {\n        \"arcs\": [[6858, 6859, 6860, 6861]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121938\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Brusturi\"\n        }\n      }, {\n        \"arcs\": [[6862, -6793, -6691, -6818, -6826, 6863]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141946\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Marca\"\n        }\n      }, {\n        \"arcs\": [[6864, -6756, -6712, 6865, 6866]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142499\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Rus\"\n        }\n      }, {\n        \"arcs\": [[-6851, -6825, 6867, 6868]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32187\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Roșiori\"\n        }\n      }, {\n        \"arcs\": [[6869, -6748, -6740, -6850, 6870, 6871]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28610\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sâniob\"\n        }\n      }, {\n        \"arcs\": [[6872, 6873, 6874, 6875, 6876]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140084\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Băbeni\"\n        }\n      }, {\n        \"arcs\": [[6877, 6878, -6768, -6732, 6879, 6880]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33364\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Ilva Mica\"\n        }\n      }, {\n        \"arcs\": [[6881, 6882, -6816, -6715, -6665, -6725, -6830, 6883, 6884, 6885]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141376\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Hereclean\"\n        }\n      }, {\n        \"arcs\": [[6886, -6788, -6737, -6755, -6865, 6887]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141134\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Gîlgău\"\n        }\n      }, {\n        \"arcs\": [[-6801, -6674, -6754, 6888, 6889]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32811\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Căianu Mic\"\n        }\n      }, {\n        \"arcs\": [[6890, 6891, -6859, 6892, 6893]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125132\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Drăgănești\"\n        }\n      }, {\n        \"arcs\": [[6894, 6895, -6769, -6879, 6896, 6897]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33514\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Leșu\"\n        }\n      }, {\n        \"arcs\": [[6898, -6835, -6789, -6887, 6899, 6900]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142373\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Poiana Blenchii\"\n        }\n      }, {\n        \"arcs\": [[6901, 6902, -6781, -6815, -6883, 6903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140958\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Dobrin\"\n        }\n      }, {\n        \"arcs\": [[-6746, -6842, 6904, 6905, 6906]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32544\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Năsăud\"\n        }\n      }, {\n        \"arcs\": [[6907, -6820, -6762, -6749, -6870, 6908, 6909]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28530\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Chișlaz\"\n        }\n      }, {\n        \"arcs\": [[-6884, -6829, 6910, 6911, 6912]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140324\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Bocșa\"\n        }\n      }, {\n        \"arcs\": [[6913, -6838, -6579, -6587, 6914, 6915, 6916, 6917]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149851\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Poiana Stampei\"\n        }\n      }, {\n        \"arcs\": [[6918, -6821, -6908, 6919, 6920]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31654\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tăuteu\"\n        }\n      }, {\n        \"arcs\": [[-6866, -6711, -6751, 6921, -6873, 6922, 6923]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141884\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Lozna\"\n        }\n      }, {\n        \"arcs\": [[6924, -6813, 6925, -6791, 6926, 6927]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142006\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Măeriște\"\n        }\n      }, {\n        \"arcs\": [[6928, -6794, -6863, 6929, 6930, 6931]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140440\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Camăr\"\n        }\n      }, {\n        \"arcs\": [[6932, -6802, -6890, 6933, 6934]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34547\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Spermezeu\"\n        }\n      }, {\n        \"arcs\": [[-6927, -6790, -6929, 6935]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140477\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Carastelec\"\n        }\n      }, {\n        \"arcs\": [[6936, -6880, -6731, -6708, 6937, -6742, 6938, 6939, 6940]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33248\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Feldru\"\n        }\n      }, {\n        \"arcs\": [[6941, -6897, -6878, 6942, 6943]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179720\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Poiana  Ilvei\"\n        }\n      }, {\n        \"arcs\": [[6944, -6930, -6864, -6828, 6945, 6946, 6947]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27329\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Balc\"\n        }\n      }, {\n        \"arcs\": [[6948, 6949, -6854, -6785, -6833, -6899, 6950, 6951]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57083\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Chiuiești\"\n        }\n      }, {\n        \"arcs\": [[6952, -6886, 6953, 6954, 6955]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140583\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Coșeiu\"\n        }\n      }, {\n        \"arcs\": [[6956, -6893, -6862, 6957, 6958, 6959, 6960]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147072\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Boroaia\"\n        }\n      }, {\n        \"arcs\": [[6961, -6898, -6942, 6962, 6963]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33729\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Măgura Ilvei\"\n        }\n      }, {\n        \"arcs\": [[-6940, 6964, 6965]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34262\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Rebra\"\n        }\n      }, {\n        \"arcs\": [[6966, 6967, 6968, 6969, 6970, 6971]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98257\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Movileni\"\n        }\n      }, {\n        \"arcs\": [[6972, -6934, -6889, -6753, -6853, -6950, 6973]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179659\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Negrilești\"\n        }\n      }, {\n        \"arcs\": [[-6946, -6827, -6822, -6919, 6974, 6975]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27070\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Abram\"\n        }\n      }, {\n        \"arcs\": [[6976, -6954, -6885, -6913, 6977]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142854\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Șamșud\"\n        }\n      }, {\n        \"arcs\": [[6978, -6923, -6877, 6979, 6980]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141786\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Letca\"\n        }\n      }, {\n        \"arcs\": [[-6960, 6981, 6982, 6983]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147054\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bogdănești\"\n        }\n      }, {\n        \"arcs\": [[-6911, -6832, -6814, -6925, 6984, 6985]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142881\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Șărmășag\"\n        }\n      }, {\n        \"arcs\": [[6986, 6987, -6900, -6888, -6867, -6924, -6979, 6988, 6989]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141580\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Ileanda\"\n        }\n      }, {\n        \"arcs\": [[6990, 6991, 6992, 6993]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179944\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Runcu Salvei\"\n        }\n      }, {\n        \"arcs\": [[6994, 6995, -6895, -6962, 6996, 6997]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33337\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Ilva Mare\"\n        }\n      }, {\n        \"arcs\": [[6998, -6906, 6999, -6992, 7000]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33177\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Coșbuc\"\n        }\n      }, {\n        \"arcs\": [[7001, 7002, -6904, -6882, -6953, 7003, 7004]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142550\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Sălățig\"\n        }\n      }, {\n        \"arcs\": [[-6920, -6910, 7005, 7006, 7007]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27169\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Abrămuț\"\n        }\n      }, {\n        \"arcs\": [[-6982, -6959, 7008, -6799, 7009, 7010, 7011]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150114\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Rîșca\"\n        }\n      }, {\n        \"arcs\": [[7012, -6871, -6852, -6869, 7013]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29092\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Diosig\"\n        }\n      }, {\n        \"arcs\": [[-6849, -6858, 7014, 7015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149655\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Ostra\"\n        }\n      }, {\n        \"arcs\": [[7016, 7017, -6839, -6914, 7018]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148202\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dorna Candrenilor\"\n        }\n      }, {\n        \"arcs\": [[7019, -6840, -7018, 7020, 7021]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146744\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vatra Dornei\"\n        }\n      }, {\n        \"arcs\": [[7022, -6917, 7023, -6995, 7024]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33603\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Lunca Ilvei\"\n        }\n      }, {\n        \"arcs\": [[7025, -6980, -6876, 7026, 7027, 7028, 7029]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142177\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Năpradea\"\n        }\n      }, {\n        \"arcs\": [[7030, 7031, 7032]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96147\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ceplenița\"\n        }\n      }, {\n        \"arcs\": [[7033, -6957, 7034, 7035]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150766\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vadu Moldovei\"\n        }\n      }, {\n        \"arcs\": [[-6951, -6901, -6988, 7036, 7037]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107868\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Coroieni\"\n        }\n      }, {\n        \"arcs\": [[7038, -6985, -6928, -6936, -6932, 7039, 7040, 7041]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140280\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Bobota\"\n        }\n      }, {\n        \"arcs\": [[-6978, -6912, -6986, -7039, 7042, 7043]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140501\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Chieșd\"\n        }\n      }, {\n        \"arcs\": [[7044, -6990, 7045, 7046]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107430\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Boiu Mare\"\n        }\n      }, {\n        \"arcs\": [[7047, -7006, -6909, -6872, -7013, 7048, 7049, 7050]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30915\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Săcueni\"\n        }\n      }, {\n        \"arcs\": [[7051, -6856, -6841, -7020, 7052, 7053]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148131\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dorna-Arini\"\n        }\n      }, {\n        \"arcs\": [[7054, -7035, -6961, -6984, 7055, 7056]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151488\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Fântâna Mare\"\n        }\n      }, {\n        \"arcs\": [[-7029, 7057, -7002, 7058, 7059]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140244\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Benesat\"\n        }\n      }, {\n        \"arcs\": [[7060, -6948, 7061, 7062]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27506\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Boianu Mare\"\n        }\n      }, {\n        \"arcs\": [[7063, -7015, -6857, -7052, 7064]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147884\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Crucea\"\n        }\n      }, {\n        \"arcs\": [[-7046, -6989, -6981, -7026, 7065, 7066, 7067]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109354\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Valea Chioarului\"\n        }\n      }, {\n        \"arcs\": [[7068, -7004, -6956, 7069, 7070, 7071]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137844\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Hodod\"\n        }\n      }, {\n        \"arcs\": [[7072, -7056, -6983, -7012, 7073, 7074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146904\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Baia\"\n        }\n      }, {\n        \"arcs\": [[7075, -7062, -6947, -6976, 7076, 7077]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32045\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Viișoara\"\n        }\n      }, {\n        \"arcs\": [[7078, -7007, -7048, 7079, 7080, 7081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27908\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Buduslău\"\n        }\n      }, {\n        \"arcs\": [[7082, -7077, -6975, -6921, -7008, -7079, 7083]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26877\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Marghita\"\n        }\n      }, {\n        \"arcs\": [[7084, -7037, -6987, -7045, 7085, 7086]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109425\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Vima Mică\"\n        }\n      }, {\n        \"arcs\": [[7087, -6974, -6949, 7088, 7089, 7090]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109041\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Suciu de Sus\"\n        }\n      }, {\n        \"arcs\": [[7091, -7080, -7051, 7092]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"28497\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Cherechiu\"\n        }\n      }, {\n        \"arcs\": [[7093, -7010, -6798, -6847, 7094, 7095, 7096]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149316\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Mălini\"\n        }\n      }, {\n        \"arcs\": [[7097, -6941, -6966, 7098]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34155\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Parva\"\n        }\n      }, {\n        \"arcs\": [[-7096, 7099, 7100, 7101, 7102, 7103]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150258\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Slatina\"\n        }\n      }, {\n        \"arcs\": [[7104, -7072, 7105, 7106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108366\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Oarța de Jos\"\n        }\n      }, {\n        \"arcs\": [[7107, 7108, 7109, -7057, -7073, 7110]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146539\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Fălticeni\"\n        }\n      }, {\n        \"arcs\": [[7111, -7100, -7095, -6846, -7016, -7064, 7112, 7113]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150356\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Stulpicani\"\n        }\n      }, {\n        \"arcs\": [[7114, 7115, -7070, -6955, -6977, -7044, 7116]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137130\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Bogdand\"\n        }\n      }, {\n        \"arcs\": [[7117, 7118, -7036, -7055, -7110, 7119, 7120]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149968\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Preutești\"\n        }\n      }, {\n        \"arcs\": [[7121, -6935, -6973, -7088, 7122]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35152\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Tîrlișua\"\n        }\n      }, {\n        \"arcs\": [[7123, 7124, -7019, -6918, -7023, 7125, 7126]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151497\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Coșna\"\n        }\n      }, {\n        \"arcs\": [[7127, -7106, -7071, -7116, 7128]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107234\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Bicaz\"\n        }\n      }, {\n        \"arcs\": [[7129, -7097, -7104, 7130, 7131]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150891\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Valea Moldovei\"\n        }\n      }, {\n        \"arcs\": [[-7120, -7109, 7132, 7133]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151549\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Hârtop\"\n        }\n      }, {\n        \"arcs\": [[7134, 7135, 7136, -7074, -7011, -7094, -7130, 7137]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147786\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Cornu Luncii\"\n        }\n      }, {\n        \"arcs\": [[7138, -7066, -7030, -7060, 7139, 7140, 7141, 7142]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109265\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ulmeni\"\n        }\n      }, {\n        \"arcs\": [[7143, -7078, -7083, 7144, 7145, 7146]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138538\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Pir\"\n        }\n      }, {\n        \"arcs\": [[-7145, -7084, -7082, 7147, 7148, 7149]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"30988\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Sălacea\"\n        }\n      }, {\n        \"arcs\": [[7150, -7111, -7075, -7137, 7151, 7152]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150070\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Rădășeni\"\n        }\n      }, {\n        \"arcs\": [[-6943, -6881, -6937, -7098, 7153, 7154]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32599\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Sîngeorz-Băi\"\n        }\n      }, {\n        \"arcs\": [[7155, -7041, 7156, 7157, 7158]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138770\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Săcășeni\"\n        }\n      }, {\n        \"arcs\": [[7159, -7117, -7043, -7042, -7156, 7160, 7161]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138921\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Supur\"\n        }\n      }, {\n        \"arcs\": [[-6994, 7162, -6844, -6803, -6933, -7122, 7163, 7164, 7165]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35429\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Zagra\"\n        }\n      }, {\n        \"arcs\": [[-7148, -7081, -7092, 7166, 7167, 7168]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31565\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Tarcea\"\n        }\n      }, {\n        \"arcs\": [[7169, 7170, -7124, 7171, 7172]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151451\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Ciocănești\"\n        }\n      }, {\n        \"arcs\": [[7173, 7174, -7131, -7103, 7175]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151503\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Capu Câmpului\"\n        }\n      }, {\n        \"arcs\": [[7176, -7133, -7108, -7151, 7177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147465\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bunești\"\n        }\n      }, {\n        \"arcs\": [[7178, -7141, 7179, -7107, -7128, 7180, 7181]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107190\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Băsești\"\n        }\n      }, {\n        \"arcs\": [[7182, 7183, 7184, 7185]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179837\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Coaș\"\n        }\n      }, {\n        \"arcs\": [[7186, -7138, -7132, -7175, 7187, 7188]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151576\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Berchișești\"\n        }\n      }, {\n        \"arcs\": [[7189, -7089, -6952, -7038, -7085, 7190, 7191, 7192]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106817\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Tîrgu Lăpuș\"\n        }\n      }, {\n        \"arcs\": [[7193, -7184, 7194, -7086, -7047, -7068, 7195, 7196]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109176\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Șomcuta Mare\"\n        }\n      }, {\n        \"arcs\": [[7197, 7198, -7121, -7134, -7177, 7199, 7200]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151157\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vulturești\"\n        }\n      }, {\n        \"arcs\": [[7201, 7202, 7203, 7204, -7198, 7205, 7206]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149227\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Liteni\"\n        }\n      }, {\n        \"arcs\": [[7207, -7152, -7136, 7208, 7209]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149049\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Horodniceni\"\n        }\n      }, {\n        \"arcs\": [[7210, -7209, -7135, -7187, 7211]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148328\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Drăgoiești\"\n        }\n      }, {\n        \"arcs\": [[7212, -7154, -7099, -6965, -6939, -6741, -6907, -6999, 7213, 7214]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34280\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Rebrișoara\"\n        }\n      }, {\n        \"arcs\": [[7215, -7143, 7216, 7217, 7218, 7219]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108918\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Sălsig\"\n        }\n      }, {\n        \"arcs\": [[7220, -6963, -6944, -7155, -7213, 7221, 7222]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33621\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Maieru\"\n        }\n      }, {\n        \"arcs\": [[7223, -7196, -7067, -7139, -7216, 7224, 7225]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108268\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Mireșu Mare\"\n        }\n      }, {\n        \"arcs\": [[7226, 7227, 7228, -7214, -7001, -6991, -7166, 7229]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35054\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Telciu\"\n        }\n      }, {\n        \"arcs\": [[7230, 7231, -7185, -7194, 7232]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108491\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Remetea Chioarului\"\n        }\n      }, {\n        \"arcs\": [[7233, -7113, -7065, -7054, 7234, 7235, 7236, 7237]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146502\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Câmpulung Moldovenesc\"\n        }\n      }, {\n        \"arcs\": [[7238, 7239, -7101, -7112, 7240]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148612\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Frasin\"\n        }\n      }, {\n        \"arcs\": [[7241, -7176, -7102, -7240, 7242, 7243]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146584\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Gura Humorului\"\n        }\n      }, {\n        \"arcs\": [[7244, 7245, -7147, 7246, 7247, 7248]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138734\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Santău\"\n        }\n      }, {\n        \"arcs\": [[7249, 7250, -7188, -7174, -7242, 7251]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149753\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Păltinoasa\"\n        }\n      }, {\n        \"arcs\": [[7252, -7225, -7220, 7253]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179855\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Gârdani\"\n        }\n      }, {\n        \"arcs\": [[7254, -7182, 7255, 7256, 7257]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107118\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Băița de sub Codru\"\n        }\n      }, {\n        \"arcs\": [[7258, -7161, -7159, 7259, 7260]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136713\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Acîș\"\n        }\n      }, {\n        \"arcs\": [[-6997, -6964, -7221, 7261, 7262]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34333\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Rodna\"\n        }\n      }, {\n        \"arcs\": [[7263, -7191, -7087, -7195, -7183, 7264, 7265, 7266]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107733\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Copalnic-Mănăștur\"\n        }\n      }, {\n        \"arcs\": [[7267, -7167, -7093, -7050, 7268]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31333\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Șimian\"\n        }\n      }, {\n        \"arcs\": [[7269, 7270, 7271, 7272, 7273, 7274, 7275]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95667\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Andrieșeni\"\n        }\n      }, {\n        \"arcs\": [[7276, -7126, -7025, -6998, -7263, 7277]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34618\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Șanț\"\n        }\n      }, {\n        \"arcs\": [[-7247, -7146, -7150, 7278, 7279, 7280, 7281]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136768\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Andrid\"\n        }\n      }, {\n        \"arcs\": [[7282, 7283, -7164, -7123, -7091, 7284, 7285]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179622\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Groșii Țibleșului\"\n        }\n      }, {\n        \"arcs\": [[7286, 7287, -7212, -7189, -7251, 7288]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151567\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Ciprian Porumbescu\"\n        }\n      }, {\n        \"arcs\": [[7289, -7228, 7290, 7291]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34360\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Romuli\"\n        }\n      }, {\n        \"arcs\": [[7292, 7293, 7294, 7295, 7296, 7297, 7298]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37280\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Flămânzi\"\n        }\n      }, {\n        \"arcs\": [[7299, 7300, -7265, -7186, -7232, 7301]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108794\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Săcălășeni\"\n        }\n      }, {\n        \"arcs\": [[7302, 7303, -7206, -7201, 7304, 7305]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150588\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Udești\"\n        }\n      }, {\n        \"arcs\": [[7306, 7307, -7173, 7308, 7309]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148765\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Fundu Moldovei\"\n        }\n      }, {\n        \"arcs\": [[7310, -7193, 7311, 7312]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107920\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Cupșeni\"\n        }\n      }, {\n        \"arcs\": [[-7285, -7090, -7190, -7311, 7313, 7314]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108222\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Lăpuș\"\n        }\n      }, {\n        \"arcs\": [[7315, -7305, -7200, -7178, -7153, -7208, 7316, 7317]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147134\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bosanci\"\n        }\n      }, {\n        \"arcs\": [[7318, -7233, -7197, -7224, 7319, 7320, 7321]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108712\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Satulung\"\n        }\n      }, {\n        \"arcs\": [[7322, -7302, -7231, -7319, 7323]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179846\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Coltău\"\n        }\n      }, {\n        \"arcs\": [[7324, -7236, 7325, -7307, 7326, 7327]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150178\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Sadova\"\n        }\n      }, {\n        \"arcs\": [[7328, -7168, -7268, 7329]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32027\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Valea lui Mihai\"\n        }\n      }, {\n        \"arcs\": [[-7279, -7149, -7169, -7329, 7330, 7331]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"29001\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Curtuișeni\"\n        }\n      }, {\n        \"arcs\": [[7332, -7317, -7210, -7211, -7288, 7333, 7334, 7335]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149414\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Moara\"\n        }\n      }, {\n        \"arcs\": [[7336, -7202, 7337, 7338, 7339]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39872\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Vorona\"\n        }\n      }, {\n        \"arcs\": [[7340, -7218, 7341, -7258, 7342]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107083\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Asuaju de Sus\"\n        }\n      }, {\n        \"arcs\": [[7343, 7344, -7254, -7219, -7341, 7345, 7346]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137103\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Bîrsău\"\n        }\n      }, {\n        \"arcs\": [[7347, 7348, -7300, -7323, 7349, 7350]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106363\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Groși\"\n        }\n      }, {\n        \"arcs\": [[-7289, -7250, 7351, 7352, 7353]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147660\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Ilișești\"\n        }\n      }, {\n        \"arcs\": [[-7241, -7114, -7234, 7354, 7355]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150935\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vama\"\n        }\n      }, {\n        \"arcs\": [[7356, -7266, -7301, -7349, 7357]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108035\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Dumbrăvița\"\n        }\n      }, {\n        \"arcs\": [[-7320, -7226, -7253, -7345, 7358, 7359, 7360]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108106\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Fărcașa\"\n        }\n      }, {\n        \"arcs\": [[-7312, -7192, -7264, 7361, 7362, 7363]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107582\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Cernești\"\n        }\n      }, {\n        \"arcs\": [[-7318, -7333, 7364, 7365]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146281\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Ipotești\"\n        }\n      }, {\n        \"arcs\": [[-7338, -7207, -7304, 7366, 7367]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148453\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Fîntînele\"\n        }\n      }, {\n        \"arcs\": [[7368, 7369, -7299, 7370, 7371]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36569\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Copălău\"\n        }\n      }, {\n        \"arcs\": [[7372, -7281, 7373, 7374, 7375]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138501\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Petrești\"\n        }\n      }, {\n        \"arcs\": [[7376, -7334, -7287, -7354, 7377, 7378]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150310\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Stroiești\"\n        }\n      }, {\n        \"arcs\": [[7379, -7248, -7282, -7373, 7380]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139107\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Tiream\"\n        }\n      }, {\n        \"arcs\": [[7381, -7352, -7252, -7244, 7382, 7383, 7384, 7385]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149780\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Pîrteștii de Jos\"\n        }\n      }, {\n        \"arcs\": [[-7371, -7298, 7386, 7387, 7388]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39975\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Coșula\"\n        }\n      }, {\n        \"arcs\": [[-7327, -7310, 7389, 7390]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147205\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Breaza\"\n        }\n      }, {\n        \"arcs\": [[-7378, -7353, -7382, 7391, 7392]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151530\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bălăceana\"\n        }\n      }, {\n        \"arcs\": [[-7314, -7313, -7364, 7393, 7394, 7395]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107154\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Băiuț\"\n        }\n      }, {\n        \"arcs\": [[7396, -7292, 7397, 7398]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108874\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Săcel\"\n        }\n      }, {\n        \"arcs\": [[-7388, 7399, 7400, -7340, 7401, 7402, 7403]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36907\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Cristești\"\n        }\n      }, {\n        \"arcs\": [[7404, 7405, -7321, -7361, 7406]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107001\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ardusat\"\n        }\n      }, {\n        \"arcs\": [[7407, 7408, 7409, -7249, -7380, 7410]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137292\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Căuaș\"\n        }\n      }, {\n        \"arcs\": [[7411, -7230, -7165, -7284, 7412, 7413]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108017\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Dragomirești\"\n        }\n      }, {\n        \"arcs\": [[7414, -7392, -7386, 7415, 7416]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151433\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Comănești\"\n        }\n      }, {\n        \"arcs\": [[7417, -7222, -7215, -7229, -7290, -7397, 7418]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108348\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Moisei\"\n        }\n      }, {\n        \"arcs\": [[-7276, 7419, 7420, 7421]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36499\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Călărași\"\n        }\n      }, {\n        \"arcs\": [[7422, 7423, -7293, -7370, 7424, 7425]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37912\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Lunca\"\n        }\n      }, {\n        \"arcs\": [[7426, 7427, 7428, -7286, -7315, -7396, 7429, 7430]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107485\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Botiza\"\n        }\n      }, {\n        \"arcs\": [[7431, -7398, -7291, -7227, -7412, 7432, 7433]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108892\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Săliștea de Sus\"\n        }\n      }, {\n        \"arcs\": [[7434, 7435, -7423, 7436]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39266\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Todireni\"\n        }\n      }, {\n        \"arcs\": [[-7394, -7363, 7437, 7438]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106782\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Cavnic\"\n        }\n      }, {\n        \"arcs\": [[7439, -7335, -7377, 7440, 7441, 7442]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146432\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Șcheia\"\n        }\n      }, {\n        \"arcs\": [[7443, -7438, -7362, -7267, -7357, 7444, 7445]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109096\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Șisești\"\n        }\n      }, {\n        \"arcs\": [[-7413, -7283, -7429, 7446, 7447]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108204\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ieud\"\n        }\n      }, {\n        \"arcs\": [[-7402, -7339, -7368, 7448, 7449, 7450]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36756\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Corni\"\n        }\n      }, {\n        \"arcs\": [[7451, 7452, -7270, -7422, 7453, -7435, 7454, 7455]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38893\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Santa Mare\"\n        }\n      }, {\n        \"arcs\": [[7456, -7359, -7344, 7457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137504\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Crucișor\"\n        }\n      }, {\n        \"arcs\": [[7458, -7416, -7385, 7459, 7460, 7461]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147161\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Botoșana\"\n        }\n      }, {\n        \"arcs\": [[7462, 7463, -7427, 7464]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179604\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Poienile Izei\"\n        }\n      }, {\n        \"arcs\": [[7465, 7466, -7383, -7243, -7239, -7356, 7467, 7468, 7469]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149370\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Mănăstirea Humorului\"\n        }\n      }, {\n        \"arcs\": [[-7468, -7355, -7238, 7470, 7471]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148729\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Frumosu\"\n        }\n      }, {\n        \"arcs\": [[7472, -7365, -7336, -7440, 7473, 7474, 7475]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146263\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Suceava\"\n        }\n      }, {\n        \"arcs\": [[7476, -7346, -7343, -7257, 7477, 7478, 7479]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137899\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Homoroade\"\n        }\n      }, {\n        \"arcs\": [[[7480, 7481, 7482]], [[7483, -7375, 7484, 7485, 7486]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"138663\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Sanislău\"\n        }\n      }, {\n        \"arcs\": [[7487, 7488, -7372, -7389, -7404, 7489, 7490, 7491]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36300\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Bălușeni\"\n        }\n      }, {\n        \"arcs\": [[7492, 7493, -7278, -7262, -7223, -7418, 7494]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106746\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Borșa\"\n        }\n      }, {\n        \"arcs\": [[7495, -7447, -7428, -7464, 7496]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179613\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Șieu\"\n        }\n      }, {\n        \"arcs\": [[-7433, -7414, -7448, -7496, 7497, 7498]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107403\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Bogdan Vodă\"\n        }\n      }, {\n        \"arcs\": [[7499, -7441, -7379, -7393, -7415, 7500, 7501]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150524\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Todirești\"\n        }\n      }, {\n        \"arcs\": [[7502, -7309, -7172, -7127, -7277, -7494, 7503, 7504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147713\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Cîrlibaba\"\n        }\n      }, {\n        \"arcs\": [[7505, 7506, -7407, -7360, -7457, 7507, 7508]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138618\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Pomi\"\n        }\n      }, {\n        \"arcs\": [[7509, 7510, -7466, 7511, 7512]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146708\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Solca\"\n        }\n      }, {\n        \"arcs\": [[7513, -7445, -7358, -7348, 7514]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106684\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Baia Sprie\"\n        }\n      }, {\n        \"arcs\": [[7515, -7501, -7417, -7459, 7516, 7517, 7518]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147633\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Cajvana\"\n        }\n      }, {\n        \"arcs\": [[7519, -7508, -7458, -7347, -7477, 7520, 7521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139287\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Valea Vinului\"\n        }\n      }, {\n        \"arcs\": [[-7490, -7403, -7451, 7522, 7523, 7524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35759\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Curtești\"\n        }\n      }, {\n        \"arcs\": [[-7471, -7237, -7325, 7525, 7526]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150980\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vatra Moldoviței\"\n        }\n      }, {\n        \"arcs\": [[7527, -7455, -7437, -7426, 7528, 7529, 7530]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36131\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Albești\"\n        }\n      }, {\n        \"arcs\": [[7531, -7523, -7450, 7532, 7533, 7534, 7535]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39738\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Vlădeni\"\n        }\n      }, {\n        \"arcs\": [[7536, 7537, -7498, -7497, -7463, 7538]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108669\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Rozavlea\"\n        }\n      }, {\n        \"arcs\": [[7539, -7488, 7540, 7541, 7542]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39983\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Blândești\"\n        }\n      }, {\n        \"arcs\": [[7543, 7544, 7545, -7517, -7462, 7546, -7513, 7547]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146860\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Arbore\"\n        }\n      }, {\n        \"arcs\": [[7548, -7541, -7492, 7549, 7550, 7551]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35884\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Stăuceni\"\n        }\n      }, {\n        \"arcs\": [[-7456, -7528, 7552, 7553, 7554]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38848\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Românești\"\n        }\n      }, {\n        \"arcs\": [[7555, -7518, -7546, 7556]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151442\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Iaslovăț\"\n        }\n      }, {\n        \"arcs\": [[7557, 7558, -7434, -7499, -7538, 7559, 7560]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109504\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Vișeu de Jos\"\n        }\n      }, {\n        \"arcs\": [[7561, 7562, 7563, 7564]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179677\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Cămin\"\n        }\n      }, {\n        \"arcs\": [[7565, -7564, 7566, 7567, 7568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139250\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Urziceni\"\n        }\n      }, {\n        \"arcs\": [[7569, 7570, -7521, -7480, 7571, 7572, 7573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137540\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Culciu\"\n        }\n      }, {\n        \"arcs\": [[7574, 7575, 7576, -7562, 7577, 7578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136553\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Căpleni\"\n        }\n      }, {\n        \"arcs\": [[-7474, -7443, 7579, 7580, 7581]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149833\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Pătrăuți\"\n        }\n      }, {\n        \"arcs\": [[7582, 7583, 7584, 7585, 7586]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151512\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Hănțești\"\n        }\n      }, {\n        \"arcs\": [[-7580, -7442, -7500, 7587, 7588]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147937\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dărmănești\"\n        }\n      }, {\n        \"arcs\": [[7589, -7560, -7537, 7590, 7591]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108240\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Leordina\"\n        }\n      }, {\n        \"arcs\": [[7592, 7593, 7594, 7595, -7575, 7596]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137611\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Doba\"\n        }\n      }, {\n        \"arcs\": [[7597, -7475, -7582, 7598, 7599]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146325\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Mitocu Dragomirnei\"\n        }\n      }, {\n        \"arcs\": [[7600, -7550, -7491, -7525, 7601, 7602]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35731\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Botoșani\"\n        }\n      }, {\n        \"arcs\": [[7603, -7557, -7545, 7604]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151521\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Burla\"\n        }\n      }, {\n        \"arcs\": [[7605, -7536, 7606, -7584, 7607, 7608]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36453\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Bucecea\"\n        }\n      }, {\n        \"arcs\": [[-7446, -7514, 7609, 7610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107975\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Desești\"\n        }\n      }, {\n        \"arcs\": [[7611, -7591, -7539, -7465, -7431, 7612, 7613, 7614]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109005\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Strîmtura\"\n        }\n      }, {\n        \"arcs\": [[7615, -7526, -7328, -7391, 7616, 7617, 7618, 7619]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149539\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Moldovița\"\n        }\n      }, {\n        \"arcs\": [[7620, -7553, -7531, 7621, 7622]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37217\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Durnești\"\n        }\n      }, {\n        \"arcs\": [[7623, 7624, -7519, -7556, -7604, 7625, 7626]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146931\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Milișăuți\"\n        }\n      }, {\n        \"arcs\": [[7627, -7614, 7628, 7629, 7630, 7631]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107546\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Călinești\"\n        }\n      }, {\n        \"arcs\": [[-7626, -7605, -7544, 7632, 7633, 7634]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151120\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Volovăț\"\n        }\n      }, {\n        \"arcs\": [[7635, 7636, -7469, -7472, -7527, -7616, 7637, 7638]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150418\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Sucevița\"\n        }\n      }, {\n        \"arcs\": [[-7630, 7639, -7444, -7611, 7640, 7641]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108400\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ocna Șugatag\"\n        }\n      }, {\n        \"arcs\": [[7642, -7561, -7590, 7643, 7644, 7645]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108696\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ruscova\"\n        }\n      }, {\n        \"arcs\": [[-7602, -7524, -7532, -7606, 7646, 7647]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38063\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Mihai Eminescu\"\n        }\n      }, {\n        \"arcs\": [[7648, -7542, -7549, 7649, 7650, 7651]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37459\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Gorbănești\"\n        }\n      }, {\n        \"arcs\": [[7652, -7593, 7653, 7654]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139358\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Vetiș\"\n        }\n      }, {\n        \"arcs\": [[7655, 7656, -7599, -7581, -7589, 7657, 7658]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151460\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Șerbăuți\"\n        }\n      }, {\n        \"arcs\": [[7659, -7658, -7588, -7502, -7516, -7625, 7660, 7661, 7662]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148970\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Grănicești\"\n        }\n      }, {\n        \"arcs\": [[-7661, -7624, 7663, 7664]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150196\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Satu Mare\"\n        }\n      }, {\n        \"arcs\": [[7665, -7615, -7628, 7666, 7667]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107314\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Bârsana\"\n        }\n      }, {\n        \"arcs\": [[7668, -7647, -7609, 7669, 7670]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37850\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Leorda\"\n        }\n      }, {\n        \"arcs\": [[-7495, -7419, -7399, -7432, -7559, 7671, 7672]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106979\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Vișeu de Sus\"\n        }\n      }, {\n        \"arcs\": [[-7551, -7601, 7673, 7674, 7675]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35839\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Răchiți\"\n        }\n      }, {\n        \"arcs\": [[7676, 7677, -7554, -7621, 7678, 7679]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39168\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Ștefănești\"\n        }\n      }, {\n        \"arcs\": [[-7587, 7680, -7600, -7657, 7681, 7682]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151344\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Zvoriștea\"\n        }\n      }, {\n        \"arcs\": [[7683, -7631, -7642, 7684, 7685, 7686, 7687]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108151\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Giulești\"\n        }\n      }, {\n        \"arcs\": [[-7644, -7592, -7612, -7666, 7688, 7689]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108455\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Petrova\"\n        }\n      }, {\n        \"arcs\": [[7690, -7664, -7627, -7635, 7691, 7692, 7693]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146628\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Rădăuți\"\n        }\n      }, {\n        \"arcs\": [[-7667, -7632, -7684, 7694, 7695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179864\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Oncești\"\n        }\n      }, {\n        \"arcs\": [[7696, 7697, -7650, -7552, -7676, 7698, 7699]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39532\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Unțeni\"\n        }\n      }, {\n        \"arcs\": [[-7674, -7603, -7648, -7669, 7700, 7701, 7702]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38811\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Roma\"\n        }\n      }, {\n        \"arcs\": [[7703, 7704, -7659, -7660, 7705]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147580\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Calafindești\"\n        }\n      }, {\n        \"arcs\": [[7706, -7693, 7707, 7708, 7709]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149101\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Horodnic de Jos\"\n        }\n      }, {\n        \"arcs\": [[7710, 7711, -7695, -7688, 7712]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106648\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Vadu Izei\"\n        }\n      }, {\n        \"arcs\": [[7713, -7679, -7623, 7714, 7715, 7716]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37100\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Dobârceni\"\n        }\n      }, {\n        \"arcs\": [[7717, -7682, -7656, -7705, 7718, 7719]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151246\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Zamostea\"\n        }\n      }, {\n        \"arcs\": [[-7701, -7671, 7720, 7721, 7722]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36373\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Brăești\"\n        }\n      }, {\n        \"arcs\": [[-7709, 7723, -7639, 7724, 7725, 7726]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151558\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Voitinel\"\n        }\n      }, {\n        \"arcs\": [[7727, 7728, -7655, 7729]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137675\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Dorolț\"\n        }\n      }, {\n        \"arcs\": [[7730, -7725, -7638, -7620, 7731, 7732, 7733]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150043\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Putna\"\n        }\n      }, {\n        \"arcs\": [[-7716, 7734, -7652, 7735, -7697, 7736, 7737, 7738]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37057\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Dîngeni\"\n        }\n      }, {\n        \"arcs\": [[7739, -7721, -7670, -7608, -7583, -7683, -7718, 7740, 7741, 7742]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39694\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Vârfu Câmpului\"\n        }\n      }, {\n        \"arcs\": [[-7699, -7675, -7703, 7743, 7744, 7745]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38456\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Nicșeni\"\n        }\n      }, {\n        \"arcs\": [[7746, 7747, -7710, -7727, 7748, 7749]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148872\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Gălănești\"\n        }\n      }, {\n        \"arcs\": [[7750, -7645, -7690, 7751, 7752]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107270\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Bistra\"\n        }\n      }, {\n        \"arcs\": [[-7732, -7619, 7753, 7754, 7755, 7756]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147241\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Brodina\"\n        }\n      }, {\n        \"arcs\": [[7757, -7694, -7707, -7748, 7758]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148694\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Frătăuții Vechi\"\n        }\n      }, {\n        \"arcs\": [[7759, -7752, -7689, -7668, -7696, -7712, 7760, 7761]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108632\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Rona de Sus\"\n        }\n      }, {\n        \"arcs\": [[-7733, -7757, 7762, 7763]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150294\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Straja\"\n        }\n      }, {\n        \"arcs\": [[-7722, -7740, 7764, 7765, 7766, 7767]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39612\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Văculești\"\n        }\n      }, {\n        \"arcs\": [[7768, -7744, -7702, -7723, -7768, 7769]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39959\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Dimăcheni\"\n        }\n      }, {\n        \"arcs\": [[7770, 7771, 7772, 7773, 7774, 7775]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179873\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Agriș\"\n        }\n      }, {\n        \"arcs\": [[-7761, -7711, 7776, 7777]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108614\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Rona de Jos\"\n        }\n      }, {\n        \"arcs\": [[7778, 7779, -7719, -7704, 7780, 7781]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148916\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Grămești\"\n        }\n      }, {\n        \"arcs\": [[-7750, 7782, 7783, 7784, 7785]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147036\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bilca\"\n        }\n      }, {\n        \"arcs\": [[7786, -7680, -7714, 7787, 7788]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38241\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Mihălășeni\"\n        }\n      }, {\n        \"arcs\": [[-7672, -7558, -7643, 7789, 7790]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108473\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Poienile de sub Munte\"\n        }\n      }, {\n        \"arcs\": [[-7790, -7646, -7751, 7791]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108598\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Repedea\"\n        }\n      }, {\n        \"arcs\": [[-7762, -7778, 7792, 7793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107350\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Bocicoiu Mare\"\n        }\n      }, {\n        \"arcs\": [[7794, 7795, -7759, -7747, -7786, 7796]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148667\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Frătăuții Noi\"\n        }\n      }, {\n        \"arcs\": [[-7742, 7797, 7798, 7799]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39942\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Lozna\"\n        }\n      }, {\n        \"arcs\": [[-7798, -7741, -7720, -7780, 7800, 7801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39967\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Cândești\"\n        }\n      }, {\n        \"arcs\": [[7802, 7803, -7775, 7804, 7805, 7806]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138164\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Micula\"\n        }\n      }, {\n        \"arcs\": [[7807, -7806, 7808, -7728, 7809]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137960\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Lazuri\"\n        }\n      }, {\n        \"arcs\": [[-7677, -7787, 7810, 7811]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38731\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Ripiceni\"\n        }\n      }, {\n        \"arcs\": [[7812, 7813, 7814, 7815, 7816, 7817]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137407\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Certeze\"\n        }\n      }, {\n        \"arcs\": [[[-7651, -7698, -7736]], [[7818, 7819, 7820, -7737, -7700, -7746, 7821, 7822]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"39417\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Ungureni\"\n        }\n      }, {\n        \"arcs\": [[7823, -7822, -7745, -7769, 7824, 7825, 7826]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36676\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Corlăteni\"\n        }\n      }, {\n        \"arcs\": [[7827, -7795, 7828, 7829]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149584\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Mușenița\"\n        }\n      }, {\n        \"arcs\": [[-7801, -7779, 7830, 7831, 7832]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38161\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Mihăileni\"\n        }\n      }, {\n        \"arcs\": [[7833, -7765, -7743, -7800, 7834, 7835]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39122\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Șendriceni\"\n        }\n      }, {\n        \"arcs\": [[7836, 7837, -7686, 7838, -7814, 7839, 7840, 7841]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108945\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Săpînța\"\n        }\n      }, {\n        \"arcs\": [[7842, -7738, -7821, 7843, 7844]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39792\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Vlăsinești\"\n        }\n      }, {\n        \"arcs\": [[7845, -7842, 7846]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107715\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Cîmpulung la Tisa\"\n        }\n      }, {\n        \"arcs\": [[-7788, -7717, -7739, -7843, 7847, 7848]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37618\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Hănești\"\n        }\n      }, {\n        \"arcs\": [[-7825, -7770, -7767, 7849, 7850]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36426\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Broscăuți\"\n        }\n      }, {\n        \"arcs\": [[-7817, 7851, 7852, 7853, 7854, 7855, 7856]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137069\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Bixad\"\n        }\n      }, {\n        \"arcs\": [[-7844, -7820, 7857, 7858, 7859]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36060\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Săveni\"\n        }\n      }, {\n        \"arcs\": [[-7840, -7813, 7860]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108552\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Remeți\"\n        }\n      }, {\n        \"arcs\": [[-7850, -7766, -7834, 7861, 7862, 7863]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36006\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Dorohoi\"\n        }\n      }, {\n        \"arcs\": [[-7835, -7799, -7802, -7833, 7864, 7865]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37011\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Dersca\"\n        }\n      }, {\n        \"arcs\": [[7866, -7807, -7808, 7867]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180028\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Porumbești\"\n        }\n      }, {\n        \"arcs\": [[7868, -7823, -7824, 7869, 7870]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39836\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Vorniceni\"\n        }\n      }, {\n        \"arcs\": [[-7858, -7819, -7869, 7871, 7872, 7873]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39220\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Știubieni\"\n        }\n      }, {\n        \"arcs\": [[-7856, 7874, 7875, 7876, 7877]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137274\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Cămărzana\"\n        }\n      }, {\n        \"arcs\": [[7878, -7870, -7827, 7879]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36649\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Cordăreni\"\n        }\n      }, {\n        \"arcs\": [[7880, -7862, -7836, -7866, 7881, 7882]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37672\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Hilișeu-Horia\"\n        }\n      }, {\n        \"arcs\": [[7883, -7877, 7884, 7885, 7886, 7887, 7888]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139170\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Turț\"\n        }\n      }, {\n        \"arcs\": [[7889, 7890, -7848, -7845, -7860, 7891, 7892, 7893]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36202\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Avrămeni\"\n        }\n      }, {\n        \"arcs\": [[7894, -7888, 7895, 7896]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136919\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Bătarci\"\n        }\n      }, {\n        \"arcs\": [[7897, -7880, -7826, -7851, -7864, 7898, 7899, 7900, 7901]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37397\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"George Enescu\"\n        }\n      }, {\n        \"arcs\": [[-7892, -7859, -7874, 7902, 7903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37173\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Drăgușeni\"\n        }\n      }, {\n        \"arcs\": [[-7811, -7789, -7849, -7891, 7904, 7905]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37958\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Manoleasa\"\n        }\n      }, {\n        \"arcs\": [[-7899, -7863, -7881, 7906, 7907]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37823\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Ibănești\"\n        }\n      }, {\n        \"arcs\": [[-7894, 7908, 7909]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40035\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Adășeni\"\n        }\n      }, {\n        \"arcs\": [[-7907, -7883, 7910, 7911]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38544\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Pomîrla\"\n        }\n      }, {\n        \"arcs\": [[7912, -7872, -7871, -7879, -7898, 7913, 7914]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37547\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Havîrna\"\n        }\n      }, {\n        \"arcs\": [[-7889, -7895, 7915]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139009\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Tarna Mare\"\n        }\n      }, {\n        \"arcs\": [[7916, 7917, -7903, -7873, -7913, 7918, 7919]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38321\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Mileanca\"\n        }\n      }, {\n        \"arcs\": [[-7900, -7908, -7912, 7920, 7921]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36952\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Cristinești\"\n        }\n      }, {\n        \"arcs\": [[-7905, -7890, -7910, 7922, 7923]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38376\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Mitoc\"\n        }\n      }, {\n        \"arcs\": [[-7919, -7915, 7924, 7925]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36532\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Concești\"\n        }\n      }, {\n        \"arcs\": [[7926, -7901, -7922, 7927]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38982\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Suharău\"\n        }\n      }, {\n        \"arcs\": [[7928, 7929, -7917, 7930, 7931]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39658\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Viișoara\"\n        }\n      }, {\n        \"arcs\": [[-7923, -7909, -7893, -7904, -7918, -7930, 7932, 7933]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"36809\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Coțușca\"\n        }\n      }, {\n        \"arcs\": [[7934, -7925, -7914, -7902, -7927, 7935]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37770\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Hudești\"\n        }\n      }, {\n        \"arcs\": [[7936, -7931, -7920, -7926, -7935, 7937]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35946\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Darabani\"\n        }\n      }, {\n        \"arcs\": [[-7933, -7929, 7938, 7939]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38633\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Rădăuți-Prut\"\n        }\n      }, {\n        \"arcs\": [[-7939, -7932, -7937, 7940]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38492\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Păltiniș\"\n        }\n      }, {\n        \"arcs\": [[[-2318, -2399, -2763]], [[-2585, -2762, -2766]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"49894\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Ulmeni\"\n        }\n      }, {\n        \"arcs\": [[-7726, -7731, 7941, -7783, -7749]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151077\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vicovu de Jos\"\n        }\n      }, {\n        \"arcs\": [[-7784, -7942, -7734, -7764, 7942]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151095\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vicovu de Sus\"\n        }\n      }, {\n        \"arcs\": [[7943, -6043, -6211, 7944]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116224\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Cozma\"\n        }\n      }, {\n        \"arcs\": [[7945, -5295, -5396, 7946, -5582]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10346\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Cărand\"\n        }\n      }, {\n        \"arcs\": [[-5465, -5299, -5142, -5296, -7946, -5581, -5478]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9690\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Sebiș\"\n        }\n      }, {\n        \"arcs\": [[-5993, 7947, -5888, -6035, -6070]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161829\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Huși\"\n        }\n      }, {\n        \"arcs\": [[-5992, -5721, -5496, -5731, -5889, -7948]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165185\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Pădureni\"\n        }\n      }, {\n        \"arcs\": [[-511, 7948, -747, 7949]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102071\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Colibași\"\n        }\n      }, {\n        \"arcs\": [[-7949, -510, 7950, -358, -433, -546, -688, -748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102106\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Comana\"\n        }\n      }, {\n        \"arcs\": [[-6808, 7951, 7952, -6968, 7953, 7954]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98505\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Popricani\"\n        }\n      }, {\n        \"arcs\": [[7955, 7956, -4351, -4518, -4647, -4788, 7957]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87843\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Balșa\"\n        }\n      }, {\n        \"arcs\": [[-4766, 7958, -7958, -4787]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"2309\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Almașu Mare\"\n        }\n      }, {\n        \"arcs\": [[-6915, -6586, -6548, -6571, -6583, -6706, -6730, -6767, 7959]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32633\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Bistrița Bîrgăului\"\n        }\n      }, {\n        \"arcs\": [[-7024, -6916, -7960, -6766, -6896, -6996]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"35090\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Tiha Bîrgăului\"\n        }\n      }, {\n        \"arcs\": [[-3496, -3322, 7960, 7961, -3686]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51877\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Constantin Daicoviciu\"\n        }\n      }, {\n        \"arcs\": [[7962, 7963, 7964, -1218, 7965, -1510, -1847, 7966]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93575\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Făcăeni\"\n        }\n      }, {\n        \"arcs\": [[7967, -3865, -3728, -3664, -3778, -3940, 7968]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41033\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Hălchiu\"\n        }\n      }, {\n        \"arcs\": [[7969, -7969, -3939, -4046, -4180, -4115]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42456\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Crizbav\"\n        }\n      }, {\n        \"arcs\": [[-4048, -4019, -3866, -7968, -7970, -4114]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40955\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Feldioara\"\n        }\n      }, {\n        \"arcs\": [[7970, 7971, 7972, 7973, 7974]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102570\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Domnești\"\n        }\n      }, {\n        \"arcs\": [[7975, 7976, -7975, 7977, 7978, 7979]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179249\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Chiajna\"\n        }\n      }, {\n        \"arcs\": [[-4701, -4625, 7980, -4818, -4811]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167259\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Pogonești\"\n        }\n      }, {\n        \"arcs\": [[-7981, -4624, -4606, -4731, -4819]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175260\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Boghești\"\n        }\n      }, {\n        \"arcs\": [[7981, 7982, 7983, -2960, -3440, -3465, -3381, -3511, -3476, -3507]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90878\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Râu de Mori\"\n        }\n      }, {\n        \"arcs\": [[-5639, -5551, -5471, 7984, 7985, 7986, -5652, -5677, -5825, -5680]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114319\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Tîrgu Mureș\"\n        }\n      }, {\n        \"arcs\": [[7987, 7988, 7989, -792, 7990, 7991]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101519\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Bulbucata\"\n        }\n      }, {\n        \"arcs\": [[-500, -376, 7992, 7993, 7994, -7989, 7995]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103238\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Ghimpați\"\n        }\n      }, {\n        \"arcs\": [[-635, -498, -7996, -7988, 7996]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103693\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Iepurești\"\n        }\n      }, {\n        \"arcs\": [[-6438, -6430, 7997, -6667, -6561]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140379\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Buciumi\"\n        }\n      }, {\n        \"arcs\": [[-6668, -7998, -6429, -6400, 7998, -6609, 7999]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141535\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Horoatu Crasnei\"\n        }\n      }, {\n        \"arcs\": [[-7999, -6399, 8000, -6589, -6610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140547\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Cizer\"\n        }\n      }, {\n        \"arcs\": [[8001, 8002, -7755]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150702\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Ulma\"\n        }\n      }, {\n        \"arcs\": [[-7028, 8003, -6902, -7003, -7058]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142710\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Someș-Odorhei\"\n        }\n      }, {\n        \"arcs\": [[-6875, 8004, 8005, -6728, -6782, -6903, -8004, -7027]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139811\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Jibou\"\n        }\n      }, {\n        \"arcs\": [[-7425, -7369, -7489, -7540, 8006, -7529]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39051\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Sulița\"\n        }\n      }, {\n        \"arcs\": [[-7622, -7530, -8007, -7543, -7649, -7735, -7715]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39328\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Trușești\"\n        }\n      }, {\n        \"arcs\": [[-7000, -6905, -6845, -7163, -6993]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34397\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Salva\"\n        }\n      }, {\n        \"arcs\": [[-5789, 8007, -5635, -5648, -5756, -5916]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116590\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Eremitu\"\n        }\n      }, {\n        \"arcs\": [[-5624, -5562, -5486, -5633, -8008, -5788]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118094\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Măgherani\"\n        }\n      }, {\n        \"arcs\": [[[8008, 8009, -1487, -1783, -1795]], [[-1838, -1698, 8010, 8011, -1793]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"134559\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Poienarii Burchii\"\n        }\n      }, {\n        \"arcs\": [[-7987, 8012, -5653]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114382\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sîncraiu de Mureș\"\n        }\n      }, {\n        \"arcs\": [[8013, 8014, -5452, -5654, -8013, -7986]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114355\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Cristești\"\n        }\n      }, {\n        \"arcs\": [[8015, -5241, -5453, -8015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116983\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Gheorghe Doja\"\n        }\n      }, {\n        \"arcs\": [[-5470, -5394, -5200, -5239, -8016, -8014, -7985]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116288\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Crăciunești\"\n        }\n      }, {\n        \"arcs\": [[8016, -5285, -5392, -5469]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"118753\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Păsăreni\"\n        }\n      }, {\n        \"arcs\": [[-5460, -5286, -8017, -5468, -5550, -5577]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"116867\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Gălești\"\n        }\n      }, {\n        \"arcs\": [[-5177, -5120, -4815, -4802, -4877, 8017, -5134]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115575\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Băgaciu\"\n        }\n      }, {\n        \"arcs\": [[-5135, -8018, -4876, 8018, -5232]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114925\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Târnăveni\"\n        }\n      }, {\n        \"arcs\": [[-6291, -6364, -6564, 8019, -6519]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83491\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Borsec\"\n        }\n      }, {\n        \"arcs\": [[-6855, -6520, -8020, -6567, -6837, -6763]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83936\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Bilbor\"\n        }\n      }, {\n        \"arcs\": [[-4772, -4588, -4616, -4591, -4714, -4895]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86188\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Tușnad\"\n        }\n      }, {\n        \"arcs\": [[-2707, 8020, -2500, -2561, -2882, 8021]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"173230\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Stoenești\"\n        }\n      }, {\n        \"arcs\": [[-2706, 8022, -2465, -2501, -8021]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168960\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Bunești\"\n        }\n      }, {\n        \"arcs\": [[8023, 8024, -4150, -4382, -4481]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175055\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Panciu\"\n        }\n      }, {\n        \"arcs\": [[-3990, -3819, -3892, -3973, -4123, -4255]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177469\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Reghiu\"\n        }\n      }, {\n        \"arcs\": [[8025, 8026, -3603, 8027, 8028, -3773, 8029]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177842\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Suraia\"\n        }\n      }, {\n        \"arcs\": [[-8028, -3602, -3559, -3610, -3761, 8030]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178956\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Răstoaca\"\n        }\n      }, {\n        \"arcs\": [[-7021, -7017, -7125, -7171, 8031]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149138\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Iacobeni\"\n        }\n      }, {\n        \"arcs\": [[-7235, -7053, -7022, -8032, -7170, -7308, -7326]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149931\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Pojorîta\"\n        }\n      }, {\n        \"arcs\": [[-5806, -5714, -5531, -5464, -5545, -5617, 8032]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162014\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Albești\"\n        }\n      }, {\n        \"arcs\": [[-5982, -5807, -8033, -5616, -5699, -5912]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164936\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Muntenii de Jos\"\n        }\n      }, {\n        \"arcs\": [[-845, 8033, -661, -743, -962, -849]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69964\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bucovăț\"\n        }\n      }, {\n        \"arcs\": [[-1299, -1204, -1088, -1185, 8034]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71126\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Braloștița\"\n        }\n      }, {\n        \"arcs\": [[-934, -1034, -1333, 8035]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73246\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Mischii\"\n        }\n      }, {\n        \"arcs\": [[-1052, -1002, -935, -8036, -1332, 8036]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130124\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Vulpeni\"\n        }\n      }, {\n        \"arcs\": [[-2555, 8037, -2635]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65645\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Moțăieni\"\n        }\n      }, {\n        \"arcs\": [[-8038, -2554, -2396, -2390, -2597, -2540, -2737, -2636]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"69615\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Vulcana-Băi\"\n        }\n      }, {\n        \"arcs\": [[-1053, -8037, -1331, -1348, -1456, 8038]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126674\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Dobrețu\"\n        }\n      }, {\n        \"arcs\": [[-1210, -1132, -1054, -8039, -1455]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127288\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Iancu Jianu\"\n        }\n      }, {\n        \"arcs\": [[-2645, -2639, 8039, 8040, -3110]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78711\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Baia de Fier\"\n        }\n      }, {\n        \"arcs\": [[8041, -8040, -2641, -2615, -3113, 8042]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"78258\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Novaci\"\n        }\n      }, {\n        \"arcs\": [[-4011, -4001, -3829, -3977, 8043, 8044]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40544\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Beclean\"\n        }\n      }, {\n        \"arcs\": [[-3349, -3297, -3268, -3157, -3204, -3384, 8045]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131210\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bușteni\"\n        }\n      }, {\n        \"arcs\": [[-3561, -3727, -3350, -8046, -3386, -3541, -3587, -3779, -3662]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40367\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Râșnov\"\n        }\n      }, {\n        \"arcs\": [[-3754, -3599, -3581, -3726, -3701, -4018, 8046]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41088\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Hărman\"\n        }\n      }, {\n        \"arcs\": [[-4055, -3841, -3755, -8047, -4017]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"64425\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Ilieni\"\n        }\n      }, {\n        \"arcs\": [[-4461, 8047, -8044, -3976, -3938, 8048, -4204, -4315]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40820\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Cincu\"\n        }\n      }, {\n        \"arcs\": [[-4407, -4224, -4030, -4003, -4012, -8045, -8048, -4460, 8049]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41943\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Șoarș\"\n        }\n      }, {\n        \"arcs\": [[-289, -172, -151, -199, -252]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73013\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Măceșu de Sus\"\n        }\n      }, {\n        \"arcs\": [[8050, 8051, 8052, -5664, 8053]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22488\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Filipeni\"\n        }\n      }, {\n        \"arcs\": [[-5572, -5362, 8054, -8052, 8055]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23868\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Oncești\"\n        }\n      }, {\n        \"arcs\": [[-5110, -4732, -4706, 8056, -5093, -5279]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23047\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Huruiești\"\n        }\n      }, {\n        \"arcs\": [[8057, -4663, -4595, -4477, -4479, 8058]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22059\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Coțofănești\"\n        }\n      }, {\n        \"arcs\": [[-8059, -4482, -4453, -4505, -4657, -4835, 8059]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21757\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Căiuți\"\n        }\n      }, {\n        \"arcs\": [[8060, 8061, -4956, -4996, 8062, -5274, -5331]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21454\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Bîrsănești\"\n        }\n      }, {\n        \"arcs\": [[-5028, -4985, -4838, 8063, 8064, -5189]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20607\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Gura Văii\"\n        }\n      }, {\n        \"arcs\": [[-5190, -8065, 8065, -8061, -5330, -5249]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22898\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Helegiu\"\n        }\n      }, {\n        \"arcs\": [[-4864, 8066, -4424, -4434, -4547, -4695, -4829]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144198\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Biertan\"\n        }\n      }, {\n        \"arcs\": [[-4885, -4462, -4425, -8067, -4863]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144731\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Laslea\"\n        }\n      }, {\n        \"arcs\": [[8067, -4408, -8050, -4459, -4884, 8068]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144376\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Brădeni\"\n        }\n      }, {\n        \"arcs\": [[-3937, -3919, -3924, -4205, -8049]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144410\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Bruiu\"\n        }\n      }, {\n        \"arcs\": [[[8069, 8070, -3879, 8071]], [[-4064, 8072, -3783, 8073, 8074, -3886, -3963, -4110, -4138]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"143450\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Sibiu\"\n        }\n      }, {\n        \"arcs\": [[[-8071, 8075, -3880]], [[8076, -8072, -3878, 8077]], [[8078, -3883, 8079, -3887, -8075]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"143502\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Poplaca\"\n        }\n      }, {\n        \"arcs\": [[-3782, -3564, -3618, -4036, 8080, -3881, -8076, -8070, -8077, 8081, -3884, -8079, -8074]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143520\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Rășinari\"\n        }\n      }, {\n        \"arcs\": [[-5233, -8019, -4879, -4881, -4911, -5125, -5166, -5427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115076\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Adămuș\"\n        }\n      }, {\n        \"arcs\": [[-4498, -4502, -4286, -4210, -4297, -4490, -4543]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"145220\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Păuca\"\n        }\n      }, {\n        \"arcs\": [[-4068, -3934, -3902, -4037, -3804, 8082, -3899, -4034, 8083, -4086]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144713\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Jina\"\n        }\n      }, {\n        \"arcs\": [[-3429, -3401, -3236, 8084, -3553, -3572, -3632, -3847]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169119\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Cîineni\"\n        }\n      }, {\n        \"arcs\": [[-2205, -2136, -2201, -2392, 8085, -2400]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132164\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Baba Ana\"\n        }\n      }, {\n        \"arcs\": [[-2468, 8086, -2394, -2420, -2536]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136269\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Vadu Săpat\"\n        }\n      }, {\n        \"arcs\": [[-2291, -2125, -2026, -2001, -2063, -2236, -2361, 8087]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130534\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ploiești\"\n        }\n      }, {\n        \"arcs\": [[-2675, -2593, 8088, 8089, -2790]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134014\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Măgurele\"\n        }\n      }, {\n        \"arcs\": [[-2591, -2411, -2293, 8090, -2359, 8091]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131069\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Boldești-Scăeni\"\n        }\n      }, {\n        \"arcs\": [[-2592, -8092, -2364, -2377, 8092, -8089]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"133964\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Lipănești\"\n        }\n      }, {\n        \"arcs\": [[-2546, -2375, -2298, -2459, 8093, 8094]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134050\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Măgureni\"\n        }\n      }, {\n        \"arcs\": [[8095, -8094, -2461, -2505, -2658, -2672, 8096]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"134853\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Provița de Jos\"\n        }\n      }, {\n        \"arcs\": [[[-4572, -4484, -4391, -4629, -4842, 8097]], [[-4870, -4935, -4847, -5139]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"9574\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Lipova\"\n        }\n      }, {\n        \"arcs\": [[-6368, 8098, 8099, -6116, -6233, -6285]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124117\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Roznov\"\n        }\n      }, {\n        \"arcs\": [[8100, -6016, -6076, -6305, -6357, 8101]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55838\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Baciu\"\n        }\n      }, {\n        \"arcs\": [[-6345, -6252, 8102, 8103, -8102, -6356, -6420]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56988\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Chinteni\"\n        }\n      }, {\n        \"arcs\": [[8104, -6268, -6302, 8105, -6467]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56327\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Buza\"\n        }\n      }, {\n        \"arcs\": [[-6503, -6468, -8106, -6303, -6283, -6375, -6482]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59826\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Țaga\"\n        }\n      }, {\n        \"arcs\": [[-6171, -6117, -8100, 8106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125061\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Zănești\"\n        }\n      }, {\n        \"arcs\": [[8107, 8108, 8109, -6172, -8107, -8099, -6367, 8110]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123175\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Mărgineni\"\n        }\n      }, {\n        \"arcs\": [[-6176, -6099, -6019, -6045, -6170, -8110, 8111]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124073\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Români\"\n        }\n      }, {\n        \"arcs\": [[-6922, -6750, -6678, 8112, -8005, -6874]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142774\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Surduc\"\n        }\n      }, {\n        \"arcs\": [[8113, -6591, -6527, -6637, 8114]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142952\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Valcău de Jos\"\n        }\n      }, {\n        \"arcs\": [[-6831, -6723, -6669, -8000, -6611, -6592, -8114, 8115, 8116, -6811]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140627\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Crasna\"\n        }\n      }, {\n        \"arcs\": [[-7140, -7059, -7005, -7069, -7105, -7180]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139740\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Cehu Silvaniei\"\n        }\n      }, {\n        \"arcs\": [[-8116, -8115, -6636, 8117]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180037\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Boghiș\"\n        }\n      }, {\n        \"arcs\": [[-6812, -8117, -8118, -6641, -6688, -6792, -6926]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"142239\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Nușfalău\"\n        }\n      }, {\n        \"arcs\": [[-3534, 8118, 8119]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75150\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Vînători\"\n        }\n      }, {\n        \"arcs\": [[8120, -3535, -8120, 8121, 8122]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77331\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Tulucești\"\n        }\n      }, {\n        \"arcs\": [[8123, -3532, -3247, 8124, 8125]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75114\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Șendreni\"\n        }\n      }, {\n        \"arcs\": [[8126, 8127, -3418, -3484, 8128, -3672]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77180\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Slobozia Conachi\"\n        }\n      }, {\n        \"arcs\": [[-8126, 8129, -3413, -8128, 8130, 8131]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77153\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Schela\"\n        }\n      }, {\n        \"arcs\": [[-3673, -8129, -3483, 8132, 8133, -3517, 8134]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77313\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Tudor Vladimirescu\"\n        }\n      }, {\n        \"arcs\": [[8135, 8136, -3397, -3536, -3518, -8134]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76763\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Nămoloasa\"\n        }\n      }, {\n        \"arcs\": [[8137, -3604, -8027, 8138, 8139, -3759]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76601\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Ivești\"\n        }\n      }, {\n        \"arcs\": [[-3674, -8135, -3520, -3538, -3601, -8138, -3758]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76674\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Liești\"\n        }\n      }, {\n        \"arcs\": [[8140, -3669, 8141, 8142, 8143]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77082\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Rediu\"\n        }\n      }, {\n        \"arcs\": [[8144, 8145, 8146, 8147, 8148, -4260]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75203\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Tecuci\"\n        }\n      }, {\n        \"arcs\": [[-4105, 8149, 8150, 8151]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76932\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Oancea\"\n        }\n      }, {\n        \"arcs\": [[8152, -8151, 8153, 8154, -4599]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77288\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Suceveni\"\n        }\n      }, {\n        \"arcs\": [[8155, 8156, -4197, 8157, -4367]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76004\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Corni\"\n        }\n      }, {\n        \"arcs\": [[-4368, -8158, -4201, 8158, 8159]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77260\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Smulți\"\n        }\n      }, {\n        \"arcs\": [[-4199, 8160, 8161, -8145, -4259, 8162]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76692\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Matca\"\n        }\n      }, {\n        \"arcs\": [[8163, 8164, 8165, 8166]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75515\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Barcea\"\n        }\n      }, {\n        \"arcs\": [[-3838, 8167, 8168, 8169, -3982]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77126\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Scînteiești\"\n        }\n      }, {\n        \"arcs\": [[-8154, -8150, -4104, 8170, 8171, 8172, 8173]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75686\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Băneasa\"\n        }\n      }, {\n        \"arcs\": [[-8173, 8174, -4364, 8175, 8176, 8177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76638\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Jorăști\"\n        }\n      }, {\n        \"arcs\": [[-8123, 8178, 8179, -8168, -3837, 8180]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76317\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Frumușița\"\n        }\n      }, {\n        \"arcs\": [[-8130, -8125, -3246, 8181, -3414]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75711\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Braniștea\"\n        }\n      }, {\n        \"arcs\": [[8182, -8142, -3676, -3757, 8183]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76111\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Costache Negri\"\n        }\n      }, {\n        \"arcs\": [[-8139, -8026, 8184, -8165, 8185]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77402\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Umbrărești\"\n        }\n      }, {\n        \"arcs\": [[-8169, -8180, 8186, -8144, 8187, 8188, 8189]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76139\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Cuca\"\n        }\n      }, {\n        \"arcs\": [[-8148, 8190, 8191, 8192, 8193]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76040\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Cosmești\"\n        }\n      }, {\n        \"arcs\": [[-4341, 8194, 8195, -4560, 8196]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75819\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Buciumeni\"\n        }\n      }, {\n        \"arcs\": [[-8195, -4340, -4261, -8149, -8194, 8197, 8198]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76807\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Nicorești\"\n        }\n      }, {\n        \"arcs\": [[-4536, -4342, -8197, -4559, -4604]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75766\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Brăhășești\"\n        }\n      }, {\n        \"arcs\": [[-4531, 8199, 8200, -4534, -4623, -4700]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76406\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Ghidigeni\"\n        }\n      }, {\n        \"arcs\": [[8201, 8202, 8203, -8200, -4530, 8204]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75917\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Cerțești\"\n        }\n      }, {\n        \"arcs\": [[-8204, 8205, -4264, -4535, -8201]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77579\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Negrilești\"\n        }\n      }, {\n        \"arcs\": [[-4369, -8160, 8206, -8202, 8207, 8208]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76175\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Drăgușeni\"\n        }\n      }, {\n        \"arcs\": [[-8159, -4200, -8163, -4258, -8206, -8203, -8207]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75953\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Corod\"\n        }\n      }, {\n        \"arcs\": [[-8157, 8209, 8210, -8184, -3760, -8140, -8186, -8164, 8211, -8161, -4198]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76157\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Cudalbi\"\n        }\n      }, {\n        \"arcs\": [[-4759, 8212, -4370, -8209, 8213, 8214]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75542\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Bălăbănești\"\n        }\n      }, {\n        \"arcs\": [[-8177, 8215, -4757, 8216]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75338\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Berești\"\n        }\n      }, {\n        \"arcs\": [[-4758, -8216, -8176, -4371, -8213]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77561\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Rădești\"\n        }\n      }, {\n        \"arcs\": [[-4980, -4719, 8217, -4763, -5064, -4971]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164829\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Mălușteni\"\n        }\n      }, {\n        \"arcs\": [[-4718, -4600, -8155, -8174, -8178, -8217, -4756, -8218]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75356\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Berești-Meria\"\n        }\n      }, {\n        \"arcs\": [[8218, -8214, -8208, -8205, -4529, -4699]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75613\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Bălășești\"\n        }\n      }, {\n        \"arcs\": [[-4832, -4760, -8215, -8219, -4698, -5076, -4904, -5065]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164133\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Grivița\"\n        }\n      }, {\n        \"arcs\": [[8220, 8221, 8222]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153151\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Lunca\"\n        }\n      }, {\n        \"arcs\": [[-6596, -6504, -6480, -6549, 8223, -6651]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59880\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Unguraș\"\n        }\n      }, {\n        \"arcs\": [[-6652, -8224, -6552, 8224, -6694, -6783, -6718]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55160\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mica\"\n        }\n      }, {\n        \"arcs\": [[-6230, -6096, -6013, -6052, -6120, -6266, -8105, -6466, -6310]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32768\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Budești\"\n        }\n      }, {\n        \"arcs\": [[-6387, -6297, -6205, 8225, 8226, 8227, -6457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115520\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Batoș\"\n        }\n      }, {\n        \"arcs\": [[-8227, 8228, -6041, -6044, -7944, 8229]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"117998\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Lunca\"\n        }\n      }, {\n        \"arcs\": [[-6477, -6458, -8228, -8230, -7945, -6214, -6309, 8230, 8231]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34985\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Teaca\"\n        }\n      }, {\n        \"arcs\": [[8232, 8233, -3054, -2837, -2652, -2964, -3196]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54485\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Văliug\"\n        }\n      }, {\n        \"arcs\": [[-3260, -3177, 8234, -3195, -3272, -3320]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51699\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Buchin\"\n        }\n      }, {\n        \"arcs\": [[-3062, -3055, -8234, 8235]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51662\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Brebu Nou\"\n        }\n      }, {\n        \"arcs\": [[-3176, -3063, -8236, -8233, -8235]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51751\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Bucoșnița\"\n        }\n      }, {\n        \"arcs\": [[-2733, -2264, -2032, -1889, -1972, -2176, 8236, -2407]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53791\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Sasca Montană\"\n        }\n      }, {\n        \"arcs\": [[-2408, -8237, -2178, 8237, -2444, -2430]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51984\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Ciuchici\"\n        }\n      }, {\n        \"arcs\": [[-6251, -6194, 8238, 8239, 8240, 8241, -8103]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55687\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Apahida\"\n        }\n      }, {\n        \"arcs\": [[-6047, -5954, -5796, 8242, 8243, -8239, -6193]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57350\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cojocna\"\n        }\n      }, {\n        \"arcs\": [[-5795, 8244, 8245, 8246, -8243]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58990\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Ploscoș\"\n        }\n      }, {\n        \"arcs\": [[-6550, -6475, -6376, -6332, -6449, 8247, -6538, 8248]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58142\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Iclod\"\n        }\n      }, {\n        \"arcs\": [[8249, -6539, -8248, -6451, -6543, -6645]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57449\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cornești\"\n        }\n      }, {\n        \"arcs\": [[-3643, 8250, 8251, -3499, -3656, -3797, -3831]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159259\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Victor Vlad Delamarina\"\n        }\n      }, {\n        \"arcs\": [[-7962, 8252, 8253, -3641, -3666, -3687]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"53755\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Sacu\"\n        }\n      }, {\n        \"arcs\": [[-7961, -3321, -3274, -3277, -3372, 8254, -8253]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52062\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Copăcele\"\n        }\n      }, {\n        \"arcs\": [[-3373, -3305, -3299, -3411, -3500, -8252, 8255]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52785\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Fîrliug\"\n        }\n      }, {\n        \"arcs\": [[-8254, -8255, -3374, -8256, -8251, -3642]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"158804\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Știuca\"\n        }\n      }, {\n        \"arcs\": [[-4300, -4346, 8256, 8257, -4553, -4712, -4853, -4715]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63447\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Baraolt\"\n        }\n      }, {\n        \"arcs\": [[8258, -551, -581, -604, -599, 8259]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101822\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Chiselet\"\n        }\n      }, {\n        \"arcs\": [[-773, 8260, -8260, -598, -868, -831]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104181\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Mânăstirea\"\n        }\n      }, {\n        \"arcs\": [[-1071, -937, -595, -814, -924, 8261]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103568\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Gurbănești\"\n        }\n      }, {\n        \"arcs\": [[-1072, -8262, -923, -1150, -1140, -1255]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104886\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Sărulești\"\n        }\n      }, {\n        \"arcs\": [[8262, -994, -939, -1070, -1156, 8263, 8264]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93888\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Lehliu-Gară\"\n        }\n      }, {\n        \"arcs\": [[-1238, -1135, -999, -995, -8263, 8265]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93370\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Dor Mărunt\"\n        }\n      }, {\n        \"arcs\": [[-1543, -1490, 8266, -8264, -1159, -1370, -1671, 8267]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94330\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Sălcioara\"\n        }\n      }, {\n        \"arcs\": [[-1599, -1345, -1239, -8266, -8265, -8267, -1489]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93101\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Ciochina\"\n        }\n      }, {\n        \"arcs\": [[-7966, -1217, -1102, 8268, 8269, -1364, -1375, -1511]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94081\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Movila\"\n        }\n      }, {\n        \"arcs\": [[-410, -442, 8270, -295, -359, -7951, -509]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104680\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Prundu\"\n        }\n      }, {\n        \"arcs\": [[-815, -639, -558, 8271, 8272, -723]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101458\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Budești\"\n        }\n      }, {\n        \"arcs\": [[-557, -482, -613, 8273, 8274, -8272]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179757\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Herăști\"\n        }\n      }, {\n        \"arcs\": [[-940, -724, -8273, -8275, 8275, 8276, 8277, 8278, 8279, 8280]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102945\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Frumușani\"\n        }\n      }, {\n        \"arcs\": [[-1438, -1475, 8281, 8282, 8283, -1381, -1464, 8284, -1743]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92658\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Slobozia\"\n        }\n      }, {\n        \"arcs\": [[-1091, 8285, 8286, 8287, 8288, -565, -921, -1235, 8289, -8269, -1101]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"92961\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Borcea\"\n        }\n      }, {\n        \"arcs\": [[-8270, -8290, -1234, -1323, -1365]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"94562\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Ștefan cel Mare\"\n        }\n      }, {\n        \"arcs\": [[-8284, 8290, -1138, -1221, -1382]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93156\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Ciulnița\"\n        }\n      }, {\n        \"arcs\": [[-6843, -6744, 8291, 8292, -6635, -6672, -6800]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34903\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Șintereag\"\n        }\n      }, {\n        \"arcs\": [[-2953, 8293, 8294, 8295, 8296, 8297, -2972]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43331\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Ianca\"\n        }\n      }, {\n        \"arcs\": [[-3172, -2974, 8298, -3138, 8299]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43279\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Gradiștea\"\n        }\n      }, {\n        \"arcs\": [[8300, 8301, -3125, -3174, 8302, -3307, -3398, -8137]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43867\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Salcia Tudor\"\n        }\n      }, {\n        \"arcs\": [[-8133, -3482, -3416, 8303, 8304, 8305, -8301, -8136]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43563\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Măxineni\"\n        }\n      }, {\n        \"arcs\": [[-3245, -3072, -2988, 8306, -8304, -3415, -8182]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43992\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Siliștea\"\n        }\n      }, {\n        \"arcs\": [[-2688, -2490, 8307, 8308]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44355\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Unirea\"\n        }\n      }, {\n        \"arcs\": [[-2489, -2439, 8309, 8310, -8308]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44505\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Viziru\"\n        }\n      }, {\n        \"arcs\": [[8311, -2823, -2689, -8309, -8311, 8312, -8294, -2952, -2985]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44202\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Traian\"\n        }\n      }, {\n        \"arcs\": [[-2437, 8313, 8314, -8296, 8315]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44532\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Zăvoaia\"\n        }\n      }, {\n        \"arcs\": [[-2436, -1933, -2006, 8316, -8314]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43073\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Dudești\"\n        }\n      }, {\n        \"arcs\": [[-8310, -2438, -8316, -8295, -8313]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42913\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Bordei Verde\"\n        }\n      }, {\n        \"arcs\": [[-2987, -3097, 8317, -8305, -8307]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43787\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Romanu\"\n        }\n      }, {\n        \"arcs\": [[-8318, -3099, -3126, -8302, -8306]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43929\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Scorțaru Nou\"\n        }\n      }, {\n        \"arcs\": [[-8315, -8317, -2005, -2271, -2610, 8318, 8319, -8297]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43019\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Cireșu\"\n        }\n      }, {\n        \"arcs\": [[-8319, -2609, -2624, 8320]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44113\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Surdila-Găiseanca\"\n        }\n      }, {\n        \"arcs\": [[-8298, -8320, -8321, -2623, 8321, -2973]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43625\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Mircea Vodă\"\n        }\n      }, {\n        \"arcs\": [[-3044, -2054, -2435, -2488, -2687]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44060\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Stăncuța\"\n        }\n      }, {\n        \"arcs\": [[-8322, -2626, -2869, 8322, -3139, -8299]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44462\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Vișani\"\n        }\n      }, {\n        \"arcs\": [[-3143, -3140, -8323, -2870, -2756, -2775, -2906, -2992, -3105]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"43180\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Galbenu\"\n        }\n      }, {\n        \"arcs\": [[-5212, 8323, -5363, -5556, 8324, -5727, -5841]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21007\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Agăș\"\n        }\n      }, {\n        \"arcs\": [[-8325, -5555, -5829, -5883, -5728]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23975\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Palanca\"\n        }\n      }, {\n        \"arcs\": [[8325, 8326, 8327, -1285, 8328]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179463\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Mogoșoaia\"\n        }\n      }, {\n        \"arcs\": [[[-8280, 8329, 8330]], [[8331, 8332, 8333]], [[8336, 8337, 8338, 8339]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"101742\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Cernica\"\n        }\n      }, {\n        \"arcs\": [[8340, -1503, 8341, 8342, 8343, 8344]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103443\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Grădiștea\"\n        }\n      }, {\n        \"arcs\": [[8345, 8346, -7971, -7977, 8347]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179196\",\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"București Sectorul 6\"\n        }\n      }, {\n        \"arcs\": [[8348, -7979, 8349, -1121, -1161, -1287]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102605\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Dragomirești-Vale\"\n        }\n      }, {\n        \"arcs\": [[-7973, 8350, 8351, -7991, -796, -904, -965, 8352]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101617\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Buturugeni\"\n        }\n      }, {\n        \"arcs\": [[-8274, -612, -512, -7950, -746, 8353, -8276]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105874\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Vărăști\"\n        }\n      }, {\n        \"arcs\": [[-5346, -5192, -5248, -5333, 8354, 8355]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26346\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Gioseni\"\n        }\n      }, {\n        \"arcs\": [[-4836, -4655, -4794, 8356]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26338\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Buciumi\"\n        }\n      }, {\n        \"arcs\": [[-6139, -6031, -5909, 8357, -5944, 8358, -6158]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24999\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Roșiori\"\n        }\n      }, {\n        \"arcs\": [[-5573, -8056, -8051, 8359, -5907, 8360]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23127\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Izvoru Berheciului\"\n        }\n      }, {\n        \"arcs\": [[8361, -5874, -5687, -5615, -5574, -8361, -5906]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"21891\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Colonești\"\n        }\n      }, {\n        \"arcs\": [[-8360, -8054, -5668, -5809, -5945, -8358, -5908]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25362\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Secuieni\"\n        }\n      }, {\n        \"arcs\": [[-6023, -5875, -8362, -5905, -6030]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24427\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Plopana\"\n        }\n      }, {\n        \"arcs\": [[-8258, 8362, -4344, -4248, -4307, -4554]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"41701\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Racoș\"\n        }\n      }, {\n        \"arcs\": [[-4345, -8363, -8257]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42498\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Augustin\"\n        }\n      }, {\n        \"arcs\": [[-1451, -1314, -1209, -1249, 8363, -1416]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179926\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Răscăeți\"\n        }\n      }, {\n        \"arcs\": [[-1574, -1378, -1320, -1276, -1313, -1450, -1433]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"68976\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Uliești\"\n        }\n      }, {\n        \"arcs\": [[-1642, -1575, -1436, -1551, -1921, 8364, 8365]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67327\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Dragodana\"\n        }\n      }, {\n        \"arcs\": [[-1906, -1759, -1643, -8366, 8366]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179891\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Raciu\"\n        }\n      }, {\n        \"arcs\": [[-2034, -1907, -8367, -8365, -1920, -2081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67773\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Lucieni\"\n        }\n      }, {\n        \"arcs\": [[-392, -364, -245, -276, 8367, -381, 8368]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73317\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Mîrșani\"\n        }\n      }, {\n        \"arcs\": [[[-279, -382, -8368]], [[8369, -393, -8369, -380, 8370]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"74949\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Rojiște\"\n        }\n      }, {\n        \"arcs\": [[-619, 8371, -8371, -386, -527, -553]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71199\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bratovoești\"\n        }\n      }, {\n        \"arcs\": [[-394, -8370, -8372, -618]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"71572\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Castranova\"\n        }\n      }, {\n        \"arcs\": [[-519, 8372, 8373, -514, -658]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73852\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Radovan\"\n        }\n      }, {\n        \"arcs\": [[-363, -327, 8374, -8373, -418]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72953\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Lipovu\"\n        }\n      }, {\n        \"arcs\": [[-8375, -331, -332, -367, -515, -8374]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74923\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Întorsura\"\n        }\n      }, {\n        \"arcs\": [[-228, 8375, 8376, -256, -401]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73665\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Piscu Vechi\"\n        }\n      }, {\n        \"arcs\": [[-335, -189, 8377, 8378, -226]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73905\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Rast\"\n        }\n      }, {\n        \"arcs\": [[-1744, -8285, -1466, -1494, -1694, -1938, 8379]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93735\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Grivița\"\n        }\n      }, {\n        \"arcs\": [[-1745, -8380, -1937, -2007]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179702\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Traian\"\n        }\n      }, {\n        \"arcs\": [[-1324, -1237, 8380, 8381, -1473, -1506]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179980\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Mărculești\"\n        }\n      }, {\n        \"arcs\": [[-8382, 8382, -8282, -1474]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93236\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Cosâmbești\"\n        }\n      }, {\n        \"arcs\": [[8383, 8384, -1386, 8385, -1500, -1620, -1735]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102703\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Dridu\"\n        }\n      }, {\n        \"arcs\": [[-8268, -1670, -1544]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180019\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Sărățeni\"\n        }\n      }, {\n        \"arcs\": [[-1425, -1327, 8386, -1662]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179784\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Borănești\"\n        }\n      }, {\n        \"arcs\": [[-1663, -8387, -1330, -1387, -8385, 8387, -1636]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102240\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Coșereni\"\n        }\n      }, {\n        \"arcs\": [[8388, 8389, -7522, -7571, 8390]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136802\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Apa\"\n        }\n      }, {\n        \"arcs\": [[8391, 8392, -7509, -7520, -8390, 8393]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"108963\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Seini\"\n        }\n      }, {\n        \"arcs\": [[8394, 8395, -8392, 8396]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"180091\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Racșa\"\n        }\n      }, {\n        \"arcs\": [[8397, 8398, -7506, -8393, -8396]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107662\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Cicîrlău\"\n        }\n      }, {\n        \"arcs\": [[8399, -8391, -7570, 8400, 8401]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138084\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Medieșu Aurit\"\n        }\n      }, {\n        \"arcs\": [[-7853, 8402, 8403, -8397, -8394, -8389, -8400, 8404, 8405]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138351\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Orașu Nou\"\n        }\n      }, {\n        \"arcs\": [[-4728, -4670, -4709, -4782, -4892, -5000, 8406]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9026\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Bucerdea Grânoasă\"\n        }\n      }, {\n        \"arcs\": [[-4633, -4729, -8407, -4999, -4957]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"7348\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Sîncel\"\n        }\n      }, {\n        \"arcs\": [[8407, 8408, 8409, -6770, 8410, -6969, -7953]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95239\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Rediu\"\n        }\n      }, {\n        \"arcs\": [[8411, 8412, -8409]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100353\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Valea Lupului\"\n        }\n      }, {\n        \"arcs\": [[8413, 8414, -7662, -7665, -7691, -7758, -7796, -7828]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148293\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dornești\"\n        }\n      }, {\n        \"arcs\": [[-7617, -7390, -7503, 8415]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149502\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Moldova-Sulița\"\n        }\n      }, {\n        \"arcs\": [[-4033, 8416, 8417, 8418, -4220, -4087, -8084]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"8014\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Șugag\"\n        }\n      }, {\n        \"arcs\": [[-4627, -4675, -4867, -5305, -4824]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11664\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Petriș\"\n        }\n      }, {\n        \"arcs\": [[-734, -537, 8419, -622, -798, -753]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73709\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Plenița\"\n        }\n      }, {\n        \"arcs\": [[-536, -403, -447, -623, -8420]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74536\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Unirea\"\n        }\n      }, {\n        \"arcs\": [[-48, 8420, -144, -171, -168]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"73567\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Ostroveni\"\n        }\n      }, {\n        \"arcs\": [[-677, -573, -521, -657, -8034, -844]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"70110\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Podari\"\n        }\n      }, {\n        \"arcs\": [[8421, 8422, 8423, 8424, 8425, 8426, 8427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160779\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Maliuc\"\n        }\n      }, {\n        \"arcs\": [[8428, -8428, 8429, -3168, 8430, 8431]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161133\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Pardina\"\n        }\n      }, {\n        \"arcs\": [[8432, 8433, 8434, -3035, -3060, -3111, -8041, -8042, 8435, -3622]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171021\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Malaia\"\n        }\n      }, {\n        \"arcs\": [[-8328, 8436, -7980, -8349, -1286]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179285\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Chitila\"\n        }\n      }, {\n        \"arcs\": [[-4789, -4648, -4521, 8437]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87362\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Crișcior\"\n        }\n      }, {\n        \"arcs\": [[-4322, -4165, -3989, -4191, -4377, -4493]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89428\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Dobra\"\n        }\n      }, {\n        \"arcs\": [[8438, 8439, 8440, -4163, -4060]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90431\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Pestișu Mic\"\n        }\n      }, {\n        \"arcs\": [[8441, -3872, -3709, 8442, 8443, 8444, -8440, 8445]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86810\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Hunedoara\"\n        }\n      }, {\n        \"arcs\": [[-7460, -7384, -7467, -7511, 8446]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"147526\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Cacica\"\n        }\n      }, {\n        \"arcs\": [[-7547, -7461, -8447, -7510]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151585\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Poieni-Solca\"\n        }\n      }, {\n        \"arcs\": [[-8086, -2391, -8087, -2467, -2401]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131407\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Mizil\"\n        }\n      }, {\n        \"arcs\": [[-8283, -8383, -8381, -1236, -880, -970, -1134, -8291]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"93487\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Dragalina\"\n        }\n      }, {\n        \"arcs\": [[-8055, -5361, -5292, -5348, 8447, -5665, -8053]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"24089\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Parincea\"\n        }\n      }, {\n        \"arcs\": [[-4561, -8196, -8199, -4467, -4679]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77587\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Poiana\"\n        }\n      }, {\n        \"arcs\": [[-3983, -8170, -8190, 8448, 8449, -8171, -4103]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76255\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Fîrțănești\"\n        }\n      }, {\n        \"arcs\": [[-8450, 8450, -4365, -8175, -8172]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75472\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Tîrgu Bujor\"\n        }\n      }, {\n        \"arcs\": [[-8212, -8167, 8451, -8146, -8162]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75221\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Drăgănești\"\n        }\n      }, {\n        \"arcs\": [[-8451, -8449, -8189, 8452, -8210, -8156, -4366]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"75668\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Băleni\"\n        }\n      }, {\n        \"arcs\": [[-8143, -8183, -8211, -8453, -8188]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77601\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Suhurlui\"\n        }\n      }, {\n        \"arcs\": [[-6160, 8453, -6130, 8454]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123013\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Icușești\"\n        }\n      }, {\n        \"arcs\": [[-6062, -6141, -6162, 8455, 8456, 8457, 8458]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121876\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bozieni\"\n        }\n      }, {\n        \"arcs\": [[8459, -8456, -6161, -8455, -6129, 8460, 8461, 8462]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123102\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Ion Creangă\"\n        }\n      }, {\n        \"arcs\": [[8463, -8461, -6133, -6177, -8112, -8109, 8464, 8465]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124233\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Secuieni\"\n        }\n      }, {\n        \"arcs\": [[-8457, -8460, 8466, 8467, 8468]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123709\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Poienari\"\n        }\n      }, {\n        \"arcs\": [[-8467, -8463, 8469, 8470, 8471]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125150\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Gâdinți\"\n        }\n      }, {\n        \"arcs\": [[-8471, 8472, 8473, 8474]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120860\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Roman\"\n        }\n      }, {\n        \"arcs\": [[8475, -8465, -8108, 8476, 8477]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122613\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Făurei\"\n        }\n      }, {\n        \"arcs\": [[8478, 8479, -8478, 8480, 8481]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125105\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Ruginoasa\"\n        }\n      }, {\n        \"arcs\": [[8482, 8483, -8468, -8472, -8475, 8484, 8485, 8486, 8487]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124153\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Sagna\"\n        }\n      }, {\n        \"arcs\": [[8488, -8485, -8474, 8489, 8490, 8491, 8492]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120888\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Cordun\"\n        }\n      }, {\n        \"arcs\": [[8493, -8486, -8489, 8494, 8495]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124634\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Tămășeni\"\n        }\n      }, {\n        \"arcs\": [[8496, -6426, 8497, 8498]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125169\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Negrești\"\n        }\n      }, {\n        \"arcs\": [[8499, -8481, -8477, -8111, -6366, -6499, -6490, 8500]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121466\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bîrgăuani\"\n        }\n      }, {\n        \"arcs\": [[8501, 8502, 8503, -8482, -8500, 8504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125123\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Văleni\"\n        }\n      }, {\n        \"arcs\": [[8505, 8506, 8507, -8492, 8508, -8503, 8509, 8510]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122668\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Gherăești\"\n        }\n      }, {\n        \"arcs\": [[8511, 8512, -6558, -6500, -6407, -6427, -8497, 8513, 8514, 8515]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121607\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bodești\"\n        }\n      }, {\n        \"arcs\": [[8516, 8517, 8518, -8483, 8519, 8520, 8521]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124331\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Stănița\"\n        }\n      }, {\n        \"arcs\": [[8522, 8523, -8506, 8524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97811\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Mircești\"\n        }\n      }, {\n        \"arcs\": [[-8510, -8502, 8525, 8526, 8527]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121796\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Botești\"\n        }\n      }, {\n        \"arcs\": [[-6626, 8528, 8529, 8530, 8531, 8532]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97777\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Mădîrjac\"\n        }\n      }, {\n        \"arcs\": [[-8526, -8505, -8501, -6493, -6557, 8533, 8534, 8535]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124750\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Tupilați\"\n        }\n      }, {\n        \"arcs\": [[8536, 8537, 8538, 8539, 8540]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96110\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Butea\"\n        }\n      }, {\n        \"arcs\": [[-8515, 8541, 8542, 8543]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125114\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Ghindăoani\"\n        }\n      }, {\n        \"arcs\": [[8544, 8545, 8546, -8542, -8514, -8499, 8547, -6608, -6796]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122187\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Crăcăoani\"\n        }\n      }, {\n        \"arcs\": [[8548, -8534, -6559, -8513, 8549, 8550]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124803\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Țibucani\"\n        }\n      }, {\n        \"arcs\": [[8551, 8552, 8553]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100362\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ciohorăni\"\n        }\n      }, {\n        \"arcs\": [[8554, -8516, -8544, 8555, 8556, 8557]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122908\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Grumăzești\"\n        }\n      }, {\n        \"arcs\": [[8558, -8557, 8559, -8546, 8560]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121108\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Agapia\"\n        }\n      }, {\n        \"arcs\": [[8561, -8551, 8562, -6684, -6777]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123371\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Păstrăveni\"\n        }\n      }, {\n        \"arcs\": [[8563, 8564, -8540, 8565, -8523, 8566, 8567, 8568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95612\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Alexandru I. Cuza\"\n        }\n      }, {\n        \"arcs\": [[-6685, -8563, -8550, -8512, -8555, 8569, 8570]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123424\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Petricani\"\n        }\n      }, {\n        \"arcs\": [[8571, -8554, 8572, -8535, -8549, -8562, -6776, 8573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98051\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Miroslovești\"\n        }\n      }, {\n        \"arcs\": [[8574, 8575, -8531, 8576, -8522, 8577, 8578, 8579]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99058\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Sinești\"\n        }\n      }, {\n        \"arcs\": [[8580, -8570, -8558, -8559, 8581, 8582]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121055\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Tîrgu Neamț\"\n        }\n      }, {\n        \"arcs\": [[-6778, -6686, -8571, -8581, 8583, 8584]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124661\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Timișești\"\n        }\n      }, {\n        \"arcs\": [[[8585, 8586, 8587]], [[8588, 8589, 8590, 8591, 8592, 8593, 8594, 8595]]],\n        \"type\": \"MultiPolygon\",\n        \"properties\": {\n          \"id\": \"95499\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ion Neculce\"\n        }\n      }, {\n        \"arcs\": [[-6861, 8596, -8582, -8561, -8545, -6795, -7009, -6958]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125016\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Vînători-Neamț\"\n        }\n      }, {\n        \"arcs\": [[8597, 8598, 8599, 8600]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100326\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Hărmănești\"\n        }\n      }, {\n        \"arcs\": [[8601, 8602, 8603, -8598, 8604, 8605]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99539\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Todirești\"\n        }\n      }, {\n        \"arcs\": [[8606, 8607, 8608, 8609, 8610]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97063\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Focuri\"\n        }\n      }, {\n        \"arcs\": [[-8605, -8601, 8611, 8612, 8613, 8614]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100086\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Vînători\"\n        }\n      }, {\n        \"arcs\": [[-7031, 8615, 8616, 8617, -8606, -8615, 8618, 8619]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96478\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Cotnari\"\n        }\n      }, {\n        \"arcs\": [[8620, -8611, 8621, 8622, 8623]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100317\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Fântânele\"\n        }\n      }, {\n        \"arcs\": [[8624, 8625, 8626, 8627]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99600\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Trifești\"\n        }\n      }, {\n        \"arcs\": [[-8626, 8628, 8629, -7272, 8630]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100344\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Roșcani\"\n        }\n      }, {\n        \"arcs\": [[-8627, -8631, -7271, -7453, 8631]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95943\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Bivolari\"\n        }\n      }, {\n        \"arcs\": [[-7449, -7367, -7303, 8632, 8633, -7533]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151022\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Verești\"\n        }\n      }, {\n        \"arcs\": [[8634, -8633, -7306, -7316, -7366, -7473, 8635]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146370\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Salcea\"\n        }\n      }, {\n        \"arcs\": [[-8634, -8635, 8636, 8637, -7534]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148426\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dumbrăveni\"\n        }\n      }, {\n        \"arcs\": [[-7535, -8638, 8638, -7585, -7607]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"150221\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Siminicea\"\n        }\n      }, {\n        \"arcs\": [[-7586, -8639, -8637, -8636, -7476, -7598, -7681]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146799\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Adâncata\"\n        }\n      }, {\n        \"arcs\": [[-7633, -7548, -7512, -7470, -7637, 8639]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149290\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Marginea\"\n        }\n      }, {\n        \"arcs\": [[-7708, -7692, -7634, -8640, -7636, -7724]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151479\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Horodnic de Sus\"\n        }\n      }, {\n        \"arcs\": [[-7781, -7706, -7663, -8415, 8640]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146995\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bălcăuți\"\n        }\n      }, {\n        \"arcs\": [[-7831, -7782, -8641, -8414, -7830, 8641]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"146655\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Siret\"\n        }\n      }, {\n        \"arcs\": [[-1567, 8642, 8643, -1982, -1902]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74956\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Tălpaș\"\n        }\n      }, {\n        \"arcs\": [[-7754, -7618, -8416, -7505, 8644, -8002]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"149183\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Izvoarele Sucevei\"\n        }\n      }, {\n        \"arcs\": [[8645, -3774, -8029, -8031, -3763, -3858, 8646]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178607\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Vînători\"\n        }\n      }, {\n        \"arcs\": [[-8080, -3885, -8082, -8078, -3882, -8081, -4035, -3900, -8083, -3803, -3888]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"144599\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Gura Rîului\"\n        }\n      }, {\n        \"arcs\": [[-4063, -3848, -3626, -3636, -3784, -8073]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"143557\",\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Șelimbăr\"\n        }\n      }, {\n        \"arcs\": [[-6204, -6188, 8647, -5970, -5872, -5934, -6039, -8229, -8226]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"114809\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Reghin\"\n        }\n      }, {\n        \"arcs\": [[-6241, -5967, -5969, -8648, -6187]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119590\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Solovăstru\"\n        }\n      }, {\n        \"arcs\": [[8648, -5583, -7947, -5398, -5521, -5693, -5783]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"9930\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Beliu\"\n        }\n      }, {\n        \"arcs\": [[8649, -2059, -1804, -1875, -1959, -2240, 8650]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14584\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bogați\"\n        }\n      }, {\n        \"arcs\": [[8651, -8651, -2239, -2352]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16427\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Dobrești\"\n        }\n      }, {\n        \"arcs\": [[-2155, -2060, -8650, -8652, -2351, -2300]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"67835\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Ludești\"\n        }\n      }, {\n        \"arcs\": [[-893, -738, -642, -579, -629, -710, -835]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152760\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Dobrotești\"\n        }\n      }, {\n        \"arcs\": [[-719, -683, -606, -589, -694, 8652, -777]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126825\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Dobrun\"\n        }\n      }, {\n        \"arcs\": [[8653, 8654, 8655, 8656, -7204, 8657]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148006\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dolhasca\"\n        }\n      }, {\n        \"arcs\": [[-8657, 8658, 8659, -7118, -7199, -7205]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148097\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dolhești\"\n        }\n      }, {\n        \"arcs\": [[8660, -374, -216, -177, 8661, -272, 8662]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154709\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Toporu\"\n        }\n      }, {\n        \"arcs\": [[-6250, 8663, -6379, 8664, 8665, 8666]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97189\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Gorban\"\n        }\n      }, {\n        \"arcs\": [[8667, 8668, 8669, -2115, 8670]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112904\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Dubova\"\n        }\n      }, {\n        \"arcs\": [[-6394, -6274, -6135, -6260, 8671]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166413\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Todirești\"\n        }\n      }, {\n        \"arcs\": [[-1893, -1703, 8672, -8671, -2114, -2096, -2836]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112245\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Eșelnița\"\n        }\n      }, {\n        \"arcs\": [[-4665, -4389, -4703, 8673]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65105\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Mereni\"\n        }\n      }, {\n        \"arcs\": [[-8063, -4997, -4860, 8674, 8675, -5275]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22380\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Dofteana\"\n        }\n      }, {\n        \"arcs\": [[-8675, -4859, -4666, -8674, -4705, 8676, 8677]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"65154\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Estelnic\"\n        }\n      }, {\n        \"arcs\": [[8678, -1619, -1730, -1942, -2104]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"126905\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Făgețelu\"\n        }\n      }, {\n        \"arcs\": [[-1854, -1646, -1565, -1616, -8679, -2103, -2083]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"19793\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Vedea\"\n        }\n      }, {\n        \"arcs\": [[-1566, -1334, -1258, 8679, -8643]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"72276\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Fărcaș\"\n        }\n      }, {\n        \"arcs\": [[-8644, -8680, -1261, -1298, -1401, -1496, -1983]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79932\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Crușet\"\n        }\n      }, {\n        \"arcs\": [[-375, -8661, 8680, 8681, -7993]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104788\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Răsuceni\"\n        }\n      }, {\n        \"arcs\": [[-6689, -6639, 8682, -6658, -6819]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"31379\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Șinteu\"\n        }\n      }, {\n        \"arcs\": [[-6638, -6529, -6464, -6494, -6659, -8683]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"27212\",\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Aușeu\"\n        }\n      }, {\n        \"arcs\": [[-6707, -6584, -6582, 8683, 8684, -8292, -6743, -6938]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"32394\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Bistrița\"\n        }\n      }, {\n        \"arcs\": [[-2783, -2565, -2245, 8685, -2281, -2511, -2710, 8686]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17049\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mălureni\"\n        }\n      }, {\n        \"arcs\": [[-3048, -2871, -2784, -8687, -2709, -2845, -2948, -3083, -3087]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17619\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mușătești\"\n        }\n      }, {\n        \"arcs\": [[-1790, -1596, -1541, -1645, -1853, 8687, 8688]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13935\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Albota\"\n        }\n      }, {\n        \"arcs\": [[8689, -8688, -1852, -2066]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17496\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Moșoaia\"\n        }\n      }, {\n        \"arcs\": [[-2285, 8690, -2085, -2107, -2347, -2453, -2508]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"15983\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Cotmeana\"\n        }\n      }, {\n        \"arcs\": [[8691, -2068, -2086, -8691, -2284]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"16506\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Drăganu\"\n        }\n      }, {\n        \"arcs\": [[-8192, 8692, -8647, -3857, -4083, -4152, 8693]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176212\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Garoafa\"\n        }\n      }, {\n        \"arcs\": [[-3447, -3407, 8694, 8695, 8696, 8697, -3420]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178046\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Tâmboești\"\n        }\n      }, {\n        \"arcs\": [[-3219, -3167, -3332, 8698, 8699, -3405]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"44845\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Râmnicu Sărat\"\n        }\n      }, {\n        \"arcs\": [[-3406, -8700, 8700, 8701, -8695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178947\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Obrejița\"\n        }\n      }, {\n        \"arcs\": [[-3173, -8300, -3137, 8702, -3308, -8303]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"50399\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Vîlcelele\"\n        }\n      }, {\n        \"arcs\": [[-8703, -3142, -3144, -3103, -3221, -3404, -3352, -3309]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48842\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Puiești\"\n        }\n      }, {\n        \"arcs\": [[-8702, 8703, -8696]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"177655\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Slobozia Bradului\"\n        }\n      }, {\n        \"arcs\": [[-8704, -8701, -8699, -3331, -3375, 8704, -8697]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48682\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Podgoria\"\n        }\n      }, {\n        \"arcs\": [[8705, -3067, -3212, -3316, 8706]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"135315\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Starchiojd\"\n        }\n      }, {\n        \"arcs\": [[-3293, -3152, 8707, -8707, -3319, -3547, 8708]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"46180\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Chiojdu\"\n        }\n      }, {\n        \"arcs\": [[-3249, -3134, -3012, -2928, -3150]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"48227\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pănătău\"\n        }\n      }, {\n        \"arcs\": [[-2981, -3068, -8706, -8708, -3151]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"45959\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Cătina\"\n        }\n      }, {\n        \"arcs\": [[-3861, -3294, -8709, 8709, -3896]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"49484\",\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Siriu\"\n        }\n      }, {\n        \"arcs\": [[-3897, -8710, -3546, -3718, -3733]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63688\",\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Sita Buzăului\"\n        }\n      }, {\n        \"arcs\": [[-2195, -1755, -1789, 8710, 8711, -2184]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13392\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Ștefănești\"\n        }\n      }, {\n        \"arcs\": [[-8712, 8712, 8713, -2243, -2185]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13365\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mărăcineni\"\n        }\n      }, {\n        \"arcs\": [[-8713, -8711, -1791, -8689, -8690, -2065, 8714, 8715]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13169\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Pitești\"\n        }\n      }, {\n        \"arcs\": [[8716, -121, -215, -373, 8717]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105295\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Stănești\"\n        }\n      }, {\n        \"arcs\": [[-1586, -1399, 8718, 8719, -1559, -1753]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18475\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Rociu\"\n        }\n      }, {\n        \"arcs\": [[-1560, -8720, 8720, -1202, -1179, -1303, -1595]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14940\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Buzoești\"\n        }\n      }, {\n        \"arcs\": [[-1166, -1201, -8721, 8721]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"18411\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Recea\"\n        }\n      }, {\n        \"arcs\": [[-1417, -8364, -1250, -1167, -8722, -8719, -1398]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"17726\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Negrași\"\n        }\n      }, {\n        \"arcs\": [[-4791, 8722, -4944, -5080, -5025]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90805\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Ribița\"\n        }\n      }, {\n        \"arcs\": [[-4790, -8438, -4520, -4488, -4578, -4945, -8723]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87291\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Brad\"\n        }\n      }, {\n        \"arcs\": [[-3707, 8723, 8724, -3580, -3650, -3711, 8725]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91535\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Toplița\"\n        }\n      }, {\n        \"arcs\": [[-3766, 8726, -3362, 8727, 8728, 8729]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87996\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Baru\"\n        }\n      }, {\n        \"arcs\": [[-3768, 8730, -3504, -3657, -3871]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88449\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Boșorod\"\n        }\n      }, {\n        \"arcs\": [[8731, 8732, -3771, -3944, -4052]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88261\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Beriu\"\n        }\n      }, {\n        \"arcs\": [[-1899, 8733, 8734, -2173, 8735]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111818\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Godeanu\"\n        }\n      }, {\n        \"arcs\": [[8736, 8737, 8738, 8739, -1701, -1892, 8740]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112334\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Ilovița\"\n        }\n      }, {\n        \"arcs\": [[-8735, 8741, -8741, -1891, -2214, -2174]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111220\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Cireșu\"\n        }\n      }, {\n        \"arcs\": [[-2324, -2191, 8742, -2729, -2578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112370\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Isverna\"\n        }\n      }, {\n        \"arcs\": [[-2190, -1967, -1900, -8736, -2172, -2213, -2730, -8743]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110456\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Balta\"\n        }\n      }, {\n        \"arcs\": [[8743, 8744, -8069, -4883, -4899, -4976, 8745]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115183\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Apold\"\n        }\n      }, {\n        \"arcs\": [[-4951, -4924, -4735, -4652, 8746, 8747, -8746, -4975, -4929]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120254\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Vînători\"\n        }\n      }, {\n        \"arcs\": [[-8747, -4651, -4513, -4409, -8068, -8745, 8748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"40704\",\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Bunești\"\n        }\n      }, {\n        \"arcs\": [[-8749, -8744, -8748]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"119206\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Saschiz\"\n        }\n      }, {\n        \"arcs\": [[8749, -285, 8750, -139, -159, -205, 8751, 8752]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152127\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Bogdana\"\n        }\n      }, {\n        \"arcs\": [[-320, -286, -8750, 8753]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153605\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Plosca\"\n        }\n      }, {\n        \"arcs\": [[-269, 8754, -117, 8755, -135, -8751, -284]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152948\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Furculești\"\n        }\n      }, {\n        \"arcs\": [[8756, -123, -160, -212, 8757]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155154\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Uda-Clocociov\"\n        }\n      }, {\n        \"arcs\": [[8758, -8752, -210, 8759, 8760]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154790\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Troianul\"\n        }\n      }, {\n        \"arcs\": [[8761, 8762, 8763, 8764, -455]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154852\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Vedea\"\n        }\n      }, {\n        \"arcs\": [[8765, -489, -439, -467, -542, 8766]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155127\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Frăsinet\"\n        }\n      }, {\n        \"arcs\": [[8767, -484, 8768, -309, -298, -463, -437]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153240\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Măgura\"\n        }\n      }, {\n        \"arcs\": [[8769, -714, -909, 8770]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154521\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Talpa\"\n        }\n      }, {\n        \"arcs\": [[8771, -700, 8772, -8767, -545, -715, -8770, 8773]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153026\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Gălăteni\"\n        }\n      }, {\n        \"arcs\": [[8774, -8774, -8771, -908, -887, 8775]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152582\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Cosmești\"\n        }\n      }, {\n        \"arcs\": [[8776, -716, -674, 8777, -740, -892, -979]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152528\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Ciolănești\"\n        }\n      }, {\n        \"arcs\": [[-1143, -910, -717, -8777, -982, -1065, -1207, -1106]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154585\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Tătărăștii de Jos\"\n        }\n      }, {\n        \"arcs\": [[8778, 8779, 8780, -404, -502]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153277\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Măldăeni\"\n        }\n      }, {\n        \"arcs\": [[8781, 8782, -429, -405, -8781]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152467\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Călmățuiu de Sus\"\n        }\n      }, {\n        \"arcs\": [[-116, 8783, -65, 8784, 8785, -136, -8756]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153124\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Lisa\"\n        }\n      }, {\n        \"arcs\": [[-464, -347, -322, 8786, -8762, -454, -570]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152350\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Călinești\"\n        }\n      }, {\n        \"arcs\": [[-8787, -321, -8754, -8753, -8759, 8787, -8763]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153543\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Peretu\"\n        }\n      }, {\n        \"arcs\": [[8788, 8789, -486, 8790, -704, -794]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153295\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Mereni\"\n        }\n      }, {\n        \"arcs\": [[-8791, -491, 8791, -705]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151932\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Crevenicu\"\n        }\n      }, {\n        \"arcs\": [[-8792, -490, -8766, -8773, -702, 8792, -706]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153384\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Moșteni\"\n        }\n      }, {\n        \"arcs\": [[-62, -41, 8793, -94, -174]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152564\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Conțești\"\n        }\n      }, {\n        \"arcs\": [[8794, -175, -97, 8795, 8796, 8797, -301]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154497\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Ștorobăneasa\"\n        }\n      }, {\n        \"arcs\": [[-273, -8662, -176, -8795, -300, -308]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153339\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Mîrzănești\"\n        }\n      }, {\n        \"arcs\": [[-8794, -40, -15, 8798, -95]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152993\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Frumoasa\"\n        }\n      }, {\n        \"arcs\": [[8799, -118, -8755, -268, -303]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151834\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Poroschia\"\n        }\n      }, {\n        \"arcs\": [[-66, -8784, -115, 8800, 8801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154914\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Viișoara\"\n        }\n      }, {\n        \"arcs\": [[8802, -576, -641, 8803]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152797\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Drăcșenei\"\n        }\n      }, {\n        \"arcs\": [[-8778, -673, -525, 8804, -8804, -640, -737]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153972\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Săceni\"\n        }\n      }, {\n        \"arcs\": [[-8803, -8805, -524, 8805, 8806, -8779, -501, -577]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154013\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Scrioaștea\"\n        }\n      }, {\n        \"arcs\": [[-8786, 8807, 8808, -155, -137]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154139\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Seaca\"\n        }\n      }, {\n        \"arcs\": [[-456, -8765, 8809, -8806, -523]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152868\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Drăgănești de Vede\"\n        }\n      }, {\n        \"arcs\": [[-671, 8810, -822, -876]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113206\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Pristol\"\n        }\n      }, {\n        \"arcs\": [[8811, -6236, 8812, 8813]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124938\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Alexandru cel Bun\"\n        }\n      }, {\n        \"arcs\": [[-8813, -6235, -6294, -6431, -6605, 8814]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123601\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Pîngărați\"\n        }\n      }, {\n        \"arcs\": [[-8556, -8543, -8547, -8560]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121242\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bălțătești\"\n        }\n      }, {\n        \"arcs\": [[-6404, -6317, -6237, -8812, 8815]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120726\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Piatra-Neamț\"\n        }\n      }, {\n        \"arcs\": [[-8498, -6425, -6405, -8816, -8814, -8815, -6604, -8548]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122828\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Gîrcina\"\n        }\n      }, {\n        \"arcs\": [[-8584, -8583, -8597, -6860, -6892, 8816]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"123914\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Răucești\"\n        }\n      }, {\n        \"arcs\": [[8817, -7162, -7259, 8818, 8819]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136964\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Beltiug\"\n        }\n      }, {\n        \"arcs\": [[-1112, -1077, -990, -1001, -1098, -1170, 8820, 8821]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110571\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Bîcleș\"\n        }\n      }, {\n        \"arcs\": [[8822, -1186, -1113, -8822, 8823, -1266]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111587\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Dumbrava\"\n        }\n      }, {\n        \"arcs\": [[-7578, -7565, -7566, 8824]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137032\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Berveni\"\n        }\n      }, {\n        \"arcs\": [[-8401, -7574, 8825, 8826, 8827, -7772, 8828]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138280\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Odoreu\"\n        }\n      }, {\n        \"arcs\": [[-8828, 8829, -7773]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137185\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Botiz\"\n        }\n      }, {\n        \"arcs\": [[8830, -7481, 8831, -7487, 8832]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179882\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Ciumești\"\n        }\n      }, {\n        \"arcs\": [[8833, 8834, -7408, 8835, -7576, -7596]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138208\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Moftin\"\n        }\n      }, {\n        \"arcs\": [[-7568, 8836, -7482, -8831, 8837]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137728\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Foieni\"\n        }\n      }, {\n        \"arcs\": [[-7577, -8836, -7411, -7381, -7376, -7484, -8832, -7483, -8837, -7567, -7563]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136526\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Carei\"\n        }\n      }, {\n        \"arcs\": [[8838, 8839, 8840, 8841, -7885, -7876]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137746\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Gherța Mică\"\n        }\n      }, {\n        \"arcs\": [[-7887, 8842, -7803, -7867, 8843, -7896]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137764\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Halmeu\"\n        }\n      }, {\n        \"arcs\": [[-7816, 8844, 8845, 8846, -8403, -7852]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136599\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Negrești-Oaș\"\n        }\n      }, {\n        \"arcs\": [[8847, -8398, -8395, -8404, -8847]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139330\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Vama\"\n        }\n      }, {\n        \"arcs\": [[-1898, -1682, 8848, 8849, 8850, -8737, -8742, -8734]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"112469\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Izvoru Bîrzii\"\n        }\n      }, {\n        \"arcs\": [[8851, -8850, 8852, 8853, -8739]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109773\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Drobeta-Turnu Severin\"\n        }\n      }, {\n        \"arcs\": [[-1681, -1517, 8854, -1308, 8855, -8853, -8849]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"109826\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Șimian\"\n        }\n      }, {\n        \"arcs\": [[-8852, -8738, -8851]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110820\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Breznița-Ocol\"\n        }\n      }, {\n        \"arcs\": [[-3781, -3623, -8436, -8043, -3112, 8856, -8417, -4032, -3616]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174254\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Voineasa\"\n        }\n      }, {\n        \"arcs\": [[-8826, -7573, 8857, 8858]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138431\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Păulești\"\n        }\n      }, {\n        \"arcs\": [[-7374, -7280, -7332, 8859, -7485]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138574\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Pișcolt\"\n        }\n      }, {\n        \"arcs\": [[-7774, -8830, -8827, -8859, 8860, 8861, 8862, -7594, -7653, -7729, -7809, -7805]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136483\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Satu Mare\"\n        }\n      }, {\n        \"arcs\": [[-7855, 8863, -8839, -7875]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139143\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Tîrșolț\"\n        }\n      }, {\n        \"arcs\": [[-7854, -8406, 8864, -8840, -8864]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137229\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Călinești-Oaș\"\n        }\n      }, {\n        \"arcs\": [[-7157, -7040, -6931, -6945, -7061, 8865, 8866]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137363\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Cehal\"\n        }\n      }, {\n        \"arcs\": [[8867, -8866, -7063, -7076, -7144, -7246]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138805\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Săuca\"\n        }\n      }, {\n        \"arcs\": [[-7260, -7158, -8867, -8868, -7245, -7410, 8868]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136642\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Tășnad\"\n        }\n      }, {\n        \"arcs\": [[-8863, 8869, 8870, -8834, -7595]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139054\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Terebești\"\n        }\n      }, {\n        \"arcs\": [[-8841, -8865, -8405, -8402, -8829, -7771, 8871]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138039\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Livada\"\n        }\n      }, {\n        \"arcs\": [[-7886, -8842, -8872, -7776, -7804, -8843]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139214\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Turulung\"\n        }\n      }, {\n        \"arcs\": [[8872, -7478, -7256, -7181, -7129, -7115, -7160, -8818, 8873]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"138869\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Socond\"\n        }\n      }, {\n        \"arcs\": [[-8858, -7572, -7479, -8873, 8874, -8861]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"139394\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Viile Satu Mare\"\n        }\n      }, {\n        \"arcs\": [[-8875, -8874, -8820, 8875, -8870, -8862]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"136848\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Ardud\"\n        }\n      }, {\n        \"arcs\": [[-8871, -8876, -8819, -7261, -8869, -7409, -8835]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"137443\",\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Craidorolț\"\n        }\n      }, {\n        \"arcs\": [[8876, 8877, 8878, -8758, -211, 8879, 8880]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152412\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Călmățuiu\"\n        }\n      }, {\n        \"arcs\": [[-7994, -8682, 8881, -487, -8790, 8882]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152270\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Bujoreni\"\n        }\n      }, {\n        \"arcs\": [[8883, -8776, -886, -1040]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155136\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Purani\"\n        }\n      }, {\n        \"arcs\": [[-915, -707, -8793, -701, -8772, -8775, -8884, -1039]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152083\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Blejești\"\n        }\n      }, {\n        \"arcs\": [[8884, -113, -8800, -302, -8798]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154834\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Țigănești\"\n        }\n      }, {\n        \"arcs\": [[-8797, 8885, 8886, -8801, -114, -8885]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152252\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Brînceni\"\n        }\n      }, {\n        \"arcs\": [[-96, -8799, -14, -21, 8887, -8886, -8796]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154380\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Smîrdioasa\"\n        }\n      }, {\n        \"arcs\": [[-8888, -24, -67, -8802, -8887]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153106\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Izvoarele\"\n        }\n      }, {\n        \"arcs\": [[8888, 8889, 8890, -8011, -1697, -1710]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101902\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Ciolpani\"\n        }\n      }, {\n        \"arcs\": [[8891, 8892, 8893, -8342, -1502]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104582\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Petrăchioaia\"\n        }\n      }, {\n        \"arcs\": [[8894, 8895, -689, -633, 8896, 8897]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102525\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Dărăști-Ilfov\"\n        }\n      }, {\n        \"arcs\": [[8898, 8899, -8897, -636, -7997, -7992, -8352, 8900]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104136\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Mihăilești\"\n        }\n      }, {\n        \"arcs\": [[-1676, -1621, -1504, -8341, 8901, -1708, -1761]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104421\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Nuci\"\n        }\n      }, {\n        \"arcs\": [[8902, -8901, -8351, -7972, 8903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102035\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Clinceni\"\n        }\n      }, {\n        \"arcs\": [[8904, 8905, 8906, 8907]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179310\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Dobroești\"\n        }\n      }, {\n        \"arcs\": [[8908, -749, -666, -686, -8896]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102543\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"1 Decembrie\"\n        }\n      }, {\n        \"arcs\": [[8909, 8910, -750, -8909, -8895, 8911, 8912]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179383\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Jilava\"\n        }\n      }, {\n        \"arcs\": [[8913, 8914, 8915, 8916, 8917, 8918]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105570\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Tunari\"\n        }\n      }, {\n        \"arcs\": [[-1229, 8919, -8334, 8920, 8921]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101298\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Brănești\"\n        }\n      }, {\n        \"arcs\": [[8922, -8326, 8923, 8924, -8917]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179481\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Otopeni\"\n        }\n      }, {\n        \"arcs\": [[8925, 8926, 8927, -8890, 8928, 8929]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105160\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Snagov\"\n        }\n      }, {\n        \"arcs\": [[8930, -8918, -8925, 8931, 8932, -8927]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100969\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Balotești\"\n        }\n      }, {\n        \"arcs\": [[-8924, -8329, -1290, 8933, 8934, -8932]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102160\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Corbeanca\"\n        }\n      }, {\n        \"arcs\": [[8935, 8936, -8934, -1289, 8937, -1359, -1484]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102286\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Crevedia\"\n        }\n      }, {\n        \"arcs\": [[8938, -8936, -1483, -8010]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104387\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Niculești\"\n        }\n      }, {\n        \"arcs\": [[-8891, -8928, -8933, -8935, -8937, -8939, -8009, -1794, -8012]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104546\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Periș\"\n        }\n      }, {\n        \"arcs\": [[-8894, 8939, 8940, -8914, 8941, -8343]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102473\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Dascălu\"\n        }\n      }, {\n        \"arcs\": [[-1278, -1231, 8942, 8943, -8892, -1501, -8386, -1385]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105026\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Sinești\"\n        }\n      }, {\n        \"arcs\": [[-1230, -8922, 8944, 8945, -8943]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103130\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Găneasa\"\n        }\n      }, {\n        \"arcs\": [[8946, 8947, -8915, -8941]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105419\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Ștefăneștii de Jos\"\n        }\n      }, {\n        \"arcs\": [[-8948, 8948, -8907, 8949, 8950, -8916]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179551\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Voluntari\"\n        }\n      }, {\n        \"arcs\": [[-8893, -8944, -8946, 8951, -8908, -8949, -8947, -8940]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100834\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Afumați\"\n        }\n      }, {\n        \"arcs\": [[8952, 8953, 8954, 8955, 8956, 8957]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60883\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Adamclisi\"\n        }\n      }, {\n        \"arcs\": [[-1771, -1611, -1442, -1533, 8958, -1860]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174520\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Mitrofani\"\n        }\n      }, {\n        \"arcs\": [[-8959, -1535, -1628, -1861]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168309\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Amărăști\"\n        }\n      }, {\n        \"arcs\": [[-2304, -2147, -2149, -2278, -2446, -2644, -2513]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168229\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Alunu\"\n        }\n      }, {\n        \"arcs\": [[8959, -2883, -2653, -3033, -8435]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169253\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Costești\"\n        }\n      }, {\n        \"arcs\": [[-2655, -2384, -2288, -2474, -2605]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"171931\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Oteșani\"\n        }\n      }, {\n        \"arcs\": [[-2807, 8960, 8961, -2704, 8962, -2939]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174156\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Vlădești\"\n        }\n      }, {\n        \"arcs\": [[8963, -2462, -8023, -2705, -8962]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"168130\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Ocnele Mari\"\n        }\n      }, {\n        \"arcs\": [[-2861, -2681, -2458, -2463, -8964, -8961, -2806]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167473\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Râmnicu Vâlcea\"\n        }\n      }, {\n        \"arcs\": [[8964, 8965, 8966, 8967]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62020\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Istria\"\n        }\n      }, {\n        \"arcs\": [[8968, 8969, 8970, 8971, 8972, 8973]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62823\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Saraiu\"\n        }\n      }, {\n        \"arcs\": [[8974, -971, -762, -808, -783, 8975]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62538\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ostrov\"\n        }\n      }, {\n        \"arcs\": [[8976, 8977, -8976, -782, -768, -562]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62057\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Lipnița\"\n        }\n      }, {\n        \"arcs\": [[8978, 8979, 8980]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63286\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Costinești\"\n        }\n      }, {\n        \"arcs\": [[8981, -8957, 8982, -8287, 8983]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62798\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Rasova\"\n        }\n      }, {\n        \"arcs\": [[8984, 8985, 8986, -7967, -1846, -2052, -3043]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60801\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Hârșova\"\n        }\n      }, {\n        \"arcs\": [[-213, -195, -260, 8987, 8988]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153623\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Plopii-Slăvitești\"\n        }\n      }, {\n        \"arcs\": [[-8988, -264, -343, 8989]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155083\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Beciu\"\n        }\n      }, {\n        \"arcs\": [[8990, -8880, -214, -8989, -8990, -342, -430, -8783]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152617\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Crîngeni\"\n        }\n      }, {\n        \"arcs\": [[8991, 8992, 8993, 8994]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63334\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Fîntînele\"\n        }\n      }, {\n        \"arcs\": [[8995, 8996, 8997, 8998, 8999]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63300\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cuza Voda\"\n        }\n      }, {\n        \"arcs\": [[9000, 9001, -8977, -561, 9002]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61069\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Băneasa\"\n        }\n      }, {\n        \"arcs\": [[-8954, 9003, 9004, -9001, 9005]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61737\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Dobromir\"\n        }\n      }, {\n        \"arcs\": [[9006, 9007, 9008]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63161\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Dumbrăveni\"\n        }\n      }, {\n        \"arcs\": [[9009, 9010, 9011, 9012, 9013, 9014, 9015]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61318\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cobadin\"\n        }\n      }, {\n        \"arcs\": [[9016, 9017, -6199, 9018, 9019]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"164892\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Miclești\"\n        }\n      }, {\n        \"arcs\": [[9020, -8527, -8536, -8573, -8553, 9021, -8568]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98168\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Mogoșești-Siret\"\n        }\n      }, {\n        \"arcs\": [[-8666, 9022, 9023, 9024]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97394\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Grozești\"\n        }\n      }, {\n        \"arcs\": [[-8567, -8525, -8511, -8528, -9021]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97438\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Hălăucești\"\n        }\n      }, {\n        \"arcs\": [[9025, -6276, -6393, 9026]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100308\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Drăgușeni\"\n        }\n      }, {\n        \"arcs\": [[-8664, -6249, -6229, 9027, 9028, -6380]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96593\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Cozmești\"\n        }\n      }, {\n        \"arcs\": [[9029, 9030, 9031, 9032, 9033, 9034]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97241\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Grajduri\"\n        }\n      }, {\n        \"arcs\": [[-9023, -8665, -6382, 9035, 9036, 9037]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98685\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Răducăneni\"\n        }\n      }, {\n        \"arcs\": [[9038, 9039, -6397, 9040, 9041]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97875\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Mironeasa\"\n        }\n      }, {\n        \"arcs\": [[-9037, 9042, 9043, 9044, 9045]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96423\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Costuleni\"\n        }\n      }, {\n        \"arcs\": [[9046, -9034, 9047, -9039, 9048, 9049]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98113\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Mogoșești\"\n        }\n      }, {\n        \"arcs\": [[9050, -9045, 9051, 9052, 9053]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96370\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Comarna\"\n        }\n      }, {\n        \"arcs\": [[9054, 9055, 9056, 9057, 9058]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95088\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Bîrnova\"\n        }\n      }, {\n        \"arcs\": [[-9058, 9059, -9035, -9047, 9060, 9061]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96254\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ciurea\"\n        }\n      }, {\n        \"arcs\": [[9062, -9053, 9063, -9055, 9064, 9065]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95293\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Tomești\"\n        }\n      }, {\n        \"arcs\": [[9066, 9067, -9054, -9063, 9068, -6758]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99922\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Țuțora\"\n        }\n      }, {\n        \"arcs\": [[9069, 9070, -8575, 9071, 9072, 9073]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98373\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Podu Iloaiei\"\n        }\n      }, {\n        \"arcs\": [[-6772, -6627, -8533, 9074, -9070, 9075]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96940\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Dumești\"\n        }\n      }, {\n        \"arcs\": [[9076, 9077, -6774, 9078, 9079]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99968\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Valea Seacă\"\n        }\n      }, {\n        \"arcs\": [[-9079, -6779, -8585, 9080, 9081]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96637\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Cristești\"\n        }\n      }, {\n        \"arcs\": [[-6760, 9082, -6805, 9083, 9084]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97090\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Golăiești\"\n        }\n      }, {\n        \"arcs\": [[-8411, -6773, -9076, -9074, 9085, -6970]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98738\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Românești\"\n        }\n      }, {\n        \"arcs\": [[-9086, -9073, 9086, 9087, -8608, 9088]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97009\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Erbiceni\"\n        }\n      }, {\n        \"arcs\": [[9089, 9090, -7032, -8620, 9091, 9092, 9093]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98998\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Scobinți\"\n        }\n      }, {\n        \"arcs\": [[9094, -9092, -8619, -8614, 9095, -8654, 9096, 9097]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99101\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Sirețel\"\n        }\n      }, {\n        \"arcs\": [[-8630, 9098, 9099, -6972, 9100, 9101, -7273]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100148\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Vlădeni\"\n        }\n      }, {\n        \"arcs\": [[-7275, 9102, 9103, -7420]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38679\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Răușeni\"\n        }\n      }, {\n        \"arcs\": [[9104, -7954, -6967, -9100, 9105]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99879\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Țigănăși\"\n        }\n      }, {\n        \"arcs\": [[-8413, 9106, -9061, -9050, 9107, -6624, -6771, -8410]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97919\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Miroslava\"\n        }\n      }, {\n        \"arcs\": [[9108, 9109, -8458, -8469, -8484, -8519]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125141\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Pâncești\"\n        }\n      }, {\n        \"arcs\": [[-9075, -8532, -8576, -9071]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98435\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Popești\"\n        }\n      }, {\n        \"arcs\": [[9110, -8593, 9111, -8541, -8565, 9112, 9113]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99209\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Strunga\"\n        }\n      }, {\n        \"arcs\": [[9114, 9115, -8569, -9022, -8552, -8572, 9116]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99165\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Stolniceni-Prăjescu\"\n        }\n      }, {\n        \"arcs\": [[-8579, 9117, 9118, -8590, 9119]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97722\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Lungani\"\n        }\n      }, {\n        \"arcs\": [[-9087, -9072, -8580, -9120, -8589, 9120]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95792\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Bălțați\"\n        }\n      }, {\n        \"arcs\": [[-8600, 9121, -9117, -8574, -6775, -9078, 9122, -8612]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95391\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Pașcani\"\n        }\n      }, {\n        \"arcs\": [[9123, 9124, -8603, 9125]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96664\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Cucuteni\"\n        }\n      }, {\n        \"arcs\": [[9126, -8595, 9127, -8588, 9128, -9126, -8602, -8618]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100273\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Balș\"\n        }\n      }, {\n        \"arcs\": [[-8609, -9088, -9121, -8596, -9127, -8617, 9129]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95872\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Belcești\"\n        }\n      }, {\n        \"arcs\": [[-9096, -8613, -9123, -9077, 9130, -8655]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97606\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Lespezi\"\n        }\n      }, {\n        \"arcs\": [[-8622, -8610, -9130, -8616, -7033, -9091, 9131]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96334\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Coarnele Caprei\"\n        }\n      }, {\n        \"arcs\": [[-9129, -8587, 9132, -9114, 9133, 9134, -9124]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100282\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Costești\"\n        }\n      }, {\n        \"arcs\": [[-9101, -6971, -9089, -8607, -8621, 9135]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97321\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Gropnița\"\n        }\n      }, {\n        \"arcs\": [[-9052, -9044, 9136, 9137, 9138, -9056, -9064]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98827\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Schitu Duca\"\n        }\n      }, {\n        \"arcs\": [[-6759, -9069, -9066, 9139, -6806, -9083]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95159\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Holboca\"\n        }\n      }, {\n        \"arcs\": [[-9131, -9080, -9082, 9140, 9141, -8659, -8656]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99478\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Tătăruși\"\n        }\n      }, {\n        \"arcs\": [[-9113, -8564, -9116, 9142, -9134]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"97465\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Heleșteni\"\n        }\n      }, {\n        \"arcs\": [[-6807, -9140, -9065, -9059, -9062, -9107, -8412, -8408, -7952]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95060\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Iași\"\n        }\n      }, {\n        \"arcs\": [[-9142, 9143, -6894, -7034, -7119, -8660]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148514\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Forăști\"\n        }\n      }, {\n        \"arcs\": [[9144, 9145, 9146, -7400, -7387, -7297]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37324\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Frumușica\"\n        }\n      }, {\n        \"arcs\": [[9147, -6037, -6197, -9018, 9148]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162871\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Boțești\"\n        }\n      }, {\n        \"arcs\": [[-9028, -6228, -6071, -6038, -9148, 9149]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162924\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Bunești-Averești\"\n        }\n      }, {\n        \"arcs\": [[9150, -9093, -9095, 9151]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95355\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Hîrlău\"\n        }\n      }, {\n        \"arcs\": [[9152, -6168, -6183, 9153, 9154, 9155]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163253\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Dănești\"\n        }\n      }, {\n        \"arcs\": [[9156, -9154, -6184, -6175, -6273, -9026, 9157]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"165719\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Rebricea\"\n        }\n      }, {\n        \"arcs\": [[9158, -9019, -6198, -6169, -9153, 9159, 9160, -9138]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"163002\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Codăești\"\n        }\n      }, {\n        \"arcs\": [[9161, -9155, -9157, 9162, -9032]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98916\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Scânteia\"\n        }\n      }, {\n        \"arcs\": [[-9036, 9163, -9020, -9159, -9137, -9043]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96192\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ciortești\"\n        }\n      }, {\n        \"arcs\": [[-9033, -9163, -9158, -9027, -6392, -9040, -9048]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99290\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Șcheia\"\n        }\n      }, {\n        \"arcs\": [[-9161, 9164, -9030, -9060, -9057, -9139]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96888\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Dobrovăț\"\n        }\n      }, {\n        \"arcs\": [[-9084, -6809, -7955, -9105, 9165, 9166]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100004\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Victoria\"\n        }\n      }, {\n        \"arcs\": [[9167, -9094, -9151, 9168, -9145, -7296]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"38580\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Prăjeni\"\n        }\n      }, {\n        \"arcs\": [[-7421, -9104, 9169, -7294, -7424, -7436, -7454]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"37734\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Hlipiceni\"\n        }\n      }, {\n        \"arcs\": [[9170, -6261, -6063, -8459, -9110, 9171]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"162381\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Băcești\"\n        }\n      }, {\n        \"arcs\": [[9172, 9173, 9174, -9172, -9109, -8518]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96717\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Dagîța\"\n        }\n      }, {\n        \"arcs\": [[9175, -8520, -8488, 9176, 9177]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"121386\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bira\"\n        }\n      }, {\n        \"arcs\": [[9178, -9177, -8487, -8494, 9179, -8538]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122347\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Doljești\"\n        }\n      }, {\n        \"arcs\": [[-8578, -8521, -9176, 9180, 9181, -9118]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125178\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Boghicea\"\n        }\n      }, {\n        \"arcs\": [[9182, -9181, -9178, -9179, -8537, -9112, -8592]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98300\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Oțeleni\"\n        }\n      }, {\n        \"arcs\": [[-9182, -9183, -8591, -9119]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96058\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Brăești\"\n        }\n      }, {\n        \"arcs\": [[9183, -8623, -9132, -9090, -9168, -7295, -9170]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98337\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Plugari\"\n        }\n      }, {\n        \"arcs\": [[-9147, 9184, -9097, -8658, -7203, -7337, -7401]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"39391\",\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Tudora\"\n        }\n      }, {\n        \"arcs\": [[-9029, -9150, -9149, -9017, -9164, -6381]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96904\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Dolhești\"\n        }\n      }, {\n        \"arcs\": [[-7274, -9102, -9136, -8624, -9184, -9103]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99370\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Șipote\"\n        }\n      }, {\n        \"arcs\": [[-9160, -9156, -9162, -9031, -9165]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"166235\",\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Tăcuta\"\n        }\n      }, {\n        \"arcs\": [[9185, -9166, -9106, -9099, -8629, -8625]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98649\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Probota\"\n        }\n      }, {\n        \"arcs\": [[-6262, -9171, -9175, 9186]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99441\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Tansa\"\n        }\n      }, {\n        \"arcs\": [[-9146, -9169, -9152, -9098, -9185]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"96815\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Deleni\"\n        }\n      }, {\n        \"arcs\": [[-8994, 9187, -8967, 9188, 9189, 9190, 9191, 9192, 9193, 9194]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61372\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cogealac\"\n        }\n      }, {\n        \"arcs\": [[9195, 9196, 9197, -9189, -8966]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62878\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Săcele\"\n        }\n      }, {\n        \"arcs\": [[-9198, 9198, 9199, 9200, 9201, 9202, 9203, 9204, -9190]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62191\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Mihail Kogălniceanu\"\n        }\n      }, {\n        \"arcs\": [[9205, 9206, 9207, 9208, 9209, 9210]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63125\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Valu lui Traian\"\n        }\n      }, {\n        \"arcs\": [[9211, -9015, 9212, -9008, 9213, -9004, -8953]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61675\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Deleni\"\n        }\n      }, {\n        \"arcs\": [[9214, 9215, 9216, 9217, 9218]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62949\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Siliștea\"\n        }\n      }, {\n        \"arcs\": [[9219, 9220, 9221, 9222]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60455\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Eforie\"\n        }\n      }, {\n        \"arcs\": [[9223, 9224, 9225, 9226, 9227]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61452\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Comana\"\n        }\n      }, {\n        \"arcs\": [[-9209, 9228, 9229, 9230, 9231]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62360\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Murfatlar\"\n        }\n      }, {\n        \"arcs\": [[9232, -1214, -7965, 9233]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63045\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Topalu\"\n        }\n      }, {\n        \"arcs\": [[9234, -9234, -7964, 9235, -8986, 9236, -8971]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63278\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Horia\"\n        }\n      }, {\n        \"arcs\": [[-9014, 9237, 9238, 9239, -9009, -9213]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61871\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Independența\"\n        }\n      }, {\n        \"arcs\": [[-9230, 9240, -9010, 9241, 9242]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61283\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ciocîrlia\"\n        }\n      }, {\n        \"arcs\": [[9243, -9191, -9205, 9244, -9219, 9245, 9246]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62985\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Târgușor\"\n        }\n      }, {\n        \"arcs\": [[-8983, -8956, 9247, -8288]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61005\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Aliman\"\n        }\n      }, {\n        \"arcs\": [[-8955, -9006, -9003, -566, -8289, -9248]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61951\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ion Corvin\"\n        }\n      }, {\n        \"arcs\": [[-8972, -9237, -8985, -3007, 9248]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61256\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ciobanu\"\n        }\n      }, {\n        \"arcs\": [[9249, -8973, -9249, -3006, 9250]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61808\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Gârliciu\"\n        }\n      }, {\n        \"arcs\": [[-9208, 9251, 9252, 9253, -9011, -9241, -9229]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63294\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Bărăganu\"\n        }\n      }, {\n        \"arcs\": [[-9210, -9232, 9254, 9255, 9256]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62761\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Poarta Albă\"\n        }\n      }, {\n        \"arcs\": [[-8997, 9257, -9255, -9231, -9243, 9258, 9259]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60847\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Medgidia\"\n        }\n      }, {\n        \"arcs\": [[9260, 9261, -8969, 9262]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63170\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Vulturu\"\n        }\n      }, {\n        \"arcs\": [[-9262, 9263, -9246, -9218, 9264, -1215, -9233, -9235, -8970]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61559\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Crucea\"\n        }\n      }, {\n        \"arcs\": [[9265, 9266, -9252, -9207, 9267]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61620\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cumpăna\"\n        }\n      }, {\n        \"arcs\": [[-9244, 9268, -9192]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63326\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Grădina\"\n        }\n      }, {\n        \"arcs\": [[9269, -9193, -9269, -9247, -9264, -9261]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62609\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Pantelimon\"\n        }\n      }, {\n        \"arcs\": [[9270, 9271, -9199, -9197]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61513\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Corbu\"\n        }\n      }, {\n        \"arcs\": [[-9272, 9272, 9273, 9274, 9275, -9200]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60507\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Năvodari\"\n        }\n      }, {\n        \"arcs\": [[-5865, -5584, -8649, -5782, -5949]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"11236\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Hășmaș\"\n        }\n      }, {\n        \"arcs\": [[-8379, 9276, -8376, -227]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"74907\",\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Ghidici\"\n        }\n      }, {\n        \"arcs\": [[-2292, -8088, -2360, -8091]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130678\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Blejoi\"\n        }\n      }, {\n        \"arcs\": [[-1817, -1637, -8388, -8384, -1734, -1882]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179999\",\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Moldoveni\"\n        }\n      }, {\n        \"arcs\": [[-8147, -8452, -8166, -8185, -8030, -3772, -8646, -8693, -8191]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"76745\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Movileni\"\n        }\n      }, {\n        \"arcs\": [[-5666, -8448, -5347, -8356, 9277, 9278, -5702]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25692\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Tamași\"\n        }\n      }, {\n        \"arcs\": [[9279, -9278, -8355, -5334, -5328, -5400, 9280, 9281, 9282]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23715\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Nicolae Bălcescu\"\n        }\n      }, {\n        \"arcs\": [[-9108, -9049, -9042, 9283, -8529, -6625]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100219\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Voinești\"\n        }\n      }, {\n        \"arcs\": [[-9041, -6396, 9284, -9173, -8517, -8577, -8530, -9284]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99673\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Țibana\"\n        }\n      }, {\n        \"arcs\": [[-6395, -8672, -6259, -9187, -9174, -9285]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"99780\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Țibănești\"\n        }\n      }, {\n        \"arcs\": [[-9125, -9135, -9143, -9115, -9122, -8599, -8604]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98774\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ruginoasa\"\n        }\n      }, {\n        \"arcs\": [[-9024, -9038, -9046, -9051, -9068, 9285]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"98603\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Prisăcani\"\n        }\n      }, {\n        \"arcs\": [[9286, 9287, -8432, 9288]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160172\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Chilia Veche\"\n        }\n      }, {\n        \"arcs\": [[9289, 9290, 9291, 9292, -8422, -8429, -9288]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160261\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Crișan\"\n        }\n      }, {\n        \"arcs\": [[9293, 9294, -9292, 9295]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161231\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Sfîntu Gheorghe\"\n        }\n      }, {\n        \"arcs\": [[-9295, 9296, 9297, 9298, 9299, 9300, 9301, -8423, -9293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160911\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Murighiol\"\n        }\n      }, {\n        \"arcs\": [[9302, -9300, 9303, 9304, 9305, 9306]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161482\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Valea Nucarilor\"\n        }\n      }, {\n        \"arcs\": [[-8427, 9307, -9306, 9308, 9309, 9310, -3169, -8430]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159614\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Tulcea\"\n        }\n      }, {\n        \"arcs\": [[9311, -9307, -9308, -8426]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161053\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Nufăru\"\n        }\n      }, {\n        \"arcs\": [[-3170, -9311, 9312, 9313, 9314, 9315]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161302\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Somova\"\n        }\n      }, {\n        \"arcs\": [[-9302, 9316, -8424]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160724\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Mahmudia\"\n        }\n      }, {\n        \"arcs\": [[-9317, -9301, -9303, -9312, -8425]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161552\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Beștepe\"\n        }\n      }, {\n        \"arcs\": [[-9315, 9317, 9318, 9319, 9320]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159687\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Isaccea\"\n        }\n      }, {\n        \"arcs\": [[-9314, 9321, 9322, 9323, -9318]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161035\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Niculițel\"\n        }\n      }, {\n        \"arcs\": [[9324, 9325, 9326, 9327, -9323]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161561\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Valea Teilor\"\n        }\n      }, {\n        \"arcs\": [[-9310, 9328, 9329, 9330, -9325, -9322, -9313]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160387\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Frecăței\"\n        }\n      }, {\n        \"arcs\": [[-9324, -9328, 9331, 9332, 9333, 9334, -9319]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160476\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Hamcearca\"\n        }\n      }, {\n        \"arcs\": [[-9333, 9335, 9336, 9337, 9338, 9339, 9340]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160127\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Cerna\"\n        }\n      }, {\n        \"arcs\": [[-3329, 9341, 9342, 9343, 9344, 9345, 9346, -3530]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160617\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Jijila\"\n        }\n      }, {\n        \"arcs\": [[9347, -3242, -3531, -9347]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161525\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"I.C.Brătianu\"\n        }\n      }, {\n        \"arcs\": [[-9346, 9348, -3010, -3047, 9349, -3243, -9348]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161286\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Smîrdan\"\n        }\n      }, {\n        \"arcs\": [[-9340, 9350, -3002, 9351]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161464\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Turcoaia\"\n        }\n      }, {\n        \"arcs\": [[9352, -9334, -9341, -9352, -3001, 9353, 9354, -9344]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160430\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Greci\"\n        }\n      }, {\n        \"arcs\": [[-9345, -9355, 9355, -2999, -9349]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159730\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Măcin\"\n        }\n      }, {\n        \"arcs\": [[-3000, -9356, -9354]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159945\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Carcaliu\"\n        }\n      }, {\n        \"arcs\": [[9356, 9357, 9358, 9359, -9338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160323\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Dorobanțu\"\n        }\n      }, {\n        \"arcs\": [[9360, -9251, -3005, 9361, 9362]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160305\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Dăeni\"\n        }\n      }, {\n        \"arcs\": [[9363, 9364, 9365, -9363, 9366, -9358]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161384\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Topolog\"\n        }\n      }, {\n        \"arcs\": [[-9327, 9367, 9368, -9336, -9332]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160528\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Horia\"\n        }\n      }, {\n        \"arcs\": [[9369, 9370, -9368, -9326, -9331]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160564\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Izvoarele\"\n        }\n      }, {\n        \"arcs\": [[-9371, 9371, 9372, 9373, 9374, -9364, -9357, -9337, -9369]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160225\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Ciucurova\"\n        }\n      }, {\n        \"arcs\": [[9375, 9376, 9377, 9378, 9379]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159650\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Babadag\"\n        }\n      }, {\n        \"arcs\": [[-9299, 9380, 9381, -9380, 9382, 9383, -9304]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161179\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Sarichioi\"\n        }\n      }, {\n        \"arcs\": [[9384, 9385, -8992, 9386, 9387, -9374, 9388, -9377]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159785\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Baia\"\n        }\n      }, {\n        \"arcs\": [[-9388, 9389, 9390, -9365, -9375]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161348\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Stejaru\"\n        }\n      }, {\n        \"arcs\": [[-9391, 9391, -9194, -9270, -9263, -8974, -9250, -9361, -9366]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159963\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Casimcea\"\n        }\n      }, {\n        \"arcs\": [[-9390, -9387, -8995, -9195, -9392]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159847\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Beidaud\"\n        }\n      }, {\n        \"arcs\": [[9392, -9378, -9389, -9373, 9393]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161259\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Slava Cercheză\"\n        }\n      }, {\n        \"arcs\": [[-9383, -9379, -9393, 9394, 9395]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160831\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Mihai Bravu\"\n        }\n      }, {\n        \"arcs\": [[9396, -9342, -3328]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161543\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Văcăreni\"\n        }\n      }, {\n        \"arcs\": [[9397, -9320, -9335, -9353, -9343, -9397, -3327]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160680\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Luncavița\"\n        }\n      }, {\n        \"arcs\": [[-9382, 9398, 9399, -9385, -9376]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160092\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Ceamurlia de Jos\"\n        }\n      }, {\n        \"arcs\": [[-2978, -2848, -2787, 9400, 9401, 9402]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52856\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Forotic\"\n        }\n      }, {\n        \"arcs\": [[-3336, 9403, -9402, 9404, -3145, -3370]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"157362\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Jamu Mare\"\n        }\n      }, {\n        \"arcs\": [[-3184, -3127, -2979, -9403, -9404, -3335, -3301]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"52650\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Doclin\"\n        }\n      }, {\n        \"arcs\": [[-9309, -9305, -9384, -9396, 9405, -9329]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160877\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Mihail Kogălniceanu\"\n        }\n      }, {\n        \"arcs\": [[9406, -8968, -9188, -8993, -9386, -9400, 9407]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62253\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Mihai Viteazu\"\n        }\n      }, {\n        \"arcs\": [[-9298, 9408, -9408, -9399, -9381]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160644\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Jurilovca\"\n        }\n      }, {\n        \"arcs\": [[-8241, 9409, 9410, 9411]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57582\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Feleacu\"\n        }\n      }, {\n        \"arcs\": [[-8244, -8247, 9412, 9413, -9410, -8240]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55598\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Aiton\"\n        }\n      }, {\n        \"arcs\": [[-8242, -9412, 9414, -5882, -6014, -8101, -8104]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"54975\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cluj-Napoca\"\n        }\n      }, {\n        \"arcs\": [[-5560, -5474, -5336, -5321, -5350, 9415, 9416, 9417]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"56425\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Călărași\"\n        }\n      }, {\n        \"arcs\": [[9418, 9419, 9420, 9421, -5629, -5878]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58918\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Petreștii de Jos\"\n        }\n      }, {\n        \"arcs\": [[9422, 9423, -9420, 9424]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55311\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Săndulești\"\n        }\n      }, {\n        \"arcs\": [[-9411, -9414, 9425, -9425, -9419, -5877, -9415]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59764\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Tureni\"\n        }\n      }, {\n        \"arcs\": [[-9360, 9426, -3003, -9351, -9339]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161151\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Peceneaga\"\n        }\n      }, {\n        \"arcs\": [[-9359, -9367, -9362, -3004, -9427]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"161106\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Ostrov\"\n        }\n      }, {\n        \"arcs\": [[9427, -9296, -9291, 9428]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159767\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Sulina\"\n        }\n      }, {\n        \"arcs\": [[-9429, -9290, -9287, 9429]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159883\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"C.A. Rosetti\"\n        }\n      }, {\n        \"arcs\": [[-4751, -4874, 9430, -4690, -4920]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"4927\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ighiu\"\n        }\n      }, {\n        \"arcs\": [[-4644, -4524, -4373, -4327, -4436, -4691, -9431, -4873]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1017\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Alba Iulia\"\n        }\n      }, {\n        \"arcs\": [[-8222, 9431, -81, -8220, -79, -8757, -8879]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155145\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Saelele\"\n        }\n      }, {\n        \"arcs\": [[-811, -778, -8653, -696, -787, 9432]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"130062\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Voineasa\"\n        }\n      }, {\n        \"arcs\": [[-954, -812, -9433, -786, -855, -926, -984]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125418\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Balș\"\n        }\n      }, {\n        \"arcs\": [[-539, -389, -415, -495, -608, -649]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127019\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Fărcașele\"\n        }\n      }, {\n        \"arcs\": [[9433, 9434, -884, -969, -1013, -1127, 9435]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125347\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Slatina\"\n        }\n      }, {\n        \"arcs\": [[-1270, -1224, -1119, -1103, -1082, 9436, 9437, -1316, -1577, -1527, -1617, -1413]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128711\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Scornicești\"\n        }\n      }, {\n        \"arcs\": [[9438, -9436, -1126, -1317, -9438]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128436\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Priseaca\"\n        }\n      }, {\n        \"arcs\": [[-1081, 9439, -9434, -9439, -9437]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"129656\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Valea Mare\"\n        }\n      }, {\n        \"arcs\": [[-7217, -7142, -7179, -7255, -7342]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107047\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ariniș\"\n        }\n      }, {\n        \"arcs\": [[-7613, -7430, -7395, -7439, -7640, -7629]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"107519\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Budești\"\n        }\n      }, {\n        \"arcs\": [[-7777, -7713, -7687, -7838, 9440, 9441, -7793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106559\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Sighetu Marmației\"\n        }\n      }, {\n        \"arcs\": [[-9441, -7837, -7846, 9442]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106620\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Sarasău\"\n        }\n      }, {\n        \"arcs\": [[-8685, 9443, 9444, -6536, -6633, -8293]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"34690\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Șieu-Măgheruș\"\n        }\n      }, {\n        \"arcs\": [[9445, -8231, -6308, -6533, -9445]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33275\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Galații Bistriței\"\n        }\n      }, {\n        \"arcs\": [[-6568, -6478, -8232, -9446, -9444, -8684, -6581]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"33765\",\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Mărișelu\"\n        }\n      }, {\n        \"arcs\": [[-9406, -9395, -9394, -9372, -9370, -9330]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"160993\",\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Nalbant\"\n        }\n      }, {\n        \"arcs\": [[-9081, -8817, -6891, -9144, -9141]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"148382\",\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Drăgușeni\"\n        }\n      }, {\n        \"arcs\": [[-5718, -5594, -5378, -5371, -5380, -5683, -5855]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12055\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Sintea Mare\"\n        }\n      }, {\n        \"arcs\": [[9446, 9447, 9448, 9449, -9226]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62397\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Negru Vodă\"\n        }\n      }, {\n        \"arcs\": [[9450, 9451, 9452, 9453, -9447, -9225]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60945\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Albești\"\n        }\n      }, {\n        \"arcs\": [[9454, -9259, -9242, -9016, -9212, -8958, -8982, 9455]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62707\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Peștera\"\n        }\n      }, {\n        \"arcs\": [[9456, 9457]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63318\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Saligny\"\n        }\n      }, {\n        \"arcs\": [[9458, -9458, 9459, -9456, -8984, -8286, -1090, 9460]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60776\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cernavodă\"\n        }\n      }, {\n        \"arcs\": [[-9217, 9461, 9462, -9461, -1089, -1216, -9265]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62903\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Seimeni\"\n        }\n      }, {\n        \"arcs\": [[-8998, -9260, -9455, -9460, -9457, -9459, -9463, 9463]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62280\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Mircea Vodă\"\n        }\n      }, {\n        \"arcs\": [[-9236, -7963, -8987]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61826\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ghindărești\"\n        }\n      }, {\n        \"arcs\": [[9464, -9201, -9276]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63152\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Lumina\"\n        }\n      }, {\n        \"arcs\": [[9465, 9466, 9467, 9468, 9469, 9470, -9253, -9267]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63072\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Topraisar\"\n        }\n      }, {\n        \"arcs\": [[-9221, 9471, -8981, 9472, -9468, 9473]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60721\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Tuzla\"\n        }\n      }, {\n        \"arcs\": [[-9222, -9474, -9467, 9474]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60534\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Techirghiol\"\n        }\n      }, {\n        \"arcs\": [[-8999, -9464, -9462, -9216, 9475]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63189\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Tortoman\"\n        }\n      }, {\n        \"arcs\": [[-9245, -9204, 9476, -9000, -9476, -9215]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62440\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Nicolae Bălcescu\"\n        }\n      }, {\n        \"arcs\": [[9477, -9449, 9478, -9239]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61167\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cerchezu\"\n        }\n      }, {\n        \"arcs\": [[9479, 9480, -9227, -9450, -9478, -9238, -9013]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61210\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Chirnogeni\"\n        }\n      }, {\n        \"arcs\": [[9481, -9256, -9258, -8996, -9477, -9203]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"61121\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Castelu\"\n        }\n      }, {\n        \"arcs\": [[-9465, -9275, 9482, -9211, -9257, -9482, -9202]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60687\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ovidiu\"\n        }\n      }, {\n        \"arcs\": [[-9471, 9483, -9480, -9012, -9254]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62137\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Mereni\"\n        }\n      }, {\n        \"arcs\": [[9484, 9485, -9453]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60632\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Limanu\"\n        }\n      }, {\n        \"arcs\": [[9486, -9485, -9452, 9487, 9488]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60482\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Mangalia\"\n        }\n      }, {\n        \"arcs\": [[9489, 9490, 9491, -8446, -8439, -4059, -4162, 9492]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86687\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Deva\"\n        }\n      }, {\n        \"arcs\": [[9493, 9494, -9490, 9495, -4348]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89801\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Hărău\"\n        }\n      }, {\n        \"arcs\": [[-4519, -4349, -9496, -9493, -4161, -4430, -4486]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91330\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Șoimuș\"\n        }\n      }, {\n        \"arcs\": [[-2697, -2471, -2334, -2327, -2564, -2782, -2743]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14272\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bălilești\"\n        }\n      }, {\n        \"arcs\": [[9496, -208, 9497, -32, 9498, -8223, -8878]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154184\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Segarcea-Vale\"\n        }\n      }, {\n        \"arcs\": [[-9499, -31, -36, -82, -9432, -8221]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"127126\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Giuvărăști\"\n        }\n      }, {\n        \"arcs\": [[-8810, -8764, -8788, -8761, 9499, -8881, -8991, -8782, -8780, -8807]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151870\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Roșiori de Vede\"\n        }\n      }, {\n        \"arcs\": [[-8760, -209, -9497, -8877, -9500]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"153936\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Salcia\"\n        }\n      }, {\n        \"arcs\": [[9500, 9501, -1187, -8823, -1265, -1445]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"110740\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Breznița-Motru\"\n        }\n      }, {\n        \"arcs\": [[-1390, -1300, -8035, -1188, -9502, 9502, 9503]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111006\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Butoiești\"\n        }\n      }, {\n        \"arcs\": [[-9503, -9501, -1444, 9504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113518\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Stîngăceaua\"\n        }\n      }, {\n        \"arcs\": [[-1651, -1391, -9504, -9505, -1443, -1580]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"111989\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Grozești\"\n        }\n      }, {\n        \"arcs\": [[-1407, 9505, -1284, -1309, -8855, -1516, -1602]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113233\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Prunișor\"\n        }\n      }, {\n        \"arcs\": [[-1406, -1267, -8824, -8821, -1169, -1281, -9506]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113732\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Tîmna\"\n        }\n      }, {\n        \"arcs\": [[-8490, -8473, -8470, -8462, -8464, 9506, 9507]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"120922\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Horia\"\n        }\n      }, {\n        \"arcs\": [[-9507, -8466, -8476, -8480, 9508]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124723\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Trifești\"\n        }\n      }, {\n        \"arcs\": [[-8509, -8491, -9508, -9509, -8479, -8504]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"122463\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Dulcești\"\n        }\n      }, {\n        \"arcs\": [[-8950, -8906, 9509, 9510, 9511]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179150\",\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"București Sectorul 2\"\n        }\n      }, {\n        \"arcs\": [[-8339, 9512, 9513, 9514, 9515, 9516, -9511, 9517]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179169\",\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"București Sectorul 3\"\n        }\n      }, {\n        \"arcs\": [[-8951, -9512, -9517, 9518, -8348, -7976, -8437, -8327, -8923]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179141\",\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"București Sectorul 1\"\n        }\n      }, {\n        \"arcs\": [[9519, -8910, 9520, -9515]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179178\",\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"București Sectorul 4\"\n        }\n      }, {\n        \"arcs\": [[-9516, -9521, -8913, 9521, 9522, -8346, -9519]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179187\",\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"București Sectorul 5\"\n        }\n      }, {\n        \"arcs\": [[-8669, 9523, 9524]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113607\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Svinița\"\n        }\n      }, {\n        \"arcs\": [[-2056, -2116, -8670, -9525, 9525, -1722, -1953]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"51449\",\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Berzasca\"\n        }\n      }, {\n        \"arcs\": [[-8350, -7978, -7974, -8353, -967, -1056, -1122]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101957\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Ciorogîrla\"\n        }\n      }, {\n        \"arcs\": [[9526, -8278, 9527, -751, -8911, -9520, -9514]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179533\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Popești Leordeni\"\n        }\n      }, {\n        \"arcs\": [[-8277, -8354, -752, -9528]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101145\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Berceni\"\n        }\n      }, {\n        \"arcs\": [[-8912, -8898, -8900, 9528, 9529, -9522]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179409\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Măgurele\"\n        }\n      }, {\n        \"arcs\": [[9530, -9529, -8899, -8903]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102213\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Cornetu\"\n        }\n      }, {\n        \"arcs\": [[9531, -4774, -4894, -5210]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85788\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Sânmartin\"\n        }\n      }, {\n        \"arcs\": [[-8677, -4704, -4621, -4582, -4771, -9532, -5209, 9532]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"85289\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Plăieșii de Jos\"\n        }\n      }, {\n        \"arcs\": [[-5276, -8676, -8678, -9533, -5208, -5840, -5314, -5419]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22166\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Dărmănești\"\n        }\n      }, {\n        \"arcs\": [[-4837, -8357, -4796, -4803, -4954, -8062, -8066, -8064]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20563\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Onești\"\n        }\n      }, {\n        \"arcs\": [[9533, -9281, -5399, -5588, -5604, 9534]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"23350\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Luizi-Călugăra\"\n        }\n      }, {\n        \"arcs\": [[9535, -9282, -9534]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26320\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Sărata\"\n        }\n      }, {\n        \"arcs\": [[-5750, 9536, -5605, -5586, -5708, -5924, -5801]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20466\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Mărgineni\"\n        }\n      }, {\n        \"arcs\": [[-8902, -8345, 9537, -8930, -8929, -8889, -1709]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103513\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Gruiu\"\n        }\n      }, {\n        \"arcs\": [[-8344, -8942, -8919, -8931, -8926, -9538]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104243\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Moara Vlăsiei\"\n        }\n      }, {\n        \"arcs\": [[-1095, -1019, -1198, 9538]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113894\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Vînjuleț\"\n        }\n      }, {\n        \"arcs\": [[-1171, -1096, -9539, -1197, -1306, -1282]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"113466\",\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Rogova\"\n        }\n      }, {\n        \"arcs\": [[-1162, -1124, -1177, 9539, 9540]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179748\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Cosoba\"\n        }\n      }, {\n        \"arcs\": [[-9540, -1178, -1176, -1242, -1291, 9541]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"101341\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Brezoaele\"\n        }\n      }, {\n        \"arcs\": [[-8938, -1288, -1163, -9541, -9542, -1294, -1481, -1360]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"105534\",\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Tărtășești\"\n        }\n      }, {\n        \"arcs\": [[9542, -9283, -9536, -9535, -5603, -9537, -5749, -5847, -5928]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20297\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Bacău\"\n        }\n      }, {\n        \"arcs\": [[-5703, -9279, -9280, -9543, -5927]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20359\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Letea Veche\"\n        }\n      }, {\n        \"arcs\": [[-5815, -5643, -5542, 9543, -5838, -5986]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26289\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Zemeș\"\n        }\n      }, {\n        \"arcs\": [[-5420, -5316, -5839, -9544, -5541]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20876\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Moinești\"\n        }\n      }, {\n        \"arcs\": [[9544, -4839, -4984, -5096]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"26083\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Valea Seacă\"\n        }\n      }, {\n        \"arcs\": [[9545, -4680, -4661, -8058, -8060, -4834, -9545, -5095]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25068\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Sascut\"\n        }\n      }, {\n        \"arcs\": [[-4708, -4681, -9546, -5094, -8057]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"25745\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Tătărăști\"\n        }\n      }, {\n        \"arcs\": [[-8715, -2064, -8692, -2283, 9546]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13187\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bascov\"\n        }\n      }, {\n        \"arcs\": [[-2244, -8714, -8716, -9547, -2282, -8686]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"14851\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Budeasa\"\n        }\n      }, {\n        \"arcs\": [[-3313, 9547, -2968, -3239]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"20063\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Bughea de Sus\"\n        }\n      }, {\n        \"arcs\": [[-3285, -2900, -2875, -2830, -2920, -2969, -9548, -3312]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"13490\",\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Câmpulung\"\n        }\n      }, {\n        \"arcs\": [[9548, -8131, -8127, -3671]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77595\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Cuza Vodă\"\n        }\n      }, {\n        \"arcs\": [[-8122, -8119, -3533, -8124, -8132, -9549, -3670, -8141, -8187, -8179]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"77224\",\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Smîrdan\"\n        }\n      }, {\n        \"arcs\": [[-2341, 9549, 9550, -1992, -2162, -2366, -2945]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"79736\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Cîlnic\"\n        }\n      }, {\n        \"arcs\": [[-1814, -1652, -1583, -1660, -1879, -1994, 9551]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80980\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Negomir\"\n        }\n      }, {\n        \"arcs\": [[-2090, -1815, -9552, -1993, -9551, 9552]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"80285\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Fărcășești\"\n        }\n      }, {\n        \"arcs\": [[-2425, -2254, -2091, -9553, -9550, -2340]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82895\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Rovinari\"\n        }\n      }, {\n        \"arcs\": [[9553, -3030, -2614, -2531, -2944, 9554]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"81576\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Runcu\"\n        }\n      }, {\n        \"arcs\": [[-3031, -9554, 9555, -8728, -3361, -3217]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87059\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Lupeni\"\n        }\n      }, {\n        \"arcs\": [[-9556, -9555, -2947, 9556, -7983, 9557, 9558, -8729]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87139\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Uricani\"\n        }\n      }, {\n        \"arcs\": [[-9557, -2946, -2367, -2179, -2483, -2957, -7984]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"82430\",\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Tismana\"\n        }\n      }, {\n        \"arcs\": [[-3478, -3510, -3578, -8725, 9559]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91731\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"General Berthelot\"\n        }\n      }, {\n        \"arcs\": [[-3658, -3508, -3474, -9560, -8724, -3706]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87576\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Hațeg\"\n        }\n      }, {\n        \"arcs\": [[9560, -4026, 9561, -9494, -4347, -7957]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90663\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Rapoltu Mare\"\n        }\n      }, {\n        \"arcs\": [[-3708, -8726, -3710, 9562, -8443]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86883\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Ghelari\"\n        }\n      }, {\n        \"arcs\": [[-2727, 9563, 9564, -2890]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"132805\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Cornu\"\n        }\n      }, {\n        \"arcs\": [[-2726, -2547, -8095, -8096, 9565, -9564]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131274\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Poiana Câmpina\"\n        }\n      }, {\n        \"arcs\": [[-4025, 9566, -9491, -9495, -9562]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87665\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Simeria\"\n        }\n      }, {\n        \"arcs\": [[-4024, -3945, -3873, -8442, -9492, -9567]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"88047\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Băcia\"\n        }\n      }, {\n        \"arcs\": [[9567, -9558, -7982, -3506]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"91116\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Sălașu de Sus\"\n        }\n      }, {\n        \"arcs\": [[-8730, -9559, -9568, -3505, -8731, -3767]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90538\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Pui\"\n        }\n      }, {\n        \"arcs\": [[-8418, -8857, -3115, 9568, 9569]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"87077\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Petrila\"\n        }\n      }, {\n        \"arcs\": [[-9569, -3114, -3096, -3200, -3216, -3363, -8727, -3765, 9570]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"86990\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Petroșani\"\n        }\n      }, {\n        \"arcs\": [[-4414, -4234, 9571, 9572, -4053, -4027, -9561, -7956, -7959, -4765]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89561\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Geoagiu\"\n        }\n      }, {\n        \"arcs\": [[9573, -8732, -4051, -9573]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90994\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Romos\"\n        }\n      }, {\n        \"arcs\": [[-4221, -8419, -9570, -9571, -3764, -8733, -9574, -9572, -4233, -4212]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"1696\",\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cugir\"\n        }\n      }, {\n        \"arcs\": [[-1005, 9574, -758, -732, -801, -881, -9435, -9440, -1080]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"125999\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Brebeni\"\n        }\n      }, {\n        \"arcs\": [[-759, -9575, -1004, -944]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"128659\",\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Schitu\"\n        }\n      }, {\n        \"arcs\": [[9575, -7405, -7507, -8399, -8848, -8846, 9576]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106461\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Tăuții-Măgherăuș\"\n        }\n      }, {\n        \"arcs\": [[-7685, -7641, -7610, -7515, -7351, 9577, -9577, -8845, -7815, -7839]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106318\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Baia Mare\"\n        }\n      }, {\n        \"arcs\": [[-7350, -7324, -7322, -7406, -9576, -9578]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"106407\",\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Recea\"\n        }\n      }, {\n        \"arcs\": [[-3595, -3490, -3473, 9578, -3694, 9579]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"178279\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Urechești\"\n        }\n      }, {\n        \"arcs\": [[-3745, -3627, -3596, -9580, -3693, -3681]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175885\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Cotești\"\n        }\n      }, {\n        \"arcs\": [[9580, -3421, -8698, -8705, -3378, -3606]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"175983\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Dumitrești\"\n        }\n      }, {\n        \"arcs\": [[-9579, -3472, -3448, -3422, -9581, -3605, -3817, -3695]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176338\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Gura Caliței\"\n        }\n      }, {\n        \"arcs\": [[-8193, -8694, -4151, -8025, 9581, -4468, -8198]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174922\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Mărășești\"\n        }\n      }, {\n        \"arcs\": [[-4469, -9582, -8024, -4480, -4475]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"176793\",\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Movilița\"\n        }\n      }, {\n        \"arcs\": [[-6540, -8250, -6644, 9582]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55106\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Jichișu de Jos\"\n        }\n      }, {\n        \"arcs\": [[-6834, -6695, -8225, -6551, -8249, -6537, -9583, -6649, -6735]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55008\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Dej\"\n        }\n      }, {\n        \"arcs\": [[9583, -9417, 9584, -9421, -9424]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55277\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Mihai Viteazu\"\n        }\n      }, {\n        \"arcs\": [[-8246, 9585, -5561, -9418, -9584, -9423, -9426, -9413]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55259\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Turda\"\n        }\n      }, {\n        \"arcs\": [[-9416, -5349, -5223, -5388, -5630, -9422, -9585]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"58721\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Moldovenești\"\n        }\n      }, {\n        \"arcs\": [[-6398, -6354, -6371, -6434, -6590, -8001]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"57163\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Ciucea\"\n        }\n      }, {\n        \"arcs\": [[9586, -5444, -5438, -5764, -5898]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60026\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Valea Ierii\"\n        }\n      }, {\n        \"arcs\": [[-5897, -5879, -5631, -5519, -5445, -9587]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"55918\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Băișoara\"\n        }\n      }, {\n        \"arcs\": [[9587, -5512, -5494, -5476, -5559, -9586, -8245, -5794]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60062\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Viișoara\"\n        }\n      }, {\n        \"arcs\": [[-5740, -5620, -5513, -9588, -5793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"59693\",\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Tritenii de Jos\"\n        }\n      }, {\n        \"arcs\": [[9588, -8330, -8279, -9527, -9513, -8338]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179347\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Glina\"\n        }\n      }, {\n        \"arcs\": [[-4615, 9589, -5059, -4962]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"12938\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Zădăreni\"\n        }\n      }, {\n        \"arcs\": [[-9590, -4614, -4721, -5060]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10827\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Felnac\"\n        }\n      }, {\n        \"arcs\": [[-1151, -941, -8281, -8331, -9589, -8337, 9590, -8335, 9591, -8332, -8920, -1228]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"103014\",\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Fundeni\"\n        }\n      }, {\n        \"arcs\": [[-8921, -8333, -9592, -8336, -9591, -8340, -9518, -9510, -8905, -8952, -8945]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179515\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Pantelimon\"\n        }\n      }, {\n        \"arcs\": [[-8441, -8445, 9592, -3712, -3653, -4008, -3986, -4164]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"89151\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Cerbăl\"\n        }\n      }, {\n        \"arcs\": [[-8444, -9563, -3713, -9593]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"90066\",\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Lelese\"\n        }\n      }, {\n        \"arcs\": [[-4741, -4570, -8098, -4841, -5170, -5055]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"10453\",\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Conop\"\n        }\n      }, {\n        \"arcs\": [[-5211, -5070, -5163, -5235, -5364, -8324]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"83375\",\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Păuleni-Ciuc\"\n        }\n      }, {\n        \"arcs\": [[-7990, -7995, -8883, -8789, -793]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"104047\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Letca Nouă\"\n        }\n      }, {\n        \"arcs\": [[-8359, -5947, -6131, -8454, -6159]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"22111\",\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Dămienești\"\n        }\n      }, {\n        \"arcs\": [[-8980, 9593, -9489, 9594, 9595, -9469, -9473]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60598\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"23 August\"\n        }\n      }, {\n        \"arcs\": [[-9111, -9133, -8586, -9128, -8594]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"95471\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Târgu Frumos\"\n        }\n      }, {\n        \"arcs\": [[9596, -3045, -2824, -8312, -2984, -3071]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42708\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Chișcani\"\n        }\n      }, {\n        \"arcs\": [[-9350, -3046, -9597, -3070, -3244]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"42682\",\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Brăila\"\n        }\n      }, {\n        \"arcs\": [[-3283, -3254, 9597, 9598, -3388]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"155591\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Banloc\"\n        }\n      }, {\n        \"arcs\": [[-9599, 9599, -3357, -3389]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159491\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Livezile\"\n        }\n      }, {\n        \"arcs\": [[9600, -8495, -8493, -8508]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"124206\",\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Săbăoani\"\n        }\n      }, {\n        \"arcs\": [[-8539, -9180, -8496, -9601, -8507, -8524, -8566]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100335\",\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Răchiteni\"\n        }\n      }, {\n        \"arcs\": [[-3554, -8085, -3235, -3428, -3064, -3042, 9601, -8433, -3621]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167794\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Brezoi\"\n        }\n      }, {\n        \"arcs\": [[-3041, -2940, -8963, -2708, -8022, -2884, -8960, -8434, -9602]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"167696\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Băile Olănești\"\n        }\n      }, {\n        \"arcs\": [[-207, 9602, -25, 9603, -27, -9498]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151763\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Lița\"\n        }\n      }, {\n        \"arcs\": [[-8809, 9604, -16, 9605, -20, 9606, -156]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"154736\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Traian\"\n        }\n      }, {\n        \"arcs\": [[-9607, -19, -9606, -18, 9607, -28, -9604, -26, -9603, -206, -157]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"151683\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Turnu Magurele\"\n        }\n      }, {\n        \"arcs\": [[-6544, -6525, -6441, -6517, -6630, 9608, -6676]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"141447\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Hida\"\n        }\n      }, {\n        \"arcs\": [[-6677, -9609, -6629, -6726, -8006, -8113]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"140146\",\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Bălan\"\n        }\n      }, {\n        \"arcs\": [[-1629, -1468, -1351, -1339, -1454, 9609, -1654]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"174085\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Valea Mare\"\n        }\n      }, {\n        \"arcs\": [[-1835, -1655, -9610, -1460, -1831, -2118, -2019]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"169681\",\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Fîrtățești\"\n        }\n      }, {\n        \"arcs\": [[-8090, -8093, -2376, -2551, -2665, -2800, -2791]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131461\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Dumbrăvești\"\n        }\n      }, {\n        \"arcs\": [[-3737, -3645, -3526, -3568, -3730, -3851]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"159437\",\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Parța\"\n        }\n      }, {\n        \"arcs\": [[-2891, -9565, -9566, -8097, -2671, -2811, -2902, -3036]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"131103\",\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Breaza\"\n        }\n      }, {\n        \"arcs\": [[-325, -239, 9610, -8718, -372, -469]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"102909\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Frătești\"\n        }\n      }, {\n        \"arcs\": [[-238, 9611, -122, -8717, -9611]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"100521\",\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Giurgiu\"\n        }\n      }, {\n        \"arcs\": [[-5283, -5114, -5069, -4886, -4866, -5037, -5148, -5198, -5393]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"115637\",\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Bălăușeri\"\n        }\n      }, {\n        \"arcs\": [[9612, -9268, -9206, -9483, -9274, 9613]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60419\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Constanța\"\n        }\n      }, {\n        \"arcs\": [[9614, -9223, -9475, -9466, -9266, -9613]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"60570\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Agigea\"\n        }\n      }, {\n        \"arcs\": [[-9488, -9451, -9224, 9615, -9595]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"62672\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Pecineaga\"\n        }\n      }, {\n        \"arcs\": [[-9470, -9596, -9616, -9228, -9481, -9484]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"63198\",\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Amzacea\"\n        }\n      }, {\n        \"arcs\": [[-9523, -9530, -9531, -8904, -8347]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"179221\",\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Bragadiru\"\n        }\n      }, {\n        \"arcs\": [[-8882, -8681, -8663, -275, -310, -8769, -485, -8768, -436, -488]],\n        \"type\": \"Polygon\",\n        \"properties\": {\n          \"id\": \"152902\",\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Drăgănești-Vlașca\"\n        }\n      }]\n    }\n  }\n};\nvar citiesTopojson = {\n  \"type\": \"Topology\",\n  \"arcs\": [],\n  \"objects\": {\n    \"romania.cities\": {\n      \"type\": \"GeometryCollection\",\n      \"geometries\": [{\n        \"type\": \"Point\",\n        \"coordinates\": [25.369727475663957, 43.6917250650831],\n        \"properties\": {\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Zimnicea\",\n          \"id\": \"TR.Zimnicea\",\n          \"name\": \"Zimnicea\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"0\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.950689338804846, 43.77229921966741],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Bechet\",\n          \"id\": \"DJ.Bechet\",\n          \"name\": \"Bechet\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"1\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.480582274855397, 43.79516520277805],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Corabia\",\n          \"id\": \"OT.Corabia\",\n          \"name\": \"Corabia\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"2\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.114007404137766, 43.821531768007944],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"D\\u0103buleni\",\n          \"id\": \"DJ.D\\u0103buleni\",\n          \"name\": \"D\\u0103buleni\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"3\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.360567623142238, 43.97600628419029],\n        \"properties\": {\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Alexandria\",\n          \"id\": \"TR.Alexandria\",\n          \"name\": \"Alexandria\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"4\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.956429713466857, 43.96545242401182],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Calafat\",\n          \"id\": \"DJ.Calafat\",\n          \"name\": \"Calafat\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"5\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.311008402935588, 44.006901064392345],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"B\\u0103ile\\u0219ti\",\n          \"id\": \"DJ.B\\u0103ile\\u0219ti\",\n          \"name\": \"B\\u0103ile\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"6\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.344901118165875, 44.11114944577428],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Caracal\",\n          \"id\": \"OT.Caracal\",\n          \"name\": \"Caracal\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"7\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.73641587264387, 44.09612059141394],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Segarcea\",\n          \"id\": \"DJ.Segarcea\",\n          \"name\": \"Segarcea\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"8\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.688668684000366, 44.10781637331038],\n        \"properties\": {\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Olteni\\u021Ba\",\n          \"id\": \"CL.Olteni\\u021Ba\",\n          \"name\": \"Olteni\\u021Ba\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"9\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.534795392702204, 44.17835868275265],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Dr\\u0103g\\u0103ne\\u0219ti-Olt\",\n          \"id\": \"OT.Dr\\u0103g\\u0103ne\\u0219ti-Olt\",\n          \"name\": \"Dr\\u0103g\\u0103ne\\u0219ti-Olt\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"10\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.558309532994432, 44.276959067290754],\n        \"properties\": {\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Videle\",\n          \"id\": \"TR.Videle\",\n          \"name\": \"Videle\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"11\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.324893192462252, 44.203929829667494],\n        \"properties\": {\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"C\\u0103l\\u0103ra\\u0219i\",\n          \"id\": \"CL.C\\u0103l\\u0103ra\\u0219i\",\n          \"name\": \"C\\u0103l\\u0103ra\\u0219i\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"12\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.790349933212724, 44.31998677801569],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Craiova\",\n          \"id\": \"DJ.Craiova\",\n          \"name\": \"Craiova\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"13\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.275295743021484, 44.36389139203497],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Piatra-Olt\",\n          \"id\": \"OT.Piatra-Olt\",\n          \"name\": \"Piatra-Olt\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"14\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.730508261319834, 44.44235914141742],\n        \"properties\": {\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Bolintin-Vale\",\n          \"id\": \"GR.Bolintin-Vale\",\n          \"name\": \"Bolintin-Vale\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"15\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.8787915972797, 44.423285422874734],\n        \"properties\": {\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"V\\xEEnju Mare\",\n          \"id\": \"MH.V\\xEEnju Mare\",\n          \"name\": \"V\\xEEnju Mare\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"16\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.78625986265465, 44.40132095957935],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Fete\\u0219ti\",\n          \"id\": \"IL.Fete\\u0219ti\",\n          \"name\": \"Fete\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"17\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.624691531035392, 44.47191217379931],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Potcoava\",\n          \"id\": \"OT.Potcoava\",\n          \"name\": \"Potcoava\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"18\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.520280385462858, 44.462416602125536],\n        \"properties\": {\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Fundulea\",\n          \"id\": \"CL.Fundulea\",\n          \"name\": \"Fundulea\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"19\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.950001118983067, 44.55618406162212],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Buftea\",\n          \"id\": \"IF.Buftea\",\n          \"name\": \"Buftea\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"20\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.529408658976635, 44.558791647724306],\n        \"properties\": {\n          \"countyId\": \"DJ\",\n          \"defaultLabel\": \"Filia\\u0219i\",\n          \"id\": \"DJ.Filia\\u0219i\",\n          \"name\": \"Filia\\u0219i\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"21\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.56631842912519, 44.646832937025486],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Titu\",\n          \"id\": \"DB.Titu\",\n          \"name\": \"Titu\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"22\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.262633955280148, 44.65181155684906],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Dr\\u0103g\\u0103\\u0219ani\",\n          \"id\": \"VL.Dr\\u0103g\\u0103\\u0219ani\",\n          \"name\": \"Dr\\u0103g\\u0103\\u0219ani\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"23\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.188208432810512, 44.63376686851609],\n        \"properties\": {\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Strehaia\",\n          \"id\": \"MH.Strehaia\",\n          \"name\": \"Strehaia\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"24\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.938769470738947, 44.618670591957404],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"B\\u0103lce\\u0219ti\",\n          \"id\": \"VL.B\\u0103lce\\u0219ti\",\n          \"name\": \"B\\u0103lce\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"25\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.304914843526504, 44.64963549205665],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Amara\",\n          \"id\": \"IL.Amara\",\n          \"name\": \"Amara\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"26\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.758126706476258, 44.662326919420984],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"R\\u0103cari\",\n          \"id\": \"DB.R\\u0103cari\",\n          \"name\": \"R\\u0103cari\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"27\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.036775979275166, 44.64862187770501],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"C\\u0103z\\u0103ne\\u0219ti\",\n          \"id\": \"IL.C\\u0103z\\u0103ne\\u0219ti\",\n          \"name\": \"C\\u0103z\\u0103ne\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"28\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.388088110542956, 44.66963052086095],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Fierbin\\u021Bi-T\\xE2rg\",\n          \"id\": \"IL.Fierbin\\u021Bi-T\\xE2rg\",\n          \"name\": \"Fierbin\\u021Bi-T\\xE2rg\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"29\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.315327658070604, 44.71829379482633],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"G\\u0103e\\u0219ti\",\n          \"id\": \"DB.G\\u0103e\\u0219ti\",\n          \"name\": \"G\\u0103e\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"30\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.855164839722875, 44.68910519782395],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Coste\\u0219ti\",\n          \"id\": \"AG.Coste\\u0219ti\",\n          \"name\": \"Coste\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"31\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.348569201571603, 44.71036140576971],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Turceni\",\n          \"id\": \"GJ.Turceni\",\n          \"name\": \"Turceni\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"32\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.646157682276915, 44.739400859867686],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Urziceni\",\n          \"id\": \"IL.Urziceni\",\n          \"name\": \"Urziceni\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"33\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.41029313145909, 44.729224541447856],\n        \"properties\": {\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Or\\u0219ova\",\n          \"id\": \"MH.Or\\u0219ova\",\n          \"name\": \"Or\\u0219ova\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"34\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.627797875542935, 44.698134740704546],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"\\u021A\\u0103nd\\u0103rei\",\n          \"id\": \"IL.\\u021A\\u0103nd\\u0103rei\",\n          \"name\": \"\\u021A\\u0103nd\\u0103rei\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"35\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.075714604210397, 44.82034425077867],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Topoloveni\",\n          \"id\": \"AG.Topoloveni\",\n          \"name\": \"Topoloveni\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"36\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.663997761440424, 44.74396287708443],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Moldova Nou\\u0103\",\n          \"id\": \"CS.Moldova Nou\\u0103\",\n          \"name\": \"Moldova Nou\\u0103\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"37\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.980434349693518, 44.81886732753978],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Motru\",\n          \"id\": \"GJ.Motru\",\n          \"name\": \"Motru\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"38\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.40254052473354, 44.884335432192195],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"\\u021Aicleni\",\n          \"id\": \"GJ.\\u021Aicleni\",\n          \"name\": \"\\u021Aicleni\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"39\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.43665817304675, 44.92230834102251],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"T\\xEErgovi\\u0219te\",\n          \"id\": \"DB.T\\xEErgovi\\u0219te\",\n          \"name\": \"T\\xEErgovi\\u0219te\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"40\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.993339038169175, 44.90748341585919],\n        \"properties\": {\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Pogoanele\",\n          \"id\": \"BZ.Pogoanele\",\n          \"name\": \"Pogoanele\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"41\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.94825149626487, 44.94484060525998],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Mioveni\",\n          \"id\": \"AG.Mioveni\",\n          \"name\": \"Mioveni\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"42\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.22922173703655, 44.96476423651177],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"B\\u0103beni\",\n          \"id\": \"VL.B\\u0103beni\",\n          \"name\": \"B\\u0103beni\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"43\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.446878446287556, 44.8918529460856],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"B\\u0103ile Herculane\",\n          \"id\": \"CS.B\\u0103ile Herculane\",\n          \"name\": \"B\\u0103ile Herculane\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"44\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.635916721649448, 44.98943728568356],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Moreni\",\n          \"id\": \"DB.Moreni\",\n          \"name\": \"Moreni\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"45\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.507336511937986, 44.9684393894028],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"T\\xEErgu C\\u0103rbune\\u0219ti\",\n          \"id\": \"GJ.T\\xEErgu C\\u0103rbune\\u0219ti\",\n          \"name\": \"T\\xEErgu C\\u0103rbune\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"46\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.881609070120973, 44.98872273462607],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Berbe\\u0219ti\",\n          \"id\": \"VL.Berbe\\u0219ti\",\n          \"name\": \"Berbe\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"47\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.253050855012525, 44.99817900686133],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Urla\\u021Bi\",\n          \"id\": \"PH.Urla\\u021Bi\",\n          \"name\": \"Urla\\u021Bi\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"48\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.95950008363379, 45.052805882471056],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Plopeni\",\n          \"id\": \"PH.Plopeni\",\n          \"name\": \"Plopeni\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"49\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.61543344311442, 44.93143505816525],\n        \"properties\": {\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"\\xCEnsur\\u0103\\u021Bei\",\n          \"id\": \"BR.\\xCEnsur\\u0103\\u021Bei\",\n          \"name\": \"\\xCEnsur\\u0103\\u021Bei\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"50\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.871741275271543, 45.03723281880738],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"B\\u0103icoi\",\n          \"id\": \"PH.B\\u0103icoi\",\n          \"name\": \"B\\u0103icoi\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"51\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.798895684104235, 45.0079197571191],\n        \"properties\": {\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Baia de Aram\\u0103\",\n          \"id\": \"MH.Baia de Aram\\u0103\",\n          \"name\": \"Baia de Aram\\u0103\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"52\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.18537982621802, 45.08018895054367],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"B\\u0103ile Govora\",\n          \"id\": \"VL.B\\u0103ile Govora\",\n          \"name\": \"B\\u0103ile Govora\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"53\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.293746830380496, 45.048873679379064],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"T\\xEErgu Jiu\",\n          \"id\": \"GJ.T\\xEErgu Jiu\",\n          \"name\": \"T\\xEErgu Jiu\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"54\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.449621684069896, 45.07810892590722],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Pucioasa\",\n          \"id\": \"DB.Pucioasa\",\n          \"name\": \"Pucioasa\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"55\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.278052427791216, 45.11803218411164],\n        \"properties\": {\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"F\\u0103urei\",\n          \"id\": \"BR.F\\u0103urei\",\n          \"name\": \"F\\u0103urei\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"56\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.40502643951596, 45.13481780357405],\n        \"properties\": {\n          \"countyId\": \"DB\",\n          \"defaultLabel\": \"Fieni\",\n          \"id\": \"DB.Fieni\",\n          \"name\": \"Fieni\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"57\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.66872188572615, 45.13765795687934],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Curtea de Arge\\u0219\",\n          \"id\": \"AG.Curtea de Arge\\u0219\",\n          \"name\": \"Curtea de Arge\\u0219\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"58\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.714956040499835, 45.06320140390986],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Oravi\\u021Ba\",\n          \"id\": \"CS.Oravi\\u021Ba\",\n          \"name\": \"Oravi\\u021Ba\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"59\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.74262878881522, 45.143370908948675],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"C\\xE2mpina\",\n          \"id\": \"PH.C\\xE2mpina\",\n          \"name\": \"C\\xE2mpina\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"60\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.8632785330034, 45.05162918771811],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Anina\",\n          \"id\": \"CS.Anina\",\n          \"name\": \"Anina\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"61\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.814834267263123, 45.13428839869874],\n        \"properties\": {\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Buz\\u0103u\",\n          \"id\": \"BZ.Buz\\u0103u\",\n          \"name\": \"Buz\\u0103u\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"62\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.04722476753139, 45.192016649868165],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"V\\u0103lenii de Munte\",\n          \"id\": \"PH.V\\u0103lenii de Munte\",\n          \"name\": \"V\\u0103lenii de Munte\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"63\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.940735593751594, 45.238974679368894],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Sl\\u0103nic\",\n          \"id\": \"PH.Sl\\u0103nic\",\n          \"name\": \"Sl\\u0103nic\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"64\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.967335246027165, 45.21991610418264],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Horezu\",\n          \"id\": \"VL.Horezu\",\n          \"name\": \"Horezu\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"65\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.614616193849603, 45.271147306248736],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Comarnic\",\n          \"id\": \"PH.Comarnic\",\n          \"name\": \"Comarnic\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"66\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.306375834670092, 45.26314421194505],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"C\\u0103lim\\u0103ne\\u0219ti\",\n          \"id\": \"VL.C\\u0103lim\\u0103ne\\u0219ti\",\n          \"name\": \"C\\u0103lim\\u0103ne\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"67\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.384769871439904, 45.22750169189413],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Bumbe\\u0219ti-Jiu\",\n          \"id\": \"GJ.Bumbe\\u0219ti-Jiu\",\n          \"name\": \"Bumbe\\u0219ti-Jiu\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"68\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.34026874356077, 45.32248995937144],\n        \"properties\": {\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"P\\u0103t\\xE2rlagele\",\n          \"id\": \"BZ.P\\u0103t\\xE2rlagele\",\n          \"name\": \"P\\u0103t\\xE2rlagele\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"69\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.550758983983172, 45.343335253366426],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Sinaia\",\n          \"id\": \"PH.Sinaia\",\n          \"name\": \"Sinaia\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"70\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.930683930761266, 45.29888307030179],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Re\\u0219i\\u021Ba\",\n          \"id\": \"CS.Re\\u0219i\\u021Ba\",\n          \"name\": \"Re\\u0219i\\u021Ba\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"71\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.337551710041378, 45.38135049004191],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Aninoasa\",\n          \"id\": \"HD.Aninoasa\",\n          \"name\": \"Aninoasa\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"72\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.28188340691671, 45.36560138444874],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Vulcan\",\n          \"id\": \"HD.Vulcan\",\n          \"name\": \"Vulcan\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"73\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.238276253406692, 45.40849318451233],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Deta\",\n          \"id\": \"TM.Deta\",\n          \"name\": \"Deta\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"74\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.309844961273754, 45.41418856855179],\n        \"properties\": {\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"Nehoiu\",\n          \"id\": \"BZ.Nehoiu\",\n          \"name\": \"Nehoiu\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"75\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.629940318980612, 45.45285912372875],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Azuga\",\n          \"id\": \"PH.Azuga\",\n          \"name\": \"Azuga\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"76\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.75447662604023, 45.392931726516395],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Boc\\u0219a\",\n          \"id\": \"CS.Boc\\u0219a\",\n          \"name\": \"Boc\\u0219a\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"77\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.209062533810748, 45.42528900281198],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"Caransebe\\u0219\",\n          \"id\": \"CS.Caransebe\\u0219\",\n          \"name\": \"Caransebe\\u0219\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"78\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.588179113119057, 45.49662971192421],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Predeal\",\n          \"id\": \"BV.Predeal\",\n          \"name\": \"Predeal\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"79\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.408741877913698, 45.38773004695613],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"G\\u0103taia\",\n          \"id\": \"TM.G\\u0103taia\",\n          \"name\": \"G\\u0103taia\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"80\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.370344362782284, 45.52899548353812],\n        \"properties\": {\n          \"countyId\": \"CS\",\n          \"defaultLabel\": \"O\\u021Belu Ro\\u0219u\",\n          \"id\": \"CS.O\\u021Belu Ro\\u0219u\",\n          \"name\": \"O\\u021Belu Ro\\u0219u\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"81\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.08085679420567, 45.48684020957491],\n        \"properties\": {\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Gala\\u021Bi\",\n          \"id\": \"GL.Gala\\u021Bi\",\n          \"name\": \"Gala\\u021Bi\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"82\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.238902151507578, 45.584243230488674],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Z\\u0103rne\\u0219ti\",\n          \"id\": \"BV.Z\\u0103rne\\u0219ti\",\n          \"name\": \"Z\\u0103rne\\u0219ti\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"83\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.11866790645407, 45.52900248155606],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Ciacova\",\n          \"id\": \"TM.Ciacova\",\n          \"name\": \"Ciacova\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"84\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.770331866275022, 45.53782349710666],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"S\\u0103cele\",\n          \"id\": \"BV.S\\u0103cele\",\n          \"name\": \"S\\u0103cele\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"85\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.07130187559918, 45.59241260743223],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"T\\u0103lmaciu\",\n          \"id\": \"SB.T\\u0103lmaciu\",\n          \"name\": \"T\\u0103lmaciu\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"86\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.51228292248697, 45.684275755968876],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Ghimbav\",\n          \"id\": \"BV.Ghimbav\",\n          \"name\": \"Ghimbav\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"87\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.699875729553717, 45.7296734050089],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Victoria\",\n          \"id\": \"BV.Victoria\",\n          \"name\": \"Victoria\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"88\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.60278576810065, 45.62731672144854],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Buzia\\u0219\",\n          \"id\": \"TM.Buzia\\u0219\",\n          \"name\": \"Buzia\\u0219\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"89\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.00754133460499, 45.68674727100491],\n        \"properties\": {\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"\\xCEntorsura Buz\\u0103ului\",\n          \"id\": \"CV.\\xCEntorsura Buz\\u0103ului\",\n          \"name\": \"\\xCEntorsura Buz\\u0103ului\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"90\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.584849581287305, 45.62715475327325],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Bra\\u0219ov\",\n          \"id\": \"BV.Bra\\u0219ov\",\n          \"name\": \"Bra\\u0219ov\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"91\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.204433904852763, 45.69375676442977],\n        \"properties\": {\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Foc\\u0219ani\",\n          \"id\": \"VN.Foc\\u0219ani\",\n          \"name\": \"Foc\\u0219ani\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"92\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.42145649927741, 45.72204498293297],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Codlea\",\n          \"id\": \"BV.Codlea\",\n          \"name\": \"Codlea\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"93\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.08735549873087, 45.63746624368561],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Cisn\\u0103die\",\n          \"id\": \"SB.Cisn\\u0103die\",\n          \"name\": \"Cisn\\u0103die\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"94\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.941716685455614, 45.69631380432642],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Lugoj\",\n          \"id\": \"TM.Lugoj\",\n          \"name\": \"Lugoj\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"95\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.39794253178579, 45.69203644727149],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Avrig\",\n          \"id\": \"SB.Avrig\",\n          \"name\": \"Avrig\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"96\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.130328670491036, 45.75522301504154],\n        \"properties\": {\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Odobe\\u0219ti\",\n          \"id\": \"VN.Odobe\\u0219ti\",\n          \"name\": \"Odobe\\u0219ti\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"97\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.01117941297761, 45.73896066238445],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"C\\u0103lan\",\n          \"id\": \"HD.C\\u0103lan\",\n          \"name\": \"C\\u0103lan\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"98\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.256152918485405, 45.81313824054569],\n        \"properties\": {\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Covasna\",\n          \"id\": \"CV.Covasna\",\n          \"name\": \"Covasna\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"99\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.978765135407972, 45.84392245692391],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"F\\u0103g\\u0103ra\\u0219\",\n          \"id\": \"BV.F\\u0103g\\u0103ra\\u0219\",\n          \"name\": \"F\\u0103g\\u0103ra\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"100\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.85616404351948, 45.73607338087476],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"S\\u0103li\\u0219te\",\n          \"id\": \"SB.S\\u0103li\\u0219te\",\n          \"name\": \"S\\u0103li\\u0219te\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"101\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.197771600780875, 45.76403740476801],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Timi\\u0219oara\",\n          \"id\": \"TM.Timi\\u0219oara\",\n          \"name\": \"Timi\\u0219oara\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"102\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.203953934783755, 45.84562843823638],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Or\\u0103\\u0219tie\",\n          \"id\": \"HD.Or\\u0103\\u0219tie\",\n          \"name\": \"Or\\u0103\\u0219tie\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"103\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.780876765360233, 45.85344586567191],\n        \"properties\": {\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Sf\\xEEntu Gheorghe\",\n          \"id\": \"CV.Sf\\xEEntu Gheorghe\",\n          \"name\": \"Sf\\xEEntu Gheorghe\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"104\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [20.760185725323193, 45.799209863505496],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Jimbolia\",\n          \"id\": \"TM.Jimbolia\",\n          \"name\": \"Jimbolia\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"105\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.019008375515156, 45.88285837731408],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Ocna Sibiului\",\n          \"id\": \"SB.Ocna Sibiului\",\n          \"name\": \"Ocna Sibiului\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"106\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.793974176718013, 45.86288813235412],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Miercurea Sibiului\",\n          \"id\": \"SB.Miercurea Sibiului\",\n          \"name\": \"Miercurea Sibiului\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"107\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.173283066111416, 45.86266600640975],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"F\\u0103get\",\n          \"id\": \"TM.F\\u0103get\",\n          \"name\": \"F\\u0103get\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"108\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.52817959777998, 45.82410602519306],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"Reca\\u0219\",\n          \"id\": \"TM.Reca\\u0219\",\n          \"name\": \"Reca\\u0219\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"109\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.573838722974106, 45.94676320523624],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Sebe\\u0219\",\n          \"id\": \"AB.Sebe\\u0219\",\n          \"name\": \"Sebe\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"110\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.169265273410396, 46.00590004214937],\n        \"properties\": {\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"T\\xE2rgu Secuiesc\",\n          \"id\": \"CV.T\\xE2rgu Secuiesc\",\n          \"name\": \"T\\xE2rgu Secuiesc\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"111\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.623652750649807, 45.997661741963945],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Agnita\",\n          \"id\": \"SB.Agnita\",\n          \"name\": \"Agnita\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"112\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.200797214434562, 46.05452437114234],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"Rupea\",\n          \"id\": \"BV.Rupea\",\n          \"name\": \"Rupea\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"113\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.25675945549523, 46.11641943428712],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Cop\\u0219a Mic\\u0103\",\n          \"id\": \"SB.Cop\\u0219a Mic\\u0103\",\n          \"name\": \"Cop\\u0219a Mic\\u0103\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"114\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.858716016119594, 46.14731975704447],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"B\\u0103ile Tu\\u0219nad\",\n          \"id\": \"HR.B\\u0103ile Tu\\u0219nad\",\n          \"name\": \"B\\u0103ile Tu\\u0219nad\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"115\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.185175745882443, 46.11899347587789],\n        \"properties\": {\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Adjud\",\n          \"id\": \"VN.Adjud\",\n          \"name\": \"Adjud\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"116\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.352716457743448, 46.13974093865153],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Media\\u0219\",\n          \"id\": \"SB.Media\\u0219\",\n          \"name\": \"Media\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"117\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [20.610164799616037, 46.04886932002673],\n        \"properties\": {\n          \"countyId\": \"TM\",\n          \"defaultLabel\": \"S\\xE2nnicolau Mare\",\n          \"id\": \"TM.S\\xE2nnicolau Mare\",\n          \"name\": \"S\\xE2nnicolau Mare\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"118\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.911828275491036, 46.142823044630546],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Blaj\",\n          \"id\": \"AB.Blaj\",\n          \"name\": \"Blaj\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"119\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.220541527659915, 46.141706330836335],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Zlatna\",\n          \"id\": \"AB.Zlatna\",\n          \"name\": \"Zlatna\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"120\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.711490347710235, 46.210482973882044],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Teiu\\u0219\",\n          \"id\": \"AB.Teiu\\u0219\",\n          \"name\": \"Teiu\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"121\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.54360468969141, 46.21729322478172],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Dumbr\\u0103veni\",\n          \"id\": \"SB.Dumbr\\u0103veni\",\n          \"name\": \"Dumbr\\u0103veni\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"122\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.443736707172487, 46.20985962657257],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Sl\\u0103nic-Moldova\",\n          \"id\": \"BC.Sl\\u0103nic-Moldova\",\n          \"name\": \"Sl\\u0103nic-Moldova\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"123\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.77817789561819, 46.23224705500856],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sighi\\u0219oara\",\n          \"id\": \"MS.Sighi\\u0219oara\",\n          \"name\": \"Sighi\\u0219oara\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"124\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.660266406044578, 46.21533416954624],\n        \"properties\": {\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"B\\xEErlad\",\n          \"id\": \"VS.B\\xEErlad\",\n          \"name\": \"B\\xEErlad\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"125\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.062285695052513, 46.272662496496515],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Abrud\",\n          \"id\": \"AB.Abrud\",\n          \"name\": \"Abrud\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"126\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.041232914408884, 46.28227473355928],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Cristuru Secuiesc\",\n          \"id\": \"HR.Cristuru Secuiesc\",\n          \"name\": \"Cristuru Secuiesc\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"127\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.276432384488107, 46.17239734275523],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Arad\",\n          \"id\": \"AR.Arad\",\n          \"name\": \"Arad\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"128\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.03680458890385, 46.19705524703188],\n        \"properties\": {\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Murgeni\",\n          \"id\": \"VS.Murgeni\",\n          \"name\": \"Murgeni\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"129\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.599412526258014, 46.2814725372719],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"T\\xEErgu Ocna\",\n          \"id\": \"BC.T\\xEErgu Ocna\",\n          \"name\": \"T\\xEErgu Ocna\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"130\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.328889660151717, 46.31471404433439],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Odorheiu Secuiesc\",\n          \"id\": \"HR.Odorheiu Secuiesc\",\n          \"name\": \"Odorheiu Secuiesc\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"131\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [20.80097349781441, 46.21310369005043],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"N\\u0103dlac\",\n          \"id\": \"AR.N\\u0103dlac\",\n          \"name\": \"N\\u0103dlac\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"132\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.068162695910466, 46.20606328575388],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Pecica\",\n          \"id\": \"AR.Pecica\",\n          \"name\": \"Pecica\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"133\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.690156789938513, 46.30865008910278],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Aiud\",\n          \"id\": \"AB.Aiud\",\n          \"name\": \"Aiud\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"134\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.749824735151304, 46.348595054782656],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Miercurea Ciuc\",\n          \"id\": \"HR.Miercurea Ciuc\",\n          \"name\": \"Miercurea Ciuc\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"135\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.699676131053803, 46.33247464505193],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"P\\xEEncota\",\n          \"id\": \"AR.P\\xEEncota\",\n          \"name\": \"P\\xEEncota\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"136\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.577309399148575, 46.378706837770444],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Vl\\u0103hi\\u021Ba\",\n          \"id\": \"HR.Vl\\u0103hi\\u021Ba\",\n          \"name\": \"Vl\\u0103hi\\u021Ba\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"137\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.291595419765628, 46.38078605798483],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Baia de Arie\\u0219\",\n          \"id\": \"AB.Baia de Arie\\u0219\",\n          \"name\": \"Baia de Arie\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"138\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.4971473720563, 46.33762250779799],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"S\\xE2ntana\",\n          \"id\": \"AR.S\\xE2ntana\",\n          \"name\": \"S\\xE2ntana\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"139\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.418727272133577, 46.416109061665345],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Com\\u0103ne\\u0219ti\",\n          \"id\": \"BC.Com\\u0103ne\\u0219ti\",\n          \"name\": \"Com\\u0103ne\\u0219ti\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"140\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.83993917257784, 46.378762851189094],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Ocna Mure\\u0219\",\n          \"id\": \"AB.Ocna Mure\\u0219\",\n          \"name\": \"Ocna Mure\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"141\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.885445572336423, 46.4172037059755],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"S\\xE2ngeorgiu de P\\u0103dure\",\n          \"id\": \"MS.S\\xE2ngeorgiu de P\\u0103dure\",\n          \"name\": \"S\\xE2ngeorgiu de P\\u0103dure\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"142\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.278425936449043, 46.338530006558045],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Curtici\",\n          \"id\": \"AR.Curtici\",\n          \"name\": \"Curtici\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"143\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.22007833187643, 46.44125954462447],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Iernut\",\n          \"id\": \"MS.Iernut\",\n          \"name\": \"Iernut\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"144\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.042838272695754, 46.40552453888173],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"C\\xEEmpeni\",\n          \"id\": \"AB.C\\xEEmpeni\",\n          \"name\": \"C\\xEEmpeni\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"145\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.45747109606758, 46.469697669102885],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Va\\u0219c\\u0103u\",\n          \"id\": \"BH.Va\\u0219c\\u0103u\",\n          \"name\": \"Va\\u0219c\\u0103u\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"146\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.432387575809226, 46.462937705761995],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ungheni\",\n          \"id\": \"MS.Ungheni\",\n          \"name\": \"Ungheni\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"147\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.62177794821604, 46.49401097231148],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Nucet\",\n          \"id\": \"BH.Nucet\",\n          \"name\": \"Nucet\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"148\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.07243629149584, 46.49175001135669],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Ludu\\u0219\",\n          \"id\": \"MS.Ludu\\u0219\",\n          \"name\": \"Ludu\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"149\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.851311182841965, 46.42419536874765],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Ineu\",\n          \"id\": \"AR.Ineu\",\n          \"name\": \"Ineu\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"150\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.8801537202691, 46.53561326820924],\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"C\\xE2mpia Turzii\",\n          \"id\": \"CJ.C\\xE2mpia Turzii\",\n          \"name\": \"C\\xE2mpia Turzii\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"151\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.463780670542434, 46.54051516921128],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"\\u0218tei\",\n          \"id\": \"BH.\\u0218tei\",\n          \"name\": \"\\u0218tei\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"152\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.775400688625016, 46.54346133466291],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Miercurea Nirajului\",\n          \"id\": \"MS.Miercurea Nirajului\",\n          \"name\": \"Miercurea Nirajului\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"153\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.515551777643907, 46.50303856576373],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Chi\\u0219ineu-Cri\\u0219\",\n          \"id\": \"AR.Chi\\u0219ineu-Cri\\u0219\",\n          \"name\": \"Chi\\u0219ineu-Cri\\u0219\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"154\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.801939392085718, 46.66187128450954],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"B\\u0103lan\",\n          \"id\": \"HR.B\\u0103lan\",\n          \"name\": \"B\\u0103lan\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"155\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.12309906078966, 46.632422780051016],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sovata\",\n          \"id\": \"MS.Sovata\",\n          \"name\": \"Sovata\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"156\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.730355806371904, 46.65088279355786],\n        \"properties\": {\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Vaslui\",\n          \"id\": \"VS.Vaslui\",\n          \"name\": \"Vaslui\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"157\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.35136887670421, 46.68238494595452],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Beiu\\u0219\",\n          \"id\": \"BH.Beiu\\u0219\",\n          \"name\": \"Beiu\\u0219\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"158\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.703750418501308, 46.735897996497634],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Buhu\\u0219i\",\n          \"id\": \"BC.Buhu\\u0219i\",\n          \"name\": \"Buhu\\u0219i\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"159\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.152737749970736, 46.746587442147785],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Sarma\\u0219u\",\n          \"id\": \"MS.Sarma\\u0219u\",\n          \"name\": \"Sarma\\u0219u\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"160\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.685090616467427, 46.762334547710495],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Gheorgheni\",\n          \"id\": \"HR.Gheorgheni\",\n          \"name\": \"Gheorgheni\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"161\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.47422700127831, 46.83533950045046],\n        \"properties\": {\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Negre\\u0219ti\",\n          \"id\": \"VS.Negre\\u0219ti\",\n          \"name\": \"Negre\\u0219ti\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"162\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.603435425372197, 46.798098761153064],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Salonta\",\n          \"id\": \"BH.Salonta\",\n          \"name\": \"Salonta\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"163\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.02085851010875, 46.88067575985899],\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Huedin\",\n          \"id\": \"CJ.Huedin\",\n          \"name\": \"Huedin\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"164\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.058692795310613, 46.95527988772557],\n        \"properties\": {\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Bicaz\",\n          \"id\": \"NT.Bicaz\",\n          \"name\": \"Bicaz\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"165\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.882409151703108, 47.007462403140046],\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Gherla\",\n          \"id\": \"CJ.Gherla\",\n          \"name\": \"Gherla\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"166\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.351374680475917, 46.99706349154376],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Topli\\u021Ba\",\n          \"id\": \"HR.Topli\\u021Ba\",\n          \"name\": \"Topli\\u021Ba\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"167\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.91778116862209, 47.0652969028418],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Oradea\",\n          \"id\": \"BH.Oradea\",\n          \"name\": \"Oradea\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"168\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.418232201203583, 47.096143986527885],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Ale\\u0219d\",\n          \"id\": \"BH.Ale\\u0219d\",\n          \"name\": \"Ale\\u0219d\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"169\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.173389466693095, 47.164617196761654],\n        \"properties\": {\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Beclean\",\n          \"id\": \"BN.Beclean\",\n          \"name\": \"Beclean\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"170\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.067241671645167, 47.18297751914965],\n        \"properties\": {\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Zal\\u0103u\",\n          \"id\": \"SJ.Zal\\u0103u\",\n          \"name\": \"Zal\\u0103u\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"171\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.779171271607495, 47.2339819406156],\n        \"properties\": {\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"\\u0218imleu Silvaniei\",\n          \"id\": \"SJ.\\u0218imleu Silvaniei\",\n          \"name\": \"\\u0218imleu Silvaniei\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"172\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.619663850009236, 47.218105329669235],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Bro\\u0219teni\",\n          \"id\": \"SV.Bro\\u0219teni\",\n          \"name\": \"Bro\\u0219teni\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"173\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.408822530460608, 47.29293365999437],\n        \"properties\": {\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"N\\u0103s\\u0103ud\",\n          \"id\": \"BN.N\\u0103s\\u0103ud\",\n          \"name\": \"N\\u0103s\\u0103ud\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"174\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.3428304579002, 47.365712955854406],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vatra Dornei\",\n          \"id\": \"SV.Vatra Dornei\",\n          \"name\": \"Vatra Dornei\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"175\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.11000830724329, 47.33846666716817],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"S\\u0103cueni\",\n          \"id\": \"BH.S\\u0103cueni\",\n          \"name\": \"S\\u0103cueni\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"176\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.353761766387457, 47.382424392086094],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Marghita\",\n          \"id\": \"BH.Marghita\",\n          \"name\": \"Marghita\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"177\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.30865745747794, 47.461060220982475],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"F\\u0103lticeni\",\n          \"id\": \"SV.F\\u0103lticeni\",\n          \"name\": \"F\\u0103lticeni\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"178\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.27930364254945, 47.45941671280128],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Ulmeni\",\n          \"id\": \"MM.Ulmeni\",\n          \"name\": \"Ulmeni\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"179\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.6605604869737, 47.40773537749408],\n        \"properties\": {\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"S\\xEEngeorz-B\\u0103i\",\n          \"id\": \"BN.S\\xEEngeorz-B\\u0103i\",\n          \"name\": \"S\\xEEngeorz-B\\u0103i\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"180\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.864363049738717, 47.446546238698744],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"T\\xEErgu L\\u0103pu\\u0219\",\n          \"id\": \"MM.T\\xEErgu L\\u0103pu\\u0219\",\n          \"name\": \"T\\xEErgu L\\u0103pu\\u0219\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"181\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.503694161076474, 47.47498485534684],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"\\u0218omcuta Mare\",\n          \"id\": \"MM.\\u0218omcuta Mare\",\n          \"name\": \"\\u0218omcuta Mare\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"182\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.536322535044338, 47.51187263104674],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Liteni\",\n          \"id\": \"SV.Liteni\",\n          \"name\": \"Liteni\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"183\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.57447528191667, 47.50036511133171],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"C\\xE2mpulung Moldovenesc\",\n          \"id\": \"SV.C\\xE2mpulung Moldovenesc\",\n          \"name\": \"C\\xE2mpulung Moldovenesc\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"184\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.800381699705056, 47.50932894890019],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Frasin\",\n          \"id\": \"SV.Frasin\",\n          \"name\": \"Frasin\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"185\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.87260371143161, 47.52311647788132],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Gura Humorului\",\n          \"id\": \"SV.Gura Humorului\",\n          \"name\": \"Gura Humorului\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"186\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.946809600318993, 47.55143071149167],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Fl\\u0103m\\xE2nzi\",\n          \"id\": \"BT.Fl\\u0103m\\xE2nzi\",\n          \"name\": \"Fl\\u0103m\\xE2nzi\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"187\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.138229199739076, 47.53570650698037],\n        \"properties\": {\n          \"countyId\": \"BH\",\n          \"defaultLabel\": \"Valea lui Mihai\",\n          \"id\": \"BH.Valea lui Mihai\",\n          \"name\": \"Valea lui Mihai\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"188\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.26763436205688, 47.60005002451755],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Dragomire\\u0219ti\",\n          \"id\": \"MM.Dragomire\\u0219ti\",\n          \"name\": \"Dragomire\\u0219ti\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"189\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.35619839732383, 47.6345432539965],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"S\\u0103li\\u0219tea de Sus\",\n          \"id\": \"MM.S\\u0103li\\u0219tea de Sus\",\n          \"name\": \"S\\u0103li\\u0219tea de Sus\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"190\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.86103529267667, 47.658037320937595],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Cavnic\",\n          \"id\": \"MM.Cavnic\",\n          \"name\": \"Cavnic\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"191\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.26200531291448, 47.666034999568105],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Suceava\",\n          \"id\": \"SV.Suceava\",\n          \"name\": \"Suceava\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"192\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.80760762864541, 47.65599742651883],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Bor\\u0219a\",\n          \"id\": \"MM.Bor\\u0219a\",\n          \"name\": \"Bor\\u0219a\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"193\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.82013921234194, 47.71038431137076],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Solca\",\n          \"id\": \"SV.Solca\",\n          \"name\": \"Solca\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"194\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.708218588550594, 47.677639677553906],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Baia Sprie\",\n          \"id\": \"MM.Baia Sprie\",\n          \"name\": \"Baia Sprie\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"195\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.995525555521716, 47.714063701174226],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Cajvana\",\n          \"id\": \"SV.Cajvana\",\n          \"name\": \"Cajvana\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"196\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.677916695587076, 47.74336570396727],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Boto\\u0219ani\",\n          \"id\": \"BT.Boto\\u0219ani\",\n          \"name\": \"Boto\\u0219ani\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"197\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.450505574398942, 47.767731096084425],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Bucecea\",\n          \"id\": \"BT.Bucecea\",\n          \"name\": \"Bucecea\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"198\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.997725691158067, 47.78833230212716],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Mili\\u0219\\u0103u\\u021Bi\",\n          \"id\": \"SV.Mili\\u0219\\u0103u\\u021Bi\",\n          \"name\": \"Mili\\u0219\\u0103u\\u021Bi\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"199\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.627912559534536, 47.75829846713962],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Vi\\u0219eu de Sus\",\n          \"id\": \"MM.Vi\\u0219eu de Sus\",\n          \"name\": \"Vi\\u0219eu de Sus\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"200\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.190082667081633, 47.78960304570313],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"\\u0218tef\\u0103ne\\u0219ti\",\n          \"id\": \"BT.\\u0218tef\\u0103ne\\u0219ti\",\n          \"name\": \"\\u0218tef\\u0103ne\\u0219ti\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"201\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.932042765469408, 47.845431044339584],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"R\\u0103d\\u0103u\\u021Bi\",\n          \"id\": \"SV.R\\u0103d\\u0103u\\u021Bi\",\n          \"name\": \"R\\u0103d\\u0103u\\u021Bi\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"202\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.864869527461863, 47.966460821147216],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"S\\u0103veni\",\n          \"id\": \"BT.S\\u0103veni\",\n          \"name\": \"S\\u0103veni\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"203\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.419704260944282, 47.976920960830675],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Dorohoi\",\n          \"id\": \"BT.Dorohoi\",\n          \"name\": \"Dorohoi\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"204\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.614170099325424, 48.175451257078215],\n        \"properties\": {\n          \"countyId\": \"BT\",\n          \"defaultLabel\": \"Darabani\",\n          \"id\": \"BT.Darabani\",\n          \"name\": \"Darabani\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"205\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.657287481752192, 47.927930733876536],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Vicovu de Sus\",\n          \"id\": \"SV.Vicovu de Sus\",\n          \"name\": \"Vicovu de Sus\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"206\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.136505235311382, 46.398126886601794],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Sebi\\u0219\",\n          \"id\": \"AR.Sebi\\u0219\",\n          \"name\": \"Sebi\\u0219\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"207\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.08507647797453, 46.67375309626043],\n        \"properties\": {\n          \"countyId\": \"VS\",\n          \"defaultLabel\": \"Hu\\u0219i\",\n          \"id\": \"VS.Hu\\u0219i\",\n          \"name\": \"Hu\\u0219i\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"208\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.558013643936516, 46.543633977320766],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"T\\xEErgu Mure\\u0219\",\n          \"id\": \"MS.T\\xEErgu Mure\\u0219\",\n          \"name\": \"T\\xEErgu Mure\\u0219\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"209\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.24036829735606, 47.26731598697432],\n        \"properties\": {\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Jibou\",\n          \"id\": \"SJ.Jibou\",\n          \"name\": \"Jibou\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"210\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.282661401362983, 46.33105815005652],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"T\\xE2rn\\u0103veni\",\n          \"id\": \"MS.T\\xE2rn\\u0103veni\",\n          \"name\": \"T\\xE2rn\\u0103veni\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"211\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.543033189900434, 46.96735331396198],\n        \"properties\": {\n          \"countyId\": \"HR\",\n          \"defaultLabel\": \"Borsec\",\n          \"id\": \"HR.Borsec\",\n          \"name\": \"Borsec\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"212\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.114712135586053, 45.89955494340409],\n        \"properties\": {\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"Panciu\",\n          \"id\": \"VN.Panciu\",\n          \"name\": \"Panciu\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"213\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.655107829018764, 45.24249695745369],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Novaci\",\n          \"id\": \"GJ.Novaci\",\n          \"name\": \"Novaci\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"214\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.528562962354123, 45.413501223131334],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bu\\u0219teni\",\n          \"id\": \"PH.Bu\\u0219teni\",\n          \"name\": \"Bu\\u0219teni\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"215\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.46879957868776, 45.54094812049123],\n        \"properties\": {\n          \"countyId\": \"BV\",\n          \"defaultLabel\": \"R\\xE2\\u0219nov\",\n          \"id\": \"BV.R\\xE2\\u0219nov\",\n          \"name\": \"R\\xE2\\u0219nov\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"216\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.137262236314438, 45.798424917964965],\n        \"properties\": {\n          \"countyId\": \"SB\",\n          \"defaultLabel\": \"Sibiu\",\n          \"id\": \"SB.Sibiu\",\n          \"name\": \"Sibiu\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"217\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.01468710262444, 44.932500999072495],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Ploie\\u0219ti\",\n          \"id\": \"PH.Ploie\\u0219ti\",\n          \"name\": \"Ploie\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"218\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.050298947266796, 45.02841981649018],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Bolde\\u0219ti-Sc\\u0103eni\",\n          \"id\": \"PH.Bolde\\u0219ti-Sc\\u0103eni\",\n          \"name\": \"Bolde\\u0219ti-Sc\\u0103eni\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"219\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [21.69871454728875, 46.07137700543334],\n        \"properties\": {\n          \"countyId\": \"AR\",\n          \"defaultLabel\": \"Lipova\",\n          \"id\": \"AR.Lipova\",\n          \"name\": \"Lipova\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"220\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.53891468792113, 46.85607955694817],\n        \"properties\": {\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Roznov\",\n          \"id\": \"NT.Roznov\",\n          \"name\": \"Roznov\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"221\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.164220743735797, 47.408903938846684],\n        \"properties\": {\n          \"countyId\": \"SJ\",\n          \"defaultLabel\": \"Cehu Silvaniei\",\n          \"id\": \"SJ.Cehu Silvaniei\",\n          \"name\": \"Cehu Silvaniei\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"222\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.416348681548524, 45.84534576656593],\n        \"properties\": {\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Tecuci\",\n          \"id\": \"GL.Tecuci\",\n          \"name\": \"Tecuci\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"223\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.860858299459096, 46.0923627569213],\n        \"properties\": {\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"Bere\\u0219ti\",\n          \"id\": \"GL.Bere\\u0219ti\",\n          \"name\": \"Bere\\u0219ti\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"224\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.59160244881205, 46.059239838298836],\n        \"properties\": {\n          \"countyId\": \"CV\",\n          \"defaultLabel\": \"Baraolt\",\n          \"id\": \"CV.Baraolt\",\n          \"name\": \"Baraolt\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"225\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.87735358147291, 44.45816695065578],\n        \"properties\": {\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Lehliu-Gar\\u0103\",\n          \"id\": \"CL.Lehliu-Gar\\u0103\",\n          \"name\": \"Lehliu-Gar\\u0103\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"226\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.438504467438523, 44.251842653525756],\n        \"properties\": {\n          \"countyId\": \"CL\",\n          \"defaultLabel\": \"Bude\\u0219ti\",\n          \"id\": \"CL.Bude\\u0219ti\",\n          \"name\": \"Bude\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"227\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.37760564231918, 44.59705036359471],\n        \"properties\": {\n          \"countyId\": \"IL\",\n          \"defaultLabel\": \"Slobozia\",\n          \"id\": \"IL.Slobozia\",\n          \"name\": \"Slobozia\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"228\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.4918436375679, 45.13119736182137],\n        \"properties\": {\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Ianca\",\n          \"id\": \"BR.Ianca\",\n          \"name\": \"Ianca\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"229\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.287939161939757, 47.7563101396768],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Seini\",\n          \"id\": \"MM.Seini\",\n          \"name\": \"Seini\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"230\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.969641791753546, 44.49271133284296],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Chitila\",\n          \"id\": \"IF.Chitila\",\n          \"name\": \"Chitila\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"231\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.880589708860636, 45.76170224611917],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Hunedoara\",\n          \"id\": \"HD.Hunedoara\",\n          \"name\": \"Hunedoara\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"232\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.45288214032058, 45.009512238682476],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Mizil\",\n          \"id\": \"PH.Mizil\",\n          \"name\": \"Mizil\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"233\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.92984430444068, 45.87621503268264],\n        \"properties\": {\n          \"countyId\": \"GL\",\n          \"defaultLabel\": \"T\\xEErgu Bujor\",\n          \"id\": \"GL.T\\xEErgu Bujor\",\n          \"name\": \"T\\xEErgu Bujor\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"234\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.945756805128905, 46.934152398080776],\n        \"properties\": {\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Roman\",\n          \"id\": \"NT.Roman\",\n          \"name\": \"Roman\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"235\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.36956799081745, 47.203281949834526],\n        \"properties\": {\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"T\\xEErgu Neam\\u021B\",\n          \"id\": \"NT.T\\xEErgu Neam\\u021B\",\n          \"name\": \"T\\xEErgu Neam\\u021B\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"236\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.35536912944886, 47.64492576747175],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Salcea\",\n          \"id\": \"SV.Salcea\",\n          \"name\": \"Salcea\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"237\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.059164162806695, 47.94811153027114],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Siret\",\n          \"id\": \"SV.Siret\",\n          \"name\": \"Siret\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"238\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.686696844373277, 46.771165904783935],\n        \"properties\": {\n          \"countyId\": \"MS\",\n          \"defaultLabel\": \"Reghin\",\n          \"id\": \"MS.Reghin\",\n          \"name\": \"Reghin\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"239\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.621549493433385, 47.42002484343238],\n        \"properties\": {\n          \"countyId\": \"SV\",\n          \"defaultLabel\": \"Dolhasca\",\n          \"id\": \"SV.Dolhasca\",\n          \"name\": \"Dolhasca\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"240\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.49503905768954, 47.14244485464187],\n        \"properties\": {\n          \"countyId\": \"BN\",\n          \"defaultLabel\": \"Bistri\\u021Ba\",\n          \"id\": \"BN.Bistri\\u021Ba\",\n          \"name\": \"Bistri\\u021Ba\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"241\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.077269599658536, 45.404472801801916],\n        \"properties\": {\n          \"countyId\": \"BZ\",\n          \"defaultLabel\": \"R\\xE2mnicu S\\u0103rat\",\n          \"id\": \"BZ.R\\xE2mnicu S\\u0103rat\",\n          \"name\": \"R\\xE2mnicu S\\u0103rat\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"242\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.94032431371913, 44.8746501145576],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"\\u0218tef\\u0103ne\\u0219ti\",\n          \"id\": \"AG.\\u0218tef\\u0103ne\\u0219ti\",\n          \"name\": \"\\u0218tef\\u0103ne\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"243\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.8648314088395, 44.8570717971894],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"Pite\\u0219ti\",\n          \"id\": \"AG.Pite\\u0219ti\",\n          \"name\": \"Pite\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"244\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.803707534627293, 46.13498787022137],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Brad\",\n          \"id\": \"HD.Brad\",\n          \"name\": \"Brad\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"245\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.365176430389578, 46.92343145583906],\n        \"properties\": {\n          \"countyId\": \"NT\",\n          \"defaultLabel\": \"Piatra-Neam\\u021B\",\n          \"id\": \"NT.Piatra-Neam\\u021B\",\n          \"name\": \"Piatra-Neam\\u021B\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"246\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.47004410555001, 47.66753363786748],\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Carei\",\n          \"id\": \"SM.Carei\",\n          \"name\": \"Carei\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"247\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.475736677167532, 47.84604401475776],\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Negre\\u0219ti-Oa\\u0219\",\n          \"id\": \"SM.Negre\\u0219ti-Oa\\u0219\",\n          \"name\": \"Negre\\u0219ti-Oa\\u0219\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"248\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.589759328728285, 44.655209593289555],\n        \"properties\": {\n          \"countyId\": \"MH\",\n          \"defaultLabel\": \"Drobeta-Turnu Severin\",\n          \"id\": \"MH.Drobeta-Turnu Severin\",\n          \"name\": \"Drobeta-Turnu Severin\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"249\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.849210297257944, 47.785924845182336],\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Satu Mare\",\n          \"id\": \"SM.Satu Mare\",\n          \"name\": \"Satu Mare\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"250\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.599386278822188, 47.48608765523928],\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"T\\u0103\\u0219nad\",\n          \"id\": \"SM.T\\u0103\\u0219nad\",\n          \"name\": \"T\\u0103\\u0219nad\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"251\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.12284321707017, 47.86644124553219],\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Livada\",\n          \"id\": \"SM.Livada\",\n          \"name\": \"Livada\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"252\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.87478684271509, 47.643556490930614],\n        \"properties\": {\n          \"countyId\": \"SM\",\n          \"defaultLabel\": \"Ardud\",\n          \"id\": \"SM.Ardud\",\n          \"name\": \"Ardud\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"253\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.915449792691188, 44.30782452538805],\n        \"properties\": {\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Mih\\u0103ile\\u0219ti\",\n          \"id\": \"GR.Mih\\u0103ile\\u0219ti\",\n          \"name\": \"Mih\\u0103ile\\u0219ti\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"254\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.076776096768704, 44.558972993534375],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Otopeni\",\n          \"id\": \"IF.Otopeni\",\n          \"name\": \"Otopeni\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"255\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.152613189646356, 44.5062954312575],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Voluntari\",\n          \"id\": \"IF.Voluntari\",\n          \"name\": \"Voluntari\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"256\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.269409727601474, 45.09693897252051],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Ocnele Mari\",\n          \"id\": \"VL.Ocnele Mari\",\n          \"name\": \"Ocnele Mari\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"257\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.345040824094244, 45.090373715975105],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"R\\xE2mnicu V\\xE2lcea\",\n          \"id\": \"VL.R\\xE2mnicu V\\xE2lcea\",\n          \"name\": \"R\\xE2mnicu V\\xE2lcea\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"258\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.956145122389373, 44.7143218206989],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"H\\xE2r\\u0219ova\",\n          \"id\": \"CT.H\\xE2r\\u0219ova\",\n          \"name\": \"H\\xE2r\\u0219ova\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"259\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.713118876998443, 44.05777482699027],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"B\\u0103neasa\",\n          \"id\": \"CT.B\\u0103neasa\",\n          \"name\": \"B\\u0103neasa\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"260\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.261606739562982, 47.21351560241081],\n        \"properties\": {\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Podu Iloaiei\",\n          \"id\": \"IS.Podu Iloaiei\",\n          \"name\": \"Podu Iloaiei\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"261\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.720568802013663, 47.24934886787894],\n        \"properties\": {\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Pa\\u0219cani\",\n          \"id\": \"IS.Pa\\u0219cani\",\n          \"name\": \"Pa\\u0219cani\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"262\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.587328822870152, 47.162745942173366],\n        \"properties\": {\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"Ia\\u0219i\",\n          \"id\": \"IS.Ia\\u0219i\",\n          \"name\": \"Ia\\u0219i\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"263\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.900139145079656, 47.429837398226844],\n        \"properties\": {\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"H\\xEErl\\u0103u\",\n          \"id\": \"IS.H\\xEErl\\u0103u\",\n          \"name\": \"H\\xEErl\\u0103u\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"264\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.634669180970494, 44.04936082283216],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Eforie\",\n          \"id\": \"CT.Eforie\",\n          \"name\": \"Eforie\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"265\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.380952502526004, 44.16626233798235],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Murfatlar\",\n          \"id\": \"CT.Murfatlar\",\n          \"name\": \"Murfatlar\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"266\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.280229637268622, 44.23781465366376],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Medgidia\",\n          \"id\": \"CT.Medgidia\",\n          \"name\": \"Medgidia\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"267\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.612043288146758, 44.331682649423044],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"N\\u0103vodari\",\n          \"id\": \"CT.N\\u0103vodari\",\n          \"name\": \"N\\u0103vodari\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"268\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.817429247053568, 45.15197972922493],\n        \"properties\": {\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Tulcea\",\n          \"id\": \"TL.Tulcea\",\n          \"name\": \"Tulcea\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"269\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.4507600378933, 45.252643380417524],\n        \"properties\": {\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Isaccea\",\n          \"id\": \"TL.Isaccea\",\n          \"name\": \"Isaccea\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"270\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.1408001010052, 45.246062509406784],\n        \"properties\": {\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"M\\u0103cin\",\n          \"id\": \"TL.M\\u0103cin\",\n          \"name\": \"M\\u0103cin\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"271\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.709485614770045, 44.88327025109222],\n        \"properties\": {\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Babadag\",\n          \"id\": \"TL.Babadag\",\n          \"name\": \"Babadag\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"272\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.61044618605222, 46.779260949749705],\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Cluj-Napoca\",\n          \"id\": \"CJ.Cluj-Napoca\",\n          \"name\": \"Cluj-Napoca\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"273\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [29.547525292108023, 45.13231255835441],\n        \"properties\": {\n          \"countyId\": \"TL\",\n          \"defaultLabel\": \"Sulina\",\n          \"id\": \"TL.Sulina\",\n          \"name\": \"Sulina\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"274\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.5553400296895, 46.067056498942726],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Alba Iulia\",\n          \"id\": \"AB.Alba Iulia\",\n          \"name\": \"Alba Iulia\",\n          \"region\": \"Centru\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"275\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.096754019432165, 44.35669454352576],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Bal\\u0219\",\n          \"id\": \"OT.Bal\\u0219\",\n          \"name\": \"Bal\\u0219\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"276\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.379781868705823, 44.431875634063395],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Slatina\",\n          \"id\": \"OT.Slatina\",\n          \"name\": \"Slatina\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"277\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.543679046371167, 44.57262686163596],\n        \"properties\": {\n          \"countyId\": \"OT\",\n          \"defaultLabel\": \"Scornice\\u0219ti\",\n          \"id\": \"OT.Scornice\\u0219ti\",\n          \"name\": \"Scornice\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"278\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.856346776022214, 47.90194301282686],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Sighetu Marma\\u021Biei\",\n          \"id\": \"MM.Sighetu Marma\\u021Biei\",\n          \"name\": \"Sighetu Marma\\u021Biei\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"279\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.261115535899872, 43.80193449607272],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Negru Vod\\u0103\",\n          \"id\": \"CT.Negru Vod\\u0103\",\n          \"name\": \"Negru Vod\\u0103\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"280\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.059874022856278, 44.3167996206714],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Cernavod\\u0103\",\n          \"id\": \"CT.Cernavod\\u0103\",\n          \"name\": \"Cernavod\\u0103\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"281\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.58447619926246, 44.03770716811146],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Techirghiol\",\n          \"id\": \"CT.Techirghiol\",\n          \"name\": \"Techirghiol\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"282\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.51703471215391, 44.255453815301664],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Ovidiu\",\n          \"id\": \"CT.Ovidiu\",\n          \"name\": \"Ovidiu\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"283\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.560381020828515, 43.841261328454685],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Mangalia\",\n          \"id\": \"CT.Mangalia\",\n          \"name\": \"Mangalia\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"284\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.91479762032631, 45.85690003563741],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Deva\",\n          \"id\": \"HD.Deva\",\n          \"name\": \"Deva\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"285\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.968727075107136, 44.06387933581356],\n        \"properties\": {\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Ro\\u0219iori de Vede\",\n          \"id\": \"TR.Ro\\u0219iori de Vede\",\n          \"name\": \"Ro\\u0219iori de Vede\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"286\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.20046015858782, 44.354826059859505],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Pope\\u0219ti Leordeni\",\n          \"id\": \"IF.Pope\\u0219ti Leordeni\",\n          \"name\": \"Pope\\u0219ti Leordeni\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"287\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.018903354554634, 44.34807217825097],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"M\\u0103gurele\",\n          \"id\": \"IF.M\\u0103gurele\",\n          \"name\": \"M\\u0103gurele\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"288\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.36482595683397, 46.33502199155376],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"D\\u0103rm\\u0103ne\\u0219ti\",\n          \"id\": \"BC.D\\u0103rm\\u0103ne\\u0219ti\",\n          \"name\": \"D\\u0103rm\\u0103ne\\u0219ti\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"289\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.782559702607116, 46.25884396628216],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"One\\u0219ti\",\n          \"id\": \"BC.One\\u0219ti\",\n          \"name\": \"One\\u0219ti\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"290\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.913465276309598, 46.55895841836207],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Bac\\u0103u\",\n          \"id\": \"BC.Bac\\u0103u\",\n          \"name\": \"Bac\\u0103u\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"291\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.469435236365307, 46.479803012677664],\n        \"properties\": {\n          \"countyId\": \"BC\",\n          \"defaultLabel\": \"Moine\\u0219ti\",\n          \"id\": \"BC.Moine\\u0219ti\",\n          \"name\": \"Moine\\u0219ti\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"292\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.04291478518975, 45.257851269332654],\n        \"properties\": {\n          \"countyId\": \"AG\",\n          \"defaultLabel\": \"C\\xE2mpulung\",\n          \"id\": \"AG.C\\xE2mpulung\",\n          \"name\": \"C\\xE2mpulung\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"293\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.15861781380729, 44.92464687896911],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Rovinari\",\n          \"id\": \"GJ.Rovinari\",\n          \"name\": \"Rovinari\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"294\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.20881312525574, 45.34548345267988],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Lupeni\",\n          \"id\": \"HD.Lupeni\",\n          \"name\": \"Lupeni\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"295\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.026897727225638, 45.3155032279734],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Uricani\",\n          \"id\": \"HD.Uricani\",\n          \"name\": \"Uricani\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"296\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.904650600835122, 45.121531516335835],\n        \"properties\": {\n          \"countyId\": \"GJ\",\n          \"defaultLabel\": \"Tismana\",\n          \"id\": \"GJ.Tismana\",\n          \"name\": \"Tismana\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"297\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [22.92472598194124, 45.63703563530927],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Ha\\u021Beg\",\n          \"id\": \"HD.Ha\\u021Beg\",\n          \"name\": \"Ha\\u021Beg\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"298\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.011145215932913, 45.85616570174135],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Simeria\",\n          \"id\": \"HD.Simeria\",\n          \"name\": \"Simeria\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"299\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.49718214798892, 45.46766907545435],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Petrila\",\n          \"id\": \"HD.Petrila\",\n          \"name\": \"Petrila\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"300\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.40087981267976, 45.41840889306093],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Petro\\u0219ani\",\n          \"id\": \"HD.Petro\\u0219ani\",\n          \"name\": \"Petro\\u0219ani\",\n          \"region\": \"Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"301\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.203671022329445, 45.94817689312616],\n        \"properties\": {\n          \"countyId\": \"HD\",\n          \"defaultLabel\": \"Geoagiu\",\n          \"id\": \"HD.Geoagiu\",\n          \"name\": \"Geoagiu\",\n          \"region\": \"Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"302\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.428666006071115, 45.732172194107385],\n        \"properties\": {\n          \"countyId\": \"AB\",\n          \"defaultLabel\": \"Cugir\",\n          \"id\": \"AB.Cugir\",\n          \"name\": \"Cugir\",\n          \"region\": \"Centru\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"303\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.481065999636915, 47.719249985079436],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"T\\u0103u\\u021Bii-M\\u0103gher\\u0103u\\u0219\",\n          \"id\": \"MM.T\\u0103u\\u021Bii-M\\u0103gher\\u0103u\\u0219\",\n          \"name\": \"T\\u0103u\\u021Bii-M\\u0103gher\\u0103u\\u0219\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"304\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.607595630312463, 47.73631431022704],\n        \"properties\": {\n          \"countyId\": \"MM\",\n          \"defaultLabel\": \"Baia Mare\",\n          \"id\": \"MM.Baia Mare\",\n          \"name\": \"Baia Mare\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"305\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.229547152852845, 45.892826102627524],\n        \"properties\": {\n          \"countyId\": \"VN\",\n          \"defaultLabel\": \"M\\u0103r\\u0103\\u0219e\\u0219ti\",\n          \"id\": \"VN.M\\u0103r\\u0103\\u0219e\\u0219ti\",\n          \"name\": \"M\\u0103r\\u0103\\u0219e\\u0219ti\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"306\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.8183928241915, 47.133917479915645],\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Dej\",\n          \"id\": \"CJ.Dej\",\n          \"name\": \"Dej\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"307\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [23.814421310353364, 46.581687486720874],\n        \"properties\": {\n          \"countyId\": \"CJ\",\n          \"defaultLabel\": \"Turda\",\n          \"id\": \"CJ.Turda\",\n          \"name\": \"Turda\",\n          \"region\": \"Nord-Vest\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"308\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.26722647683704, 44.450805487156295],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Pantelimon\",\n          \"id\": \"IF.Pantelimon\",\n          \"name\": \"Pantelimon\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"309\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.00066479514358, 47.223024134015056],\n        \"properties\": {\n          \"countyId\": \"IS\",\n          \"defaultLabel\": \"T\\xE2rgu Frumos\",\n          \"id\": \"IS.T\\xE2rgu Frumos\",\n          \"name\": \"T\\xE2rgu Frumos\",\n          \"region\": \"Nord-Est\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"310\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [27.955037744054966, 45.281297542921976],\n        \"properties\": {\n          \"countyId\": \"BR\",\n          \"defaultLabel\": \"Br\\u0103ila\",\n          \"id\": \"BR.Br\\u0103ila\",\n          \"name\": \"Br\\u0103ila\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"311\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.20607390239364, 45.38519647995423],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"Brezoi\",\n          \"id\": \"VL.Brezoi\",\n          \"name\": \"Brezoi\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"312\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.16943539556949, 45.23959843272462],\n        \"properties\": {\n          \"countyId\": \"VL\",\n          \"defaultLabel\": \"B\\u0103ile Ol\\u0103ne\\u0219ti\",\n          \"id\": \"VL.B\\u0103ile Ol\\u0103ne\\u0219ti\",\n          \"name\": \"B\\u0103ile Ol\\u0103ne\\u0219ti\",\n          \"region\": \"Sud-Vest\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"313\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [24.882754461321323, 43.76552544911566],\n        \"properties\": {\n          \"countyId\": \"TR\",\n          \"defaultLabel\": \"Turnu Magurele\",\n          \"id\": \"TR.Turnu Magurele\",\n          \"name\": \"Turnu Magurele\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu, altul dec\\xE2t re\\u0219edin\\u021Ba de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"314\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.65217058279986, 45.188927651688324],\n        \"properties\": {\n          \"countyId\": \"PH\",\n          \"defaultLabel\": \"Breaza\",\n          \"id\": \"PH.Breaza\",\n          \"name\": \"Breaza\",\n          \"region\": \"Sud\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"315\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.95935519715863, 43.89630984342935],\n        \"properties\": {\n          \"countyId\": \"GR\",\n          \"defaultLabel\": \"Giurgiu\",\n          \"id\": \"GR.Giurgiu\",\n          \"name\": \"Giurgiu\",\n          \"region\": \"Sud\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"316\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [28.59507842067319, 44.18976609386983],\n        \"properties\": {\n          \"countyId\": \"CT\",\n          \"defaultLabel\": \"Constan\\u021Ba\",\n          \"id\": \"CT.Constan\\u021Ba\",\n          \"name\": \"Constan\\u021Ba\",\n          \"region\": \"Sud-Est\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"317\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [25.98409033760165, 44.38026202398085],\n        \"properties\": {\n          \"countyId\": \"IF\",\n          \"defaultLabel\": \"Bragadiru\",\n          \"id\": \"IF.Bragadiru\",\n          \"name\": \"Bragadiru\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Ora\\u0219\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"318\"\n      }, {\n        \"type\": \"Point\",\n        \"coordinates\": [26.08785271402846, 44.441870021564156],\n        \"properties\": {\n          \"countyId\": \"B\",\n          \"defaultLabel\": \"Bucure\\u0219ti\",\n          \"id\": \"B.Bucure\\u0219ti\",\n          \"name\": \"Bucure\\u0219ti\",\n          \"region\": \"Bucure\\u0219ti-Ilfov\",\n          \"type\": \"Municipiu re\\u0219edin\\u021B\\u0103 de jude\\u021B\",\n          \"version\": \"2017-09-27\"\n        },\n        \"id\": \"319\"\n      }]\n    }\n  }\n};\n\nfunction identity$8(x) {\n  return x;\n}\n\nfunction transform$1(transform) {\n  if (transform == null) return identity$8;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function (input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2,\n        n = input.length,\n        output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n\n    while (j < n) {\n      output[j] = input[j], ++j;\n    }\n\n    return output;\n  };\n}\n\nfunction reverse(array, n) {\n  var t,\n      j = array.length,\n      i = j - n;\n\n  while (i < --j) {\n    t = array[i], array[i++] = array[j], array[j] = t;\n  }\n}\n\nfunction feature(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\" ? {\n    type: \"FeatureCollection\",\n    features: o.geometries.map(function (o) {\n      return feature$1(topology, o);\n    })\n  } : feature$1(topology, o);\n}\n\nfunction feature$1(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object$3(topology, o);\n  return id == null && bbox == null ? {\n    type: \"Feature\",\n    properties: properties,\n    geometry: geometry\n  } : bbox == null ? {\n    type: \"Feature\",\n    id: id,\n    properties: properties,\n    geometry: geometry\n  } : {\n    type: \"Feature\",\n    id: id,\n    bbox: bbox,\n    properties: properties,\n    geometry: geometry\n  };\n}\n\nfunction object$3(topology, o) {\n  var transformPoint = transform$1(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n\n    for (var i = 0, n = arcs.length; i < n; ++i) {\n      arc(arcs[i], points);\n    }\n\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n\n    while (points.length < 4) {\n      points.push(points[0]);\n    } // This may happen if an arc has only two points.\n\n\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type,\n        coordinates;\n\n    switch (type) {\n      case \"GeometryCollection\":\n        return {\n          type: type,\n          geometries: o.geometries.map(geometry)\n        };\n\n      case \"Point\":\n        coordinates = point(o.coordinates);\n        break;\n\n      case \"MultiPoint\":\n        coordinates = o.coordinates.map(point);\n        break;\n\n      case \"LineString\":\n        coordinates = line(o.arcs);\n        break;\n\n      case \"MultiLineString\":\n        coordinates = o.arcs.map(line);\n        break;\n\n      case \"Polygon\":\n        coordinates = polygon(o.arcs);\n        break;\n\n      case \"MultiPolygon\":\n        coordinates = o.arcs.map(polygon);\n        break;\n\n      default:\n        return null;\n    }\n\n    return {\n      type: type,\n      coordinates: coordinates\n    };\n  }\n\n  return geometry(o);\n}\n\nvar counties = feature(countiesTopojson, countiesTopojson.objects[\"romania.counties\"]);\nvar atus = feature(atusTopojson, atusTopojson.objects[\"romania.atus\"]);\nvar cities = feature(citiesTopojson, citiesTopojson.objects[\"romania.cities\"]);\n\nvar MapOfRomania = function MapOfRomania(props) {\n  var pointNames = props.pointNames,\n      pointTypes = props.pointTypes;\n  var pointGeoData = filterPoints(cities.features, pointNames, pointTypes);\n  return React.createElement(BaseMap$1, _extends({\n    primaryGeoData: counties,\n    pointGeoData: pointGeoData\n  }, props));\n};\n\nMapOfRomania.propTypes = {\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  tooltip: PropTypes.func\n};\nMapOfRomania.defaultProps = {\n  minHeight: 300,\n  tooltip: DefaultTooltip\n};\n\nvar MapOfRomanianCounty = function MapOfRomanianCounty(props) {\n  var pointNames = props.pointNames,\n      pointTypes = props.pointTypes,\n      countyId = props.countyId;\n  var pointGeoData = filterPoints(cities.features, pointNames, pointTypes, countyId);\n  var countyGeoData = {\n    features: atus.features.filter(function (atu) {\n      return atu.properties.countyId === props.countyId;\n    }),\n    type: \"FeatureCollection\"\n  };\n  return React.createElement(BaseMap$1, _extends({\n    primaryGeoData: countyGeoData,\n    pointGeoData: pointGeoData\n  }, props));\n};\n\nMapOfRomanianCounty.propTypes = {\n  onClick: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  tooltip: PropTypes.func\n};\nMapOfRomanianCounty.defaultProps = {\n  minHeight: 300,\n  tooltip: DefaultTooltip\n};\nexport default MapOfRomania;\nexport { MapOfRomania, MapOfRomanianCounty };","import {\n  interpolateReds,\n  schemeReds,\n  interpolateBlues,\n  schemeBlues,\n  interpolateBrBG,\n  schemeBrBG,\n  interpolatePRGn,\n  schemePRGn,\n  interpolateRdGy,\n  schemeRdGy\n} from \"d3-scale-chromatic\";\n\nimport { scaleSequentialQuantile, scaleQuantile } from \"d3-scale\";\n\nconst cityTypes = [\n  \"Municipiu reședință de județ\",\n  \"Municipiu, altul decât reședința de județ\",\n  \"Oraș\"\n];\n\nconst countyIds = [\n  \"AB\",\n  \"AG\",\n  \"AR\",\n  \"B\",\n  \"BC\",\n  \"BH\",\n  \"BN\",\n  \"BR\",\n  \"BT\",\n  \"BV\",\n  \"BZ\",\n  \"CJ\",\n  \"CL\",\n  \"CS\",\n  \"CT\",\n  \"CV\",\n  \"DB\",\n  \"DJ\",\n  \"GJ\",\n  \"GL\",\n  \"GR\",\n  \"HD\",\n  \"HR\",\n  \"IF\",\n  \"IL\",\n  \"IS\",\n  \"MH\",\n  \"MM\",\n  \"MS\",\n  \"NT\",\n  \"OT\",\n  \"PH\",\n  \"SB\",\n  \"SJ\",\n  \"SM\",\n  \"SV\",\n  \"TL\",\n  \"TM\",\n  \"TR\",\n  \"VL\",\n  \"VN\",\n  \"VS\"\n];\n\nconst cities = [\n  \"Adjud\",\n  \"Alba Iulia\",\n  \"Alexandria\",\n  \"Amara\",\n  \"Aninoasa\",\n  \"Arad\",\n  \"Bacău\",\n  \"Baia Mare\",\n  \"Bechet\",\n  \"Beclean\",\n  \"Beiuș\",\n  \"Berești\",\n  \"Bicaz\",\n  \"Bistrița\",\n  \"Bolintin-Vale\",\n  \"Botoșani\",\n  \"Brașov\",\n  \"Broșteni\",\n  \"Brăila\",\n  \"București\",\n  \"Buftea\",\n  \"Buzău\",\n  \"Bîrlad\",\n  \"Băile Tușnad\",\n  \"Bălcești\",\n  \"Calafat\",\n  \"Caracal\",\n  \"Caransebeș\",\n  \"Carei\",\n  \"Cluj-Napoca\",\n  \"Constanța\",\n  \"Corabia\",\n  \"Costești\",\n  \"Craiova\",\n  \"Curtea de Argeș\",\n  \"Câmpia Turzii\",\n  \"Câmpina\",\n  \"Călărași\",\n  \"Deta\",\n  \"Deva\",\n  \"Dorohoi\",\n  \"Drobeta-Turnu Severin\",\n  \"Drăgășani\",\n  \"Fetești\",\n  \"Flămânzi\",\n  \"Focșani\",\n  \"Fundulea\",\n  \"Galați\",\n  \"Giurgiu\",\n  \"Huedin\",\n  \"Hârșova\",\n  \"Iași\",\n  \"Isaccea\",\n  \"Lugoj\",\n  \"Medgidia\",\n  \"Mediaș\",\n  \"Miercurea Ciuc\",\n  \"Moldova Nouă\",\n  \"Moreni\",\n  \"Motru\",\n  \"Murgeni\",\n  \"Negrești-Oaș\",\n  \"Nădlac\",\n  \"Odobești\",\n  \"Odorheiu Secuiesc\",\n  \"Oltenița\",\n  \"Onești\",\n  \"Oradea\",\n  \"Orșova\",\n  \"Pașcani\",\n  \"Piatra-Neamț\",\n  \"Pitești\",\n  \"Ploiești\",\n  \"Podu Iloaiei\",\n  \"Pogoanele\",\n  \"Predeal\",\n  \"Reșița\",\n  \"Roman\",\n  \"Roșiori de Vede\",\n  \"Râmnicu Sărat\",\n  \"Râmnicu Vâlcea\",\n  \"Satu Mare\",\n  \"Sebeș\",\n  \"Sfîntu Gheorghe\",\n  \"Sibiu\",\n  \"Sighetu Marmației\",\n  \"Sighișoara\",\n  \"Slatina\",\n  \"Slobozia\",\n  \"Slănic-Moldova\",\n  \"Suceava\",\n  \"Sângeorgiu de Pădure\",\n  \"Săcele\",\n  \"Tecuci\",\n  \"Timișoara\",\n  \"Titu\",\n  \"Tulcea\",\n  \"Turceni\",\n  \"Târgu Secuiesc\",\n  \"Tîrgoviște\",\n  \"Tîrgu Jiu\",\n  \"Tîrgu Mureș\",\n  \"Tălmaciu\",\n  \"Ulmeni\",\n  \"Urlați\",\n  \"Vaslui\",\n  \"Vatra Dornei\",\n  \"Vașcău\",\n  \"Vulcan\",\n  \"Vînju Mare\",\n  \"Zalău\",\n  \"Zimnicea\",\n  \"Zlatna\",\n  \"Însurăței\",\n  \"Întorsura Buzăului\",\n  \"Șimleu Silvaniei\"\n];\n\nconst colors = [\n  { label: \"Reds\", interpolator: interpolateReds, scheme: schemeReds[9] },\n  { label: \"Blues\", interpolator: interpolateBlues, scheme: schemeBlues[9] },\n  { label: \"BrBG\", interpolator: interpolateBrBG, scheme: schemeBrBG[9] },\n  { label: \"PrGN\", interpolator: interpolatePRGn, scheme: schemePRGn[9] },\n  { label: \"RdGy\", interpolator: interpolateRdGy, scheme: schemeRdGy[9] }\n];\n\nconst scales = [\n  { label: \"Quantile\", scale: scaleQuantile, colorType: \"scheme\" },\n  {\n    label: \"Sequential Quantile\",\n    scale: scaleSequentialQuantile,\n    colorType: \"interpolator\"\n  }\n];\n\nexport { scales, colors, countyIds, cities, cityTypes };\n","import React from \"react\"\n\nimport Grid from \"@material-ui/core/Grid\"\nimport Box from \"@material-ui/core/Box\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport FormGroup from \"@material-ui/core/FormGroup\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport Checkbox from \"@material-ui/core/Checkbox\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Select from \"@material-ui/core/Select\"\nimport Input from \"@material-ui/core/Input\"\nimport InputLabel from \"@material-ui/core/InputLabel\"\nimport MenuItem from \"@material-ui/core/MenuItem\"\nimport { makeStyles } from \"@material-ui/core/styles\"\n\nimport {\n  scales,\n  colors,\n  countyIds,\n  cities,\n  cityTypes,\n} from \"../utils/mapConfigOptions\"\n\nconst useStyles = makeStyles({\n  formControl: {\n    marginTop: \"1em\",\n  },\n})\n\nexport default function MapConfiguration(props) {\n  const classes = useStyles()\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <FormGroup>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"scale-select-label\">Scale type</InputLabel>\n            <Select\n              labelId=\"scale-select-label\"\n              onChange={props.handleInputChange(\"scale\")}\n              value={props.scale}\n            >\n              {scales.map(item => (\n                <MenuItem key={item.label} value={item}>\n                  {item.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"color-select-label\">Color scheme</InputLabel>\n            <Select\n              labelId=\"color-select-label\"\n              onChange={props.handleInputChange(\"color\")}\n              value={props.color}\n            >\n              {colors.map(item => (\n                <MenuItem key={item.label} value={item}>\n                  {item.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <Box mt={2} />\n          <FormControl>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={props.showLabels}\n                  onChange={props.handleCheckboxChange(\"showLabels\")}\n                  value={props.showLabels}\n                />\n              }\n              label=\"showLabels\"\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"select-labels-label\">Labels</InputLabel>\n            <Select\n              labelId=\"select-labels-label\"\n              id=\"select-labels\"\n              disabled={!props.showLabels}\n              multiple\n              value={props.labels}\n              onChange={props.handleInputChange(\"labels\")}\n              input={<Input />}\n              renderValue={value => (\n                <span>\n                  {value.length > 9\n                    ? `${value.slice(0, 10).join(\", \")}, ...`\n                    : `${value}`}\n                </span>\n              )}\n            >\n              {countyIds.map(id => (\n                <MenuItem key={id} value={id}>\n                  {id}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={props.showPoints}\n                  onChange={props.handleCheckboxChange(\"showPoints\")}\n                  value={true}\n                />\n              }\n              label=\"showPoints\"\n            />\n          </FormControl>\n          <FormControl>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  disabled={!props.showPoints}\n                  checked={props.showPointLabels}\n                  onChange={props.handleCheckboxChange(\"showPointLabels\")}\n                  value={true}\n                />\n              }\n              label=\"showPointLabels\"\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"select-point-names-label\">Point names</InputLabel>\n            <Select\n              labelId=\"select-point-names-label\"\n              id=\"select-point-names\"\n              disabled={!props.showPoints}\n              multiple\n              value={props.pointNames}\n              onChange={props.handleInputChange(\"pointNames\")}\n              input={<Input />}\n              renderValue={value => (\n                <span>\n                  {value.length > 3\n                    ? `${value.slice(0, 4).join(\", \")}, ...`\n                    : `${value}`}\n                </span>\n              )}\n            >\n              {cities.map(name => (\n                <MenuItem key={name} value={name}>\n                  {name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"select-point-types-label\">Point types</InputLabel>\n            <Select\n              labelId=\"select-point-types-label\"\n              id=\"select-point-types\"\n              disabled={!props.showPoints}\n              multiple\n              value={props.pointTypes}\n              onChange={props.handleInputChange(\"pointTypes\")}\n              input={<Input />}\n              renderValue={value => (\n                <span>\n                  {value.length > 1 ? `${value[0]}, ...` : `${value}`}\n                </span>\n              )}\n            >\n              {cityTypes.map(type => (\n                <MenuItem key={type} value={type}>\n                  {type}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </FormGroup>\n      </Grid>\n      <Box m={2} />\n      <Grid container justify=\"space-between\" alignItems=\"center\">\n        <Grid item xs style={{ marginRight: 10 }}>\n          <TextField\n            fullWidth\n            id=\"filled-number\"\n            label=\"MinWidth\"\n            type=\"number\"\n            variant=\"outlined\"\n            value={props.minWidth}\n            onChange={props.handleInputChange(\"minWidth\")}\n          />\n        </Grid>\n        <Grid item xs>\n          <TextField\n            fullWidth\n            id=\"filled-number\"\n            label=\"MinHeight\"\n            type=\"number\"\n            variant=\"outlined\"\n            value={props.minHeight}\n            onChange={props.handleInputChange(\"minHeight\")}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n","export default {\n  countyPopulationDataUrl: \"https://gist.githubusercontent.com/horatiubota/a8cc736f4c41106e272adc2287a90714/raw/3dcb97f0294f5595ee301617e9ad4fba6c7cca3e/numeromania_POP107A\",\n  atuPopulationDataUrl: \"https://gist.githubusercontent.com/horatiubota/77ce61d30388c3311d35701c2c2ae0b4/raw/dc5a94812ad225cd9ef52fafacc4f1aebb2c5b37/numeromania_POP107D\",\n  cityPopulationDataUrl: \"data/city_population_data.json\",\n}\n","import React, { useState, useEffect } from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\n\nimport { MapOfRomania, MapOfRomanianCounty } from \"react-romania\"\nimport MapConfiguration from \"./MapConfiguration\"\n\nimport Grid from \"@material-ui/core/Grid\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport { scales, colors } from \"../utils/mapConfigOptions\"\n\nimport dataSources from \"../utils/dataSources\"\n\nconst primaryStyles = {\n  label: {\n    fill: \"black\",\n    fontSize: 10,\n    fontFamily: \"sans-serif\",\n    pointerEvents: \"none\",\n    background: \"white\",\n  },\n  primaryPolygon: {\n    strokeWidth: 0.1,\n    stroke: \"gray\",\n    strokeOpacity: 1,\n    strokeLinejoin: \"round\",\n    fillOpacity: 0.9,\n    transition: \"fill 0.5s ease\",\n    \"&:hover\": {\n      stroke: \"black\",\n      strokeWidth: 0.5,\n      strokeOpacity: 1,\n      fillOpacity: 1,\n    },\n  },\n  highlightedPolygon: {\n    fill: \"lightgray!important\",\n    strokeWidth: 0.5,\n    stroke: \"black\",\n    strokeOpacity: 1,\n    strokeLinejoin: \"round\",\n    fillOpacity: 1,\n  },\n  point: {\n    fill: \"blue\",\n    stroke: \"red\",\n    strokeWidth: 1,\n    strokeLinecap: \"round\",\n    strokeOpacity: 0.75,\n    // pointerEvents: 'none'\n  },\n  pointLabel: {\n    fontSize: 12,\n    background: \"rgba(255, 255, 255, 0.75)\",\n    fontFamily: \"sans-serif\",\n    pointerEvents: \"none\",\n    display: \"inline-block\",\n    whiteSpace: \"nowrap\",\n    padding: 5,\n  },\n  paper: {\n    padding: 5,\n    color: \"black\",\n  },\n  root: {\n    display: \"flex\",\n  },\n  formControl: {\n    margin: 3,\n  },\n}\n\nconst generateTooltip = (data, element, key) => {\n  const style = {\n    display: \"inline-block\",\n    background: \"white\",\n    padding: \"0.25rem 1rem\",\n    whiteSpace: \"nowrap\",\n  }\n\n  return ReactDOMServer.renderToString(\n    <div style={style}>\n      <p>{data ? `${data.label}` : \"N/A\"}</p>\n      <p>\n        <small>Populația: {data.value[key] || data.value}</small>\n      </p>\n    </div>\n  )\n}\n\nconst getCountyData = (atuData, countyId) => {\n  // deep copy of the filtered array\n  return JSON.parse(\n    JSON.stringify(atuData.filter(atu => atu.countyId === countyId))\n  )\n}\n\nexport default function Example(props) {\n  const primaryClasses = makeStyles(primaryStyles)()\n\n  const [mapData, setMapData] = useState({\n    primaryMapData: [],\n    secondaryMapData: [],\n    pointMapData: [],\n    selectedCountyData: [],\n    selectedCounty: \"\",\n    selectedYear: 1992,\n  })\n\n  const [mapConfig, setMapConfig] = useState({\n    minHeight: 300,\n    minWidth: 300,\n    showLabels: true,\n    showPoints: true,\n    showPointLabels: true,\n    labels: [\"AB\", \"BN\"],\n    pointNames: [\"Cluj-Napoca\", \"Lugoj\", \"Zimnicea\", \"București\"],\n    pointTypes: [\"Municipiu reședință de județ\"],\n    scale: scales[0],\n    color: colors[0],\n  })\n\n  const onCountyClick = d => {\n    const countyData = getCountyData(mapData.secondaryMapData, d.id)\n\n    setMapData({\n      ...mapData,\n      selectedCountyData: countyData,\n      selectedCounty: d.id,\n    })\n  }\n\n  const handleCheckboxChange = property => event => {\n    setMapConfig({ ...mapConfig, [property]: !mapConfig[property] })\n  }\n\n  const handleInputChange = property => event => {\n    setMapConfig({ ...mapConfig, [property]: event.target.value })\n  }\n\n  useEffect(() => {\n    const promises = [\n      dataSources.countyPopulationDataUrl,\n      dataSources.atuPopulationDataUrl,\n      dataSources.cityPopulationDataUrl,\n    ].map(url => fetch(url).then(response => response.json()))\n\n    Promise.all(promises).then(([countyData, atuData, cityData]) => {\n      setMapData({\n        primaryMapData: countyData,\n        secondaryMapData: atuData,\n        pointMapData: cityData,\n        selectedCountyData: getCountyData(atuData, \"CJ\"),\n        selectedCounty: \"CJ\",\n        selectedYear: 2019,\n      })\n    })\n  }, [])\n\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12}>\n        <h3>react-romania</h3>\n        <p>\n          Responsive maps of Romania's administrative units. Made with React\n          Hooks, Material UI 4 and D3v5.\n        </p>\n        <br />\n      </Grid>\n      <Grid item md={6} xs={12}>\n        <MapOfRomania\n          {...mapConfig}\n          primaryMapData={mapData.primaryMapData}\n          pointMapData={mapData.pointMapData}\n          dataKey={2019}\n          scale={mapConfig.scale.scale}\n          color={mapConfig.color[mapConfig.scale.colorType]}\n          tooltip={generateTooltip}\n          legend={{ title: \"Population\" }}\n          classes={primaryClasses}\n          onClick={onCountyClick}\n        />\n      </Grid>\n      <Grid item md={6} xs={12}>\n        <MapOfRomanianCounty\n          {...mapConfig}\n          primaryMapData={mapData.selectedCountyData}\n          dataKey={2019}\n          countyId={mapData.selectedCounty || \"CJ\"}\n          // overwrite mapConfig\n          pointNames={[]}\n          scale={mapConfig.scale.scale}\n          color={mapConfig.color[mapConfig.scale.colorType]}\n          tooltip={generateTooltip}\n          legend={{ title: `${mapData.selectedCounty} County Population` }}\n          classes={primaryClasses}\n        />\n      </Grid>\n      <Grid item md={12} xs={12}>\n        <h3>Configuration</h3>\n        <MapConfiguration\n          handleCheckboxChange={handleCheckboxChange}\n          handleInputChange={handleInputChange}\n          {...mapConfig}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React from \"react\";\nimport Example from \"./components/Example\";\n\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\n\nexport default function App(props) {\n  return (\n    <Container maxWidth=\"md\">\n      <Box m={5}></Box>\n      <Example />\n      <Box m={5}></Box>\n    </Container>\n  );\n}\n"],"sourceRoot":""}